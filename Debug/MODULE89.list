
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb50  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bde8  0800bde8  0001bde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be28  0800be28  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800be28  0800be28  0001be28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be30  0800be30  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be30  0800be30  0001be30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be34  0800be34  0001be34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800be38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800be48  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800bea8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a94  240000d0  0800bf08  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000b64  0800bf08  00020b64  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002dae8  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f44  00000000  00000000  0004dbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019b8  00000000  00000000  00051b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001890  00000000  00000000  000534e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003adfe  00000000  00000000  00054d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fa04  00000000  00000000  0008fb76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00180ccf  00000000  00000000  000af57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00230249  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000070a4  00000000  00000000  0023029c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bdd0 	.word	0x0800bdd0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800bdd0 	.word	0x0800bdd0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f001 fe50 	bl	8002278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f83c 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fe08 	bl	80011f0 <MX_GPIO_Init>
  MX_BDMA_Init();
 80005e0:	f000 fdc6 	bl	8001170 <MX_BDMA_Init>
  MX_DMA_Init();
 80005e4:	f000 fde4 	bl	80011b0 <MX_DMA_Init>
  MX_ETH_Init();
 80005e8:	f000 f920 	bl	800082c <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ec:	f000 fd8e 	bl	800110c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005f0:	f000 fa1e 	bl	8000a30 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005f4:	f000 fa70 	bl	8000ad8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005f8:	f000 fac4 	bl	8000b84 <MX_TIM4_Init>
  MX_TIM1_Init();
 80005fc:	f000 f9be 	bl	800097c <MX_TIM1_Init>
  MX_SPI3_Init();
 8000600:	f000 f966 	bl	80008d0 <MX_SPI3_Init>
  MX_ADC3_Init();
 8000604:	f000 f8ac 	bl	8000760 <MX_ADC3_Init>
  MX_TIM5_Init();
 8000608:	f000 fb12 	bl	8000c30 <MX_TIM5_Init>
  MX_UART7_Init();
 800060c:	f000 fd32 	bl	8001074 <MX_UART7_Init>
  MX_TIM12_Init();
 8000610:	f000 fb5c 	bl	8000ccc <MX_TIM12_Init>
  MX_TIM13_Init();
 8000614:	f000 fba0 	bl	8000d58 <MX_TIM13_Init>
  MX_TIM16_Init();
 8000618:	f000 fbec 	bl	8000df4 <MX_TIM16_Init>
  MX_TIM17_Init();
 800061c:	f000 fc64 	bl	8000ee8 <MX_TIM17_Init>
  MX_UART5_Init();
 8000620:	f000 fcdc 	bl	8000fdc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000624:	213c      	movs	r1, #60	; 0x3c
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <main+0x74>)
 8000628:	f008 ff94 	bl	8009554 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  a = __HAL_TIM_GET_COUNTER(&htim4);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <main+0x74>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000632:	461a      	mov	r2, r3
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <main+0x78>)
 8000636:	601a      	str	r2, [r3, #0]
	  b = (TIM4->CNT);
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <main+0x7c>)
 800063a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063c:	461a      	mov	r2, r3
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <main+0x80>)
 8000640:	601a      	str	r2, [r3, #0]
	  a = __HAL_TIM_GET_COUNTER(&htim4);
 8000642:	e7f3      	b.n	800062c <main+0x5c>
 8000644:	24000184 	.word	0x24000184
 8000648:	240000ec 	.word	0x240000ec
 800064c:	40000800 	.word	0x40000800
 8000650:	240000f0 	.word	0x240000f0

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09c      	sub	sp, #112	; 0x70
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065e:	224c      	movs	r2, #76	; 0x4c
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f00b fbac 	bl	800bdc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2220      	movs	r2, #32
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00b fba6 	bl	800bdc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000674:	2002      	movs	r0, #2
 8000676:	f005 fb8f 	bl	8005d98 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	4b35      	ldr	r3, [pc, #212]	; (8000754 <SystemClock_Config+0x100>)
 8000680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000682:	4a34      	ldr	r2, [pc, #208]	; (8000754 <SystemClock_Config+0x100>)
 8000684:	f023 0301 	bic.w	r3, r3, #1
 8000688:	62d3      	str	r3, [r2, #44]	; 0x2c
 800068a:	4b32      	ldr	r3, [pc, #200]	; (8000754 <SystemClock_Config+0x100>)
 800068c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b30      	ldr	r3, [pc, #192]	; (8000758 <SystemClock_Config+0x104>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069c:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <SystemClock_Config+0x104>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <SystemClock_Config+0x104>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006b0:	bf00      	nop
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemClock_Config+0x104>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006be:	d1f8      	bne.n	80006b2 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <SystemClock_Config+0x108>)
 80006c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c4:	4a25      	ldr	r2, [pc, #148]	; (800075c <SystemClock_Config+0x108>)
 80006c6:	f023 0303 	bic.w	r3, r3, #3
 80006ca:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006cc:	2322      	movs	r3, #34	; 0x22
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2340      	movs	r3, #64	; 0x40
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80006e8:	2319      	movs	r3, #25
 80006ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006f8:	230c      	movs	r3, #12
 80006fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	4618      	mov	r0, r3
 800070a:	f005 fb8f 	bl	8005e2c <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000714:	f000 feb2 	bl	800147c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	233f      	movs	r3, #63	; 0x3f
 800071a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2303      	movs	r3, #3
 800071e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000724:	2308      	movs	r3, #8
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800072c:	2340      	movs	r3, #64	; 0x40
 800072e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2102      	movs	r1, #2
 800073c:	4618      	mov	r0, r3
 800073e:	f005 ff85 	bl	800664c <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000748:	f000 fe98 	bl	800147c <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3770      	adds	r7, #112	; 0x70
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	58000400 	.word	0x58000400
 8000758:	58024800 	.word	0x58024800
 800075c:	58024400 	.word	0x58024400

08000760 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
 8000774:	615a      	str	r2, [r3, #20]
 8000776:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <MX_ADC3_Init+0xc0>)
 800077a:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <MX_ADC3_Init+0xc4>)
 800077c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <MX_ADC3_Init+0xc0>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_ADC3_Init+0xc0>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800078a:	4b25      	ldr	r3, [pc, #148]	; (8000820 <MX_ADC3_Init+0xc0>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000790:	4b23      	ldr	r3, [pc, #140]	; (8000820 <MX_ADC3_Init+0xc0>)
 8000792:	2204      	movs	r2, #4
 8000794:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <MX_ADC3_Init+0xc0>)
 8000798:	2200      	movs	r2, #0
 800079a:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_ADC3_Init+0xc0>)
 800079e:	2201      	movs	r2, #1
 80007a0:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_ADC3_Init+0xc0>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_ADC3_Init+0xc0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC3_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_ADC3_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_ADC3_Init+0xc0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_ADC3_Init+0xc0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_ADC3_Init+0xc0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_ADC3_Init+0xc0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007d4:	4812      	ldr	r0, [pc, #72]	; (8000820 <MX_ADC3_Init+0xc0>)
 80007d6:	f001 ffc7 	bl	8002768 <HAL_ADC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80007e0:	f000 fe4c 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_ADC3_Init+0xc8>)
 80007e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e8:	2306      	movs	r3, #6
 80007ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f6:	2304      	movs	r3, #4
 80007f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <MX_ADC3_Init+0xc0>)
 8000808:	f002 f94e 	bl	8002aa8 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000812:	f000 fe33 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3720      	adds	r7, #32
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	240008c4 	.word	0x240008c4
 8000824:	58026000 	.word	0x58026000
 8000828:	14f00020 	.word	0x14f00020

0800082c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <MX_ETH_Init+0x90>)
 8000832:	4a23      	ldr	r2, [pc, #140]	; (80008c0 <MX_ETH_Init+0x94>)
 8000834:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_ETH_Init+0x90>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_ETH_Init+0x90>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_ETH_Init+0x90>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	3302      	adds	r3, #2
 800084e:	22e1      	movs	r2, #225	; 0xe1
 8000850:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_ETH_Init+0x90>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	3303      	adds	r3, #3
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_ETH_Init+0x90>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	3304      	adds	r3, #4
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_ETH_Init+0x90>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	3305      	adds	r3, #5
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_ETH_Init+0x90>)
 8000872:	2201      	movs	r2, #1
 8000874:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_ETH_Init+0x90>)
 8000878:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_ETH_Init+0x98>)
 800087a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_ETH_Init+0x90>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_ETH_Init+0x9c>)
 8000880:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_ETH_Init+0x90>)
 8000884:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000888:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_ETH_Init+0x90>)
 800088c:	f004 fb38 	bl	8004f00 <HAL_ETH_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000896:	f000 fdf1 	bl	800147c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800089a:	2234      	movs	r2, #52	; 0x34
 800089c:	2100      	movs	r1, #0
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_ETH_Init+0xa0>)
 80008a0:	f00b fa8e 	bl	800bdc0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_ETH_Init+0xa0>)
 80008a6:	2221      	movs	r2, #33	; 0x21
 80008a8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_ETH_Init+0xa0>)
 80008ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008b0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_ETH_Init+0xa0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	24000a58 	.word	0x24000a58
 80008c0:	40028000 	.word	0x40028000
 80008c4:	24000070 	.word	0x24000070
 80008c8:	24000010 	.word	0x24000010
 80008cc:	24000ae0 	.word	0x24000ae0

080008d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_SPI3_Init+0xa4>)
 80008d6:	4a28      	ldr	r2, [pc, #160]	; (8000978 <MX_SPI3_Init+0xa8>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_SPI3_Init+0xa4>)
 80008dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_SPI3_Init+0xa4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_SPI3_Init+0xa4>)
 80008ea:	2203      	movs	r2, #3
 80008ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_SPI3_Init+0xa4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_SPI3_Init+0xa4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_SPI3_Init+0xa4>)
 80008fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000900:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_SPI3_Init+0xa4>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_SPI3_Init+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_SPI3_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_SPI3_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_SPI3_Init+0xa4>)
 800091c:	2200      	movs	r2, #0
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_SPI3_Init+0xa4>)
 8000922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000926:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_SPI3_Init+0xa4>)
 800092a:	2200      	movs	r2, #0
 800092c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_SPI3_Init+0xa4>)
 8000930:	2200      	movs	r2, #0
 8000932:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SPI3_Init+0xa4>)
 8000936:	2200      	movs	r2, #0
 8000938:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_SPI3_Init+0xa4>)
 800093c:	2200      	movs	r2, #0
 800093e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SPI3_Init+0xa4>)
 8000942:	2200      	movs	r2, #0
 8000944:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_SPI3_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SPI3_Init+0xa4>)
 800094e:	2200      	movs	r2, #0
 8000950:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_SPI3_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SPI3_Init+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_SPI3_Init+0xa4>)
 8000960:	f008 fb86 	bl	8009070 <HAL_SPI_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800096a:	f000 fd87 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	24000734 	.word	0x24000734
 8000978:	40003c00 	.word	0x40003c00

0800097c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	2224      	movs	r2, #36	; 0x24
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f00b fa18 	bl	800bdc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_TIM1_Init+0xac>)
 800099c:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <MX_TIM1_Init+0xb0>)
 800099e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009a0:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_TIM1_Init+0xac>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_TIM1_Init+0xac>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_TIM1_Init+0xac>)
 80009ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_TIM1_Init+0xac>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_TIM1_Init+0xac>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_TIM1_Init+0xac>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009ce:	2301      	movs	r3, #1
 80009d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009de:	2301      	movs	r3, #1
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_TIM1_Init+0xac>)
 80009f2:	f008 fd09 	bl	8009408 <HAL_TIM_Encoder_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80009fc:	f000 fd3e 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_TIM1_Init+0xac>)
 8000a12:	f009 fdaf 	bl	800a574 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a1c:	f000 fd2e 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3730      	adds	r7, #48	; 0x30
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	24000974 	.word	0x24000974
 8000a2c:	40010000 	.word	0x40010000

08000a30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	2224      	movs	r2, #36	; 0x24
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f00b f9be 	bl	800bdc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000aa2:	f008 fcb1 	bl	8009408 <HAL_TIM_Encoder_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000aac:	f000 fce6 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_TIM2_Init+0xa4>)
 8000abe:	f009 fd59 	bl	800a574 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000ac8:	f000 fcd8 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3730      	adds	r7, #48	; 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	240009c0 	.word	0x240009c0

08000ad8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2224      	movs	r2, #36	; 0x24
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f00b f96a 	bl	800bdc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	463b      	mov	r3, r7
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_TIM3_Init+0xa4>)
 8000af8:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <MX_TIM3_Init+0xa8>)
 8000afa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_TIM3_Init+0xa4>)
 8000afe:	2208      	movs	r2, #8
 8000b00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_TIM3_Init+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_TIM3_Init+0xa4>)
 8000b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_TIM3_Init+0xa4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_TIM3_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b24:	2301      	movs	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b34:	2301      	movs	r3, #1
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4619      	mov	r1, r3
 8000b46:	480d      	ldr	r0, [pc, #52]	; (8000b7c <MX_TIM3_Init+0xa4>)
 8000b48:	f008 fc5e 	bl	8009408 <HAL_TIM_Encoder_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b52:	f000 fc93 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5e:	463b      	mov	r3, r7
 8000b60:	4619      	mov	r1, r3
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <MX_TIM3_Init+0xa4>)
 8000b64:	f009 fd06 	bl	800a574 <HAL_TIMEx_MasterConfigSynchronization>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b6e:	f000 fc85 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	3730      	adds	r7, #48	; 0x30
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	240006e8 	.word	0x240006e8
 8000b80:	40000400 	.word	0x40000400

08000b84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2224      	movs	r2, #36	; 0x24
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f00b f914 	bl	800bdc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_TIM4_Init+0xa4>)
 8000ba4:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <MX_TIM4_Init+0xa8>)
 8000ba6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_TIM4_Init+0xa4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_TIM4_Init+0xa4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <MX_TIM4_Init+0xa4>)
 8000bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_TIM4_Init+0xa4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_TIM4_Init+0xa4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000bd8:	230a      	movs	r3, #10
 8000bda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be0:	2301      	movs	r3, #1
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000be8:	230a      	movs	r3, #10
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <MX_TIM4_Init+0xa4>)
 8000bf4:	f008 fc08 	bl	8009408 <HAL_TIM_Encoder_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000bfe:	f000 fc3d 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <MX_TIM4_Init+0xa4>)
 8000c10:	f009 fcb0 	bl	800a574 <HAL_TIMEx_MasterConfigSynchronization>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c1a:	f000 fc2f 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	3730      	adds	r7, #48	; 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	24000184 	.word	0x24000184
 8000c2c:	40000800 	.word	0x40000800

08000c30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c50:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <MX_TIM5_Init+0x98>)
 8000c52:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c62:	f04f 32ff 	mov.w	r2, #4294967295
 8000c66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c74:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c76:	f008 fb18 	bl	80092aa <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000c80:	f000 fbfc 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c92:	f008 ff1d 	bl	8009ad0 <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000c9c:	f000 fbee 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000cae:	f009 fc61 	bl	800a574 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000cb8:	f000 fbe0 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2400069c 	.word	0x2400069c
 8000cc8:	40000c00 	.word	0x40000c00

08000ccc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
 8000ce0:	615a      	str	r2, [r3, #20]
 8000ce2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_TIM12_Init+0x84>)
 8000ce6:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <MX_TIM12_Init+0x88>)
 8000ce8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <MX_TIM12_Init+0x84>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_TIM12_Init+0x84>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <MX_TIM12_Init+0x84>)
 8000cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_TIM12_Init+0x84>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_TIM12_Init+0x84>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000d0a:	4811      	ldr	r0, [pc, #68]	; (8000d50 <MX_TIM12_Init+0x84>)
 8000d0c:	f008 fb24 	bl	8009358 <HAL_TIM_PWM_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000d16:	f000 fbb1 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d1a:	2360      	movs	r3, #96	; 0x60
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4807      	ldr	r0, [pc, #28]	; (8000d50 <MX_TIM12_Init+0x84>)
 8000d32:	f008 fdbd 	bl	80098b0 <HAL_TIM_PWM_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000d3c:	f000 fb9e 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000d40:	4803      	ldr	r0, [pc, #12]	; (8000d50 <MX_TIM12_Init+0x84>)
 8000d42:	f000 ff73 	bl	8001c2c <HAL_TIM_MspPostInit>

}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	24000a0c 	.word	0x24000a0c
 8000d54:	40001800 	.word	0x40001800

08000d58 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <MX_TIM13_Init+0x94>)
 8000d72:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <MX_TIM13_Init+0x98>)
 8000d74:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 50;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_TIM13_Init+0x94>)
 8000d78:	2232      	movs	r2, #50	; 0x32
 8000d7a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_TIM13_Init+0x94>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_TIM13_Init+0x94>)
 8000d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d88:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_TIM13_Init+0x94>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <MX_TIM13_Init+0x94>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000d96:	4815      	ldr	r0, [pc, #84]	; (8000dec <MX_TIM13_Init+0x94>)
 8000d98:	f008 fa87 	bl	80092aa <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000da2:	f000 fb6b 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000da6:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_TIM13_Init+0x94>)
 8000da8:	f008 fad6 	bl	8009358 <HAL_TIM_PWM_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000db2:	f000 fb63 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db6:	2360      	movs	r3, #96	; 0x60
 8000db8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4807      	ldr	r0, [pc, #28]	; (8000dec <MX_TIM13_Init+0x94>)
 8000dce:	f008 fd6f 	bl	80098b0 <HAL_TIM_PWM_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000dd8:	f000 fb50 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <MX_TIM13_Init+0x94>)
 8000dde:	f000 ff25 	bl	8001c2c <HAL_TIM_MspPostInit>

}
 8000de2:	bf00      	nop
 8000de4:	3720      	adds	r7, #32
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	24000928 	.word	0x24000928
 8000df0:	40001c00 	.word	0x40001c00

08000df4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b092      	sub	sp, #72	; 0x48
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e0e:	463b      	mov	r3, r7
 8000e10:	222c      	movs	r2, #44	; 0x2c
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f00a ffd3 	bl	800bdc0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e1a:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <MX_TIM16_Init+0xec>)
 8000e1c:	4a31      	ldr	r2, [pc, #196]	; (8000ee4 <MX_TIM16_Init+0xf0>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000e20:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <MX_TIM16_Init+0xec>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <MX_TIM16_Init+0xec>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <MX_TIM16_Init+0xec>)
 8000e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e32:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <MX_TIM16_Init+0xec>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e3a:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <MX_TIM16_Init+0xec>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <MX_TIM16_Init+0xec>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e46:	4826      	ldr	r0, [pc, #152]	; (8000ee0 <MX_TIM16_Init+0xec>)
 8000e48:	f008 fa2f 	bl	80092aa <HAL_TIM_Base_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000e52:	f000 fb13 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000e56:	4822      	ldr	r0, [pc, #136]	; (8000ee0 <MX_TIM16_Init+0xec>)
 8000e58:	f008 fa7e 	bl	8009358 <HAL_TIM_PWM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000e62:	f000 fb0b 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e66:	2360      	movs	r3, #96	; 0x60
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e86:	2200      	movs	r2, #0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4815      	ldr	r0, [pc, #84]	; (8000ee0 <MX_TIM16_Init+0xec>)
 8000e8c:	f008 fd10 	bl	80098b0 <HAL_TIM_PWM_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000e96:	f000 faf1 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <MX_TIM16_Init+0xec>)
 8000ec2:	f009 fbdf 	bl	800a684 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000ecc:	f000 fad6 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <MX_TIM16_Init+0xec>)
 8000ed2:	f000 feab 	bl	8001c2c <HAL_TIM_MspPostInit>

}
 8000ed6:	bf00      	nop
 8000ed8:	3748      	adds	r7, #72	; 0x48
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	24000b14 	.word	0x24000b14
 8000ee4:	40014400 	.word	0x40014400

08000ee8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b092      	sub	sp, #72	; 0x48
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f02:	463b      	mov	r3, r7
 8000f04:	222c      	movs	r2, #44	; 0x2c
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00a ff59 	bl	800bdc0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000f0e:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000f10:	4a31      	ldr	r2, [pc, #196]	; (8000fd8 <MX_TIM17_Init+0xf0>)
 8000f12:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000f14:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000f20:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f26:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000f3a:	4826      	ldr	r0, [pc, #152]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000f3c:	f008 f9b5 	bl	80092aa <HAL_TIM_Base_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000f46:	f000 fa99 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000f4a:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000f4c:	f008 fa04 	bl	8009358 <HAL_TIM_PWM_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000f56:	f000 fa91 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5a:	2360      	movs	r3, #96	; 0x60
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f66:	2300      	movs	r3, #0
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f72:	2300      	movs	r3, #0
 8000f74:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4815      	ldr	r0, [pc, #84]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000f80:	f008 fc96 	bl	80098b0 <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000f8a:	f000 fa77 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000fb6:	f009 fb65 	bl	800a684 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000fc0:	f000 fa5c 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000fc6:	f000 fe31 	bl	8001c2c <HAL_TIM_MspPostInit>

}
 8000fca:	bf00      	nop
 8000fcc:	3748      	adds	r7, #72	; 0x48
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	240005d8 	.word	0x240005d8
 8000fd8:	40014800 	.word	0x40014800

08000fdc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_UART5_Init+0x90>)
 8000fe2:	4a23      	ldr	r2, [pc, #140]	; (8001070 <MX_UART5_Init+0x94>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_UART5_Init+0x90>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_UART5_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_UART5_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_UART5_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_UART5_Init+0x90>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_UART5_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_UART5_Init+0x90>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_UART5_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_UART5_Init+0x90>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <MX_UART5_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001024:	4811      	ldr	r0, [pc, #68]	; (800106c <MX_UART5_Init+0x90>)
 8001026:	f009 fbc9 	bl	800a7bc <HAL_UART_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001030:	f000 fa24 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_UART5_Init+0x90>)
 8001038:	f00a fb16 	bl	800b668 <HAL_UARTEx_SetTxFifoThreshold>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001042:	f000 fa1b 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4808      	ldr	r0, [pc, #32]	; (800106c <MX_UART5_Init+0x90>)
 800104a:	f00a fb4b 	bl	800b6e4 <HAL_UARTEx_SetRxFifoThreshold>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001054:	f000 fa12 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_UART5_Init+0x90>)
 800105a:	f00a facc 	bl	800b5f6 <HAL_UARTEx_DisableFifoMode>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001064:	f000 fa0a 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	240007bc 	.word	0x240007bc
 8001070:	40005000 	.word	0x40005000

08001074 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <MX_UART7_Init+0x90>)
 800107a:	4a23      	ldr	r2, [pc, #140]	; (8001108 <MX_UART7_Init+0x94>)
 800107c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <MX_UART7_Init+0x90>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <MX_UART7_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_UART7_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_UART7_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_UART7_Init+0x90>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_UART7_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_UART7_Init+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_UART7_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_UART7_Init+0x90>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_UART7_Init+0x90>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80010bc:	4811      	ldr	r0, [pc, #68]	; (8001104 <MX_UART7_Init+0x90>)
 80010be:	f009 fb7d 	bl	800a7bc <HAL_UART_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80010c8:	f000 f9d8 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010cc:	2100      	movs	r1, #0
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_UART7_Init+0x90>)
 80010d0:	f00a faca 	bl	800b668 <HAL_UARTEx_SetTxFifoThreshold>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80010da:	f000 f9cf 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010de:	2100      	movs	r1, #0
 80010e0:	4808      	ldr	r0, [pc, #32]	; (8001104 <MX_UART7_Init+0x90>)
 80010e2:	f00a faff 	bl	800b6e4 <HAL_UARTEx_SetRxFifoThreshold>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80010ec:	f000 f9c6 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	; (8001104 <MX_UART7_Init+0x90>)
 80010f2:	f00a fa80 	bl	800b5f6 <HAL_UARTEx_DisableFifoMode>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80010fc:	f000 f9be 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	240000f4 	.word	0x240000f4
 8001108:	40007800 	.word	0x40007800

0800110c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001114:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001118:	2209      	movs	r2, #9
 800111a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800111e:	2202      	movs	r2, #2
 8001120:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800112a:	2202      	movs	r2, #2
 800112c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001130:	2201      	movs	r2, #1
 8001132:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001142:	2201      	movs	r2, #1
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001148:	2201      	movs	r2, #1
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800114e:	2200      	movs	r2, #0
 8001150:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001154:	f004 fcd8 	bl	8005b08 <HAL_PCD_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800115e:	f000 f98d 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	240001d0 	.word	0x240001d0
 800116c:	40080000 	.word	0x40080000

08001170 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <MX_BDMA_Init+0x3c>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <MX_BDMA_Init+0x3c>)
 800117e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_BDMA_Init+0x3c>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2081      	movs	r0, #129	; 0x81
 800119a:	f002 f9ba 	bl	8003512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 800119e:	2081      	movs	r0, #129	; 0x81
 80011a0:	f002 f9d1 	bl	8003546 <HAL_NVIC_EnableIRQ>

}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	58024400 	.word	0x58024400

080011b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_DMA_Init+0x3c>)
 80011b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011bc:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <MX_DMA_Init+0x3c>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	200c      	movs	r0, #12
 80011da:	f002 f99a 	bl	8003512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011de:	200c      	movs	r0, #12
 80011e0:	f002 f9b1 	bl	8003546 <HAL_NVIC_EnableIRQ>

}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	58024400 	.word	0x58024400

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	; 0x38
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b95      	ldr	r3, [pc, #596]	; (800145c <MX_GPIO_Init+0x26c>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	4a93      	ldr	r2, [pc, #588]	; (800145c <MX_GPIO_Init+0x26c>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001216:	4b91      	ldr	r3, [pc, #580]	; (800145c <MX_GPIO_Init+0x26c>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	623b      	str	r3, [r7, #32]
 8001222:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001224:	4b8d      	ldr	r3, [pc, #564]	; (800145c <MX_GPIO_Init+0x26c>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	4a8c      	ldr	r2, [pc, #560]	; (800145c <MX_GPIO_Init+0x26c>)
 800122c:	f043 0320 	orr.w	r3, r3, #32
 8001230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001234:	4b89      	ldr	r3, [pc, #548]	; (800145c <MX_GPIO_Init+0x26c>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	4b86      	ldr	r3, [pc, #536]	; (800145c <MX_GPIO_Init+0x26c>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	4a84      	ldr	r2, [pc, #528]	; (800145c <MX_GPIO_Init+0x26c>)
 800124a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001252:	4b82      	ldr	r3, [pc, #520]	; (800145c <MX_GPIO_Init+0x26c>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b7e      	ldr	r3, [pc, #504]	; (800145c <MX_GPIO_Init+0x26c>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	4a7d      	ldr	r2, [pc, #500]	; (800145c <MX_GPIO_Init+0x26c>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001270:	4b7a      	ldr	r3, [pc, #488]	; (800145c <MX_GPIO_Init+0x26c>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b77      	ldr	r3, [pc, #476]	; (800145c <MX_GPIO_Init+0x26c>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	4a75      	ldr	r2, [pc, #468]	; (800145c <MX_GPIO_Init+0x26c>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128e:	4b73      	ldr	r3, [pc, #460]	; (800145c <MX_GPIO_Init+0x26c>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800129c:	4b6f      	ldr	r3, [pc, #444]	; (800145c <MX_GPIO_Init+0x26c>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	4a6e      	ldr	r2, [pc, #440]	; (800145c <MX_GPIO_Init+0x26c>)
 80012a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ac:	4b6b      	ldr	r3, [pc, #428]	; (800145c <MX_GPIO_Init+0x26c>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ba:	4b68      	ldr	r3, [pc, #416]	; (800145c <MX_GPIO_Init+0x26c>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	4a66      	ldr	r2, [pc, #408]	; (800145c <MX_GPIO_Init+0x26c>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ca:	4b64      	ldr	r3, [pc, #400]	; (800145c <MX_GPIO_Init+0x26c>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	4b60      	ldr	r3, [pc, #384]	; (800145c <MX_GPIO_Init+0x26c>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	4a5f      	ldr	r2, [pc, #380]	; (800145c <MX_GPIO_Init+0x26c>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e8:	4b5c      	ldr	r3, [pc, #368]	; (800145c <MX_GPIO_Init+0x26c>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80012fc:	4858      	ldr	r0, [pc, #352]	; (8001460 <MX_GPIO_Init+0x270>)
 80012fe:	f004 fbc5 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f644 4101 	movw	r1, #19457	; 0x4c01
 8001308:	4856      	ldr	r0, [pc, #344]	; (8001464 <MX_GPIO_Init+0x274>)
 800130a:	f004 fbbf 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001314:	4854      	ldr	r0, [pc, #336]	; (8001468 <MX_GPIO_Init+0x278>)
 8001316:	f004 fbb9 	bl	8005a8c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|LD2_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001320:	4852      	ldr	r0, [pc, #328]	; (800146c <MX_GPIO_Init+0x27c>)
 8001322:	f004 fbb3 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800132c:	4850      	ldr	r0, [pc, #320]	; (8001470 <MX_GPIO_Init+0x280>)
 800132e:	f004 fbad 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	484b      	ldr	r0, [pc, #300]	; (8001474 <MX_GPIO_Init+0x284>)
 8001348:	f004 f9f0 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10;
 800134c:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	483e      	ldr	r0, [pc, #248]	; (8001460 <MX_GPIO_Init+0x270>)
 8001366:	f004 f9e1 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB10 PB11 LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin;
 800136a:	f644 4301 	movw	r3, #19457	; 0x4c01
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	4838      	ldr	r0, [pc, #224]	; (8001464 <MX_GPIO_Init+0x274>)
 8001384:	f004 f9d2 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001388:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	4831      	ldr	r0, [pc, #196]	; (8001468 <MX_GPIO_Init+0x278>)
 80013a2:	f004 f9c3 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|LD2_Pin;
 80013a6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013bc:	4619      	mov	r1, r3
 80013be:	482b      	ldr	r0, [pc, #172]	; (800146c <MX_GPIO_Init+0x27c>)
 80013c0:	f004 f9b4 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d6:	2307      	movs	r3, #7
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	4823      	ldr	r0, [pc, #140]	; (8001470 <MX_GPIO_Init+0x280>)
 80013e2:	f004 f9a3 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80013e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	481c      	ldr	r0, [pc, #112]	; (8001470 <MX_GPIO_Init+0x280>)
 8001400:	f004 f994 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001404:	2304      	movs	r3, #4
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_GPIO_Init+0x288>)
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	4814      	ldr	r0, [pc, #80]	; (8001468 <MX_GPIO_Init+0x278>)
 8001418:	f004 f988 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800141c:	23f8      	movs	r3, #248	; 0xf8
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_GPIO_Init+0x288>)
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	4619      	mov	r1, r3
 800142e:	4810      	ldr	r0, [pc, #64]	; (8001470 <MX_GPIO_Init+0x280>)
 8001430:	f004 f97c 	bl	800572c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	200a      	movs	r0, #10
 800143a:	f002 f86a 	bl	8003512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800143e:	200a      	movs	r0, #10
 8001440:	f002 f881 	bl	8003546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2017      	movs	r0, #23
 800144a:	f002 f862 	bl	8003512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800144e:	2017      	movs	r0, #23
 8001450:	f002 f879 	bl	8003546 <HAL_NVIC_EnableIRQ>

}
 8001454:	bf00      	nop
 8001456:	3738      	adds	r7, #56	; 0x38
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	58024400 	.word	0x58024400
 8001460:	58021400 	.word	0x58021400
 8001464:	58020400 	.word	0x58020400
 8001468:	58021800 	.word	0x58021800
 800146c:	58021000 	.word	0x58021000
 8001470:	58020c00 	.word	0x58020c00
 8001474:	58020800 	.word	0x58020800
 8001478:	11110000 	.word	0x11110000

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001484:	e7fe      	b.n	8001484 <Error_Handler+0x8>
	...

08001488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_MspInit+0x30>)
 8001490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001494:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_MspInit+0x30>)
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_MspInit+0x30>)
 80014a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	58024400 	.word	0x58024400

080014bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0ba      	sub	sp, #232	; 0xe8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	22bc      	movs	r2, #188	; 0xbc
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f00a fc6f 	bl	800bdc0 <memset>
  if(hadc->Instance==ADC3)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a4e      	ldr	r2, [pc, #312]	; (8001620 <HAL_ADC_MspInit+0x164>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	f040 8094 	bne.w	8001616 <HAL_ADC_MspInit+0x15a>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80014f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 80014f4:	2304      	movs	r3, #4
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 9;
 80014f8:	2309      	movs	r3, #9
 80014fa:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 8001504:	2304      	movs	r3, #4
 8001506:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001508:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800150c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800150e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001512:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 3072;
 8001514:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001518:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800151a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4618      	mov	r0, r3
 8001528:	f005 fc1c 	bl	8006d64 <HAL_RCCEx_PeriphCLKConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8001532:	f7ff ffa3 	bl	800147c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001536:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <HAL_ADC_MspInit+0x168>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	4a39      	ldr	r2, [pc, #228]	; (8001624 <HAL_ADC_MspInit+0x168>)
 800153e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <HAL_ADC_MspInit+0x168>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001554:	4b33      	ldr	r3, [pc, #204]	; (8001624 <HAL_ADC_MspInit+0x168>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	4a32      	ldr	r2, [pc, #200]	; (8001624 <HAL_ADC_MspInit+0x168>)
 800155c:	f043 0320 	orr.w	r3, r3, #32
 8001560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <HAL_ADC_MspInit+0x168>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <HAL_ADC_MspInit+0x168>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	4a2a      	ldr	r2, [pc, #168]	; (8001624 <HAL_ADC_MspInit+0x168>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <HAL_ADC_MspInit+0x168>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF3     ------> ADC3_INP5
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 8001590:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001594:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001598:	2303      	movs	r3, #3
 800159a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015a8:	4619      	mov	r1, r3
 80015aa:	481f      	ldr	r0, [pc, #124]	; (8001628 <HAL_ADC_MspInit+0x16c>)
 80015ac:	f004 f8be 	bl	800572c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80015b0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80015b4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80015b8:	f000 ff34 	bl	8002424 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_ADC_MspInit+0x170>)
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_ADC_MspInit+0x174>)
 80015c0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_ADC_MspInit+0x170>)
 80015c4:	2211      	movs	r2, #17
 80015c6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_ADC_MspInit+0x170>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_ADC_MspInit+0x170>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_ADC_MspInit+0x170>)
 80015d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015da:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_ADC_MspInit+0x170>)
 80015de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_ADC_MspInit+0x170>)
 80015e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ea:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_ADC_MspInit+0x170>)
 80015ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_ADC_MspInit+0x170>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80015fa:	480c      	ldr	r0, [pc, #48]	; (800162c <HAL_ADC_MspInit+0x170>)
 80015fc:	f001 ffbe 	bl	800357c <HAL_DMA_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_ADC_MspInit+0x14e>
    {
      Error_Handler();
 8001606:	f7ff ff39 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_ADC_MspInit+0x170>)
 800160e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <HAL_ADC_MspInit+0x170>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	37e8      	adds	r7, #232	; 0xe8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	58026000 	.word	0x58026000
 8001624:	58024400 	.word	0x58024400
 8001628:	58021400 	.word	0x58021400
 800162c:	24000624 	.word	0x24000624
 8001630:	58025408 	.word	0x58025408

08001634 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a59      	ldr	r2, [pc, #356]	; (80017b8 <HAL_ETH_MspInit+0x184>)
 8001652:	4293      	cmp	r3, r2
 8001654:	f040 80ab 	bne.w	80017ae <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001658:	4b58      	ldr	r3, [pc, #352]	; (80017bc <HAL_ETH_MspInit+0x188>)
 800165a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800165e:	4a57      	ldr	r2, [pc, #348]	; (80017bc <HAL_ETH_MspInit+0x188>)
 8001660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001664:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001668:	4b54      	ldr	r3, [pc, #336]	; (80017bc <HAL_ETH_MspInit+0x188>)
 800166a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800166e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001672:	623b      	str	r3, [r7, #32]
 8001674:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001676:	4b51      	ldr	r3, [pc, #324]	; (80017bc <HAL_ETH_MspInit+0x188>)
 8001678:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800167c:	4a4f      	ldr	r2, [pc, #316]	; (80017bc <HAL_ETH_MspInit+0x188>)
 800167e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001682:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001686:	4b4d      	ldr	r3, [pc, #308]	; (80017bc <HAL_ETH_MspInit+0x188>)
 8001688:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800168c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001694:	4b49      	ldr	r3, [pc, #292]	; (80017bc <HAL_ETH_MspInit+0x188>)
 8001696:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800169a:	4a48      	ldr	r2, [pc, #288]	; (80017bc <HAL_ETH_MspInit+0x188>)
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016a4:	4b45      	ldr	r3, [pc, #276]	; (80017bc <HAL_ETH_MspInit+0x188>)
 80016a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	4b42      	ldr	r3, [pc, #264]	; (80017bc <HAL_ETH_MspInit+0x188>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b8:	4a40      	ldr	r2, [pc, #256]	; (80017bc <HAL_ETH_MspInit+0x188>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c2:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <HAL_ETH_MspInit+0x188>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <HAL_ETH_MspInit+0x188>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	4a39      	ldr	r2, [pc, #228]	; (80017bc <HAL_ETH_MspInit+0x188>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e0:	4b36      	ldr	r3, [pc, #216]	; (80017bc <HAL_ETH_MspInit+0x188>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	4b33      	ldr	r3, [pc, #204]	; (80017bc <HAL_ETH_MspInit+0x188>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f4:	4a31      	ldr	r2, [pc, #196]	; (80017bc <HAL_ETH_MspInit+0x188>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <HAL_ETH_MspInit+0x188>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800170c:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_ETH_MspInit+0x188>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	4a2a      	ldr	r2, [pc, #168]	; (80017bc <HAL_ETH_MspInit+0x188>)
 8001714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_ETH_MspInit+0x188>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800172a:	2332      	movs	r3, #50	; 0x32
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800173a:	230b      	movs	r3, #11
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	481e      	ldr	r0, [pc, #120]	; (80017c0 <HAL_ETH_MspInit+0x18c>)
 8001746:	f003 fff1 	bl	800572c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800174a:	2386      	movs	r3, #134	; 0x86
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800175a:	230b      	movs	r3, #11
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	4817      	ldr	r0, [pc, #92]	; (80017c4 <HAL_ETH_MspInit+0x190>)
 8001766:	f003 ffe1 	bl	800572c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800176a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800177c:	230b      	movs	r3, #11
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	4619      	mov	r1, r3
 8001786:	4810      	ldr	r0, [pc, #64]	; (80017c8 <HAL_ETH_MspInit+0x194>)
 8001788:	f003 ffd0 	bl	800572c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800178c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800179e:	230b      	movs	r3, #11
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <HAL_ETH_MspInit+0x198>)
 80017aa:	f003 ffbf 	bl	800572c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3738      	adds	r7, #56	; 0x38
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40028000 	.word	0x40028000
 80017bc:	58024400 	.word	0x58024400
 80017c0:	58020800 	.word	0x58020800
 80017c4:	58020000 	.word	0x58020000
 80017c8:	58020400 	.word	0x58020400
 80017cc:	58021800 	.word	0x58021800

080017d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0ba      	sub	sp, #232	; 0xe8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	22bc      	movs	r2, #188	; 0xbc
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00a fae5 	bl	800bdc0 <memset>
  if(hspi->Instance==SPI3)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a37      	ldr	r2, [pc, #220]	; (80018d8 <HAL_SPI_MspInit+0x108>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d166      	bne.n	80018ce <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001804:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001806:	2300      	movs	r3, #0
 8001808:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180a:	f107 0318 	add.w	r3, r7, #24
 800180e:	4618      	mov	r0, r3
 8001810:	f005 faa8 	bl	8006d64 <HAL_RCCEx_PeriphCLKConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800181a:	f7ff fe2f 	bl	800147c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800181e:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 8001820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001824:	4a2d      	ldr	r2, [pc, #180]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 8001826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 8001830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 800183e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001842:	4a26      	ldr	r2, [pc, #152]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 800184e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 800185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001860:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_SPI_MspInit+0x10c>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001878:	2310      	movs	r3, #16
 800187a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001890:	2306      	movs	r3, #6
 8001892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800189a:	4619      	mov	r1, r3
 800189c:	4810      	ldr	r0, [pc, #64]	; (80018e0 <HAL_SPI_MspInit+0x110>)
 800189e:	f003 ff45 	bl	800572c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018bc:	2306      	movs	r3, #6
 80018be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4806      	ldr	r0, [pc, #24]	; (80018e4 <HAL_SPI_MspInit+0x114>)
 80018ca:	f003 ff2f 	bl	800572c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018ce:	bf00      	nop
 80018d0:	37e8      	adds	r7, #232	; 0xe8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40003c00 	.word	0x40003c00
 80018dc:	58024400 	.word	0x58024400
 80018e0:	58020000 	.word	0x58020000
 80018e4:	58020800 	.word	0x58020800

080018e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b090      	sub	sp, #64	; 0x40
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a7c      	ldr	r2, [pc, #496]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x210>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d12f      	bne.n	800196a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800190a:	4b7c      	ldr	r3, [pc, #496]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 800190c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001910:	4a7a      	ldr	r2, [pc, #488]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800191a:	4b78      	ldr	r3, [pc, #480]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 800191c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
 8001926:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001928:	4b74      	ldr	r3, [pc, #464]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192e:	4a73      	ldr	r2, [pc, #460]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001930:	f043 0310 	orr.w	r3, r3, #16
 8001934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001938:	4b70      	ldr	r3, [pc, #448]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001946:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001958:	2301      	movs	r3, #1
 800195a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800195c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001960:	4619      	mov	r1, r3
 8001962:	4867      	ldr	r0, [pc, #412]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x218>)
 8001964:	f003 fee2 	bl	800572c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001968:	e0c2      	b.n	8001af0 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001972:	d14d      	bne.n	8001a10 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001974:	4b61      	ldr	r3, [pc, #388]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800197a:	4a60      	ldr	r2, [pc, #384]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001984:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	623b      	str	r3, [r7, #32]
 8001990:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	4b5a      	ldr	r3, [pc, #360]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001998:	4a58      	ldr	r2, [pc, #352]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a2:	4b56      	ldr	r3, [pc, #344]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b0:	4b52      	ldr	r3, [pc, #328]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 80019b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b6:	4a51      	ldr	r2, [pc, #324]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c0:	4b4e      	ldr	r3, [pc, #312]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 80019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019ce:	2320      	movs	r3, #32
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019de:	2301      	movs	r3, #1
 80019e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e6:	4619      	mov	r1, r3
 80019e8:	4846      	ldr	r0, [pc, #280]	; (8001b04 <HAL_TIM_Encoder_MspInit+0x21c>)
 80019ea:	f003 fe9f 	bl	800572c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019ee:	2308      	movs	r3, #8
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019fe:	2301      	movs	r3, #1
 8001a00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a06:	4619      	mov	r1, r3
 8001a08:	483f      	ldr	r0, [pc, #252]	; (8001b08 <HAL_TIM_Encoder_MspInit+0x220>)
 8001a0a:	f003 fe8f 	bl	800572c <HAL_GPIO_Init>
}
 8001a0e:	e06f      	b.n	8001af0 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM3)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a3d      	ldr	r2, [pc, #244]	; (8001b0c <HAL_TIM_Encoder_MspInit+0x224>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12e      	bne.n	8001a78 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a20:	4a36      	ldr	r2, [pc, #216]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001a22:	f043 0302 	orr.w	r3, r3, #2
 8001a26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a2a:	4b34      	ldr	r3, [pc, #208]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b30      	ldr	r3, [pc, #192]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3e:	4a2f      	ldr	r2, [pc, #188]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a56:	2330      	movs	r3, #48	; 0x30
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a66:	2302      	movs	r3, #2
 8001a68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4825      	ldr	r0, [pc, #148]	; (8001b08 <HAL_TIM_Encoder_MspInit+0x220>)
 8001a72:	f003 fe5b 	bl	800572c <HAL_GPIO_Init>
}
 8001a76:	e03b      	b.n	8001af0 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM4)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x228>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d136      	bne.n	8001af0 <HAL_TIM_Encoder_MspInit+0x208>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a88:	4a1c      	ldr	r2, [pc, #112]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa6:	4a15      	ldr	r2, [pc, #84]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001aa8:	f043 0308 	orr.w	r3, r3, #8
 8001aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_TIM_Encoder_MspInit+0x214>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001abe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480e      	ldr	r0, [pc, #56]	; (8001b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001adc:	f003 fe26 	bl	800572c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	201e      	movs	r0, #30
 8001ae6:	f001 fd14 	bl	8003512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001aea:	201e      	movs	r0, #30
 8001aec:	f001 fd2b 	bl	8003546 <HAL_NVIC_EnableIRQ>
}
 8001af0:	bf00      	nop
 8001af2:	3740      	adds	r7, #64	; 0x40
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40010000 	.word	0x40010000
 8001afc:	58024400 	.word	0x58024400
 8001b00:	58021000 	.word	0x58021000
 8001b04:	58020000 	.word	0x58020000
 8001b08:	58020400 	.word	0x58020400
 8001b0c:	40000400 	.word	0x40000400
 8001b10:	40000800 	.word	0x40000800
 8001b14:	58020c00 	.word	0x58020c00

08001b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2b      	ldr	r2, [pc, #172]	; (8001bd4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10f      	bne.n	8001b4a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b30:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001b48:	e03d      	b.n	8001bc6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM13)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <HAL_TIM_Base_MspInit+0xc4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d10f      	bne.n	8001b74 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001b54:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b5a:	4a1f      	ldr	r2, [pc, #124]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
}
 8001b72:	e028      	b.n	8001bc6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM16)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_TIM_Base_MspInit+0xc8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d10f      	bne.n	8001b9e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	e013      	b.n	8001bc6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM17)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_TIM_Base_MspInit+0xcc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d10e      	bne.n	8001bc6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <HAL_TIM_Base_MspInit+0xc0>)
 8001bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
}
 8001bc6:	bf00      	nop
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40000c00 	.word	0x40000c00
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	40001c00 	.word	0x40001c00
 8001be0:	40014400 	.word	0x40014400
 8001be4:	40014800 	.word	0x40014800

08001be8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d10e      	bne.n	8001c18 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_TIM_PWM_MspInit+0x40>)
 8001bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c00:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <HAL_TIM_PWM_MspInit+0x40>)
 8001c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <HAL_TIM_PWM_MspInit+0x40>)
 8001c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40001800 	.word	0x40001800
 8001c28:	58024400 	.word	0x58024400

08001c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a4b      	ldr	r2, [pc, #300]	; (8001d78 <HAL_TIM_MspPostInit+0x14c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d120      	bne.n	8001c90 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	4b4b      	ldr	r3, [pc, #300]	; (8001d7c <HAL_TIM_MspPostInit+0x150>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c54:	4a49      	ldr	r2, [pc, #292]	; (8001d7c <HAL_TIM_MspPostInit+0x150>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_TIM_MspPostInit+0x150>)
 8001c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	4619      	mov	r1, r3
 8001c88:	483d      	ldr	r0, [pc, #244]	; (8001d80 <HAL_TIM_MspPostInit+0x154>)
 8001c8a:	f003 fd4f 	bl	800572c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001c8e:	e06f      	b.n	8001d70 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a3b      	ldr	r2, [pc, #236]	; (8001d84 <HAL_TIM_MspPostInit+0x158>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d11f      	bne.n	8001cda <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <HAL_TIM_MspPostInit+0x150>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca0:	4a36      	ldr	r2, [pc, #216]	; (8001d7c <HAL_TIM_MspPostInit+0x150>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001caa:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <HAL_TIM_MspPostInit+0x150>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cb8:	2340      	movs	r3, #64	; 0x40
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001cc8:	2309      	movs	r3, #9
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	482d      	ldr	r0, [pc, #180]	; (8001d88 <HAL_TIM_MspPostInit+0x15c>)
 8001cd4:	f003 fd2a 	bl	800572c <HAL_GPIO_Init>
}
 8001cd8:	e04a      	b.n	8001d70 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a2b      	ldr	r2, [pc, #172]	; (8001d8c <HAL_TIM_MspPostInit+0x160>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d120      	bne.n	8001d26 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_TIM_MspPostInit+0x150>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cea:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <HAL_TIM_MspPostInit+0x150>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_TIM_MspPostInit+0x150>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001d14:	2301      	movs	r3, #1
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4818      	ldr	r0, [pc, #96]	; (8001d80 <HAL_TIM_MspPostInit+0x154>)
 8001d20:	f003 fd04 	bl	800572c <HAL_GPIO_Init>
}
 8001d24:	e024      	b.n	8001d70 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_TIM_MspPostInit+0x164>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d11f      	bne.n	8001d70 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_TIM_MspPostInit+0x150>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d36:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <HAL_TIM_MspPostInit+0x150>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_TIM_MspPostInit+0x150>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001d60:	2301      	movs	r3, #1
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <HAL_TIM_MspPostInit+0x154>)
 8001d6c:	f003 fcde 	bl	800572c <HAL_GPIO_Init>
}
 8001d70:	bf00      	nop
 8001d72:	3730      	adds	r7, #48	; 0x30
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40001800 	.word	0x40001800
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	58020400 	.word	0x58020400
 8001d84:	40001c00 	.word	0x40001c00
 8001d88:	58020000 	.word	0x58020000
 8001d8c:	40014400 	.word	0x40014400
 8001d90:	40014800 	.word	0x40014800

08001d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b0ba      	sub	sp, #232	; 0xe8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dac:	f107 0318 	add.w	r3, r7, #24
 8001db0:	22bc      	movs	r2, #188	; 0xbc
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f00a f803 	bl	800bdc0 <memset>
  if(huart->Instance==UART5)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a60      	ldr	r2, [pc, #384]	; (8001f40 <HAL_UART_MspInit+0x1ac>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d143      	bne.n	8001e4c <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dce:	f107 0318 	add.w	r3, r7, #24
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 ffc6 	bl	8006d64 <HAL_RCCEx_PeriphCLKConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001dde:	f7ff fb4d 	bl	800147c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <HAL_UART_MspInit+0x1b0>)
 8001de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001de8:	4a56      	ldr	r2, [pc, #344]	; (8001f44 <HAL_UART_MspInit+0x1b0>)
 8001dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001df2:	4b54      	ldr	r3, [pc, #336]	; (8001f44 <HAL_UART_MspInit+0x1b0>)
 8001df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e00:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <HAL_UART_MspInit+0x1b0>)
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e06:	4a4f      	ldr	r2, [pc, #316]	; (8001f44 <HAL_UART_MspInit+0x1b0>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e10:	4b4c      	ldr	r3, [pc, #304]	; (8001f44 <HAL_UART_MspInit+0x1b0>)
 8001e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8001e1e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8001e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001e38:	230e      	movs	r3, #14
 8001e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e42:	4619      	mov	r1, r3
 8001e44:	4840      	ldr	r0, [pc, #256]	; (8001f48 <HAL_UART_MspInit+0x1b4>)
 8001e46:	f003 fc71 	bl	800572c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001e4a:	e074      	b.n	8001f36 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==UART7)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a3e      	ldr	r2, [pc, #248]	; (8001f4c <HAL_UART_MspInit+0x1b8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d16f      	bne.n	8001f36 <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e60:	f107 0318 	add.w	r3, r7, #24
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 ff7d 	bl	8006d64 <HAL_RCCEx_PeriphCLKConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001e70:	f7ff fb04 	bl	800147c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001e74:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <HAL_UART_MspInit+0x1b0>)
 8001e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e7a:	4a32      	ldr	r2, [pc, #200]	; (8001f44 <HAL_UART_MspInit+0x1b0>)
 8001e7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e84:	4b2f      	ldr	r3, [pc, #188]	; (8001f44 <HAL_UART_MspInit+0x1b0>)
 8001e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e92:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <HAL_UART_MspInit+0x1b0>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e98:	4a2a      	ldr	r2, [pc, #168]	; (8001f44 <HAL_UART_MspInit+0x1b0>)
 8001e9a:	f043 0320 	orr.w	r3, r3, #32
 8001e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_UART_MspInit+0x1b0>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eb0:	23c0      	movs	r3, #192	; 0xc0
 8001eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001ec8:	2307      	movs	r3, #7
 8001eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ece:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	481e      	ldr	r0, [pc, #120]	; (8001f50 <HAL_UART_MspInit+0x1bc>)
 8001ed6:	f003 fc29 	bl	800572c <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream1;
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001edc:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <HAL_UART_MspInit+0x1c4>)
 8001ede:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001ee2:	224f      	movs	r2, #79	; 0x4f
 8001ee4:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ef8:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f0c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001f1a:	480e      	ldr	r0, [pc, #56]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001f1c:	f001 fb2e 	bl	800357c <HAL_DMA_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_UART_MspInit+0x196>
      Error_Handler();
 8001f26:	f7ff faa9 	bl	800147c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001f2e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f30:	4a08      	ldr	r2, [pc, #32]	; (8001f54 <HAL_UART_MspInit+0x1c0>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f36:	bf00      	nop
 8001f38:	37e8      	adds	r7, #232	; 0xe8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40005000 	.word	0x40005000
 8001f44:	58024400 	.word	0x58024400
 8001f48:	58020400 	.word	0x58020400
 8001f4c:	40007800 	.word	0x40007800
 8001f50:	58021400 	.word	0x58021400
 8001f54:	2400084c 	.word	0x2400084c
 8001f58:	40020028 	.word	0x40020028

08001f5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b0b8      	sub	sp, #224	; 0xe0
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	22bc      	movs	r2, #188	; 0xbc
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f009 ff1f 	bl	800bdc0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <HAL_PCD_MspInit+0xe8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d156      	bne.n	800203a <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f90:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001f92:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 fee0 	bl	8006d64 <HAL_RCCEx_PeriphCLKConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001faa:	f7ff fa67 	bl	800147c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001fae:	f003 ff2d 	bl	8005e0c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	4b25      	ldr	r3, [pc, #148]	; (8002048 <HAL_PCD_MspInit+0xec>)
 8001fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb8:	4a23      	ldr	r2, [pc, #140]	; (8002048 <HAL_PCD_MspInit+0xec>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_PCD_MspInit+0xec>)
 8001fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001fd0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001fea:	230a      	movs	r3, #10
 8001fec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4815      	ldr	r0, [pc, #84]	; (800204c <HAL_PCD_MspInit+0xf0>)
 8001ff8:	f003 fb98 	bl	800572c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002000:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002014:	4619      	mov	r1, r3
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <HAL_PCD_MspInit+0xf0>)
 8002018:	f003 fb88 	bl	800572c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_PCD_MspInit+0xec>)
 800201e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_PCD_MspInit+0xec>)
 8002024:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002028:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_PCD_MspInit+0xec>)
 800202e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800203a:	bf00      	nop
 800203c:	37e0      	adds	r7, #224	; 0xe0
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40080000 	.word	0x40080000
 8002048:	58024400 	.word	0x58024400
 800204c:	58020000 	.word	0x58020000

08002050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <NMI_Handler+0x4>

08002056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <HardFault_Handler+0x4>

0800205c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <MemManage_Handler+0x4>

08002062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <BusFault_Handler+0x4>

08002068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <UsageFault_Handler+0x4>

0800206e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209c:	f000 f95e 	bl	800235c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80020a8:	2010      	movs	r0, #16
 80020aa:	f003 fd08 	bl	8005abe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <DMA1_Stream1_IRQHandler+0x10>)
 80020ba:	f001 fdbb 	bl	8003c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2400084c 	.word	0x2400084c

080020c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80020cc:	2020      	movs	r0, #32
 80020ce:	f003 fcf6 	bl	8005abe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80020d2:	2040      	movs	r0, #64	; 0x40
 80020d4:	f003 fcf3 	bl	8005abe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80020d8:	2080      	movs	r0, #128	; 0x80
 80020da:	f003 fcf0 	bl	8005abe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <TIM4_IRQHandler+0x10>)
 80020ea:	f007 fac1 	bl	8009670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	24000184 	.word	0x24000184

080020f8 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <BDMA_Channel0_IRQHandler+0x10>)
 80020fe:	f001 fd99 	bl	8003c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	24000624 	.word	0x24000624

0800210c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002110:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <SystemInit+0xec>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	4a38      	ldr	r2, [pc, #224]	; (80021f8 <SystemInit+0xec>)
 8002118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800211c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002120:	4b36      	ldr	r3, [pc, #216]	; (80021fc <SystemInit+0xf0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	2b06      	cmp	r3, #6
 800212a:	d807      	bhi.n	800213c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800212c:	4b33      	ldr	r3, [pc, #204]	; (80021fc <SystemInit+0xf0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 030f 	bic.w	r3, r3, #15
 8002134:	4a31      	ldr	r2, [pc, #196]	; (80021fc <SystemInit+0xf0>)
 8002136:	f043 0307 	orr.w	r3, r3, #7
 800213a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <SystemInit+0xf4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <SystemInit+0xf4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002148:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <SystemInit+0xf4>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800214e:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <SystemInit+0xf4>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	492b      	ldr	r1, [pc, #172]	; (8002200 <SystemInit+0xf4>)
 8002154:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <SystemInit+0xf8>)
 8002156:	4013      	ands	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800215a:	4b28      	ldr	r3, [pc, #160]	; (80021fc <SystemInit+0xf0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002166:	4b25      	ldr	r3, [pc, #148]	; (80021fc <SystemInit+0xf0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 030f 	bic.w	r3, r3, #15
 800216e:	4a23      	ldr	r2, [pc, #140]	; (80021fc <SystemInit+0xf0>)
 8002170:	f043 0307 	orr.w	r3, r3, #7
 8002174:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <SystemInit+0xf4>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800217c:	4b20      	ldr	r3, [pc, #128]	; (8002200 <SystemInit+0xf4>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <SystemInit+0xf4>)
 8002184:	2200      	movs	r2, #0
 8002186:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <SystemInit+0xf4>)
 800218a:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <SystemInit+0xfc>)
 800218c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <SystemInit+0xf4>)
 8002190:	4a1e      	ldr	r2, [pc, #120]	; (800220c <SystemInit+0x100>)
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002194:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <SystemInit+0xf4>)
 8002196:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <SystemInit+0x104>)
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <SystemInit+0xf4>)
 800219c:	2200      	movs	r2, #0
 800219e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80021a0:	4b17      	ldr	r3, [pc, #92]	; (8002200 <SystemInit+0xf4>)
 80021a2:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <SystemInit+0x104>)
 80021a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <SystemInit+0xf4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <SystemInit+0xf4>)
 80021ae:	4a18      	ldr	r2, [pc, #96]	; (8002210 <SystemInit+0x104>)
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <SystemInit+0xf4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <SystemInit+0xf4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a10      	ldr	r2, [pc, #64]	; (8002200 <SystemInit+0xf4>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021c4:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <SystemInit+0xf4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <SystemInit+0x108>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4b12      	ldr	r3, [pc, #72]	; (8002218 <SystemInit+0x10c>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021d6:	d202      	bcs.n	80021de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <SystemInit+0x110>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <SystemInit+0x114>)
 80021e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80021e4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <SystemInit+0xec>)
 80021e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00
 80021fc:	52002000 	.word	0x52002000
 8002200:	58024400 	.word	0x58024400
 8002204:	eaf6ed7f 	.word	0xeaf6ed7f
 8002208:	02020200 	.word	0x02020200
 800220c:	01ff0000 	.word	0x01ff0000
 8002210:	01010280 	.word	0x01010280
 8002214:	5c001000 	.word	0x5c001000
 8002218:	ffff0000 	.word	0xffff0000
 800221c:	51008108 	.word	0x51008108
 8002220:	52004000 	.word	0x52004000

08002224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800225c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002228:	f7ff ff70 	bl	800210c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800222c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800222e:	e003      	b.n	8002238 <LoopCopyDataInit>

08002230 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002232:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002234:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002236:	3104      	adds	r1, #4

08002238 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002238:	480a      	ldr	r0, [pc, #40]	; (8002264 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800223c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800223e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002240:	d3f6      	bcc.n	8002230 <CopyDataInit>
  ldr  r2, =_sbss
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002244:	e002      	b.n	800224c <LoopFillZerobss>

08002246 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002246:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002248:	f842 3b04 	str.w	r3, [r2], #4

0800224c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800224e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002250:	d3f9      	bcc.n	8002246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002252:	f009 fd91 	bl	800bd78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002256:	f7fe f9bb 	bl	80005d0 <main>
  bx  lr    
 800225a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800225c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002260:	0800be38 	.word	0x0800be38
  ldr  r0, =_sdata
 8002264:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002268:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 800226c:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8002270:	24000b64 	.word	0x24000b64

08002274 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC3_IRQHandler>
	...

08002278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227e:	2003      	movs	r0, #3
 8002280:	f001 f93c 	bl	80034fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002284:	f004 fb98 	bl	80069b8 <HAL_RCC_GetSysClockFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_Init+0x68>)
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	4913      	ldr	r1, [pc, #76]	; (80022e4 <HAL_Init+0x6c>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
 80022a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_Init+0x68>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <HAL_Init+0x6c>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
 80022b8:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <HAL_Init+0x70>)
 80022ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022bc:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <HAL_Init+0x74>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022c2:	2000      	movs	r0, #0
 80022c4:	f000 f814 	bl	80022f0 <HAL_InitTick>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e002      	b.n	80022d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022d2:	f7ff f8d9 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	58024400 	.word	0x58024400
 80022e4:	0800bde8 	.word	0x0800bde8
 80022e8:	24000004 	.word	0x24000004
 80022ec:	24000000 	.word	0x24000000

080022f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022f8:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_InitTick+0x60>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e021      	b.n	8002348 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_InitTick+0x64>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_InitTick+0x60>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4619      	mov	r1, r3
 800230e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002312:	fbb3 f3f1 	udiv	r3, r3, r1
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	4618      	mov	r0, r3
 800231c:	f001 f921 	bl	8003562 <HAL_SYSTICK_Config>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e00e      	b.n	8002348 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b0f      	cmp	r3, #15
 800232e:	d80a      	bhi.n	8002346 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002330:	2200      	movs	r2, #0
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f001 f8eb 	bl	8003512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800233c:	4a06      	ldr	r2, [pc, #24]	; (8002358 <HAL_InitTick+0x68>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	e000      	b.n	8002348 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	2400000c 	.word	0x2400000c
 8002354:	24000000 	.word	0x24000000
 8002358:	24000008 	.word	0x24000008

0800235c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_IncTick+0x20>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_IncTick+0x24>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4413      	add	r3, r2
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <HAL_IncTick+0x24>)
 800236e:	6013      	str	r3, [r2, #0]
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	2400000c 	.word	0x2400000c
 8002380:	24000b60 	.word	0x24000b60

08002384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return uwTick;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_GetTick+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	24000b60 	.word	0x24000b60

0800239c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a4:	f7ff ffee 	bl	8002384 <HAL_GetTick>
 80023a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b4:	d005      	beq.n	80023c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_Delay+0x44>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023c2:	bf00      	nop
 80023c4:	f7ff ffde 	bl	8002384 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d8f7      	bhi.n	80023c4 <HAL_Delay+0x28>
  {
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2400000c 	.word	0x2400000c

080023e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_GetREVID+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0c1b      	lsrs	r3, r3, #16
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	5c001000 	.word	0x5c001000

080023fc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800240c:	4904      	ldr	r1, [pc, #16]	; (8002420 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	58000400 	.word	0x58000400

08002424 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	43db      	mvns	r3, r3
 8002436:	401a      	ands	r2, r3
 8002438:	4904      	ldr	r1, [pc, #16]	; (800244c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	58000400 	.word	0x58000400

08002450 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	609a      	str	r2, [r3, #8]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	609a      	str	r2, [r3, #8]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3360      	adds	r3, #96	; 0x60
 80024ca:	461a      	mov	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	431a      	orrs	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	431a      	orrs	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	611a      	str	r2, [r3, #16]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800252a:	b480      	push	{r7}
 800252c:	b087      	sub	sp, #28
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3360      	adds	r3, #96	; 0x60
 800253a:	461a      	mov	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	431a      	orrs	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]
  }
}
 8002554:	bf00      	nop
 8002556:	371c      	adds	r7, #28
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3330      	adds	r3, #48	; 0x30
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	4413      	add	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	211f      	movs	r1, #31
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	401a      	ands	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	f003 011f 	and.w	r1, r3, #31
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	431a      	orrs	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025ac:	bf00      	nop
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3314      	adds	r3, #20
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	0e5b      	lsrs	r3, r3, #25
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	4413      	add	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	0d1b      	lsrs	r3, r3, #20
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2107      	movs	r1, #7
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	401a      	ands	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	0d1b      	lsrs	r3, r3, #20
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	431a      	orrs	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002628:	43db      	mvns	r3, r3
 800262a:	401a      	ands	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0318 	and.w	r3, r3, #24
 8002632:	4908      	ldr	r1, [pc, #32]	; (8002654 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002634:	40d9      	lsrs	r1, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	400b      	ands	r3, r1
 800263a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800263e:	431a      	orrs	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	000fffff 	.word	0x000fffff

08002658 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002666:	4013      	ands	r3, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6093      	str	r3, [r2, #8]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	5fffffc0 	.word	0x5fffffc0

0800267c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800268c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002690:	d101      	bne.n	8002696 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	6fffffc0 	.word	0x6fffffc0

080026cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026e0:	d101      	bne.n	80026e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <LL_ADC_IsEnabled+0x18>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <LL_ADC_IsEnabled+0x1a>
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b04      	cmp	r3, #4
 800272c:	d101      	bne.n	8002732 <LL_ADC_REG_IsConversionOngoing+0x18>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b08      	cmp	r3, #8
 8002752:	d101      	bne.n	8002758 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e18e      	b.n	8002aa0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fe fe93 	bl	80014bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff67 	bl	800267c <LL_ADC_IsDeepPowerDownEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d004      	beq.n	80027be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff4d 	bl	8002658 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff82 	bl	80026cc <LL_ADC_IsInternalRegulatorEnabled>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d114      	bne.n	80027f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff66 	bl	80026a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d8:	4b9a      	ldr	r3, [pc, #616]	; (8002a44 <HAL_ADC_Init+0x2dc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	4a9a      	ldr	r2, [pc, #616]	; (8002a48 <HAL_ADC_Init+0x2e0>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	3301      	adds	r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027ea:	e002      	b.n	80027f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f9      	bne.n	80027ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff65 	bl	80026cc <LL_ADC_IsInternalRegulatorEnabled>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10d      	bne.n	8002824 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	f043 0210 	orr.w	r2, r3, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff76 	bl	800271a <LL_ADC_REG_IsConversionOngoing>
 800282e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	f040 8128 	bne.w	8002a8e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 8124 	bne.w	8002a8e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800284e:	f043 0202 	orr.w	r2, r3, #2
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff4a 	bl	80026f4 <LL_ADC_IsEnabled>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d136      	bne.n	80028d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a78      	ldr	r2, [pc, #480]	; (8002a4c <HAL_ADC_Init+0x2e4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d004      	beq.n	800287a <HAL_ADC_Init+0x112>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a76      	ldr	r2, [pc, #472]	; (8002a50 <HAL_ADC_Init+0x2e8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10e      	bne.n	8002898 <HAL_ADC_Init+0x130>
 800287a:	4874      	ldr	r0, [pc, #464]	; (8002a4c <HAL_ADC_Init+0x2e4>)
 800287c:	f7ff ff3a 	bl	80026f4 <LL_ADC_IsEnabled>
 8002880:	4604      	mov	r4, r0
 8002882:	4873      	ldr	r0, [pc, #460]	; (8002a50 <HAL_ADC_Init+0x2e8>)
 8002884:	f7ff ff36 	bl	80026f4 <LL_ADC_IsEnabled>
 8002888:	4603      	mov	r3, r0
 800288a:	4323      	orrs	r3, r4
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e008      	b.n	80028aa <HAL_ADC_Init+0x142>
 8002898:	486e      	ldr	r0, [pc, #440]	; (8002a54 <HAL_ADC_Init+0x2ec>)
 800289a:	f7ff ff2b 	bl	80026f4 <LL_ADC_IsEnabled>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a66      	ldr	r2, [pc, #408]	; (8002a4c <HAL_ADC_Init+0x2e4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_ADC_Init+0x15a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a64      	ldr	r2, [pc, #400]	; (8002a50 <HAL_ADC_Init+0x2e8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_Init+0x15e>
 80028c2:	4a65      	ldr	r2, [pc, #404]	; (8002a58 <HAL_ADC_Init+0x2f0>)
 80028c4:	e000      	b.n	80028c8 <HAL_ADC_Init+0x160>
 80028c6:	4a65      	ldr	r2, [pc, #404]	; (8002a5c <HAL_ADC_Init+0x2f4>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f7ff fdbe 	bl	8002450 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80028d4:	f7ff fd86 	bl	80023e4 <HAL_GetREVID>
 80028d8:	4603      	mov	r3, r0
 80028da:	f241 0203 	movw	r2, #4099	; 0x1003
 80028de:	4293      	cmp	r3, r2
 80028e0:	d914      	bls.n	800290c <HAL_ADC_Init+0x1a4>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d110      	bne.n	800290c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7d5b      	ldrb	r3, [r3, #21]
 80028ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028f4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7f1b      	ldrb	r3, [r3, #28]
 8002900:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002902:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002904:	f043 030c 	orr.w	r3, r3, #12
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	e00d      	b.n	8002928 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	7d5b      	ldrb	r3, [r3, #21]
 8002910:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002916:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800291c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7f1b      	ldrb	r3, [r3, #28]
 8002922:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7f1b      	ldrb	r3, [r3, #28]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d106      	bne.n	800293e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	3b01      	subs	r3, #1
 8002936:	045b      	lsls	r3, r3, #17
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	4b3f      	ldr	r3, [pc, #252]	; (8002a60 <HAL_ADC_Init+0x2f8>)
 8002962:	4013      	ands	r3, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	69b9      	ldr	r1, [r7, #24]
 800296a:	430b      	orrs	r3, r1
 800296c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fed1 	bl	800271a <LL_ADC_REG_IsConversionOngoing>
 8002978:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fede 	bl	8002740 <LL_ADC_INJ_IsConversionOngoing>
 8002984:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d14a      	bne.n	8002a22 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d147      	bne.n	8002a22 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7d1b      	ldrb	r3, [r3, #20]
 8002996:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <HAL_ADC_Init+0x2fc>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d11b      	bne.n	80029f6 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_ADC_Init+0x300>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029d2:	3a01      	subs	r2, #1
 80029d4:	0411      	lsls	r1, r2, #16
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029da:	4311      	orrs	r1, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029e0:	4311      	orrs	r1, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029e6:	430a      	orrs	r2, r1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	611a      	str	r2, [r3, #16]
 80029f4:	e007      	b.n	8002a06 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fb93 	bl	8003148 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d120      	bne.n	8002a6c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f023 010f 	bic.w	r1, r3, #15
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	1e5a      	subs	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
 8002a42:	e01b      	b.n	8002a7c <HAL_ADC_Init+0x314>
 8002a44:	24000000 	.word	0x24000000
 8002a48:	053e2d63 	.word	0x053e2d63
 8002a4c:	40022000 	.word	0x40022000
 8002a50:	40022100 	.word	0x40022100
 8002a54:	58026000 	.word	0x58026000
 8002a58:	40022300 	.word	0x40022300
 8002a5c:	58026300 	.word	0x58026300
 8002a60:	fff0c003 	.word	0xfff0c003
 8002a64:	ffffbffc 	.word	0xffffbffc
 8002a68:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 020f 	bic.w	r2, r2, #15
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f023 0303 	bic.w	r3, r3, #3
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54
 8002a8c:	e007      	b.n	8002a9e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a92:	f043 0210 	orr.w	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3724      	adds	r7, #36	; 0x24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}

08002aa8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b0a1      	sub	sp, #132	; 0x84
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4a9d      	ldr	r2, [pc, #628]	; (8002d38 <HAL_ADC_ConfigChannel+0x290>)
 8002ac2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x2a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e321      	b.n	8003116 <HAL_ADC_ConfigChannel+0x66e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fe1b 	bl	800271a <LL_ADC_REG_IsConversionOngoing>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 8306 	bne.w	80030f8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d108      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x62>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2201      	movs	r2, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	e016      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x90>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b1a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002b22:	2320      	movs	r3, #32
 8002b24:	e003      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	2201      	movs	r2, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	69d1      	ldr	r1, [r2, #28]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	430b      	orrs	r3, r1
 8002b44:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6859      	ldr	r1, [r3, #4]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	f7ff fd04 	bl	8002560 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fddc 	bl	800271a <LL_ADC_REG_IsConversionOngoing>
 8002b62:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fde9 	bl	8002740 <LL_ADC_INJ_IsConversionOngoing>
 8002b6e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 80b3 	bne.w	8002cde <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 80af 	bne.w	8002cde <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f7ff fd13 	bl	80025b8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b92:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <HAL_ADC_ConfigChannel+0x294>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x110>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	e01d      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x14c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10b      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x136>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	e00a      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x14c>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d027      	beq.n	8002c4e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6919      	ldr	r1, [r3, #16]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c0c:	f7ff fc54 	bl	80024b8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6919      	ldr	r1, [r3, #16]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	7e5b      	ldrb	r3, [r3, #25]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d102      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x17e>
 8002c20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c24:	e000      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x180>
 8002c26:	2300      	movs	r3, #0
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f7ff fc7e 	bl	800252a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6919      	ldr	r1, [r3, #16]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	7e1b      	ldrb	r3, [r3, #24]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x19c>
 8002c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c42:	e000      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x19e>
 8002c44:	2300      	movs	r3, #0
 8002c46:	461a      	mov	r2, r3
 8002c48:	f7ff fc56 	bl	80024f8 <LL_ADC_SetDataRightShift>
 8002c4c:	e047      	b.n	8002cde <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	069b      	lsls	r3, r3, #26
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d107      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c70:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	069b      	lsls	r3, r3, #26
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d107      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c94:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	069b      	lsls	r3, r3, #26
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d107      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cb8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	069b      	lsls	r3, r3, #26
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d107      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cdc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fd06 	bl	80026f4 <LL_ADC_IsEnabled>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 820d 	bne.w	800310a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f7ff fc87 	bl	8002610 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4a0c      	ldr	r2, [pc, #48]	; (8002d38 <HAL_ADC_ConfigChannel+0x290>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	f040 8133 	bne.w	8002f74 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d110      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x298>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0e9b      	lsrs	r3, r3, #26
 8002d24:	3301      	adds	r3, #1
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2b09      	cmp	r3, #9
 8002d2c:	bf94      	ite	ls
 8002d2e:	2301      	movls	r3, #1
 8002d30:	2300      	movhi	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	e01e      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x2cc>
 8002d36:	bf00      	nop
 8002d38:	47ff0000 	.word	0x47ff0000
 8002d3c:	5c001000 	.word	0x5c001000
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e003      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2b09      	cmp	r3, #9
 8002d6c:	bf94      	ite	ls
 8002d6e:	2301      	movls	r3, #1
 8002d70:	2300      	movhi	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d079      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x2ec>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0e9b      	lsrs	r3, r3, #26
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	069b      	lsls	r3, r3, #26
 8002d8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d92:	e015      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x318>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002dac:	2320      	movs	r3, #32
 8002dae:	e003      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	069b      	lsls	r3, r3, #26
 8002dbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x338>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0e9b      	lsrs	r3, r3, #26
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	e017      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x368>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	e003      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	3301      	adds	r3, #1
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	ea42 0103 	orr.w	r1, r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x38e>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	051b      	lsls	r3, r3, #20
 8002e34:	e018      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x3c0>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	e07e      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x3e0>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	3301      	adds	r3, #1
 8002e80:	069b      	lsls	r3, r3, #26
 8002e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e86:	e015      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x40c>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002ea0:	2320      	movs	r3, #32
 8002ea2:	e003      	b.n	8002eac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	069b      	lsls	r3, r3, #26
 8002eb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x42c>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2101      	movs	r1, #1
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	e017      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x45c>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	61bb      	str	r3, [r7, #24]
  return result;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002eec:	2320      	movs	r3, #32
 8002eee:	e003      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	3301      	adds	r3, #1
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2101      	movs	r1, #1
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	ea42 0103 	orr.w	r1, r2, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10d      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x488>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0e9b      	lsrs	r3, r3, #26
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	3b1e      	subs	r3, #30
 8002f28:	051b      	lsls	r3, r3, #20
 8002f2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	e01b      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x4c0>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	60fb      	str	r3, [r7, #12]
  return result;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002f48:	2320      	movs	r3, #32
 8002f4a:	e003      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	f003 021f 	and.w	r2, r3, #31
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	3b1e      	subs	r3, #30
 8002f62:	051b      	lsls	r3, r3, #20
 8002f64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	6892      	ldr	r2, [r2, #8]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7ff fb22 	bl	80025b8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f280 80c6 	bge.w	800310a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a67      	ldr	r2, [pc, #412]	; (8003120 <HAL_ADC_ConfigChannel+0x678>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_ADC_ConfigChannel+0x4ea>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a65      	ldr	r2, [pc, #404]	; (8003124 <HAL_ADC_ConfigChannel+0x67c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x4ee>
 8002f92:	4b65      	ldr	r3, [pc, #404]	; (8003128 <HAL_ADC_ConfigChannel+0x680>)
 8002f94:	e000      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x4f0>
 8002f96:	4b65      	ldr	r3, [pc, #404]	; (800312c <HAL_ADC_ConfigChannel+0x684>)
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fa7f 	bl	800249c <LL_ADC_GetCommonPathInternalCh>
 8002f9e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a5e      	ldr	r2, [pc, #376]	; (8003120 <HAL_ADC_ConfigChannel+0x678>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADC_ConfigChannel+0x50c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a5d      	ldr	r2, [pc, #372]	; (8003124 <HAL_ADC_ConfigChannel+0x67c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d10e      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x52a>
 8002fb4:	485a      	ldr	r0, [pc, #360]	; (8003120 <HAL_ADC_ConfigChannel+0x678>)
 8002fb6:	f7ff fb9d 	bl	80026f4 <LL_ADC_IsEnabled>
 8002fba:	4604      	mov	r4, r0
 8002fbc:	4859      	ldr	r0, [pc, #356]	; (8003124 <HAL_ADC_ConfigChannel+0x67c>)
 8002fbe:	f7ff fb99 	bl	80026f4 <LL_ADC_IsEnabled>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4323      	orrs	r3, r4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	e008      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x53c>
 8002fd2:	4857      	ldr	r0, [pc, #348]	; (8003130 <HAL_ADC_ConfigChannel+0x688>)
 8002fd4:	f7ff fb8e 	bl	80026f4 <LL_ADC_IsEnabled>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d07d      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a51      	ldr	r2, [pc, #324]	; (8003134 <HAL_ADC_ConfigChannel+0x68c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d130      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x5ac>
 8002ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d12b      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a4b      	ldr	r2, [pc, #300]	; (8003130 <HAL_ADC_ConfigChannel+0x688>)
 8003002:	4293      	cmp	r3, r2
 8003004:	f040 8081 	bne.w	800310a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a44      	ldr	r2, [pc, #272]	; (8003120 <HAL_ADC_ConfigChannel+0x678>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_ADC_ConfigChannel+0x574>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a43      	ldr	r2, [pc, #268]	; (8003124 <HAL_ADC_ConfigChannel+0x67c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x578>
 800301c:	4a42      	ldr	r2, [pc, #264]	; (8003128 <HAL_ADC_ConfigChannel+0x680>)
 800301e:	e000      	b.n	8003022 <HAL_ADC_ConfigChannel+0x57a>
 8003020:	4a42      	ldr	r2, [pc, #264]	; (800312c <HAL_ADC_ConfigChannel+0x684>)
 8003022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003024:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f7ff fa23 	bl	8002476 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003030:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_ADC_ConfigChannel+0x690>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	4a41      	ldr	r2, [pc, #260]	; (800313c <HAL_ADC_ConfigChannel+0x694>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	3301      	adds	r3, #1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003044:	e002      	b.n	800304c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	3b01      	subs	r3, #1
 800304a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f9      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003052:	e05a      	b.n	800310a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a39      	ldr	r2, [pc, #228]	; (8003140 <HAL_ADC_ConfigChannel+0x698>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d11e      	bne.n	800309c <HAL_ADC_ConfigChannel+0x5f4>
 800305e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d119      	bne.n	800309c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a30      	ldr	r2, [pc, #192]	; (8003130 <HAL_ADC_ConfigChannel+0x688>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d14b      	bne.n	800310a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <HAL_ADC_ConfigChannel+0x678>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d004      	beq.n	8003086 <HAL_ADC_ConfigChannel+0x5de>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a28      	ldr	r2, [pc, #160]	; (8003124 <HAL_ADC_ConfigChannel+0x67c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_ADC_ConfigChannel+0x5e2>
 8003086:	4a28      	ldr	r2, [pc, #160]	; (8003128 <HAL_ADC_ConfigChannel+0x680>)
 8003088:	e000      	b.n	800308c <HAL_ADC_ConfigChannel+0x5e4>
 800308a:	4a28      	ldr	r2, [pc, #160]	; (800312c <HAL_ADC_ConfigChannel+0x684>)
 800308c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f7ff f9ee 	bl	8002476 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800309a:	e036      	b.n	800310a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a28      	ldr	r2, [pc, #160]	; (8003144 <HAL_ADC_ConfigChannel+0x69c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d131      	bne.n	800310a <HAL_ADC_ConfigChannel+0x662>
 80030a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d12c      	bne.n	800310a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <HAL_ADC_ConfigChannel+0x688>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d127      	bne.n	800310a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_ADC_ConfigChannel+0x678>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_ADC_ConfigChannel+0x626>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a16      	ldr	r2, [pc, #88]	; (8003124 <HAL_ADC_ConfigChannel+0x67c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x62a>
 80030ce:	4a16      	ldr	r2, [pc, #88]	; (8003128 <HAL_ADC_ConfigChannel+0x680>)
 80030d0:	e000      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x62c>
 80030d2:	4a16      	ldr	r2, [pc, #88]	; (800312c <HAL_ADC_ConfigChannel+0x684>)
 80030d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f7ff f9ca 	bl	8002476 <LL_ADC_SetCommonPathInternalCh>
 80030e2:	e012      	b.n	800310a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030f6:	e008      	b.n	800310a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003112:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003116:	4618      	mov	r0, r3
 8003118:	3784      	adds	r7, #132	; 0x84
 800311a:	46bd      	mov	sp, r7
 800311c:	bd90      	pop	{r4, r7, pc}
 800311e:	bf00      	nop
 8003120:	40022000 	.word	0x40022000
 8003124:	40022100 	.word	0x40022100
 8003128:	40022300 	.word	0x40022300
 800312c:	58026300 	.word	0x58026300
 8003130:	58026000 	.word	0x58026000
 8003134:	cb840000 	.word	0xcb840000
 8003138:	24000000 	.word	0x24000000
 800313c:	053e2d63 	.word	0x053e2d63
 8003140:	c7520000 	.word	0xc7520000
 8003144:	cfb80000 	.word	0xcfb80000

08003148 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a79      	ldr	r2, [pc, #484]	; (800333c <ADC_ConfigureBoostMode+0x1f4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <ADC_ConfigureBoostMode+0x1c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a78      	ldr	r2, [pc, #480]	; (8003340 <ADC_ConfigureBoostMode+0x1f8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d109      	bne.n	8003178 <ADC_ConfigureBoostMode+0x30>
 8003164:	4b77      	ldr	r3, [pc, #476]	; (8003344 <ADC_ConfigureBoostMode+0x1fc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf14      	ite	ne
 8003170:	2301      	movne	r3, #1
 8003172:	2300      	moveq	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	e008      	b.n	800318a <ADC_ConfigureBoostMode+0x42>
 8003178:	4b73      	ldr	r3, [pc, #460]	; (8003348 <ADC_ConfigureBoostMode+0x200>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf14      	ite	ne
 8003184:	2301      	movne	r3, #1
 8003186:	2300      	moveq	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01c      	beq.n	80031c8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800318e:	f003 fd8d 	bl	8006cac <HAL_RCC_GetHCLKFreq>
 8003192:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800319c:	d010      	beq.n	80031c0 <ADC_ConfigureBoostMode+0x78>
 800319e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031a2:	d871      	bhi.n	8003288 <ADC_ConfigureBoostMode+0x140>
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a8:	d002      	beq.n	80031b0 <ADC_ConfigureBoostMode+0x68>
 80031aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ae:	d16b      	bne.n	8003288 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	60fb      	str	r3, [r7, #12]
        break;
 80031be:	e066      	b.n	800328e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	60fb      	str	r3, [r7, #12]
        break;
 80031c6:	e062      	b.n	800328e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80031c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80031cc:	f004 fd0a 	bl	8007be4 <HAL_RCCEx_GetPeriphCLKFreq>
 80031d0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80031da:	d051      	beq.n	8003280 <ADC_ConfigureBoostMode+0x138>
 80031dc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80031e0:	d854      	bhi.n	800328c <ADC_ConfigureBoostMode+0x144>
 80031e2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80031e6:	d047      	beq.n	8003278 <ADC_ConfigureBoostMode+0x130>
 80031e8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80031ec:	d84e      	bhi.n	800328c <ADC_ConfigureBoostMode+0x144>
 80031ee:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031f2:	d03d      	beq.n	8003270 <ADC_ConfigureBoostMode+0x128>
 80031f4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031f8:	d848      	bhi.n	800328c <ADC_ConfigureBoostMode+0x144>
 80031fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031fe:	d033      	beq.n	8003268 <ADC_ConfigureBoostMode+0x120>
 8003200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003204:	d842      	bhi.n	800328c <ADC_ConfigureBoostMode+0x144>
 8003206:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800320a:	d029      	beq.n	8003260 <ADC_ConfigureBoostMode+0x118>
 800320c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003210:	d83c      	bhi.n	800328c <ADC_ConfigureBoostMode+0x144>
 8003212:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003216:	d01a      	beq.n	800324e <ADC_ConfigureBoostMode+0x106>
 8003218:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800321c:	d836      	bhi.n	800328c <ADC_ConfigureBoostMode+0x144>
 800321e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003222:	d014      	beq.n	800324e <ADC_ConfigureBoostMode+0x106>
 8003224:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003228:	d830      	bhi.n	800328c <ADC_ConfigureBoostMode+0x144>
 800322a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800322e:	d00e      	beq.n	800324e <ADC_ConfigureBoostMode+0x106>
 8003230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003234:	d82a      	bhi.n	800328c <ADC_ConfigureBoostMode+0x144>
 8003236:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800323a:	d008      	beq.n	800324e <ADC_ConfigureBoostMode+0x106>
 800323c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003240:	d824      	bhi.n	800328c <ADC_ConfigureBoostMode+0x144>
 8003242:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003246:	d002      	beq.n	800324e <ADC_ConfigureBoostMode+0x106>
 8003248:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800324c:	d11e      	bne.n	800328c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	0c9b      	lsrs	r3, r3, #18
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	60fb      	str	r3, [r7, #12]
        break;
 800325e:	e016      	b.n	800328e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	60fb      	str	r3, [r7, #12]
        break;
 8003266:	e012      	b.n	800328e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	60fb      	str	r3, [r7, #12]
        break;
 800326e:	e00e      	b.n	800328e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	60fb      	str	r3, [r7, #12]
        break;
 8003276:	e00a      	b.n	800328e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	09db      	lsrs	r3, r3, #7
 800327c:	60fb      	str	r3, [r7, #12]
        break;
 800327e:	e006      	b.n	800328e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	60fb      	str	r3, [r7, #12]
        break;
 8003286:	e002      	b.n	800328e <ADC_ConfigureBoostMode+0x146>
        break;
 8003288:	bf00      	nop
 800328a:	e000      	b.n	800328e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800328c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800328e:	f7ff f8a9 	bl	80023e4 <HAL_GetREVID>
 8003292:	4603      	mov	r3, r0
 8003294:	f241 0203 	movw	r2, #4099	; 0x1003
 8003298:	4293      	cmp	r3, r2
 800329a:	d815      	bhi.n	80032c8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a2b      	ldr	r2, [pc, #172]	; (800334c <ADC_ConfigureBoostMode+0x204>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d908      	bls.n	80032b6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80032b4:	e03e      	b.n	8003334 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c4:	609a      	str	r2, [r3, #8]
}
 80032c6:	e035      	b.n	8003334 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <ADC_ConfigureBoostMode+0x208>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d808      	bhi.n	80032e8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032e4:	609a      	str	r2, [r3, #8]
}
 80032e6:	e025      	b.n	8003334 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a1a      	ldr	r2, [pc, #104]	; (8003354 <ADC_ConfigureBoostMode+0x20c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d80a      	bhi.n	8003306 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	e016      	b.n	8003334 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a13      	ldr	r2, [pc, #76]	; (8003358 <ADC_ConfigureBoostMode+0x210>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d80a      	bhi.n	8003324 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003320:	609a      	str	r2, [r3, #8]
}
 8003322:	e007      	b.n	8003334 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003332:	609a      	str	r2, [r3, #8]
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40022000 	.word	0x40022000
 8003340:	40022100 	.word	0x40022100
 8003344:	40022300 	.word	0x40022300
 8003348:	58026300 	.word	0x58026300
 800334c:	01312d00 	.word	0x01312d00
 8003350:	005f5e10 	.word	0x005f5e10
 8003354:	00bebc20 	.word	0x00bebc20
 8003358:	017d7840 	.word	0x017d7840

0800335c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <__NVIC_SetPriorityGrouping+0x40>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003378:	4013      	ands	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	4313      	orrs	r3, r2
 8003388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800338a:	4a04      	ldr	r2, [pc, #16]	; (800339c <__NVIC_SetPriorityGrouping+0x40>)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	60d3      	str	r3, [r2, #12]
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000ed00 	.word	0xe000ed00
 80033a0:	05fa0000 	.word	0x05fa0000

080033a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a8:	4b04      	ldr	r3, [pc, #16]	; (80033bc <__NVIC_GetPriorityGrouping+0x18>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	0a1b      	lsrs	r3, r3, #8
 80033ae:	f003 0307 	and.w	r3, r3, #7
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	db0b      	blt.n	80033ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	f003 021f 	and.w	r2, r3, #31
 80033d8:	4907      	ldr	r1, [pc, #28]	; (80033f8 <__NVIC_EnableIRQ+0x38>)
 80033da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	2001      	movs	r0, #1
 80033e2:	fa00 f202 	lsl.w	r2, r0, r2
 80033e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000e100 	.word	0xe000e100

080033fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	6039      	str	r1, [r7, #0]
 8003406:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800340c:	2b00      	cmp	r3, #0
 800340e:	db0a      	blt.n	8003426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	b2da      	uxtb	r2, r3
 8003414:	490c      	ldr	r1, [pc, #48]	; (8003448 <__NVIC_SetPriority+0x4c>)
 8003416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800341a:	0112      	lsls	r2, r2, #4
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	440b      	add	r3, r1
 8003420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003424:	e00a      	b.n	800343c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4908      	ldr	r1, [pc, #32]	; (800344c <__NVIC_SetPriority+0x50>)
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	3b04      	subs	r3, #4
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	440b      	add	r3, r1
 800343a:	761a      	strb	r2, [r3, #24]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000e100 	.word	0xe000e100
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	; 0x24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f1c3 0307 	rsb	r3, r3, #7
 800346a:	2b04      	cmp	r3, #4
 800346c:	bf28      	it	cs
 800346e:	2304      	movcs	r3, #4
 8003470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3304      	adds	r3, #4
 8003476:	2b06      	cmp	r3, #6
 8003478:	d902      	bls.n	8003480 <NVIC_EncodePriority+0x30>
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3b03      	subs	r3, #3
 800347e:	e000      	b.n	8003482 <NVIC_EncodePriority+0x32>
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43da      	mvns	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	401a      	ands	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003498:	f04f 31ff 	mov.w	r1, #4294967295
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	43d9      	mvns	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	4313      	orrs	r3, r2
         );
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c8:	d301      	bcc.n	80034ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ca:	2301      	movs	r3, #1
 80034cc:	e00f      	b.n	80034ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ce:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <SysTick_Config+0x40>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d6:	210f      	movs	r1, #15
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295
 80034dc:	f7ff ff8e 	bl	80033fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <SysTick_Config+0x40>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e6:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <SysTick_Config+0x40>)
 80034e8:	2207      	movs	r2, #7
 80034ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	e000e010 	.word	0xe000e010

080034fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff ff29 	bl	800335c <__NVIC_SetPriorityGrouping>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b086      	sub	sp, #24
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003520:	f7ff ff40 	bl	80033a4 <__NVIC_GetPriorityGrouping>
 8003524:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff90 	bl	8003450 <NVIC_EncodePriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff5f 	bl	80033fc <__NVIC_SetPriority>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003550:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff33 	bl	80033c0 <__NVIC_EnableIRQ>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffa4 	bl	80034b8 <SysTick_Config>
 8003570:	4603      	mov	r3, r0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003584:	f7fe fefe 	bl	8002384 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e316      	b.n	8003bc2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a66      	ldr	r2, [pc, #408]	; (8003734 <HAL_DMA_Init+0x1b8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d04a      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a65      	ldr	r2, [pc, #404]	; (8003738 <HAL_DMA_Init+0x1bc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d045      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a63      	ldr	r2, [pc, #396]	; (800373c <HAL_DMA_Init+0x1c0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d040      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a62      	ldr	r2, [pc, #392]	; (8003740 <HAL_DMA_Init+0x1c4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d03b      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a60      	ldr	r2, [pc, #384]	; (8003744 <HAL_DMA_Init+0x1c8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d036      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5f      	ldr	r2, [pc, #380]	; (8003748 <HAL_DMA_Init+0x1cc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d031      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a5d      	ldr	r2, [pc, #372]	; (800374c <HAL_DMA_Init+0x1d0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d02c      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a5c      	ldr	r2, [pc, #368]	; (8003750 <HAL_DMA_Init+0x1d4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d027      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a5a      	ldr	r2, [pc, #360]	; (8003754 <HAL_DMA_Init+0x1d8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d022      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a59      	ldr	r2, [pc, #356]	; (8003758 <HAL_DMA_Init+0x1dc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d01d      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a57      	ldr	r2, [pc, #348]	; (800375c <HAL_DMA_Init+0x1e0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d018      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a56      	ldr	r2, [pc, #344]	; (8003760 <HAL_DMA_Init+0x1e4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d013      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a54      	ldr	r2, [pc, #336]	; (8003764 <HAL_DMA_Init+0x1e8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00e      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a53      	ldr	r2, [pc, #332]	; (8003768 <HAL_DMA_Init+0x1ec>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d009      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a51      	ldr	r2, [pc, #324]	; (800376c <HAL_DMA_Init+0x1f0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_DMA_Init+0xb8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a50      	ldr	r2, [pc, #320]	; (8003770 <HAL_DMA_Init+0x1f4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d101      	bne.n	8003638 <HAL_DMA_Init+0xbc>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_DMA_Init+0xbe>
 8003638:	2300      	movs	r3, #0
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 813b 	beq.w	80038b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a37      	ldr	r2, [pc, #220]	; (8003734 <HAL_DMA_Init+0x1b8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d04a      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a36      	ldr	r2, [pc, #216]	; (8003738 <HAL_DMA_Init+0x1bc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d045      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a34      	ldr	r2, [pc, #208]	; (800373c <HAL_DMA_Init+0x1c0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d040      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a33      	ldr	r2, [pc, #204]	; (8003740 <HAL_DMA_Init+0x1c4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d03b      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a31      	ldr	r2, [pc, #196]	; (8003744 <HAL_DMA_Init+0x1c8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d036      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a30      	ldr	r2, [pc, #192]	; (8003748 <HAL_DMA_Init+0x1cc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d031      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2e      	ldr	r2, [pc, #184]	; (800374c <HAL_DMA_Init+0x1d0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d02c      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <HAL_DMA_Init+0x1d4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d027      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2b      	ldr	r2, [pc, #172]	; (8003754 <HAL_DMA_Init+0x1d8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d022      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2a      	ldr	r2, [pc, #168]	; (8003758 <HAL_DMA_Init+0x1dc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d01d      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a28      	ldr	r2, [pc, #160]	; (800375c <HAL_DMA_Init+0x1e0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d018      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a27      	ldr	r2, [pc, #156]	; (8003760 <HAL_DMA_Init+0x1e4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d013      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a25      	ldr	r2, [pc, #148]	; (8003764 <HAL_DMA_Init+0x1e8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00e      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a24      	ldr	r2, [pc, #144]	; (8003768 <HAL_DMA_Init+0x1ec>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d009      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a22      	ldr	r2, [pc, #136]	; (800376c <HAL_DMA_Init+0x1f0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d004      	beq.n	80036f0 <HAL_DMA_Init+0x174>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a21      	ldr	r2, [pc, #132]	; (8003770 <HAL_DMA_Init+0x1f4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d108      	bne.n	8003702 <HAL_DMA_Init+0x186>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	e007      	b.n	8003712 <HAL_DMA_Init+0x196>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003712:	e02f      	b.n	8003774 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003714:	f7fe fe36 	bl	8002384 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b05      	cmp	r3, #5
 8003720:	d928      	bls.n	8003774 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2203      	movs	r2, #3
 800372c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e246      	b.n	8003bc2 <HAL_DMA_Init+0x646>
 8003734:	40020010 	.word	0x40020010
 8003738:	40020028 	.word	0x40020028
 800373c:	40020040 	.word	0x40020040
 8003740:	40020058 	.word	0x40020058
 8003744:	40020070 	.word	0x40020070
 8003748:	40020088 	.word	0x40020088
 800374c:	400200a0 	.word	0x400200a0
 8003750:	400200b8 	.word	0x400200b8
 8003754:	40020410 	.word	0x40020410
 8003758:	40020428 	.word	0x40020428
 800375c:	40020440 	.word	0x40020440
 8003760:	40020458 	.word	0x40020458
 8003764:	40020470 	.word	0x40020470
 8003768:	40020488 	.word	0x40020488
 800376c:	400204a0 	.word	0x400204a0
 8003770:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1c8      	bne.n	8003714 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4b83      	ldr	r3, [pc, #524]	; (800399c <HAL_DMA_Init+0x420>)
 800378e:	4013      	ands	r3, r2
 8003790:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800379a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d107      	bne.n	80037d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	4313      	orrs	r3, r2
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80037d8:	4b71      	ldr	r3, [pc, #452]	; (80039a0 <HAL_DMA_Init+0x424>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b71      	ldr	r3, [pc, #452]	; (80039a4 <HAL_DMA_Init+0x428>)
 80037de:	4013      	ands	r3, r2
 80037e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037e4:	d328      	bcc.n	8003838 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b28      	cmp	r3, #40	; 0x28
 80037ec:	d903      	bls.n	80037f6 <HAL_DMA_Init+0x27a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b2e      	cmp	r3, #46	; 0x2e
 80037f4:	d917      	bls.n	8003826 <HAL_DMA_Init+0x2aa>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b3e      	cmp	r3, #62	; 0x3e
 80037fc:	d903      	bls.n	8003806 <HAL_DMA_Init+0x28a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b42      	cmp	r3, #66	; 0x42
 8003804:	d90f      	bls.n	8003826 <HAL_DMA_Init+0x2aa>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b46      	cmp	r3, #70	; 0x46
 800380c:	d903      	bls.n	8003816 <HAL_DMA_Init+0x29a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b48      	cmp	r3, #72	; 0x48
 8003814:	d907      	bls.n	8003826 <HAL_DMA_Init+0x2aa>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b4e      	cmp	r3, #78	; 0x4e
 800381c:	d905      	bls.n	800382a <HAL_DMA_Init+0x2ae>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b52      	cmp	r3, #82	; 0x52
 8003824:	d801      	bhi.n	800382a <HAL_DMA_Init+0x2ae>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_DMA_Init+0x2b0>
 800382a:	2300      	movs	r3, #0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003836:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f023 0307 	bic.w	r3, r3, #7
 800384e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	2b04      	cmp	r3, #4
 8003860:	d117      	bne.n	8003892 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00e      	beq.n	8003892 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f001 f9b9 	bl	8004bec <DMA_CheckFifoParam>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e197      	b.n	8003bc2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f001 f8f4 	bl	8004a88 <DMA_CalcBaseAndBitshift>
 80038a0:	4603      	mov	r3, r0
 80038a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	223f      	movs	r2, #63	; 0x3f
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	e0cd      	b.n	8003a52 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a3b      	ldr	r2, [pc, #236]	; (80039a8 <HAL_DMA_Init+0x42c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <HAL_DMA_Init+0x38a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a39      	ldr	r2, [pc, #228]	; (80039ac <HAL_DMA_Init+0x430>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01d      	beq.n	8003906 <HAL_DMA_Init+0x38a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a38      	ldr	r2, [pc, #224]	; (80039b0 <HAL_DMA_Init+0x434>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d018      	beq.n	8003906 <HAL_DMA_Init+0x38a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a36      	ldr	r2, [pc, #216]	; (80039b4 <HAL_DMA_Init+0x438>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_DMA_Init+0x38a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a35      	ldr	r2, [pc, #212]	; (80039b8 <HAL_DMA_Init+0x43c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_DMA_Init+0x38a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a33      	ldr	r2, [pc, #204]	; (80039bc <HAL_DMA_Init+0x440>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_DMA_Init+0x38a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a32      	ldr	r2, [pc, #200]	; (80039c0 <HAL_DMA_Init+0x444>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_DMA_Init+0x38a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a30      	ldr	r2, [pc, #192]	; (80039c4 <HAL_DMA_Init+0x448>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_DMA_Init+0x38e>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_DMA_Init+0x390>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8097 	beq.w	8003a40 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a24      	ldr	r2, [pc, #144]	; (80039a8 <HAL_DMA_Init+0x42c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d021      	beq.n	8003960 <HAL_DMA_Init+0x3e4>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a22      	ldr	r2, [pc, #136]	; (80039ac <HAL_DMA_Init+0x430>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01c      	beq.n	8003960 <HAL_DMA_Init+0x3e4>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <HAL_DMA_Init+0x434>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d017      	beq.n	8003960 <HAL_DMA_Init+0x3e4>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <HAL_DMA_Init+0x438>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d012      	beq.n	8003960 <HAL_DMA_Init+0x3e4>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <HAL_DMA_Init+0x43c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00d      	beq.n	8003960 <HAL_DMA_Init+0x3e4>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <HAL_DMA_Init+0x440>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d008      	beq.n	8003960 <HAL_DMA_Init+0x3e4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <HAL_DMA_Init+0x444>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d003      	beq.n	8003960 <HAL_DMA_Init+0x3e4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a19      	ldr	r2, [pc, #100]	; (80039c4 <HAL_DMA_Init+0x448>)
 800395e:	4293      	cmp	r3, r2
 8003960:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_DMA_Init+0x44c>)
 800397e:	4013      	ands	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b40      	cmp	r3, #64	; 0x40
 8003988:	d020      	beq.n	80039cc <HAL_DMA_Init+0x450>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b80      	cmp	r3, #128	; 0x80
 8003990:	d102      	bne.n	8003998 <HAL_DMA_Init+0x41c>
 8003992:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003996:	e01a      	b.n	80039ce <HAL_DMA_Init+0x452>
 8003998:	2300      	movs	r3, #0
 800399a:	e018      	b.n	80039ce <HAL_DMA_Init+0x452>
 800399c:	fe10803f 	.word	0xfe10803f
 80039a0:	5c001000 	.word	0x5c001000
 80039a4:	ffff0000 	.word	0xffff0000
 80039a8:	58025408 	.word	0x58025408
 80039ac:	5802541c 	.word	0x5802541c
 80039b0:	58025430 	.word	0x58025430
 80039b4:	58025444 	.word	0x58025444
 80039b8:	58025458 	.word	0x58025458
 80039bc:	5802546c 	.word	0x5802546c
 80039c0:	58025480 	.word	0x58025480
 80039c4:	58025494 	.word	0x58025494
 80039c8:	fffe000f 	.word	0xfffe000f
 80039cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b6e      	ldr	r3, [pc, #440]	; (8003bcc <HAL_DMA_Init+0x650>)
 8003a14:	4413      	add	r3, r2
 8003a16:	4a6e      	ldr	r2, [pc, #440]	; (8003bd0 <HAL_DMA_Init+0x654>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	009a      	lsls	r2, r3, #2
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f001 f82f 	bl	8004a88 <DMA_CalcBaseAndBitshift>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	2201      	movs	r2, #1
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	e008      	b.n	8003a52 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2240      	movs	r2, #64	; 0x40
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2203      	movs	r2, #3
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0b7      	b.n	8003bc2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5f      	ldr	r2, [pc, #380]	; (8003bd4 <HAL_DMA_Init+0x658>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d072      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a5d      	ldr	r2, [pc, #372]	; (8003bd8 <HAL_DMA_Init+0x65c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d06d      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a5c      	ldr	r2, [pc, #368]	; (8003bdc <HAL_DMA_Init+0x660>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d068      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5a      	ldr	r2, [pc, #360]	; (8003be0 <HAL_DMA_Init+0x664>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d063      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a59      	ldr	r2, [pc, #356]	; (8003be4 <HAL_DMA_Init+0x668>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d05e      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a57      	ldr	r2, [pc, #348]	; (8003be8 <HAL_DMA_Init+0x66c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d059      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a56      	ldr	r2, [pc, #344]	; (8003bec <HAL_DMA_Init+0x670>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d054      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a54      	ldr	r2, [pc, #336]	; (8003bf0 <HAL_DMA_Init+0x674>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d04f      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a53      	ldr	r2, [pc, #332]	; (8003bf4 <HAL_DMA_Init+0x678>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d04a      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a51      	ldr	r2, [pc, #324]	; (8003bf8 <HAL_DMA_Init+0x67c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d045      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a50      	ldr	r2, [pc, #320]	; (8003bfc <HAL_DMA_Init+0x680>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d040      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a4e      	ldr	r2, [pc, #312]	; (8003c00 <HAL_DMA_Init+0x684>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d03b      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a4d      	ldr	r2, [pc, #308]	; (8003c04 <HAL_DMA_Init+0x688>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d036      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a4b      	ldr	r2, [pc, #300]	; (8003c08 <HAL_DMA_Init+0x68c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d031      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <HAL_DMA_Init+0x690>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d02c      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a48      	ldr	r2, [pc, #288]	; (8003c10 <HAL_DMA_Init+0x694>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d027      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a47      	ldr	r2, [pc, #284]	; (8003c14 <HAL_DMA_Init+0x698>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d022      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a45      	ldr	r2, [pc, #276]	; (8003c18 <HAL_DMA_Init+0x69c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01d      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a44      	ldr	r2, [pc, #272]	; (8003c1c <HAL_DMA_Init+0x6a0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d018      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a42      	ldr	r2, [pc, #264]	; (8003c20 <HAL_DMA_Init+0x6a4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a41      	ldr	r2, [pc, #260]	; (8003c24 <HAL_DMA_Init+0x6a8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00e      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a3f      	ldr	r2, [pc, #252]	; (8003c28 <HAL_DMA_Init+0x6ac>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a3e      	ldr	r2, [pc, #248]	; (8003c2c <HAL_DMA_Init+0x6b0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_DMA_Init+0x5c6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a3c      	ldr	r2, [pc, #240]	; (8003c30 <HAL_DMA_Init+0x6b4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_DMA_Init+0x5ca>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_DMA_Init+0x5cc>
 8003b46:	2300      	movs	r3, #0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d032      	beq.n	8003bb2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f001 f8c9 	bl	8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d102      	bne.n	8003b60 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b74:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d010      	beq.n	8003ba0 <HAL_DMA_Init+0x624>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d80c      	bhi.n	8003ba0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f001 f946 	bl	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	e008      	b.n	8003bb2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	a7fdabf8 	.word	0xa7fdabf8
 8003bd0:	cccccccd 	.word	0xcccccccd
 8003bd4:	40020010 	.word	0x40020010
 8003bd8:	40020028 	.word	0x40020028
 8003bdc:	40020040 	.word	0x40020040
 8003be0:	40020058 	.word	0x40020058
 8003be4:	40020070 	.word	0x40020070
 8003be8:	40020088 	.word	0x40020088
 8003bec:	400200a0 	.word	0x400200a0
 8003bf0:	400200b8 	.word	0x400200b8
 8003bf4:	40020410 	.word	0x40020410
 8003bf8:	40020428 	.word	0x40020428
 8003bfc:	40020440 	.word	0x40020440
 8003c00:	40020458 	.word	0x40020458
 8003c04:	40020470 	.word	0x40020470
 8003c08:	40020488 	.word	0x40020488
 8003c0c:	400204a0 	.word	0x400204a0
 8003c10:	400204b8 	.word	0x400204b8
 8003c14:	58025408 	.word	0x58025408
 8003c18:	5802541c 	.word	0x5802541c
 8003c1c:	58025430 	.word	0x58025430
 8003c20:	58025444 	.word	0x58025444
 8003c24:	58025458 	.word	0x58025458
 8003c28:	5802546c 	.word	0x5802546c
 8003c2c:	58025480 	.word	0x58025480
 8003c30:	58025494 	.word	0x58025494

08003c34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c40:	4b67      	ldr	r3, [pc, #412]	; (8003de0 <HAL_DMA_IRQHandler+0x1ac>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a67      	ldr	r2, [pc, #412]	; (8003de4 <HAL_DMA_IRQHandler+0x1b0>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0a9b      	lsrs	r3, r3, #10
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5f      	ldr	r2, [pc, #380]	; (8003de8 <HAL_DMA_IRQHandler+0x1b4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d04a      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a5d      	ldr	r2, [pc, #372]	; (8003dec <HAL_DMA_IRQHandler+0x1b8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d045      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a5c      	ldr	r2, [pc, #368]	; (8003df0 <HAL_DMA_IRQHandler+0x1bc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d040      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a5a      	ldr	r2, [pc, #360]	; (8003df4 <HAL_DMA_IRQHandler+0x1c0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d03b      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a59      	ldr	r2, [pc, #356]	; (8003df8 <HAL_DMA_IRQHandler+0x1c4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d036      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a57      	ldr	r2, [pc, #348]	; (8003dfc <HAL_DMA_IRQHandler+0x1c8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d031      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a56      	ldr	r2, [pc, #344]	; (8003e00 <HAL_DMA_IRQHandler+0x1cc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d02c      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a54      	ldr	r2, [pc, #336]	; (8003e04 <HAL_DMA_IRQHandler+0x1d0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d027      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a53      	ldr	r2, [pc, #332]	; (8003e08 <HAL_DMA_IRQHandler+0x1d4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a51      	ldr	r2, [pc, #324]	; (8003e0c <HAL_DMA_IRQHandler+0x1d8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a50      	ldr	r2, [pc, #320]	; (8003e10 <HAL_DMA_IRQHandler+0x1dc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a4e      	ldr	r2, [pc, #312]	; (8003e14 <HAL_DMA_IRQHandler+0x1e0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a4d      	ldr	r2, [pc, #308]	; (8003e18 <HAL_DMA_IRQHandler+0x1e4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a4b      	ldr	r2, [pc, #300]	; (8003e1c <HAL_DMA_IRQHandler+0x1e8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4a      	ldr	r2, [pc, #296]	; (8003e20 <HAL_DMA_IRQHandler+0x1ec>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xd2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a48      	ldr	r2, [pc, #288]	; (8003e24 <HAL_DMA_IRQHandler+0x1f0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d101      	bne.n	8003d0a <HAL_DMA_IRQHandler+0xd6>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <HAL_DMA_IRQHandler+0xd8>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 842b 	beq.w	8004568 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80a2 	beq.w	8003e6c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a2e      	ldr	r2, [pc, #184]	; (8003de8 <HAL_DMA_IRQHandler+0x1b4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d04a      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2d      	ldr	r2, [pc, #180]	; (8003dec <HAL_DMA_IRQHandler+0x1b8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d045      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2b      	ldr	r2, [pc, #172]	; (8003df0 <HAL_DMA_IRQHandler+0x1bc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d040      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2a      	ldr	r2, [pc, #168]	; (8003df4 <HAL_DMA_IRQHandler+0x1c0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d03b      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a28      	ldr	r2, [pc, #160]	; (8003df8 <HAL_DMA_IRQHandler+0x1c4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d036      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <HAL_DMA_IRQHandler+0x1c8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d031      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <HAL_DMA_IRQHandler+0x1cc>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02c      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <HAL_DMA_IRQHandler+0x1d0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d027      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <HAL_DMA_IRQHandler+0x1d4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d022      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <HAL_DMA_IRQHandler+0x1d8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d01d      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_DMA_IRQHandler+0x1dc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d018      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_DMA_IRQHandler+0x1e0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_DMA_IRQHandler+0x1e4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00e      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <HAL_DMA_IRQHandler+0x1e8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <HAL_DMA_IRQHandler+0x1ec>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x194>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <HAL_DMA_IRQHandler+0x1f0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d12f      	bne.n	8003e28 <HAL_DMA_IRQHandler+0x1f4>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	e02e      	b.n	8003e3c <HAL_DMA_IRQHandler+0x208>
 8003dde:	bf00      	nop
 8003de0:	24000000 	.word	0x24000000
 8003de4:	1b4e81b5 	.word	0x1b4e81b5
 8003de8:	40020010 	.word	0x40020010
 8003dec:	40020028 	.word	0x40020028
 8003df0:	40020040 	.word	0x40020040
 8003df4:	40020058 	.word	0x40020058
 8003df8:	40020070 	.word	0x40020070
 8003dfc:	40020088 	.word	0x40020088
 8003e00:	400200a0 	.word	0x400200a0
 8003e04:	400200b8 	.word	0x400200b8
 8003e08:	40020410 	.word	0x40020410
 8003e0c:	40020428 	.word	0x40020428
 8003e10:	40020440 	.word	0x40020440
 8003e14:	40020458 	.word	0x40020458
 8003e18:	40020470 	.word	0x40020470
 8003e1c:	40020488 	.word	0x40020488
 8003e20:	400204a0 	.word	0x400204a0
 8003e24:	400204b8 	.word	0x400204b8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	bf14      	ite	ne
 8003e36:	2301      	movne	r3, #1
 8003e38:	2300      	moveq	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d015      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0204 	bic.w	r2, r2, #4
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2208      	movs	r2, #8
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d06e      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a69      	ldr	r2, [pc, #420]	; (800402c <HAL_DMA_IRQHandler+0x3f8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d04a      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a67      	ldr	r2, [pc, #412]	; (8004030 <HAL_DMA_IRQHandler+0x3fc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d045      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a66      	ldr	r2, [pc, #408]	; (8004034 <HAL_DMA_IRQHandler+0x400>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d040      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a64      	ldr	r2, [pc, #400]	; (8004038 <HAL_DMA_IRQHandler+0x404>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d03b      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a63      	ldr	r2, [pc, #396]	; (800403c <HAL_DMA_IRQHandler+0x408>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d036      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a61      	ldr	r2, [pc, #388]	; (8004040 <HAL_DMA_IRQHandler+0x40c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d031      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a60      	ldr	r2, [pc, #384]	; (8004044 <HAL_DMA_IRQHandler+0x410>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d02c      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a5e      	ldr	r2, [pc, #376]	; (8004048 <HAL_DMA_IRQHandler+0x414>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d027      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a5d      	ldr	r2, [pc, #372]	; (800404c <HAL_DMA_IRQHandler+0x418>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d022      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a5b      	ldr	r2, [pc, #364]	; (8004050 <HAL_DMA_IRQHandler+0x41c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01d      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a5a      	ldr	r2, [pc, #360]	; (8004054 <HAL_DMA_IRQHandler+0x420>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a58      	ldr	r2, [pc, #352]	; (8004058 <HAL_DMA_IRQHandler+0x424>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a57      	ldr	r2, [pc, #348]	; (800405c <HAL_DMA_IRQHandler+0x428>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a55      	ldr	r2, [pc, #340]	; (8004060 <HAL_DMA_IRQHandler+0x42c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a54      	ldr	r2, [pc, #336]	; (8004064 <HAL_DMA_IRQHandler+0x430>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x2ee>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a52      	ldr	r2, [pc, #328]	; (8004068 <HAL_DMA_IRQHandler+0x434>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10a      	bne.n	8003f38 <HAL_DMA_IRQHandler+0x304>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e003      	b.n	8003f40 <HAL_DMA_IRQHandler+0x30c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00d      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	f043 0202 	orr.w	r2, r3, #2
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2204      	movs	r2, #4
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 808f 	beq.w	8004094 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2c      	ldr	r2, [pc, #176]	; (800402c <HAL_DMA_IRQHandler+0x3f8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d04a      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2a      	ldr	r2, [pc, #168]	; (8004030 <HAL_DMA_IRQHandler+0x3fc>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d045      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a29      	ldr	r2, [pc, #164]	; (8004034 <HAL_DMA_IRQHandler+0x400>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d040      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a27      	ldr	r2, [pc, #156]	; (8004038 <HAL_DMA_IRQHandler+0x404>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d03b      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a26      	ldr	r2, [pc, #152]	; (800403c <HAL_DMA_IRQHandler+0x408>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d036      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a24      	ldr	r2, [pc, #144]	; (8004040 <HAL_DMA_IRQHandler+0x40c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d031      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a23      	ldr	r2, [pc, #140]	; (8004044 <HAL_DMA_IRQHandler+0x410>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d02c      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a21      	ldr	r2, [pc, #132]	; (8004048 <HAL_DMA_IRQHandler+0x414>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d027      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a20      	ldr	r2, [pc, #128]	; (800404c <HAL_DMA_IRQHandler+0x418>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d022      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <HAL_DMA_IRQHandler+0x41c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d01d      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1d      	ldr	r2, [pc, #116]	; (8004054 <HAL_DMA_IRQHandler+0x420>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d018      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_DMA_IRQHandler+0x424>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1a      	ldr	r2, [pc, #104]	; (800405c <HAL_DMA_IRQHandler+0x428>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00e      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a18      	ldr	r2, [pc, #96]	; (8004060 <HAL_DMA_IRQHandler+0x42c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d009      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a17      	ldr	r2, [pc, #92]	; (8004064 <HAL_DMA_IRQHandler+0x430>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d004      	beq.n	8004016 <HAL_DMA_IRQHandler+0x3e2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a15      	ldr	r2, [pc, #84]	; (8004068 <HAL_DMA_IRQHandler+0x434>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d12a      	bne.n	800406c <HAL_DMA_IRQHandler+0x438>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	e023      	b.n	8004074 <HAL_DMA_IRQHandler+0x440>
 800402c:	40020010 	.word	0x40020010
 8004030:	40020028 	.word	0x40020028
 8004034:	40020040 	.word	0x40020040
 8004038:	40020058 	.word	0x40020058
 800403c:	40020070 	.word	0x40020070
 8004040:	40020088 	.word	0x40020088
 8004044:	400200a0 	.word	0x400200a0
 8004048:	400200b8 	.word	0x400200b8
 800404c:	40020410 	.word	0x40020410
 8004050:	40020428 	.word	0x40020428
 8004054:	40020440 	.word	0x40020440
 8004058:	40020458 	.word	0x40020458
 800405c:	40020470 	.word	0x40020470
 8004060:	40020488 	.word	0x40020488
 8004064:	400204a0 	.word	0x400204a0
 8004068:	400204b8 	.word	0x400204b8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00d      	beq.n	8004094 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2204      	movs	r2, #4
 8004082:	409a      	lsls	r2, r3
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	f043 0204 	orr.w	r2, r3, #4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2210      	movs	r2, #16
 800409e:	409a      	lsls	r2, r3
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80a6 	beq.w	80041f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a85      	ldr	r2, [pc, #532]	; (80042c4 <HAL_DMA_IRQHandler+0x690>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d04a      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a83      	ldr	r2, [pc, #524]	; (80042c8 <HAL_DMA_IRQHandler+0x694>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d045      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a82      	ldr	r2, [pc, #520]	; (80042cc <HAL_DMA_IRQHandler+0x698>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d040      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a80      	ldr	r2, [pc, #512]	; (80042d0 <HAL_DMA_IRQHandler+0x69c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d03b      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a7f      	ldr	r2, [pc, #508]	; (80042d4 <HAL_DMA_IRQHandler+0x6a0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d036      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a7d      	ldr	r2, [pc, #500]	; (80042d8 <HAL_DMA_IRQHandler+0x6a4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d031      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7c      	ldr	r2, [pc, #496]	; (80042dc <HAL_DMA_IRQHandler+0x6a8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d02c      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7a      	ldr	r2, [pc, #488]	; (80042e0 <HAL_DMA_IRQHandler+0x6ac>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d027      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a79      	ldr	r2, [pc, #484]	; (80042e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d022      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a77      	ldr	r2, [pc, #476]	; (80042e8 <HAL_DMA_IRQHandler+0x6b4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01d      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a76      	ldr	r2, [pc, #472]	; (80042ec <HAL_DMA_IRQHandler+0x6b8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d018      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a74      	ldr	r2, [pc, #464]	; (80042f0 <HAL_DMA_IRQHandler+0x6bc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a73      	ldr	r2, [pc, #460]	; (80042f4 <HAL_DMA_IRQHandler+0x6c0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a71      	ldr	r2, [pc, #452]	; (80042f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a70      	ldr	r2, [pc, #448]	; (80042fc <HAL_DMA_IRQHandler+0x6c8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_DMA_IRQHandler+0x516>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6e      	ldr	r2, [pc, #440]	; (8004300 <HAL_DMA_IRQHandler+0x6cc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10a      	bne.n	8004160 <HAL_DMA_IRQHandler+0x52c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e009      	b.n	8004174 <HAL_DMA_IRQHandler+0x540>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d03e      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2210      	movs	r2, #16
 8004182:	409a      	lsls	r2, r3
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d018      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d108      	bne.n	80041b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d024      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
 80041b4:	e01f      	b.n	80041f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01b      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
 80041c6:	e016      	b.n	80041f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d107      	bne.n	80041e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0208 	bic.w	r2, r2, #8
 80041e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	2220      	movs	r2, #32
 8004200:	409a      	lsls	r2, r3
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8110 	beq.w	800442c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a2c      	ldr	r2, [pc, #176]	; (80042c4 <HAL_DMA_IRQHandler+0x690>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d04a      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <HAL_DMA_IRQHandler+0x694>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d045      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a29      	ldr	r2, [pc, #164]	; (80042cc <HAL_DMA_IRQHandler+0x698>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d040      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a28      	ldr	r2, [pc, #160]	; (80042d0 <HAL_DMA_IRQHandler+0x69c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d03b      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a26      	ldr	r2, [pc, #152]	; (80042d4 <HAL_DMA_IRQHandler+0x6a0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d036      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a25      	ldr	r2, [pc, #148]	; (80042d8 <HAL_DMA_IRQHandler+0x6a4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d031      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a23      	ldr	r2, [pc, #140]	; (80042dc <HAL_DMA_IRQHandler+0x6a8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d02c      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <HAL_DMA_IRQHandler+0x6ac>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d027      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a20      	ldr	r2, [pc, #128]	; (80042e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d022      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <HAL_DMA_IRQHandler+0x6b4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d01d      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1d      	ldr	r2, [pc, #116]	; (80042ec <HAL_DMA_IRQHandler+0x6b8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d018      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1c      	ldr	r2, [pc, #112]	; (80042f0 <HAL_DMA_IRQHandler+0x6bc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d013      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <HAL_DMA_IRQHandler+0x6c0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00e      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a17      	ldr	r2, [pc, #92]	; (80042fc <HAL_DMA_IRQHandler+0x6c8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_DMA_IRQHandler+0x678>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a16      	ldr	r2, [pc, #88]	; (8004300 <HAL_DMA_IRQHandler+0x6cc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d12b      	bne.n	8004304 <HAL_DMA_IRQHandler+0x6d0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bf14      	ite	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	2300      	moveq	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	e02a      	b.n	8004318 <HAL_DMA_IRQHandler+0x6e4>
 80042c2:	bf00      	nop
 80042c4:	40020010 	.word	0x40020010
 80042c8:	40020028 	.word	0x40020028
 80042cc:	40020040 	.word	0x40020040
 80042d0:	40020058 	.word	0x40020058
 80042d4:	40020070 	.word	0x40020070
 80042d8:	40020088 	.word	0x40020088
 80042dc:	400200a0 	.word	0x400200a0
 80042e0:	400200b8 	.word	0x400200b8
 80042e4:	40020410 	.word	0x40020410
 80042e8:	40020428 	.word	0x40020428
 80042ec:	40020440 	.word	0x40020440
 80042f0:	40020458 	.word	0x40020458
 80042f4:	40020470 	.word	0x40020470
 80042f8:	40020488 	.word	0x40020488
 80042fc:	400204a0 	.word	0x400204a0
 8004300:	400204b8 	.word	0x400204b8
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	bf14      	ite	ne
 8004312:	2301      	movne	r3, #1
 8004314:	2300      	moveq	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8087 	beq.w	800442c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	2220      	movs	r2, #32
 8004328:	409a      	lsls	r2, r3
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b04      	cmp	r3, #4
 8004338:	d139      	bne.n	80043ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0216 	bic.w	r2, r2, #22
 8004348:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004358:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <HAL_DMA_IRQHandler+0x736>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004366:	2b00      	cmp	r3, #0
 8004368:	d007      	beq.n	800437a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0208 	bic.w	r2, r2, #8
 8004378:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	223f      	movs	r2, #63	; 0x3f
 8004384:	409a      	lsls	r2, r3
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 834a 	beq.w	8004a38 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
          }
          return;
 80043ac:	e344      	b.n	8004a38 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d018      	beq.n	80043ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d02c      	beq.n	800442c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
 80043da:	e027      	b.n	800442c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d023      	beq.n	800442c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
 80043ec:	e01e      	b.n	800442c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10f      	bne.n	800441c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0210 	bic.w	r2, r2, #16
 800440a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8306 	beq.w	8004a42 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8088 	beq.w	8004554 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2204      	movs	r2, #4
 8004448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a7a      	ldr	r2, [pc, #488]	; (800463c <HAL_DMA_IRQHandler+0xa08>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d04a      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a79      	ldr	r2, [pc, #484]	; (8004640 <HAL_DMA_IRQHandler+0xa0c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d045      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a77      	ldr	r2, [pc, #476]	; (8004644 <HAL_DMA_IRQHandler+0xa10>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d040      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a76      	ldr	r2, [pc, #472]	; (8004648 <HAL_DMA_IRQHandler+0xa14>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d03b      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a74      	ldr	r2, [pc, #464]	; (800464c <HAL_DMA_IRQHandler+0xa18>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d036      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a73      	ldr	r2, [pc, #460]	; (8004650 <HAL_DMA_IRQHandler+0xa1c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d031      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a71      	ldr	r2, [pc, #452]	; (8004654 <HAL_DMA_IRQHandler+0xa20>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d02c      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a70      	ldr	r2, [pc, #448]	; (8004658 <HAL_DMA_IRQHandler+0xa24>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d027      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6e      	ldr	r2, [pc, #440]	; (800465c <HAL_DMA_IRQHandler+0xa28>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d022      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a6d      	ldr	r2, [pc, #436]	; (8004660 <HAL_DMA_IRQHandler+0xa2c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d01d      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a6b      	ldr	r2, [pc, #428]	; (8004664 <HAL_DMA_IRQHandler+0xa30>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6a      	ldr	r2, [pc, #424]	; (8004668 <HAL_DMA_IRQHandler+0xa34>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a68      	ldr	r2, [pc, #416]	; (800466c <HAL_DMA_IRQHandler+0xa38>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a67      	ldr	r2, [pc, #412]	; (8004670 <HAL_DMA_IRQHandler+0xa3c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a65      	ldr	r2, [pc, #404]	; (8004674 <HAL_DMA_IRQHandler+0xa40>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_DMA_IRQHandler+0x8b8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a64      	ldr	r2, [pc, #400]	; (8004678 <HAL_DMA_IRQHandler+0xa44>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d108      	bne.n	80044fe <HAL_DMA_IRQHandler+0x8ca>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e007      	b.n	800450e <HAL_DMA_IRQHandler+0x8da>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3301      	adds	r3, #1
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	429a      	cmp	r2, r3
 8004518:	d307      	bcc.n	800452a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f2      	bne.n	800450e <HAL_DMA_IRQHandler+0x8da>
 8004528:	e000      	b.n	800452c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800452a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2203      	movs	r2, #3
 8004546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800454a:	e003      	b.n	8004554 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8272 	beq.w	8004a42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
 8004566:	e26c      	b.n	8004a42 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a43      	ldr	r2, [pc, #268]	; (800467c <HAL_DMA_IRQHandler+0xa48>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d022      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a42      	ldr	r2, [pc, #264]	; (8004680 <HAL_DMA_IRQHandler+0xa4c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d01d      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a40      	ldr	r2, [pc, #256]	; (8004684 <HAL_DMA_IRQHandler+0xa50>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d018      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a3f      	ldr	r2, [pc, #252]	; (8004688 <HAL_DMA_IRQHandler+0xa54>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d013      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a3d      	ldr	r2, [pc, #244]	; (800468c <HAL_DMA_IRQHandler+0xa58>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00e      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a3c      	ldr	r2, [pc, #240]	; (8004690 <HAL_DMA_IRQHandler+0xa5c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d009      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a3a      	ldr	r2, [pc, #232]	; (8004694 <HAL_DMA_IRQHandler+0xa60>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x984>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a39      	ldr	r2, [pc, #228]	; (8004698 <HAL_DMA_IRQHandler+0xa64>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d101      	bne.n	80045bc <HAL_DMA_IRQHandler+0x988>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <HAL_DMA_IRQHandler+0x98a>
 80045bc:	2300      	movs	r3, #0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 823f 	beq.w	8004a42 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2204      	movs	r2, #4
 80045d6:	409a      	lsls	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80cd 	beq.w	800477c <HAL_DMA_IRQHandler+0xb48>
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80c7 	beq.w	800477c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2204      	movs	r2, #4
 80045f8:	409a      	lsls	r2, r3
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d049      	beq.n	800469c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 8210 	beq.w	8004a3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004624:	e20a      	b.n	8004a3c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 8206 	beq.w	8004a3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004638:	e200      	b.n	8004a3c <HAL_DMA_IRQHandler+0xe08>
 800463a:	bf00      	nop
 800463c:	40020010 	.word	0x40020010
 8004640:	40020028 	.word	0x40020028
 8004644:	40020040 	.word	0x40020040
 8004648:	40020058 	.word	0x40020058
 800464c:	40020070 	.word	0x40020070
 8004650:	40020088 	.word	0x40020088
 8004654:	400200a0 	.word	0x400200a0
 8004658:	400200b8 	.word	0x400200b8
 800465c:	40020410 	.word	0x40020410
 8004660:	40020428 	.word	0x40020428
 8004664:	40020440 	.word	0x40020440
 8004668:	40020458 	.word	0x40020458
 800466c:	40020470 	.word	0x40020470
 8004670:	40020488 	.word	0x40020488
 8004674:	400204a0 	.word	0x400204a0
 8004678:	400204b8 	.word	0x400204b8
 800467c:	58025408 	.word	0x58025408
 8004680:	5802541c 	.word	0x5802541c
 8004684:	58025430 	.word	0x58025430
 8004688:	58025444 	.word	0x58025444
 800468c:	58025458 	.word	0x58025458
 8004690:	5802546c 	.word	0x5802546c
 8004694:	58025480 	.word	0x58025480
 8004698:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d160      	bne.n	8004768 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a8c      	ldr	r2, [pc, #560]	; (80048dc <HAL_DMA_IRQHandler+0xca8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d04a      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a8a      	ldr	r2, [pc, #552]	; (80048e0 <HAL_DMA_IRQHandler+0xcac>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d045      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a89      	ldr	r2, [pc, #548]	; (80048e4 <HAL_DMA_IRQHandler+0xcb0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d040      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a87      	ldr	r2, [pc, #540]	; (80048e8 <HAL_DMA_IRQHandler+0xcb4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d03b      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a86      	ldr	r2, [pc, #536]	; (80048ec <HAL_DMA_IRQHandler+0xcb8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d036      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a84      	ldr	r2, [pc, #528]	; (80048f0 <HAL_DMA_IRQHandler+0xcbc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d031      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a83      	ldr	r2, [pc, #524]	; (80048f4 <HAL_DMA_IRQHandler+0xcc0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d02c      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a81      	ldr	r2, [pc, #516]	; (80048f8 <HAL_DMA_IRQHandler+0xcc4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d027      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a80      	ldr	r2, [pc, #512]	; (80048fc <HAL_DMA_IRQHandler+0xcc8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d022      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a7e      	ldr	r2, [pc, #504]	; (8004900 <HAL_DMA_IRQHandler+0xccc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01d      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a7d      	ldr	r2, [pc, #500]	; (8004904 <HAL_DMA_IRQHandler+0xcd0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d018      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a7b      	ldr	r2, [pc, #492]	; (8004908 <HAL_DMA_IRQHandler+0xcd4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7a      	ldr	r2, [pc, #488]	; (800490c <HAL_DMA_IRQHandler+0xcd8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00e      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a78      	ldr	r2, [pc, #480]	; (8004910 <HAL_DMA_IRQHandler+0xcdc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a77      	ldr	r2, [pc, #476]	; (8004914 <HAL_DMA_IRQHandler+0xce0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_DMA_IRQHandler+0xb12>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a75      	ldr	r2, [pc, #468]	; (8004918 <HAL_DMA_IRQHandler+0xce4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d108      	bne.n	8004758 <HAL_DMA_IRQHandler+0xb24>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0208 	bic.w	r2, r2, #8
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e007      	b.n	8004768 <HAL_DMA_IRQHandler+0xb34>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0204 	bic.w	r2, r2, #4
 8004766:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8165 	beq.w	8004a3c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800477a:	e15f      	b.n	8004a3c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	2202      	movs	r2, #2
 8004786:	409a      	lsls	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80c5 	beq.w	800491c <HAL_DMA_IRQHandler+0xce8>
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80bf 	beq.w	800491c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2202      	movs	r2, #2
 80047a8:	409a      	lsls	r2, r3
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d018      	beq.n	80047ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 813a 	beq.w	8004a40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047d4:	e134      	b.n	8004a40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8130 	beq.w	8004a40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047e8:	e12a      	b.n	8004a40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d168      	bne.n	80048c6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a38      	ldr	r2, [pc, #224]	; (80048dc <HAL_DMA_IRQHandler+0xca8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d04a      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a37      	ldr	r2, [pc, #220]	; (80048e0 <HAL_DMA_IRQHandler+0xcac>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d045      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a35      	ldr	r2, [pc, #212]	; (80048e4 <HAL_DMA_IRQHandler+0xcb0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d040      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a34      	ldr	r2, [pc, #208]	; (80048e8 <HAL_DMA_IRQHandler+0xcb4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d03b      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a32      	ldr	r2, [pc, #200]	; (80048ec <HAL_DMA_IRQHandler+0xcb8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d036      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a31      	ldr	r2, [pc, #196]	; (80048f0 <HAL_DMA_IRQHandler+0xcbc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d031      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a2f      	ldr	r2, [pc, #188]	; (80048f4 <HAL_DMA_IRQHandler+0xcc0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d02c      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a2e      	ldr	r2, [pc, #184]	; (80048f8 <HAL_DMA_IRQHandler+0xcc4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d027      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a2c      	ldr	r2, [pc, #176]	; (80048fc <HAL_DMA_IRQHandler+0xcc8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d022      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a2b      	ldr	r2, [pc, #172]	; (8004900 <HAL_DMA_IRQHandler+0xccc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d01d      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a29      	ldr	r2, [pc, #164]	; (8004904 <HAL_DMA_IRQHandler+0xcd0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d018      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a28      	ldr	r2, [pc, #160]	; (8004908 <HAL_DMA_IRQHandler+0xcd4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a26      	ldr	r2, [pc, #152]	; (800490c <HAL_DMA_IRQHandler+0xcd8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00e      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a25      	ldr	r2, [pc, #148]	; (8004910 <HAL_DMA_IRQHandler+0xcdc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d009      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a23      	ldr	r2, [pc, #140]	; (8004914 <HAL_DMA_IRQHandler+0xce0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_DMA_IRQHandler+0xc60>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a22      	ldr	r2, [pc, #136]	; (8004918 <HAL_DMA_IRQHandler+0xce4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d108      	bne.n	80048a6 <HAL_DMA_IRQHandler+0xc72>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0214 	bic.w	r2, r2, #20
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e007      	b.n	80048b6 <HAL_DMA_IRQHandler+0xc82>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 020a 	bic.w	r2, r2, #10
 80048b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80b8 	beq.w	8004a40 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d8:	e0b2      	b.n	8004a40 <HAL_DMA_IRQHandler+0xe0c>
 80048da:	bf00      	nop
 80048dc:	40020010 	.word	0x40020010
 80048e0:	40020028 	.word	0x40020028
 80048e4:	40020040 	.word	0x40020040
 80048e8:	40020058 	.word	0x40020058
 80048ec:	40020070 	.word	0x40020070
 80048f0:	40020088 	.word	0x40020088
 80048f4:	400200a0 	.word	0x400200a0
 80048f8:	400200b8 	.word	0x400200b8
 80048fc:	40020410 	.word	0x40020410
 8004900:	40020428 	.word	0x40020428
 8004904:	40020440 	.word	0x40020440
 8004908:	40020458 	.word	0x40020458
 800490c:	40020470 	.word	0x40020470
 8004910:	40020488 	.word	0x40020488
 8004914:	400204a0 	.word	0x400204a0
 8004918:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2208      	movs	r2, #8
 8004926:	409a      	lsls	r2, r3
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4013      	ands	r3, r2
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8088 	beq.w	8004a42 <HAL_DMA_IRQHandler+0xe0e>
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8082 	beq.w	8004a42 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a41      	ldr	r2, [pc, #260]	; (8004a48 <HAL_DMA_IRQHandler+0xe14>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d04a      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a3f      	ldr	r2, [pc, #252]	; (8004a4c <HAL_DMA_IRQHandler+0xe18>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d045      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a3e      	ldr	r2, [pc, #248]	; (8004a50 <HAL_DMA_IRQHandler+0xe1c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d040      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a3c      	ldr	r2, [pc, #240]	; (8004a54 <HAL_DMA_IRQHandler+0xe20>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d03b      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a3b      	ldr	r2, [pc, #236]	; (8004a58 <HAL_DMA_IRQHandler+0xe24>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d036      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a39      	ldr	r2, [pc, #228]	; (8004a5c <HAL_DMA_IRQHandler+0xe28>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d031      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a38      	ldr	r2, [pc, #224]	; (8004a60 <HAL_DMA_IRQHandler+0xe2c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d02c      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a36      	ldr	r2, [pc, #216]	; (8004a64 <HAL_DMA_IRQHandler+0xe30>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d027      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a35      	ldr	r2, [pc, #212]	; (8004a68 <HAL_DMA_IRQHandler+0xe34>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d022      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a33      	ldr	r2, [pc, #204]	; (8004a6c <HAL_DMA_IRQHandler+0xe38>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01d      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a32      	ldr	r2, [pc, #200]	; (8004a70 <HAL_DMA_IRQHandler+0xe3c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a30      	ldr	r2, [pc, #192]	; (8004a74 <HAL_DMA_IRQHandler+0xe40>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2f      	ldr	r2, [pc, #188]	; (8004a78 <HAL_DMA_IRQHandler+0xe44>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a2d      	ldr	r2, [pc, #180]	; (8004a7c <HAL_DMA_IRQHandler+0xe48>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2c      	ldr	r2, [pc, #176]	; (8004a80 <HAL_DMA_IRQHandler+0xe4c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_DMA_IRQHandler+0xdaa>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2a      	ldr	r2, [pc, #168]	; (8004a84 <HAL_DMA_IRQHandler+0xe50>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d108      	bne.n	80049f0 <HAL_DMA_IRQHandler+0xdbc>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 021c 	bic.w	r2, r2, #28
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e007      	b.n	8004a00 <HAL_DMA_IRQHandler+0xdcc>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 020e 	bic.w	r2, r2, #14
 80049fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	2201      	movs	r2, #1
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
 8004a36:	e004      	b.n	8004a42 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a38:	bf00      	nop
 8004a3a:	e002      	b.n	8004a42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a3c:	bf00      	nop
 8004a3e:	e000      	b.n	8004a42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a42:	3728      	adds	r7, #40	; 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40020010 	.word	0x40020010
 8004a4c:	40020028 	.word	0x40020028
 8004a50:	40020040 	.word	0x40020040
 8004a54:	40020058 	.word	0x40020058
 8004a58:	40020070 	.word	0x40020070
 8004a5c:	40020088 	.word	0x40020088
 8004a60:	400200a0 	.word	0x400200a0
 8004a64:	400200b8 	.word	0x400200b8
 8004a68:	40020410 	.word	0x40020410
 8004a6c:	40020428 	.word	0x40020428
 8004a70:	40020440 	.word	0x40020440
 8004a74:	40020458 	.word	0x40020458
 8004a78:	40020470 	.word	0x40020470
 8004a7c:	40020488 	.word	0x40020488
 8004a80:	400204a0 	.word	0x400204a0
 8004a84:	400204b8 	.word	0x400204b8

08004a88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a42      	ldr	r2, [pc, #264]	; (8004ba0 <DMA_CalcBaseAndBitshift+0x118>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d04a      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a41      	ldr	r2, [pc, #260]	; (8004ba4 <DMA_CalcBaseAndBitshift+0x11c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d045      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a3f      	ldr	r2, [pc, #252]	; (8004ba8 <DMA_CalcBaseAndBitshift+0x120>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d040      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a3e      	ldr	r2, [pc, #248]	; (8004bac <DMA_CalcBaseAndBitshift+0x124>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d03b      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a3c      	ldr	r2, [pc, #240]	; (8004bb0 <DMA_CalcBaseAndBitshift+0x128>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d036      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a3b      	ldr	r2, [pc, #236]	; (8004bb4 <DMA_CalcBaseAndBitshift+0x12c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d031      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a39      	ldr	r2, [pc, #228]	; (8004bb8 <DMA_CalcBaseAndBitshift+0x130>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d02c      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a38      	ldr	r2, [pc, #224]	; (8004bbc <DMA_CalcBaseAndBitshift+0x134>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d027      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a36      	ldr	r2, [pc, #216]	; (8004bc0 <DMA_CalcBaseAndBitshift+0x138>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d022      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a35      	ldr	r2, [pc, #212]	; (8004bc4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d01d      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a33      	ldr	r2, [pc, #204]	; (8004bc8 <DMA_CalcBaseAndBitshift+0x140>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d018      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a32      	ldr	r2, [pc, #200]	; (8004bcc <DMA_CalcBaseAndBitshift+0x144>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d013      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a30      	ldr	r2, [pc, #192]	; (8004bd0 <DMA_CalcBaseAndBitshift+0x148>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00e      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2f      	ldr	r2, [pc, #188]	; (8004bd4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2d      	ldr	r2, [pc, #180]	; (8004bd8 <DMA_CalcBaseAndBitshift+0x150>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <DMA_CalcBaseAndBitshift+0xa8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2c      	ldr	r2, [pc, #176]	; (8004bdc <DMA_CalcBaseAndBitshift+0x154>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d101      	bne.n	8004b34 <DMA_CalcBaseAndBitshift+0xac>
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <DMA_CalcBaseAndBitshift+0xae>
 8004b34:	2300      	movs	r3, #0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d024      	beq.n	8004b84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	3b10      	subs	r3, #16
 8004b42:	4a27      	ldr	r2, [pc, #156]	; (8004be0 <DMA_CalcBaseAndBitshift+0x158>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	4a24      	ldr	r2, [pc, #144]	; (8004be4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004b54:	5cd3      	ldrb	r3, [r2, r3]
 8004b56:	461a      	mov	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d908      	bls.n	8004b74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	4b1f      	ldr	r3, [pc, #124]	; (8004be8 <DMA_CalcBaseAndBitshift+0x160>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	1d1a      	adds	r2, r3, #4
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	659a      	str	r2, [r3, #88]	; 0x58
 8004b72:	e00d      	b.n	8004b90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <DMA_CalcBaseAndBitshift+0x160>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6593      	str	r3, [r2, #88]	; 0x58
 8004b82:	e005      	b.n	8004b90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	40020010 	.word	0x40020010
 8004ba4:	40020028 	.word	0x40020028
 8004ba8:	40020040 	.word	0x40020040
 8004bac:	40020058 	.word	0x40020058
 8004bb0:	40020070 	.word	0x40020070
 8004bb4:	40020088 	.word	0x40020088
 8004bb8:	400200a0 	.word	0x400200a0
 8004bbc:	400200b8 	.word	0x400200b8
 8004bc0:	40020410 	.word	0x40020410
 8004bc4:	40020428 	.word	0x40020428
 8004bc8:	40020440 	.word	0x40020440
 8004bcc:	40020458 	.word	0x40020458
 8004bd0:	40020470 	.word	0x40020470
 8004bd4:	40020488 	.word	0x40020488
 8004bd8:	400204a0 	.word	0x400204a0
 8004bdc:	400204b8 	.word	0x400204b8
 8004be0:	aaaaaaab 	.word	0xaaaaaaab
 8004be4:	0800bdf8 	.word	0x0800bdf8
 8004be8:	fffffc00 	.word	0xfffffc00

08004bec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d120      	bne.n	8004c42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d858      	bhi.n	8004cba <DMA_CheckFifoParam+0xce>
 8004c08:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <DMA_CheckFifoParam+0x24>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c21 	.word	0x08004c21
 8004c14:	08004c33 	.word	0x08004c33
 8004c18:	08004c21 	.word	0x08004c21
 8004c1c:	08004cbb 	.word	0x08004cbb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d048      	beq.n	8004cbe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c30:	e045      	b.n	8004cbe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c3a:	d142      	bne.n	8004cc2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c40:	e03f      	b.n	8004cc2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4a:	d123      	bne.n	8004c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d838      	bhi.n	8004cc6 <DMA_CheckFifoParam+0xda>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <DMA_CheckFifoParam+0x70>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c6d 	.word	0x08004c6d
 8004c60:	08004c73 	.word	0x08004c73
 8004c64:	08004c6d 	.word	0x08004c6d
 8004c68:	08004c85 	.word	0x08004c85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
        break;
 8004c70:	e030      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d025      	beq.n	8004cca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c82:	e022      	b.n	8004cca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c8c:	d11f      	bne.n	8004cce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c92:	e01c      	b.n	8004cce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d902      	bls.n	8004ca2 <DMA_CheckFifoParam+0xb6>
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d003      	beq.n	8004ca8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ca0:	e018      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ca6:	e015      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00e      	beq.n	8004cd2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8004cb8:	e00b      	b.n	8004cd2 <DMA_CheckFifoParam+0xe6>
        break;
 8004cba:	bf00      	nop
 8004cbc:	e00a      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8004cbe:	bf00      	nop
 8004cc0:	e008      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8004cc2:	bf00      	nop
 8004cc4:	e006      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8004cc6:	bf00      	nop
 8004cc8:	e004      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8004cca:	bf00      	nop
 8004ccc:	e002      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8004cce:	bf00      	nop
 8004cd0:	e000      	b.n	8004cd4 <DMA_CheckFifoParam+0xe8>
    break;
 8004cd2:	bf00      	nop
    }
  }

  return status;
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop

08004ce4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a38      	ldr	r2, [pc, #224]	; (8004dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d022      	beq.n	8004d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a36      	ldr	r2, [pc, #216]	; (8004ddc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01d      	beq.n	8004d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a35      	ldr	r2, [pc, #212]	; (8004de0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d018      	beq.n	8004d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a33      	ldr	r2, [pc, #204]	; (8004de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a32      	ldr	r2, [pc, #200]	; (8004de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00e      	beq.n	8004d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a30      	ldr	r2, [pc, #192]	; (8004dec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d009      	beq.n	8004d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a2f      	ldr	r2, [pc, #188]	; (8004df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d004      	beq.n	8004d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a2d      	ldr	r2, [pc, #180]	; (8004df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d101      	bne.n	8004d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d46:	2300      	movs	r3, #0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01a      	beq.n	8004d82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	3b08      	subs	r3, #8
 8004d54:	4a28      	ldr	r2, [pc, #160]	; (8004df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	461a      	mov	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a24      	ldr	r2, [pc, #144]	; (8004e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	2201      	movs	r2, #1
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d80:	e024      	b.n	8004dcc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	3b10      	subs	r3, #16
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4a1c      	ldr	r2, [pc, #112]	; (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d806      	bhi.n	8004daa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d902      	bls.n	8004daa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3308      	adds	r3, #8
 8004da8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	461a      	mov	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004dbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f003 031f 	and.w	r3, r3, #31
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	58025408 	.word	0x58025408
 8004ddc:	5802541c 	.word	0x5802541c
 8004de0:	58025430 	.word	0x58025430
 8004de4:	58025444 	.word	0x58025444
 8004de8:	58025458 	.word	0x58025458
 8004dec:	5802546c 	.word	0x5802546c
 8004df0:	58025480 	.word	0x58025480
 8004df4:	58025494 	.word	0x58025494
 8004df8:	cccccccd 	.word	0xcccccccd
 8004dfc:	16009600 	.word	0x16009600
 8004e00:	58025880 	.word	0x58025880
 8004e04:	aaaaaaab 	.word	0xaaaaaaab
 8004e08:	400204b8 	.word	0x400204b8
 8004e0c:	4002040f 	.word	0x4002040f
 8004e10:	10008200 	.word	0x10008200
 8004e14:	40020880 	.word	0x40020880

08004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d04a      	beq.n	8004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d847      	bhi.n	8004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a25      	ldr	r2, [pc, #148]	; (8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d022      	beq.n	8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a24      	ldr	r2, [pc, #144]	; (8004ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d01d      	beq.n	8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a22      	ldr	r2, [pc, #136]	; (8004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d018      	beq.n	8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a21      	ldr	r2, [pc, #132]	; (8004edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1f      	ldr	r2, [pc, #124]	; (8004ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00e      	beq.n	8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d009      	beq.n	8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1c      	ldr	r2, [pc, #112]	; (8004ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d101      	bne.n	8004e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	461a      	mov	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ea0:	671a      	str	r2, [r3, #112]	; 0x70
 8004ea2:	e009      	b.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	461a      	mov	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a11      	ldr	r2, [pc, #68]	; (8004efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004eb6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	58025408 	.word	0x58025408
 8004ed4:	5802541c 	.word	0x5802541c
 8004ed8:	58025430 	.word	0x58025430
 8004edc:	58025444 	.word	0x58025444
 8004ee0:	58025458 	.word	0x58025458
 8004ee4:	5802546c 	.word	0x5802546c
 8004ee8:	58025480 	.word	0x58025480
 8004eec:	58025494 	.word	0x58025494
 8004ef0:	1600963f 	.word	0x1600963f
 8004ef4:	58025940 	.word	0x58025940
 8004ef8:	1000823f 	.word	0x1000823f
 8004efc:	40020940 	.word	0x40020940

08004f00 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e0c6      	b.n	80050a0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fc fb8a 	bl	8001634 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2223      	movs	r2, #35	; 0x23
 8004f24:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f26:	4b60      	ldr	r3, [pc, #384]	; (80050a8 <HAL_ETH_Init+0x1a8>)
 8004f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f2c:	4a5e      	ldr	r2, [pc, #376]	; (80050a8 <HAL_ETH_Init+0x1a8>)
 8004f2e:	f043 0302 	orr.w	r3, r3, #2
 8004f32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f36:	4b5c      	ldr	r3, [pc, #368]	; (80050a8 <HAL_ETH_Init+0x1a8>)
 8004f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	7a1b      	ldrb	r3, [r3, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d103      	bne.n	8004f54 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f7fd fa55 	bl	80023fc <HAL_SYSCFG_ETHInterfaceSelect>
 8004f52:	e003      	b.n	8004f5c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004f54:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004f58:	f7fd fa50 	bl	80023fc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f74:	f7fd fa06 	bl	8002384 <HAL_GetTick>
 8004f78:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004f7a:	e00f      	b.n	8004f9c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004f7c:	f7fd fa02 	bl	8002384 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f8a:	d907      	bls.n	8004f9c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2204      	movs	r2, #4
 8004f90:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	22e0      	movs	r2, #224	; 0xe0
 8004f96:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e081      	b.n	80050a0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e6      	bne.n	8004f7c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fac0 	bl	8005534 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004fb4:	f001 fe7a 	bl	8006cac <HAL_RCC_GetHCLKFreq>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4a3c      	ldr	r2, [pc, #240]	; (80050ac <HAL_ETH_Init+0x1ac>)
 8004fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc0:	0c9a      	lsrs	r2, r3, #18
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3a01      	subs	r2, #1
 8004fc8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fa13 	bl	80053f8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004fe8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004fec:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d007      	beq.n	800500a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	22e0      	movs	r2, #224	; 0xe0
 8005004:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e04a      	b.n	80050a0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	f241 1308 	movw	r3, #4360	; 0x1108
 8005012:	4413      	add	r3, r2
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <HAL_ETH_Init+0x1b0>)
 8005018:	4013      	ands	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6952      	ldr	r2, [r2, #20]
 800501e:	0052      	lsls	r2, r2, #1
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	6809      	ldr	r1, [r1, #0]
 8005024:	431a      	orrs	r2, r3
 8005026:	f241 1308 	movw	r3, #4360	; 0x1108
 800502a:	440b      	add	r3, r1
 800502c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fad8 	bl	80055e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fb1c 	bl	8005672 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	3305      	adds	r3, #5
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	021a      	lsls	r2, r3, #8
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	4619      	mov	r1, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	3303      	adds	r3, #3
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	061a      	lsls	r2, r3, #24
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	3302      	adds	r3, #2
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	3301      	adds	r3, #1
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005078:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005086:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005088:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2210      	movs	r2, #16
 8005096:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2210      	movs	r2, #16
 800509c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	58024400 	.word	0x58024400
 80050ac:	431bde83 	.word	0x431bde83
 80050b0:	ffff8001 	.word	0xffff8001

080050b4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80050c6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	791b      	ldrb	r3, [r3, #4]
 80050cc:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80050ce:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	7b1b      	ldrb	r3, [r3, #12]
 80050d4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80050d6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	7b5b      	ldrb	r3, [r3, #13]
 80050dc:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80050de:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	7b9b      	ldrb	r3, [r3, #14]
 80050e4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80050e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	7bdb      	ldrb	r3, [r3, #15]
 80050ec:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80050ee:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	7c12      	ldrb	r2, [r2, #16]
 80050f4:	2a00      	cmp	r2, #0
 80050f6:	d102      	bne.n	80050fe <ETH_SetMACConfig+0x4a>
 80050f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80050fc:	e000      	b.n	8005100 <ETH_SetMACConfig+0x4c>
 80050fe:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005100:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	7c52      	ldrb	r2, [r2, #17]
 8005106:	2a00      	cmp	r2, #0
 8005108:	d102      	bne.n	8005110 <ETH_SetMACConfig+0x5c>
 800510a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800510e:	e000      	b.n	8005112 <ETH_SetMACConfig+0x5e>
 8005110:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005112:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	7c9b      	ldrb	r3, [r3, #18]
 8005118:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800511a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005120:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005126:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	7f1b      	ldrb	r3, [r3, #28]
 800512c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800512e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	7f5b      	ldrb	r3, [r3, #29]
 8005134:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005136:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	7f92      	ldrb	r2, [r2, #30]
 800513c:	2a00      	cmp	r2, #0
 800513e:	d102      	bne.n	8005146 <ETH_SetMACConfig+0x92>
 8005140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005144:	e000      	b.n	8005148 <ETH_SetMACConfig+0x94>
 8005146:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005148:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	7fdb      	ldrb	r3, [r3, #31]
 800514e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005150:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005158:	2a00      	cmp	r2, #0
 800515a:	d102      	bne.n	8005162 <ETH_SetMACConfig+0xae>
 800515c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005160:	e000      	b.n	8005164 <ETH_SetMACConfig+0xb0>
 8005162:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005164:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800516a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005172:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005174:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b56      	ldr	r3, [pc, #344]	; (80052e0 <ETH_SetMACConfig+0x22c>)
 8005186:	4013      	ands	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	68f9      	ldr	r1, [r7, #12]
 800518e:	430b      	orrs	r3, r1
 8005190:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800519e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80051a0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051a8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80051aa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051b2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80051b4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80051bc:	2a00      	cmp	r2, #0
 80051be:	d102      	bne.n	80051c6 <ETH_SetMACConfig+0x112>
 80051c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051c4:	e000      	b.n	80051c8 <ETH_SetMACConfig+0x114>
 80051c6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80051c8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <ETH_SetMACConfig+0x230>)
 80051da:	4013      	ands	r3, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	68f9      	ldr	r1, [r7, #12]
 80051e2:	430b      	orrs	r3, r1
 80051e4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ec:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	4b3a      	ldr	r3, [pc, #232]	; (80052e8 <ETH_SetMACConfig+0x234>)
 80051fe:	4013      	ands	r3, r2
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	68f9      	ldr	r1, [r7, #12]
 8005206:	430b      	orrs	r3, r1
 8005208:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005210:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005216:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800521e:	2a00      	cmp	r2, #0
 8005220:	d101      	bne.n	8005226 <ETH_SetMACConfig+0x172>
 8005222:	2280      	movs	r2, #128	; 0x80
 8005224:	e000      	b.n	8005228 <ETH_SetMACConfig+0x174>
 8005226:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005228:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800523a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800523e:	4013      	ands	r3, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	68f9      	ldr	r1, [r7, #12]
 8005246:	430b      	orrs	r3, r1
 8005248:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005250:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005258:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	f023 0103 	bic.w	r1, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	430a      	orrs	r2, r1
 8005272:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800527e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800529a:	2a00      	cmp	r2, #0
 800529c:	d101      	bne.n	80052a2 <ETH_SetMACConfig+0x1ee>
 800529e:	2240      	movs	r2, #64	; 0x40
 80052a0:	e000      	b.n	80052a4 <ETH_SetMACConfig+0x1f0>
 80052a2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80052a4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80052ac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80052ae:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80052b6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80052c4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	00048083 	.word	0x00048083
 80052e4:	c0f88000 	.word	0xc0f88000
 80052e8:	fffffef0 	.word	0xfffffef0

080052ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	4b38      	ldr	r3, [pc, #224]	; (80053e4 <ETH_SetDMAConfig+0xf8>)
 8005302:	4013      	ands	r3, r2
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	6809      	ldr	r1, [r1, #0]
 800530c:	431a      	orrs	r2, r3
 800530e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005312:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	791b      	ldrb	r3, [r3, #4]
 8005318:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800531e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	7b1b      	ldrb	r3, [r3, #12]
 8005324:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005332:	4413      	add	r3, r2
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b2c      	ldr	r3, [pc, #176]	; (80053e8 <ETH_SetDMAConfig+0xfc>)
 8005338:	4013      	ands	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6811      	ldr	r1, [r2, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	431a      	orrs	r2, r3
 8005342:	f241 0304 	movw	r3, #4100	; 0x1004
 8005346:	440b      	add	r3, r1
 8005348:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	7b5b      	ldrb	r3, [r3, #13]
 800534e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b22      	ldr	r3, [pc, #136]	; (80053ec <ETH_SetDMAConfig+0x100>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6811      	ldr	r1, [r2, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	431a      	orrs	r2, r3
 800536e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005372:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	7d1b      	ldrb	r3, [r3, #20]
 800537c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800537e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	7f5b      	ldrb	r3, [r3, #29]
 8005384:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005392:	4413      	add	r3, r2
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b16      	ldr	r3, [pc, #88]	; (80053f0 <ETH_SetDMAConfig+0x104>)
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6811      	ldr	r1, [r2, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	431a      	orrs	r2, r3
 80053a2:	f241 1304 	movw	r3, #4356	; 0x1104
 80053a6:	440b      	add	r3, r1
 80053a8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	7f1b      	ldrb	r3, [r3, #28]
 80053ae:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	f241 1308 	movw	r3, #4360	; 0x1108
 80053c0:	4413      	add	r3, r2
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <ETH_SetDMAConfig+0x108>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6811      	ldr	r1, [r2, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	f241 1308 	movw	r3, #4360	; 0x1108
 80053d4:	440b      	add	r3, r1
 80053d6:	601a      	str	r2, [r3, #0]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	ffff87fd 	.word	0xffff87fd
 80053e8:	ffff2ffe 	.word	0xffff2ffe
 80053ec:	fffec000 	.word	0xfffec000
 80053f0:	ffc0efef 	.word	0xffc0efef
 80053f4:	7fc0ffff 	.word	0x7fc0ffff

080053f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b0a4      	sub	sp, #144	; 0x90
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005400:	2301      	movs	r3, #1
 8005402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005406:	2300      	movs	r3, #0
 8005408:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800540a:	2300      	movs	r3, #0
 800540c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005410:	2300      	movs	r3, #0
 8005412:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005416:	2301      	movs	r3, #1
 8005418:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005428:	2300      	movs	r3, #0
 800542a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005438:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800543a:	2300      	movs	r3, #0
 800543c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005440:	2300      	movs	r3, #0
 8005442:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005444:	2300      	movs	r3, #0
 8005446:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800544a:	2300      	movs	r3, #0
 800544c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005450:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005454:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005456:	2300      	movs	r3, #0
 8005458:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800545c:	2300      	movs	r3, #0
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005466:	2300      	movs	r3, #0
 8005468:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800546c:	2300      	movs	r3, #0
 800546e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005472:	2300      	movs	r3, #0
 8005474:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005476:	2300      	movs	r3, #0
 8005478:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800547a:	2300      	movs	r3, #0
 800547c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800547e:	2300      	movs	r3, #0
 8005480:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005484:	2300      	movs	r3, #0
 8005486:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005490:	2320      	movs	r3, #32
 8005492:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005496:	2301      	movs	r3, #1
 8005498:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800549c:	2300      	movs	r3, #0
 800549e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80054a2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80054a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054ac:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80054b4:	2302      	movs	r3, #2
 80054b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80054d2:	2300      	movs	r3, #0
 80054d4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80054dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fde6 	bl	80050b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80054ec:	2301      	movs	r3, #1
 80054ee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80054fe:	2300      	movs	r3, #0
 8005500:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005502:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005506:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005508:	2300      	movs	r3, #0
 800550a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800550c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005510:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005518:	f44f 7306 	mov.w	r3, #536	; 0x218
 800551c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800551e:	f107 0308 	add.w	r3, r7, #8
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff fee1 	bl	80052ec <ETH_SetDMAConfig>
}
 800552a:	bf00      	nop
 800552c:	3790      	adds	r7, #144	; 0x90
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005544:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800554c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800554e:	f001 fbad 	bl	8006cac <HAL_RCC_GetHCLKFreq>
 8005552:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4a1e      	ldr	r2, [pc, #120]	; (80055d0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d908      	bls.n	800556e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d804      	bhi.n	800556e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	e027      	b.n	80055be <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d908      	bls.n	8005588 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d204      	bcs.n	8005588 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e01a      	b.n	80055be <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d303      	bcc.n	8005598 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4a12      	ldr	r2, [pc, #72]	; (80055dc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d911      	bls.n	80055bc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4a10      	ldr	r2, [pc, #64]	; (80055dc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d908      	bls.n	80055b2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4a0f      	ldr	r2, [pc, #60]	; (80055e0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d804      	bhi.n	80055b2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e005      	b.n	80055be <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	e000      	b.n	80055be <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80055bc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	01312cff 	.word	0x01312cff
 80055d4:	02160ebf 	.word	0x02160ebf
 80055d8:	03938700 	.word	0x03938700
 80055dc:	05f5e0ff 	.word	0x05f5e0ff
 80055e0:	08f0d17f 	.word	0x08f0d17f

080055e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e01d      	b.n	800562e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68d9      	ldr	r1, [r3, #12]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	4413      	add	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	440b      	add	r3, r1
 8005602:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2200      	movs	r2, #0
 800560e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2200      	movs	r2, #0
 8005614:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2200      	movs	r2, #0
 800561a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	3206      	adds	r2, #6
 8005624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3301      	adds	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b03      	cmp	r3, #3
 8005632:	d9de      	bls.n	80055f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	f241 132c 	movw	r3, #4396	; 0x112c
 8005642:	4413      	add	r3, r2
 8005644:	2203      	movs	r2, #3
 8005646:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68d9      	ldr	r1, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	f241 1314 	movw	r3, #4372	; 0x1114
 8005654:	4413      	add	r3, r2
 8005656:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	e024      	b.n	80056ca <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6919      	ldr	r1, [r3, #16]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4613      	mov	r3, r2
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	4413      	add	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	440b      	add	r3, r1
 8005690:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2200      	movs	r2, #0
 800569c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2200      	movs	r2, #0
 80056a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2200      	movs	r2, #0
 80056a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2200      	movs	r2, #0
 80056ae:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2200      	movs	r2, #0
 80056b4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3310      	adds	r3, #16
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3301      	adds	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d9d7      	bls.n	8005680 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	f241 1330 	movw	r3, #4400	; 0x1130
 80056f6:	4413      	add	r3, r2
 80056f8:	2203      	movs	r2, #3
 80056fa:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6919      	ldr	r1, [r3, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	f241 131c 	movw	r3, #4380	; 0x111c
 8005708:	4413      	add	r3, r2
 800570a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	f241 1328 	movw	r3, #4392	; 0x1128
 800571c:	4413      	add	r3, r2
 800571e:	6019      	str	r1, [r3, #0]
}
 8005720:	bf00      	nop
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800572c:	b480      	push	{r7}
 800572e:	b089      	sub	sp, #36	; 0x24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800573a:	4b89      	ldr	r3, [pc, #548]	; (8005960 <HAL_GPIO_Init+0x234>)
 800573c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800573e:	e194      	b.n	8005a6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	2101      	movs	r1, #1
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	fa01 f303 	lsl.w	r3, r1, r3
 800574c:	4013      	ands	r3, r2
 800574e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8186 	beq.w	8005a64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d00b      	beq.n	8005778 <HAL_GPIO_Init+0x4c>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d007      	beq.n	8005778 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800576c:	2b11      	cmp	r3, #17
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b12      	cmp	r3, #18
 8005776:	d130      	bne.n	80057da <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	2203      	movs	r2, #3
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057ae:	2201      	movs	r2, #1
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	f003 0201 	and.w	r2, r3, #1
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	2203      	movs	r2, #3
 80057e6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ea:	43db      	mvns	r3, r3
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	4013      	ands	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	4313      	orrs	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d003      	beq.n	800581a <HAL_GPIO_Init+0xee>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b12      	cmp	r3, #18
 8005818:	d123      	bne.n	8005862 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	08da      	lsrs	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3208      	adds	r2, #8
 8005822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	220f      	movs	r2, #15
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	43db      	mvns	r3, r3
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	4013      	ands	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4313      	orrs	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	08da      	lsrs	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3208      	adds	r2, #8
 800585c:	69b9      	ldr	r1, [r7, #24]
 800585e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	2203      	movs	r2, #3
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43db      	mvns	r3, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4013      	ands	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f003 0203 	and.w	r2, r3, #3
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4313      	orrs	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80e0 	beq.w	8005a64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058a4:	4b2f      	ldr	r3, [pc, #188]	; (8005964 <HAL_GPIO_Init+0x238>)
 80058a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058aa:	4a2e      	ldr	r2, [pc, #184]	; (8005964 <HAL_GPIO_Init+0x238>)
 80058ac:	f043 0302 	orr.w	r3, r3, #2
 80058b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80058b4:	4b2b      	ldr	r3, [pc, #172]	; (8005964 <HAL_GPIO_Init+0x238>)
 80058b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058c2:	4a29      	ldr	r2, [pc, #164]	; (8005968 <HAL_GPIO_Init+0x23c>)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	089b      	lsrs	r3, r3, #2
 80058c8:	3302      	adds	r3, #2
 80058ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	220f      	movs	r2, #15
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	43db      	mvns	r3, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4013      	ands	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a20      	ldr	r2, [pc, #128]	; (800596c <HAL_GPIO_Init+0x240>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d052      	beq.n	8005994 <HAL_GPIO_Init+0x268>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <HAL_GPIO_Init+0x244>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d031      	beq.n	800595a <HAL_GPIO_Init+0x22e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_GPIO_Init+0x248>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d02b      	beq.n	8005956 <HAL_GPIO_Init+0x22a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <HAL_GPIO_Init+0x24c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d025      	beq.n	8005952 <HAL_GPIO_Init+0x226>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a1c      	ldr	r2, [pc, #112]	; (800597c <HAL_GPIO_Init+0x250>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01f      	beq.n	800594e <HAL_GPIO_Init+0x222>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <HAL_GPIO_Init+0x254>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d019      	beq.n	800594a <HAL_GPIO_Init+0x21e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a1a      	ldr	r2, [pc, #104]	; (8005984 <HAL_GPIO_Init+0x258>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d013      	beq.n	8005946 <HAL_GPIO_Init+0x21a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a19      	ldr	r2, [pc, #100]	; (8005988 <HAL_GPIO_Init+0x25c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00d      	beq.n	8005942 <HAL_GPIO_Init+0x216>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a18      	ldr	r2, [pc, #96]	; (800598c <HAL_GPIO_Init+0x260>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d007      	beq.n	800593e <HAL_GPIO_Init+0x212>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a17      	ldr	r2, [pc, #92]	; (8005990 <HAL_GPIO_Init+0x264>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d101      	bne.n	800593a <HAL_GPIO_Init+0x20e>
 8005936:	2309      	movs	r3, #9
 8005938:	e02d      	b.n	8005996 <HAL_GPIO_Init+0x26a>
 800593a:	230a      	movs	r3, #10
 800593c:	e02b      	b.n	8005996 <HAL_GPIO_Init+0x26a>
 800593e:	2308      	movs	r3, #8
 8005940:	e029      	b.n	8005996 <HAL_GPIO_Init+0x26a>
 8005942:	2307      	movs	r3, #7
 8005944:	e027      	b.n	8005996 <HAL_GPIO_Init+0x26a>
 8005946:	2306      	movs	r3, #6
 8005948:	e025      	b.n	8005996 <HAL_GPIO_Init+0x26a>
 800594a:	2305      	movs	r3, #5
 800594c:	e023      	b.n	8005996 <HAL_GPIO_Init+0x26a>
 800594e:	2304      	movs	r3, #4
 8005950:	e021      	b.n	8005996 <HAL_GPIO_Init+0x26a>
 8005952:	2303      	movs	r3, #3
 8005954:	e01f      	b.n	8005996 <HAL_GPIO_Init+0x26a>
 8005956:	2302      	movs	r3, #2
 8005958:	e01d      	b.n	8005996 <HAL_GPIO_Init+0x26a>
 800595a:	2301      	movs	r3, #1
 800595c:	e01b      	b.n	8005996 <HAL_GPIO_Init+0x26a>
 800595e:	bf00      	nop
 8005960:	58000080 	.word	0x58000080
 8005964:	58024400 	.word	0x58024400
 8005968:	58000400 	.word	0x58000400
 800596c:	58020000 	.word	0x58020000
 8005970:	58020400 	.word	0x58020400
 8005974:	58020800 	.word	0x58020800
 8005978:	58020c00 	.word	0x58020c00
 800597c:	58021000 	.word	0x58021000
 8005980:	58021400 	.word	0x58021400
 8005984:	58021800 	.word	0x58021800
 8005988:	58021c00 	.word	0x58021c00
 800598c:	58022000 	.word	0x58022000
 8005990:	58022400 	.word	0x58022400
 8005994:	2300      	movs	r3, #0
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	f002 0203 	and.w	r2, r2, #3
 800599c:	0092      	lsls	r2, r2, #2
 800599e:	4093      	lsls	r3, r2
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059a6:	4938      	ldr	r1, [pc, #224]	; (8005a88 <HAL_GPIO_Init+0x35c>)
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	089b      	lsrs	r3, r3, #2
 80059ac:	3302      	adds	r3, #2
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	43db      	mvns	r3, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4013      	ands	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	43db      	mvns	r3, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4013      	ands	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	43db      	mvns	r3, r3
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	4013      	ands	r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	4013      	ands	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	3301      	adds	r3, #1
 8005a68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f47f ae63 	bne.w	8005740 <HAL_GPIO_Init+0x14>
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	bf00      	nop
 8005a7e:	3724      	adds	r7, #36	; 0x24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	58000400 	.word	0x58000400

08005a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	807b      	strh	r3, [r7, #2]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a9c:	787b      	ldrb	r3, [r7, #1]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005aa2:	887a      	ldrh	r2, [r7, #2]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005aa8:	e003      	b.n	8005ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005aaa:	887b      	ldrh	r3, [r7, #2]
 8005aac:	041a      	lsls	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	619a      	str	r2, [r3, #24]
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005acc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ad0:	88fb      	ldrh	r3, [r7, #6]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d008      	beq.n	8005aea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 f804 	bl	8005af2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	4603      	mov	r3, r0
 8005afa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0a:	b08f      	sub	sp, #60	; 0x3c
 8005b0c:	af0a      	add	r7, sp, #40	; 0x28
 8005b0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e116      	b.n	8005d48 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7fc fa11 	bl	8001f5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f005 febd 	bl	800b8d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	687e      	ldr	r6, [r7, #4]
 8005b66:	466d      	mov	r5, sp
 8005b68:	f106 0410 	add.w	r4, r6, #16
 8005b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b7c:	1d33      	adds	r3, r6, #4
 8005b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b80:	6838      	ldr	r0, [r7, #0]
 8005b82:	f005 fe3b 	bl	800b7fc <USB_CoreInit>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0d7      	b.n	8005d48 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f005 feab 	bl	800b8fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73fb      	strb	r3, [r7, #15]
 8005ba8:	e04a      	b.n	8005c40 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005baa:	7bfa      	ldrb	r2, [r7, #15]
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	1a9b      	subs	r3, r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	333d      	adds	r3, #61	; 0x3d
 8005bba:	2201      	movs	r2, #1
 8005bbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005bbe:	7bfa      	ldrb	r2, [r7, #15]
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	333c      	adds	r3, #60	; 0x3c
 8005bce:	7bfa      	ldrb	r2, [r7, #15]
 8005bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005bd2:	7bfa      	ldrb	r2, [r7, #15]
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	b298      	uxth	r0, r3
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	1a9b      	subs	r3, r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	3342      	adds	r3, #66	; 0x42
 8005be6:	4602      	mov	r2, r0
 8005be8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005bea:	7bfa      	ldrb	r2, [r7, #15]
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	1a9b      	subs	r3, r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	333f      	adds	r3, #63	; 0x3f
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005bfe:	7bfa      	ldrb	r2, [r7, #15]
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	3344      	adds	r3, #68	; 0x44
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c12:	7bfa      	ldrb	r2, [r7, #15]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	1a9b      	subs	r3, r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	3348      	adds	r3, #72	; 0x48
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c26:	7bfa      	ldrb	r2, [r7, #15]
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	1a9b      	subs	r3, r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	3350      	adds	r3, #80	; 0x50
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
 8005c40:	7bfa      	ldrb	r2, [r7, #15]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d3af      	bcc.n	8005baa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]
 8005c4e:	e044      	b.n	8005cda <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c50:	7bfa      	ldrb	r2, [r7, #15]
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	4613      	mov	r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005c62:	2200      	movs	r2, #0
 8005c64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c66:	7bfa      	ldrb	r2, [r7, #15]
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	1a9b      	subs	r3, r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005c78:	7bfa      	ldrb	r2, [r7, #15]
 8005c7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c7c:	7bfa      	ldrb	r2, [r7, #15]
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005c8e:	2200      	movs	r2, #0
 8005c90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ca8:	7bfa      	ldrb	r2, [r7, #15]
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005cbe:	7bfa      	ldrb	r2, [r7, #15]
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	73fb      	strb	r3, [r7, #15]
 8005cda:	7bfa      	ldrb	r2, [r7, #15]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d3b5      	bcc.n	8005c50 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	687e      	ldr	r6, [r7, #4]
 8005cec:	466d      	mov	r5, sp
 8005cee:	f106 0410 	add.w	r4, r6, #16
 8005cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d02:	1d33      	adds	r3, r6, #4
 8005d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d06:	6838      	ldr	r0, [r7, #0]
 8005d08:	f005 fe22 	bl	800b950 <USB_DevInit>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e014      	b.n	8005d48 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d102      	bne.n	8005d3c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f80a 	bl	8005d50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f005 ffc4 	bl	800bcce <USB_DevDisconnect>

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d7e:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <HAL_PCDEx_ActivateLPM+0x44>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	10000003 	.word	0x10000003

08005d98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005da0:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <HAL_PWREx_ConfigSupply+0x70>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d00a      	beq.n	8005dc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dac:	4b16      	ldr	r3, [pc, #88]	; (8005e08 <HAL_PWREx_ConfigSupply+0x70>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d001      	beq.n	8005dbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e01f      	b.n	8005dfe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e01d      	b.n	8005dfe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dc2:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <HAL_PWREx_ConfigSupply+0x70>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f023 0207 	bic.w	r2, r3, #7
 8005dca:	490f      	ldr	r1, [pc, #60]	; (8005e08 <HAL_PWREx_ConfigSupply+0x70>)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005dd2:	f7fc fad7 	bl	8002384 <HAL_GetTick>
 8005dd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dd8:	e009      	b.n	8005dee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dda:	f7fc fad3 	bl	8002384 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005de8:	d901      	bls.n	8005dee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e007      	b.n	8005dfe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dee:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <HAL_PWREx_ConfigSupply+0x70>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfa:	d1ee      	bne.n	8005dda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	58024800 	.word	0x58024800

08005e0c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005e10:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4a04      	ldr	r2, [pc, #16]	; (8005e28 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e1a:	60d3      	str	r3, [r2, #12]
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	58024800 	.word	0x58024800

08005e2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08c      	sub	sp, #48	; 0x30
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e3ff      	b.n	800663e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 8087 	beq.w	8005f5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e4c:	4b99      	ldr	r3, [pc, #612]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e56:	4b97      	ldr	r3, [pc, #604]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	2b10      	cmp	r3, #16
 8005e60:	d007      	beq.n	8005e72 <HAL_RCC_OscConfig+0x46>
 8005e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e64:	2b18      	cmp	r3, #24
 8005e66:	d110      	bne.n	8005e8a <HAL_RCC_OscConfig+0x5e>
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d10b      	bne.n	8005e8a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e72:	4b90      	ldr	r3, [pc, #576]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d06c      	beq.n	8005f58 <HAL_RCC_OscConfig+0x12c>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d168      	bne.n	8005f58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e3d9      	b.n	800663e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e92:	d106      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x76>
 8005e94:	4b87      	ldr	r3, [pc, #540]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a86      	ldr	r2, [pc, #536]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	e02e      	b.n	8005f00 <HAL_RCC_OscConfig+0xd4>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10c      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x98>
 8005eaa:	4b82      	ldr	r3, [pc, #520]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a81      	ldr	r2, [pc, #516]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	4b7f      	ldr	r3, [pc, #508]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a7e      	ldr	r2, [pc, #504]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e01d      	b.n	8005f00 <HAL_RCC_OscConfig+0xd4>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_RCC_OscConfig+0xbc>
 8005ece:	4b79      	ldr	r3, [pc, #484]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a78      	ldr	r2, [pc, #480]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	4b76      	ldr	r3, [pc, #472]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a75      	ldr	r2, [pc, #468]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	e00b      	b.n	8005f00 <HAL_RCC_OscConfig+0xd4>
 8005ee8:	4b72      	ldr	r3, [pc, #456]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a71      	ldr	r2, [pc, #452]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	4b6f      	ldr	r3, [pc, #444]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a6e      	ldr	r2, [pc, #440]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d013      	beq.n	8005f30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fc fa3c 	bl	8002384 <HAL_GetTick>
 8005f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f10:	f7fc fa38 	bl	8002384 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b64      	cmp	r3, #100	; 0x64
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e38d      	b.n	800663e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f22:	4b64      	ldr	r3, [pc, #400]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f0      	beq.n	8005f10 <HAL_RCC_OscConfig+0xe4>
 8005f2e:	e014      	b.n	8005f5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fc fa28 	bl	8002384 <HAL_GetTick>
 8005f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f38:	f7fc fa24 	bl	8002384 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b64      	cmp	r3, #100	; 0x64
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e379      	b.n	800663e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f4a:	4b5a      	ldr	r3, [pc, #360]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f0      	bne.n	8005f38 <HAL_RCC_OscConfig+0x10c>
 8005f56:	e000      	b.n	8005f5a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80ae 	beq.w	80060c4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f68:	4b52      	ldr	r3, [pc, #328]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f72:	4b50      	ldr	r3, [pc, #320]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <HAL_RCC_OscConfig+0x162>
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	2b18      	cmp	r3, #24
 8005f82:	d13a      	bne.n	8005ffa <HAL_RCC_OscConfig+0x1ce>
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d135      	bne.n	8005ffa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f8e:	4b49      	ldr	r3, [pc, #292]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d005      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x17a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e34b      	b.n	800663e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa6:	f7fc fa1d 	bl	80023e4 <HAL_GetREVID>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d817      	bhi.n	8005fe4 <HAL_RCC_OscConfig+0x1b8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d108      	bne.n	8005fce <HAL_RCC_OscConfig+0x1a2>
 8005fbc:	4b3d      	ldr	r3, [pc, #244]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005fc4:	4a3b      	ldr	r2, [pc, #236]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fca:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fcc:	e07a      	b.n	80060c4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fce:	4b39      	ldr	r3, [pc, #228]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	031b      	lsls	r3, r3, #12
 8005fdc:	4935      	ldr	r1, [pc, #212]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fe2:	e06f      	b.n	80060c4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe4:	4b33      	ldr	r3, [pc, #204]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	061b      	lsls	r3, r3, #24
 8005ff2:	4930      	ldr	r1, [pc, #192]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ff8:	e064      	b.n	80060c4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d045      	beq.n	800608e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006002:	4b2c      	ldr	r3, [pc, #176]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f023 0219 	bic.w	r2, r3, #25
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	4929      	ldr	r1, [pc, #164]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006010:	4313      	orrs	r3, r2
 8006012:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006014:	f7fc f9b6 	bl	8002384 <HAL_GetTick>
 8006018:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800601c:	f7fc f9b2 	bl	8002384 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e307      	b.n	800663e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800602e:	4b21      	ldr	r3, [pc, #132]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f0      	beq.n	800601c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800603a:	f7fc f9d3 	bl	80023e4 <HAL_GetREVID>
 800603e:	4603      	mov	r3, r0
 8006040:	f241 0203 	movw	r2, #4099	; 0x1003
 8006044:	4293      	cmp	r3, r2
 8006046:	d817      	bhi.n	8006078 <HAL_RCC_OscConfig+0x24c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	2b40      	cmp	r3, #64	; 0x40
 800604e:	d108      	bne.n	8006062 <HAL_RCC_OscConfig+0x236>
 8006050:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006058:	4a16      	ldr	r2, [pc, #88]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 800605a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800605e:	6053      	str	r3, [r2, #4]
 8006060:	e030      	b.n	80060c4 <HAL_RCC_OscConfig+0x298>
 8006062:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	031b      	lsls	r3, r3, #12
 8006070:	4910      	ldr	r1, [pc, #64]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006072:	4313      	orrs	r3, r2
 8006074:	604b      	str	r3, [r1, #4]
 8006076:	e025      	b.n	80060c4 <HAL_RCC_OscConfig+0x298>
 8006078:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	061b      	lsls	r3, r3, #24
 8006086:	490b      	ldr	r1, [pc, #44]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006088:	4313      	orrs	r3, r2
 800608a:	604b      	str	r3, [r1, #4]
 800608c:	e01a      	b.n	80060c4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800608e:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a08      	ldr	r2, [pc, #32]	; (80060b4 <HAL_RCC_OscConfig+0x288>)
 8006094:	f023 0301 	bic.w	r3, r3, #1
 8006098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609a:	f7fc f973 	bl	8002384 <HAL_GetTick>
 800609e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060a0:	e00a      	b.n	80060b8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060a2:	f7fc f96f 	bl	8002384 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d903      	bls.n	80060b8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e2c4      	b.n	800663e <HAL_RCC_OscConfig+0x812>
 80060b4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060b8:	4ba4      	ldr	r3, [pc, #656]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1ee      	bne.n	80060a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80a9 	beq.w	8006224 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060d2:	4b9e      	ldr	r3, [pc, #632]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060dc:	4b9b      	ldr	r3, [pc, #620]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d007      	beq.n	80060f8 <HAL_RCC_OscConfig+0x2cc>
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b18      	cmp	r3, #24
 80060ec:	d13a      	bne.n	8006164 <HAL_RCC_OscConfig+0x338>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d135      	bne.n	8006164 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060f8:	4b94      	ldr	r3, [pc, #592]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <HAL_RCC_OscConfig+0x2e4>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	2b80      	cmp	r3, #128	; 0x80
 800610a:	d001      	beq.n	8006110 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e296      	b.n	800663e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006110:	f7fc f968 	bl	80023e4 <HAL_GetREVID>
 8006114:	4603      	mov	r3, r0
 8006116:	f241 0203 	movw	r2, #4099	; 0x1003
 800611a:	4293      	cmp	r3, r2
 800611c:	d817      	bhi.n	800614e <HAL_RCC_OscConfig+0x322>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	2b20      	cmp	r3, #32
 8006124:	d108      	bne.n	8006138 <HAL_RCC_OscConfig+0x30c>
 8006126:	4b89      	ldr	r3, [pc, #548]	; (800634c <HAL_RCC_OscConfig+0x520>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800612e:	4a87      	ldr	r2, [pc, #540]	; (800634c <HAL_RCC_OscConfig+0x520>)
 8006130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006134:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006136:	e075      	b.n	8006224 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006138:	4b84      	ldr	r3, [pc, #528]	; (800634c <HAL_RCC_OscConfig+0x520>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	069b      	lsls	r3, r3, #26
 8006146:	4981      	ldr	r1, [pc, #516]	; (800634c <HAL_RCC_OscConfig+0x520>)
 8006148:	4313      	orrs	r3, r2
 800614a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800614c:	e06a      	b.n	8006224 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800614e:	4b7f      	ldr	r3, [pc, #508]	; (800634c <HAL_RCC_OscConfig+0x520>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	061b      	lsls	r3, r3, #24
 800615c:	497b      	ldr	r1, [pc, #492]	; (800634c <HAL_RCC_OscConfig+0x520>)
 800615e:	4313      	orrs	r3, r2
 8006160:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006162:	e05f      	b.n	8006224 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d042      	beq.n	80061f2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800616c:	4b77      	ldr	r3, [pc, #476]	; (800634c <HAL_RCC_OscConfig+0x520>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a76      	ldr	r2, [pc, #472]	; (800634c <HAL_RCC_OscConfig+0x520>)
 8006172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006178:	f7fc f904 	bl	8002384 <HAL_GetTick>
 800617c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006180:	f7fc f900 	bl	8002384 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e255      	b.n	800663e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006192:	4b6e      	ldr	r3, [pc, #440]	; (800634c <HAL_RCC_OscConfig+0x520>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800619e:	f7fc f921 	bl	80023e4 <HAL_GetREVID>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d817      	bhi.n	80061dc <HAL_RCC_OscConfig+0x3b0>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d108      	bne.n	80061c6 <HAL_RCC_OscConfig+0x39a>
 80061b4:	4b65      	ldr	r3, [pc, #404]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80061bc:	4a63      	ldr	r2, [pc, #396]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80061be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061c2:	6053      	str	r3, [r2, #4]
 80061c4:	e02e      	b.n	8006224 <HAL_RCC_OscConfig+0x3f8>
 80061c6:	4b61      	ldr	r3, [pc, #388]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	069b      	lsls	r3, r3, #26
 80061d4:	495d      	ldr	r1, [pc, #372]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	604b      	str	r3, [r1, #4]
 80061da:	e023      	b.n	8006224 <HAL_RCC_OscConfig+0x3f8>
 80061dc:	4b5b      	ldr	r3, [pc, #364]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	061b      	lsls	r3, r3, #24
 80061ea:	4958      	ldr	r1, [pc, #352]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60cb      	str	r3, [r1, #12]
 80061f0:	e018      	b.n	8006224 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80061f2:	4b56      	ldr	r3, [pc, #344]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a55      	ldr	r2, [pc, #340]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80061f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fe:	f7fc f8c1 	bl	8002384 <HAL_GetTick>
 8006202:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006206:	f7fc f8bd 	bl	8002384 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e212      	b.n	800663e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006218:	4b4c      	ldr	r3, [pc, #304]	; (800634c <HAL_RCC_OscConfig+0x520>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f0      	bne.n	8006206 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	d036      	beq.n	800629e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d019      	beq.n	800626c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006238:	4b44      	ldr	r3, [pc, #272]	; (800634c <HAL_RCC_OscConfig+0x520>)
 800623a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623c:	4a43      	ldr	r2, [pc, #268]	; (800634c <HAL_RCC_OscConfig+0x520>)
 800623e:	f043 0301 	orr.w	r3, r3, #1
 8006242:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006244:	f7fc f89e 	bl	8002384 <HAL_GetTick>
 8006248:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800624c:	f7fc f89a 	bl	8002384 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e1ef      	b.n	800663e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800625e:	4b3b      	ldr	r3, [pc, #236]	; (800634c <HAL_RCC_OscConfig+0x520>)
 8006260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0f0      	beq.n	800624c <HAL_RCC_OscConfig+0x420>
 800626a:	e018      	b.n	800629e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800626c:	4b37      	ldr	r3, [pc, #220]	; (800634c <HAL_RCC_OscConfig+0x520>)
 800626e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006270:	4a36      	ldr	r2, [pc, #216]	; (800634c <HAL_RCC_OscConfig+0x520>)
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006278:	f7fc f884 	bl	8002384 <HAL_GetTick>
 800627c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006280:	f7fc f880 	bl	8002384 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e1d5      	b.n	800663e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006292:	4b2e      	ldr	r3, [pc, #184]	; (800634c <HAL_RCC_OscConfig+0x520>)
 8006294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1f0      	bne.n	8006280 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d036      	beq.n	8006318 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d019      	beq.n	80062e6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062b2:	4b26      	ldr	r3, [pc, #152]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a25      	ldr	r2, [pc, #148]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80062b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062be:	f7fc f861 	bl	8002384 <HAL_GetTick>
 80062c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80062c6:	f7fc f85d 	bl	8002384 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e1b2      	b.n	800663e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062d8:	4b1c      	ldr	r3, [pc, #112]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0f0      	beq.n	80062c6 <HAL_RCC_OscConfig+0x49a>
 80062e4:	e018      	b.n	8006318 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062e6:	4b19      	ldr	r3, [pc, #100]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a18      	ldr	r2, [pc, #96]	; (800634c <HAL_RCC_OscConfig+0x520>)
 80062ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062f2:	f7fc f847 	bl	8002384 <HAL_GetTick>
 80062f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80062fa:	f7fc f843 	bl	8002384 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e198      	b.n	800663e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800630c:	4b0f      	ldr	r3, [pc, #60]	; (800634c <HAL_RCC_OscConfig+0x520>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1f0      	bne.n	80062fa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8085 	beq.w	8006430 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006326:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <HAL_RCC_OscConfig+0x524>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a09      	ldr	r2, [pc, #36]	; (8006350 <HAL_RCC_OscConfig+0x524>)
 800632c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006330:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006332:	f7fc f827 	bl	8002384 <HAL_GetTick>
 8006336:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006338:	e00c      	b.n	8006354 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800633a:	f7fc f823 	bl	8002384 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b64      	cmp	r3, #100	; 0x64
 8006346:	d905      	bls.n	8006354 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e178      	b.n	800663e <HAL_RCC_OscConfig+0x812>
 800634c:	58024400 	.word	0x58024400
 8006350:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006354:	4b96      	ldr	r3, [pc, #600]	; (80065b0 <HAL_RCC_OscConfig+0x784>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0ec      	beq.n	800633a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d106      	bne.n	8006376 <HAL_RCC_OscConfig+0x54a>
 8006368:	4b92      	ldr	r3, [pc, #584]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800636a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636c:	4a91      	ldr	r2, [pc, #580]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	6713      	str	r3, [r2, #112]	; 0x70
 8006374:	e02d      	b.n	80063d2 <HAL_RCC_OscConfig+0x5a6>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10c      	bne.n	8006398 <HAL_RCC_OscConfig+0x56c>
 800637e:	4b8d      	ldr	r3, [pc, #564]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006382:	4a8c      	ldr	r2, [pc, #560]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	6713      	str	r3, [r2, #112]	; 0x70
 800638a:	4b8a      	ldr	r3, [pc, #552]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638e:	4a89      	ldr	r2, [pc, #548]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006390:	f023 0304 	bic.w	r3, r3, #4
 8006394:	6713      	str	r3, [r2, #112]	; 0x70
 8006396:	e01c      	b.n	80063d2 <HAL_RCC_OscConfig+0x5a6>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2b05      	cmp	r3, #5
 800639e:	d10c      	bne.n	80063ba <HAL_RCC_OscConfig+0x58e>
 80063a0:	4b84      	ldr	r3, [pc, #528]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80063a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a4:	4a83      	ldr	r2, [pc, #524]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80063a6:	f043 0304 	orr.w	r3, r3, #4
 80063aa:	6713      	str	r3, [r2, #112]	; 0x70
 80063ac:	4b81      	ldr	r3, [pc, #516]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80063ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b0:	4a80      	ldr	r2, [pc, #512]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80063b2:	f043 0301 	orr.w	r3, r3, #1
 80063b6:	6713      	str	r3, [r2, #112]	; 0x70
 80063b8:	e00b      	b.n	80063d2 <HAL_RCC_OscConfig+0x5a6>
 80063ba:	4b7e      	ldr	r3, [pc, #504]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	4a7d      	ldr	r2, [pc, #500]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	6713      	str	r3, [r2, #112]	; 0x70
 80063c6:	4b7b      	ldr	r3, [pc, #492]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80063c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ca:	4a7a      	ldr	r2, [pc, #488]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80063cc:	f023 0304 	bic.w	r3, r3, #4
 80063d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d015      	beq.n	8006406 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063da:	f7fb ffd3 	bl	8002384 <HAL_GetTick>
 80063de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063e0:	e00a      	b.n	80063f8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063e2:	f7fb ffcf 	bl	8002384 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e122      	b.n	800663e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063f8:	4b6e      	ldr	r3, [pc, #440]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80063fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0ee      	beq.n	80063e2 <HAL_RCC_OscConfig+0x5b6>
 8006404:	e014      	b.n	8006430 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006406:	f7fb ffbd 	bl	8002384 <HAL_GetTick>
 800640a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800640c:	e00a      	b.n	8006424 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800640e:	f7fb ffb9 	bl	8002384 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	f241 3288 	movw	r2, #5000	; 0x1388
 800641c:	4293      	cmp	r3, r2
 800641e:	d901      	bls.n	8006424 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e10c      	b.n	800663e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006424:	4b63      	ldr	r3, [pc, #396]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1ee      	bne.n	800640e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8101 	beq.w	800663c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800643a:	4b5e      	ldr	r3, [pc, #376]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006442:	2b18      	cmp	r3, #24
 8006444:	f000 80bc 	beq.w	80065c0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	2b02      	cmp	r3, #2
 800644e:	f040 8095 	bne.w	800657c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006452:	4b58      	ldr	r3, [pc, #352]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a57      	ldr	r2, [pc, #348]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800645c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645e:	f7fb ff91 	bl	8002384 <HAL_GetTick>
 8006462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006466:	f7fb ff8d 	bl	8002384 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e0e2      	b.n	800663e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006478:	4b4e      	ldr	r3, [pc, #312]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f0      	bne.n	8006466 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006484:	4b4b      	ldr	r3, [pc, #300]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006486:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006488:	4b4b      	ldr	r3, [pc, #300]	; (80065b8 <HAL_RCC_OscConfig+0x78c>)
 800648a:	4013      	ands	r3, r2
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006494:	0112      	lsls	r2, r2, #4
 8006496:	430a      	orrs	r2, r1
 8006498:	4946      	ldr	r1, [pc, #280]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800649a:	4313      	orrs	r3, r2
 800649c:	628b      	str	r3, [r1, #40]	; 0x28
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	3b01      	subs	r3, #1
 80064a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ac:	3b01      	subs	r3, #1
 80064ae:	025b      	lsls	r3, r3, #9
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	3b01      	subs	r3, #1
 80064ba:	041b      	lsls	r3, r3, #16
 80064bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064c0:	431a      	orrs	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	3b01      	subs	r3, #1
 80064c8:	061b      	lsls	r3, r3, #24
 80064ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064ce:	4939      	ldr	r1, [pc, #228]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80064d4:	4b37      	ldr	r3, [pc, #220]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	4a36      	ldr	r2, [pc, #216]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80064da:	f023 0301 	bic.w	r3, r3, #1
 80064de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064e0:	4b34      	ldr	r3, [pc, #208]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80064e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e4:	4b35      	ldr	r3, [pc, #212]	; (80065bc <HAL_RCC_OscConfig+0x790>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064ec:	00d2      	lsls	r2, r2, #3
 80064ee:	4931      	ldr	r1, [pc, #196]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80064f4:	4b2f      	ldr	r3, [pc, #188]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	f023 020c 	bic.w	r2, r3, #12
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	492c      	ldr	r1, [pc, #176]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006502:	4313      	orrs	r3, r2
 8006504:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006506:	4b2b      	ldr	r3, [pc, #172]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650a:	f023 0202 	bic.w	r2, r3, #2
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006512:	4928      	ldr	r1, [pc, #160]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006514:	4313      	orrs	r3, r2
 8006516:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006518:	4b26      	ldr	r3, [pc, #152]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	4a25      	ldr	r2, [pc, #148]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800651e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006524:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	4a22      	ldr	r2, [pc, #136]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800652a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800652e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006530:	4b20      	ldr	r3, [pc, #128]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	4a1f      	ldr	r2, [pc, #124]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800653a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800653c:	4b1d      	ldr	r3, [pc, #116]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	4a1c      	ldr	r2, [pc, #112]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006548:	4b1a      	ldr	r3, [pc, #104]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a19      	ldr	r2, [pc, #100]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800654e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006554:	f7fb ff16 	bl	8002384 <HAL_GetTick>
 8006558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800655c:	f7fb ff12 	bl	8002384 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e067      	b.n	800663e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800656e:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0x730>
 800657a:	e05f      	b.n	800663c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800657c:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0c      	ldr	r2, [pc, #48]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 8006582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006588:	f7fb fefc 	bl	8002384 <HAL_GetTick>
 800658c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006590:	f7fb fef8 	bl	8002384 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e04d      	b.n	800663e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065a2:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <HAL_RCC_OscConfig+0x788>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1f0      	bne.n	8006590 <HAL_RCC_OscConfig+0x764>
 80065ae:	e045      	b.n	800663c <HAL_RCC_OscConfig+0x810>
 80065b0:	58024800 	.word	0x58024800
 80065b4:	58024400 	.word	0x58024400
 80065b8:	fffffc0c 	.word	0xfffffc0c
 80065bc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065c0:	4b21      	ldr	r3, [pc, #132]	; (8006648 <HAL_RCC_OscConfig+0x81c>)
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065c6:	4b20      	ldr	r3, [pc, #128]	; (8006648 <HAL_RCC_OscConfig+0x81c>)
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d031      	beq.n	8006638 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f003 0203 	and.w	r2, r3, #3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065de:	429a      	cmp	r2, r3
 80065e0:	d12a      	bne.n	8006638 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	091b      	lsrs	r3, r3, #4
 80065e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d122      	bne.n	8006638 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065fe:	429a      	cmp	r2, r3
 8006600:	d11a      	bne.n	8006638 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	0a5b      	lsrs	r3, r3, #9
 8006606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006610:	429a      	cmp	r2, r3
 8006612:	d111      	bne.n	8006638 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	0c1b      	lsrs	r3, r3, #16
 8006618:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006622:	429a      	cmp	r2, r3
 8006624:	d108      	bne.n	8006638 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	0e1b      	lsrs	r3, r3, #24
 800662a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006632:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006634:	429a      	cmp	r2, r3
 8006636:	d001      	beq.n	800663c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3730      	adds	r7, #48	; 0x30
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	58024400 	.word	0x58024400

0800664c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e19c      	b.n	800699a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006660:	4b8a      	ldr	r3, [pc, #552]	; (800688c <HAL_RCC_ClockConfig+0x240>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d910      	bls.n	8006690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800666e:	4b87      	ldr	r3, [pc, #540]	; (800688c <HAL_RCC_ClockConfig+0x240>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f023 020f 	bic.w	r2, r3, #15
 8006676:	4985      	ldr	r1, [pc, #532]	; (800688c <HAL_RCC_ClockConfig+0x240>)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	4313      	orrs	r3, r2
 800667c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800667e:	4b83      	ldr	r3, [pc, #524]	; (800688c <HAL_RCC_ClockConfig+0x240>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d001      	beq.n	8006690 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e184      	b.n	800699a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d010      	beq.n	80066be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	4b7b      	ldr	r3, [pc, #492]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d908      	bls.n	80066be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066ac:	4b78      	ldr	r3, [pc, #480]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	4975      	ldr	r1, [pc, #468]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d010      	beq.n	80066ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	4b70      	ldr	r3, [pc, #448]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d908      	bls.n	80066ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066da:	4b6d      	ldr	r3, [pc, #436]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	496a      	ldr	r1, [pc, #424]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0310 	and.w	r3, r3, #16
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d010      	beq.n	800671a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699a      	ldr	r2, [r3, #24]
 80066fc:	4b64      	ldr	r3, [pc, #400]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006704:	429a      	cmp	r2, r3
 8006706:	d908      	bls.n	800671a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006708:	4b61      	ldr	r3, [pc, #388]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	495e      	ldr	r1, [pc, #376]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 8006716:	4313      	orrs	r3, r2
 8006718:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b00      	cmp	r3, #0
 8006724:	d010      	beq.n	8006748 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69da      	ldr	r2, [r3, #28]
 800672a:	4b59      	ldr	r3, [pc, #356]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006732:	429a      	cmp	r2, r3
 8006734:	d908      	bls.n	8006748 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006736:	4b56      	ldr	r3, [pc, #344]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	4953      	ldr	r1, [pc, #332]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 8006744:	4313      	orrs	r3, r2
 8006746:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d010      	beq.n	8006776 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	4b4d      	ldr	r3, [pc, #308]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	f003 030f 	and.w	r3, r3, #15
 8006760:	429a      	cmp	r2, r3
 8006762:	d908      	bls.n	8006776 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006764:	4b4a      	ldr	r3, [pc, #296]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f023 020f 	bic.w	r2, r3, #15
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	4947      	ldr	r1, [pc, #284]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 8006772:	4313      	orrs	r3, r2
 8006774:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d055      	beq.n	800682e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006782:	4b43      	ldr	r3, [pc, #268]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	4940      	ldr	r1, [pc, #256]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 8006790:	4313      	orrs	r3, r2
 8006792:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d107      	bne.n	80067ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800679c:	4b3c      	ldr	r3, [pc, #240]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d121      	bne.n	80067ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0f6      	b.n	800699a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d107      	bne.n	80067c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067b4:	4b36      	ldr	r3, [pc, #216]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d115      	bne.n	80067ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0ea      	b.n	800699a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d107      	bne.n	80067dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067cc:	4b30      	ldr	r3, [pc, #192]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d109      	bne.n	80067ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e0de      	b.n	800699a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067dc:	4b2c      	ldr	r3, [pc, #176]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e0d6      	b.n	800699a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067ec:	4b28      	ldr	r3, [pc, #160]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	f023 0207 	bic.w	r2, r3, #7
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	4925      	ldr	r1, [pc, #148]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067fe:	f7fb fdc1 	bl	8002384 <HAL_GetTick>
 8006802:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006804:	e00a      	b.n	800681c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006806:	f7fb fdbd 	bl	8002384 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	f241 3288 	movw	r2, #5000	; 0x1388
 8006814:	4293      	cmp	r3, r2
 8006816:	d901      	bls.n	800681c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e0be      	b.n	800699a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800681c:	4b1c      	ldr	r3, [pc, #112]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	429a      	cmp	r2, r3
 800682c:	d1eb      	bne.n	8006806 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d010      	beq.n	800685c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	4b14      	ldr	r3, [pc, #80]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	f003 030f 	and.w	r3, r3, #15
 8006846:	429a      	cmp	r2, r3
 8006848:	d208      	bcs.n	800685c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800684a:	4b11      	ldr	r3, [pc, #68]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	f023 020f 	bic.w	r2, r3, #15
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	490e      	ldr	r1, [pc, #56]	; (8006890 <HAL_RCC_ClockConfig+0x244>)
 8006858:	4313      	orrs	r3, r2
 800685a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800685c:	4b0b      	ldr	r3, [pc, #44]	; (800688c <HAL_RCC_ClockConfig+0x240>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d214      	bcs.n	8006894 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800686a:	4b08      	ldr	r3, [pc, #32]	; (800688c <HAL_RCC_ClockConfig+0x240>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f023 020f 	bic.w	r2, r3, #15
 8006872:	4906      	ldr	r1, [pc, #24]	; (800688c <HAL_RCC_ClockConfig+0x240>)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	4313      	orrs	r3, r2
 8006878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800687a:	4b04      	ldr	r3, [pc, #16]	; (800688c <HAL_RCC_ClockConfig+0x240>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d005      	beq.n	8006894 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e086      	b.n	800699a <HAL_RCC_ClockConfig+0x34e>
 800688c:	52002000 	.word	0x52002000
 8006890:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d010      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	4b3f      	ldr	r3, [pc, #252]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d208      	bcs.n	80068c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068b0:	4b3c      	ldr	r3, [pc, #240]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	4939      	ldr	r1, [pc, #228]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d010      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695a      	ldr	r2, [r3, #20]
 80068d2:	4b34      	ldr	r3, [pc, #208]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068da:	429a      	cmp	r2, r3
 80068dc:	d208      	bcs.n	80068f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068de:	4b31      	ldr	r3, [pc, #196]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	492e      	ldr	r1, [pc, #184]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d010      	beq.n	800691e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699a      	ldr	r2, [r3, #24]
 8006900:	4b28      	ldr	r3, [pc, #160]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006908:	429a      	cmp	r2, r3
 800690a:	d208      	bcs.n	800691e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800690c:	4b25      	ldr	r3, [pc, #148]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	4922      	ldr	r1, [pc, #136]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 800691a:	4313      	orrs	r3, r2
 800691c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d010      	beq.n	800694c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69da      	ldr	r2, [r3, #28]
 800692e:	4b1d      	ldr	r3, [pc, #116]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006936:	429a      	cmp	r2, r3
 8006938:	d208      	bcs.n	800694c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800693a:	4b1a      	ldr	r3, [pc, #104]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	4917      	ldr	r1, [pc, #92]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 8006948:	4313      	orrs	r3, r2
 800694a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800694c:	f000 f834 	bl	80069b8 <HAL_RCC_GetSysClockFreq>
 8006950:	4602      	mov	r2, r0
 8006952:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	0a1b      	lsrs	r3, r3, #8
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	4912      	ldr	r1, [pc, #72]	; (80069a8 <HAL_RCC_ClockConfig+0x35c>)
 800695e:	5ccb      	ldrb	r3, [r1, r3]
 8006960:	f003 031f 	and.w	r3, r3, #31
 8006964:	fa22 f303 	lsr.w	r3, r2, r3
 8006968:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800696a:	4b0e      	ldr	r3, [pc, #56]	; (80069a4 <HAL_RCC_ClockConfig+0x358>)
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	4a0d      	ldr	r2, [pc, #52]	; (80069a8 <HAL_RCC_ClockConfig+0x35c>)
 8006974:	5cd3      	ldrb	r3, [r2, r3]
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	fa22 f303 	lsr.w	r3, r2, r3
 8006980:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <HAL_RCC_ClockConfig+0x360>)
 8006982:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006984:	4a0a      	ldr	r2, [pc, #40]	; (80069b0 <HAL_RCC_ClockConfig+0x364>)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800698a:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <HAL_RCC_ClockConfig+0x368>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f7fb fcae 	bl	80022f0 <HAL_InitTick>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	58024400 	.word	0x58024400
 80069a8:	0800bde8 	.word	0x0800bde8
 80069ac:	24000004 	.word	0x24000004
 80069b0:	24000000 	.word	0x24000000
 80069b4:	24000008 	.word	0x24000008

080069b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b089      	sub	sp, #36	; 0x24
 80069bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069be:	4bb3      	ldr	r3, [pc, #716]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069c6:	2b18      	cmp	r3, #24
 80069c8:	f200 8155 	bhi.w	8006c76 <HAL_RCC_GetSysClockFreq+0x2be>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	08006a39 	.word	0x08006a39
 80069d8:	08006c77 	.word	0x08006c77
 80069dc:	08006c77 	.word	0x08006c77
 80069e0:	08006c77 	.word	0x08006c77
 80069e4:	08006c77 	.word	0x08006c77
 80069e8:	08006c77 	.word	0x08006c77
 80069ec:	08006c77 	.word	0x08006c77
 80069f0:	08006c77 	.word	0x08006c77
 80069f4:	08006a5f 	.word	0x08006a5f
 80069f8:	08006c77 	.word	0x08006c77
 80069fc:	08006c77 	.word	0x08006c77
 8006a00:	08006c77 	.word	0x08006c77
 8006a04:	08006c77 	.word	0x08006c77
 8006a08:	08006c77 	.word	0x08006c77
 8006a0c:	08006c77 	.word	0x08006c77
 8006a10:	08006c77 	.word	0x08006c77
 8006a14:	08006a65 	.word	0x08006a65
 8006a18:	08006c77 	.word	0x08006c77
 8006a1c:	08006c77 	.word	0x08006c77
 8006a20:	08006c77 	.word	0x08006c77
 8006a24:	08006c77 	.word	0x08006c77
 8006a28:	08006c77 	.word	0x08006c77
 8006a2c:	08006c77 	.word	0x08006c77
 8006a30:	08006c77 	.word	0x08006c77
 8006a34:	08006a6b 	.word	0x08006a6b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a38:	4b94      	ldr	r3, [pc, #592]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d009      	beq.n	8006a58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a44:	4b91      	ldr	r3, [pc, #580]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	08db      	lsrs	r3, r3, #3
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	4a90      	ldr	r2, [pc, #576]	; (8006c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a50:	fa22 f303 	lsr.w	r3, r2, r3
 8006a54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006a56:	e111      	b.n	8006c7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a58:	4b8d      	ldr	r3, [pc, #564]	; (8006c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a5a:	61bb      	str	r3, [r7, #24]
    break;
 8006a5c:	e10e      	b.n	8006c7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006a5e:	4b8d      	ldr	r3, [pc, #564]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a60:	61bb      	str	r3, [r7, #24]
    break;
 8006a62:	e10b      	b.n	8006c7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006a64:	4b8c      	ldr	r3, [pc, #560]	; (8006c98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a66:	61bb      	str	r3, [r7, #24]
    break;
 8006a68:	e108      	b.n	8006c7c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a6a:	4b88      	ldr	r3, [pc, #544]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006a74:	4b85      	ldr	r3, [pc, #532]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a78:	091b      	lsrs	r3, r3, #4
 8006a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a7e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a80:	4b82      	ldr	r3, [pc, #520]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a8a:	4b80      	ldr	r3, [pc, #512]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8e:	08db      	lsrs	r3, r3, #3
 8006a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	fb02 f303 	mul.w	r3, r2, r3
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 80e1 	beq.w	8006c70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	f000 8083 	beq.w	8006bbc <HAL_RCC_GetSysClockFreq+0x204>
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	f200 80a1 	bhi.w	8006c00 <HAL_RCC_GetSysClockFreq+0x248>
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <HAL_RCC_GetSysClockFreq+0x114>
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d056      	beq.n	8006b78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006aca:	e099      	b.n	8006c00 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006acc:	4b6f      	ldr	r3, [pc, #444]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d02d      	beq.n	8006b34 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ad8:	4b6c      	ldr	r3, [pc, #432]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	08db      	lsrs	r3, r3, #3
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	4a6b      	ldr	r2, [pc, #428]	; (8006c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	ee07 3a90 	vmov	s15, r3
 8006af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b02:	4b62      	ldr	r3, [pc, #392]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b16:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006b32:	e087      	b.n	8006c44 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006ca0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b46:	4b51      	ldr	r3, [pc, #324]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b5a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b76:	e065      	b.n	8006c44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006ca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8a:	4b40      	ldr	r3, [pc, #256]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b9e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bba:	e043      	b.n	8006c44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006ca8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bce:	4b2f      	ldr	r3, [pc, #188]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8006be2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bfe:	e021      	b.n	8006c44 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006ca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c12:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c42:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006c44:	4b11      	ldr	r3, [pc, #68]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c48:	0a5b      	lsrs	r3, r3, #9
 8006c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c4e:	3301      	adds	r3, #1
 8006c50:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	ee07 3a90 	vmov	s15, r3
 8006c58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c68:	ee17 3a90 	vmov	r3, s15
 8006c6c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006c6e:	e005      	b.n	8006c7c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	61bb      	str	r3, [r7, #24]
    break;
 8006c74:	e002      	b.n	8006c7c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006c76:	4b07      	ldr	r3, [pc, #28]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c78:	61bb      	str	r3, [r7, #24]
    break;
 8006c7a:	bf00      	nop
  }

  return sysclockfreq;
 8006c7c:	69bb      	ldr	r3, [r7, #24]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3724      	adds	r7, #36	; 0x24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	58024400 	.word	0x58024400
 8006c90:	03d09000 	.word	0x03d09000
 8006c94:	003d0900 	.word	0x003d0900
 8006c98:	02dc6c00 	.word	0x02dc6c00
 8006c9c:	46000000 	.word	0x46000000
 8006ca0:	4c742400 	.word	0x4c742400
 8006ca4:	4a742400 	.word	0x4a742400
 8006ca8:	4c371b00 	.word	0x4c371b00

08006cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006cb2:	f7ff fe81 	bl	80069b8 <HAL_RCC_GetSysClockFreq>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <HAL_RCC_GetHCLKFreq+0x50>)
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	0a1b      	lsrs	r3, r3, #8
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	490f      	ldr	r1, [pc, #60]	; (8006d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cc4:	5ccb      	ldrb	r3, [r1, r3]
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	fa22 f303 	lsr.w	r3, r2, r3
 8006cce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <HAL_RCC_GetHCLKFreq+0x50>)
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	4a09      	ldr	r2, [pc, #36]	; (8006d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cda:	5cd3      	ldrb	r3, [r2, r3]
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce6:	4a07      	ldr	r2, [pc, #28]	; (8006d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ce8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cea:	4a07      	ldr	r2, [pc, #28]	; (8006d08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006cf0:	4b04      	ldr	r3, [pc, #16]	; (8006d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	58024400 	.word	0x58024400
 8006d00:	0800bde8 	.word	0x0800bde8
 8006d04:	24000004 	.word	0x24000004
 8006d08:	24000000 	.word	0x24000000

08006d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d10:	f7ff ffcc 	bl	8006cac <HAL_RCC_GetHCLKFreq>
 8006d14:	4602      	mov	r2, r0
 8006d16:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	091b      	lsrs	r3, r3, #4
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	4904      	ldr	r1, [pc, #16]	; (8006d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d22:	5ccb      	ldrb	r3, [r1, r3]
 8006d24:	f003 031f 	and.w	r3, r3, #31
 8006d28:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	58024400 	.word	0x58024400
 8006d34:	0800bde8 	.word	0x0800bde8

08006d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006d3c:	f7ff ffb6 	bl	8006cac <HAL_RCC_GetHCLKFreq>
 8006d40:	4602      	mov	r2, r0
 8006d42:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	0a1b      	lsrs	r3, r3, #8
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	4904      	ldr	r1, [pc, #16]	; (8006d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d4e:	5ccb      	ldrb	r3, [r1, r3]
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	58024400 	.word	0x58024400
 8006d60:	0800bde8 	.word	0x0800bde8

08006d64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d70:	2300      	movs	r3, #0
 8006d72:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d03f      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d88:	d02a      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006d8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d8e:	d824      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006d90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d94:	d018      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d9a:	d81e      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da4:	d007      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006da6:	e018      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da8:	4bab      	ldr	r3, [pc, #684]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	4aaa      	ldr	r2, [pc, #680]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006db4:	e015      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3304      	adds	r3, #4
 8006dba:	2102      	movs	r1, #2
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 fff3 	bl	8008da8 <RCCEx_PLL2_Config>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006dc6:	e00c      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3324      	adds	r3, #36	; 0x24
 8006dcc:	2102      	movs	r1, #2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f002 f89c 	bl	8008f0c <RCCEx_PLL3_Config>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006dd8:	e003      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dde:	e000      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d109      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006de8:	4b9b      	ldr	r3, [pc, #620]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df4:	4998      	ldr	r1, [pc, #608]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	650b      	str	r3, [r1, #80]	; 0x50
 8006dfa:	e001      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d03d      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d826      	bhi.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006e14:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1a:	bf00      	nop
 8006e1c:	08006e31 	.word	0x08006e31
 8006e20:	08006e3f 	.word	0x08006e3f
 8006e24:	08006e51 	.word	0x08006e51
 8006e28:	08006e69 	.word	0x08006e69
 8006e2c:	08006e69 	.word	0x08006e69
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e30:	4b89      	ldr	r3, [pc, #548]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	4a88      	ldr	r2, [pc, #544]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e3c:	e015      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3304      	adds	r3, #4
 8006e42:	2100      	movs	r1, #0
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 ffaf 	bl	8008da8 <RCCEx_PLL2_Config>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e4e:	e00c      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3324      	adds	r3, #36	; 0x24
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f002 f858 	bl	8008f0c <RCCEx_PLL3_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e60:	e003      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	75fb      	strb	r3, [r7, #23]
      break;
 8006e66:	e000      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d109      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e70:	4b79      	ldr	r3, [pc, #484]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e74:	f023 0207 	bic.w	r2, r3, #7
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7c:	4976      	ldr	r1, [pc, #472]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	650b      	str	r3, [r1, #80]	; 0x50
 8006e82:	e001      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d042      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e9c:	d02b      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea2:	d825      	bhi.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ea4:	2bc0      	cmp	r3, #192	; 0xc0
 8006ea6:	d028      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006ea8:	2bc0      	cmp	r3, #192	; 0xc0
 8006eaa:	d821      	bhi.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006eac:	2b80      	cmp	r3, #128	; 0x80
 8006eae:	d016      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006eb0:	2b80      	cmp	r3, #128	; 0x80
 8006eb2:	d81d      	bhi.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006eb8:	2b40      	cmp	r3, #64	; 0x40
 8006eba:	d007      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006ebc:	e018      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ebe:	4b66      	ldr	r3, [pc, #408]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	4a65      	ldr	r2, [pc, #404]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006eca:	e017      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 ff68 	bl	8008da8 <RCCEx_PLL2_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006edc:	e00e      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3324      	adds	r3, #36	; 0x24
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f002 f811 	bl	8008f0c <RCCEx_PLL3_Config>
 8006eea:	4603      	mov	r3, r0
 8006eec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006eee:	e005      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef4:	e002      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006ef6:	bf00      	nop
 8006ef8:	e000      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d109      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f02:	4b55      	ldr	r3, [pc, #340]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f06:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0e:	4952      	ldr	r1, [pc, #328]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	650b      	str	r3, [r1, #80]	; 0x50
 8006f14:	e001      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d049      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f30:	d030      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006f32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f36:	d82a      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f3c:	d02c      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006f3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f42:	d824      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f48:	d018      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f4e:	d81e      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f58:	d007      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006f5a:	e018      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f5c:	4b3e      	ldr	r3, [pc, #248]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f60:	4a3d      	ldr	r2, [pc, #244]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f68:	e017      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4618      	mov	r0, r3
 8006f72:	f001 ff19 	bl	8008da8 <RCCEx_PLL2_Config>
 8006f76:	4603      	mov	r3, r0
 8006f78:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f7a:	e00e      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3324      	adds	r3, #36	; 0x24
 8006f80:	2100      	movs	r1, #0
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 ffc2 	bl	8008f0c <RCCEx_PLL3_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f8c:	e005      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	75fb      	strb	r3, [r7, #23]
      break;
 8006f92:	e002      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006f94:	bf00      	nop
 8006f96:	e000      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10a      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006fa0:	4b2d      	ldr	r3, [pc, #180]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fae:	492a      	ldr	r1, [pc, #168]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	658b      	str	r3, [r1, #88]	; 0x58
 8006fb4:	e001      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d04c      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fd0:	d030      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006fd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fd6:	d82a      	bhi.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006fdc:	d02c      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006fde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006fe2:	d824      	bhi.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fe4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fe8:	d018      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fee:	d81e      	bhi.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ff8:	d007      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006ffa:	e018      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffc:	4b16      	ldr	r3, [pc, #88]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	4a15      	ldr	r2, [pc, #84]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007008:	e017      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3304      	adds	r3, #4
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f001 fec9 	bl	8008da8 <RCCEx_PLL2_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800701a:	e00e      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3324      	adds	r3, #36	; 0x24
 8007020:	2100      	movs	r1, #0
 8007022:	4618      	mov	r0, r3
 8007024:	f001 ff72 	bl	8008f0c <RCCEx_PLL3_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800702c:	e005      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	75fb      	strb	r3, [r7, #23]
      break;
 8007032:	e002      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007034:	bf00      	nop
 8007036:	e000      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10d      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007044:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800704e:	4902      	ldr	r1, [pc, #8]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007050:	4313      	orrs	r3, r2
 8007052:	658b      	str	r3, [r1, #88]	; 0x58
 8007054:	e004      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007056:	bf00      	nop
 8007058:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d032      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007070:	2b30      	cmp	r3, #48	; 0x30
 8007072:	d01c      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007074:	2b30      	cmp	r3, #48	; 0x30
 8007076:	d817      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007078:	2b20      	cmp	r3, #32
 800707a:	d00c      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800707c:	2b20      	cmp	r3, #32
 800707e:	d813      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d016      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007084:	2b10      	cmp	r3, #16
 8007086:	d10f      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007088:	4baf      	ldr	r3, [pc, #700]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800708a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708c:	4aae      	ldr	r2, [pc, #696]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800708e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007094:	e00e      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3304      	adds	r3, #4
 800709a:	2102      	movs	r1, #2
 800709c:	4618      	mov	r0, r3
 800709e:	f001 fe83 	bl	8008da8 <RCCEx_PLL2_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80070a6:	e005      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	75fb      	strb	r3, [r7, #23]
      break;
 80070ac:	e002      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80070ae:	bf00      	nop
 80070b0:	e000      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80070b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070ba:	4ba3      	ldr	r3, [pc, #652]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c6:	49a0      	ldr	r1, [pc, #640]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80070cc:	e001      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d047      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070e6:	d030      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80070e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ec:	d82a      	bhi.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80070ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070f2:	d02c      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80070f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070f8:	d824      	bhi.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80070fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070fe:	d018      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007104:	d81e      	bhi.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800710a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710e:	d007      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007110:	e018      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007112:	4b8d      	ldr	r3, [pc, #564]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	4a8c      	ldr	r2, [pc, #560]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800711c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800711e:	e017      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3304      	adds	r3, #4
 8007124:	2100      	movs	r1, #0
 8007126:	4618      	mov	r0, r3
 8007128:	f001 fe3e 	bl	8008da8 <RCCEx_PLL2_Config>
 800712c:	4603      	mov	r3, r0
 800712e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007130:	e00e      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3324      	adds	r3, #36	; 0x24
 8007136:	2100      	movs	r1, #0
 8007138:	4618      	mov	r0, r3
 800713a:	f001 fee7 	bl	8008f0c <RCCEx_PLL3_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007142:	e005      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	75fb      	strb	r3, [r7, #23]
      break;
 8007148:	e002      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800714a:	bf00      	nop
 800714c:	e000      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800714e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007150:	7dfb      	ldrb	r3, [r7, #23]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007156:	4b7c      	ldr	r3, [pc, #496]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007162:	4979      	ldr	r1, [pc, #484]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007164:	4313      	orrs	r3, r2
 8007166:	650b      	str	r3, [r1, #80]	; 0x50
 8007168:	e001      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d049      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007182:	d02e      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007188:	d828      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800718a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800718e:	d02a      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007190:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007194:	d822      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007196:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800719a:	d026      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x486>
 800719c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071a0:	d81c      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x478>
 80071a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071a6:	d010      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x466>
 80071a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ac:	d816      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x478>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d01d      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80071b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b6:	d111      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3304      	adds	r3, #4
 80071bc:	2101      	movs	r1, #1
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 fdf2 	bl	8008da8 <RCCEx_PLL2_Config>
 80071c4:	4603      	mov	r3, r0
 80071c6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80071c8:	e012      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3324      	adds	r3, #36	; 0x24
 80071ce:	2101      	movs	r1, #1
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 fe9b 	bl	8008f0c <RCCEx_PLL3_Config>
 80071d6:	4603      	mov	r3, r0
 80071d8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80071da:	e009      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	75fb      	strb	r3, [r7, #23]
      break;
 80071e0:	e006      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80071e2:	bf00      	nop
 80071e4:	e004      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80071e6:	bf00      	nop
 80071e8:	e002      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80071ea:	bf00      	nop
 80071ec:	e000      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80071ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d109      	bne.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80071f6:	4b54      	ldr	r3, [pc, #336]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007202:	4951      	ldr	r1, [pc, #324]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007204:	4313      	orrs	r3, r2
 8007206:	650b      	str	r3, [r1, #80]	; 0x50
 8007208:	e001      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720a:	7dfb      	ldrb	r3, [r7, #23]
 800720c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d04b      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007224:	d02e      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800722a:	d828      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800722c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007230:	d02a      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007236:	d822      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007238:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800723c:	d026      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800723e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007242:	d81c      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007248:	d010      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800724a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800724e:	d816      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01d      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007258:	d111      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	3304      	adds	r3, #4
 800725e:	2101      	movs	r1, #1
 8007260:	4618      	mov	r0, r3
 8007262:	f001 fda1 	bl	8008da8 <RCCEx_PLL2_Config>
 8007266:	4603      	mov	r3, r0
 8007268:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800726a:	e012      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3324      	adds	r3, #36	; 0x24
 8007270:	2101      	movs	r1, #1
 8007272:	4618      	mov	r0, r3
 8007274:	f001 fe4a 	bl	8008f0c <RCCEx_PLL3_Config>
 8007278:	4603      	mov	r3, r0
 800727a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800727c:	e009      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	75fb      	strb	r3, [r7, #23]
      break;
 8007282:	e006      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007284:	bf00      	nop
 8007286:	e004      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007288:	bf00      	nop
 800728a:	e002      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800728c:	bf00      	nop
 800728e:	e000      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007298:	4b2b      	ldr	r3, [pc, #172]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800729a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072a6:	4928      	ldr	r1, [pc, #160]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	658b      	str	r3, [r1, #88]	; 0x58
 80072ac:	e001      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d02f      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c6:	d00e      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80072c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072cc:	d814      	bhi.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d015      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80072d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072d6:	d10f      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072d8:	4b1b      	ldr	r3, [pc, #108]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	4a1a      	ldr	r2, [pc, #104]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80072e4:	e00c      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3304      	adds	r3, #4
 80072ea:	2101      	movs	r1, #1
 80072ec:	4618      	mov	r0, r3
 80072ee:	f001 fd5b 	bl	8008da8 <RCCEx_PLL2_Config>
 80072f2:	4603      	mov	r3, r0
 80072f4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80072f6:	e003      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	75fb      	strb	r3, [r7, #23]
      break;
 80072fc:	e000      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80072fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007306:	4b10      	ldr	r3, [pc, #64]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007312:	490d      	ldr	r1, [pc, #52]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007314:	4313      	orrs	r3, r2
 8007316:	650b      	str	r3, [r1, #80]	; 0x50
 8007318:	e001      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
 800731c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d033      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732e:	2b03      	cmp	r3, #3
 8007330:	d81c      	bhi.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007332:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	08007373 	.word	0x08007373
 800733c:	0800734d 	.word	0x0800734d
 8007340:	0800735b 	.word	0x0800735b
 8007344:	08007373 	.word	0x08007373
 8007348:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800734c:	4bb8      	ldr	r3, [pc, #736]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	4ab7      	ldr	r2, [pc, #732]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007356:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007358:	e00c      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3304      	adds	r3, #4
 800735e:	2102      	movs	r1, #2
 8007360:	4618      	mov	r0, r3
 8007362:	f001 fd21 	bl	8008da8 <RCCEx_PLL2_Config>
 8007366:	4603      	mov	r3, r0
 8007368:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800736a:	e003      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	75fb      	strb	r3, [r7, #23]
      break;
 8007370:	e000      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d109      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800737a:	4bad      	ldr	r3, [pc, #692]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800737c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737e:	f023 0203 	bic.w	r2, r3, #3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007386:	49aa      	ldr	r1, [pc, #680]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007388:	4313      	orrs	r3, r2
 800738a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800738c:	e001      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 8086 	beq.w	80074ac <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073a0:	4ba4      	ldr	r3, [pc, #656]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4aa3      	ldr	r2, [pc, #652]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80073a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073ac:	f7fa ffea 	bl	8002384 <HAL_GetTick>
 80073b0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073b2:	e009      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073b4:	f7fa ffe6 	bl	8002384 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b64      	cmp	r3, #100	; 0x64
 80073c0:	d902      	bls.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	75fb      	strb	r3, [r7, #23]
        break;
 80073c6:	e005      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073c8:	4b9a      	ldr	r3, [pc, #616]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d0ef      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d166      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80073da:	4b95      	ldr	r3, [pc, #596]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073e4:	4053      	eors	r3, r2
 80073e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d013      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073ee:	4b90      	ldr	r3, [pc, #576]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073f6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073f8:	4b8d      	ldr	r3, [pc, #564]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fc:	4a8c      	ldr	r2, [pc, #560]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007402:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007404:	4b8a      	ldr	r3, [pc, #552]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007408:	4a89      	ldr	r2, [pc, #548]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800740a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800740e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007410:	4a87      	ldr	r2, [pc, #540]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800741c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007420:	d115      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007422:	f7fa ffaf 	bl	8002384 <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007428:	e00b      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800742a:	f7fa ffab 	bl	8002384 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	f241 3288 	movw	r2, #5000	; 0x1388
 8007438:	4293      	cmp	r3, r2
 800743a:	d902      	bls.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	75fb      	strb	r3, [r7, #23]
            break;
 8007440:	e005      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007442:	4b7b      	ldr	r3, [pc, #492]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0ed      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d126      	bne.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800745a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800745e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007462:	d10d      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007464:	4b72      	ldr	r3, [pc, #456]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007472:	0919      	lsrs	r1, r3, #4
 8007474:	4b70      	ldr	r3, [pc, #448]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007476:	400b      	ands	r3, r1
 8007478:	496d      	ldr	r1, [pc, #436]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800747a:	4313      	orrs	r3, r2
 800747c:	610b      	str	r3, [r1, #16]
 800747e:	e005      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007480:	4b6b      	ldr	r3, [pc, #428]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	4a6a      	ldr	r2, [pc, #424]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007486:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800748a:	6113      	str	r3, [r2, #16]
 800748c:	4b68      	ldr	r3, [pc, #416]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800748e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800749a:	4965      	ldr	r1, [pc, #404]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800749c:	4313      	orrs	r3, r2
 800749e:	670b      	str	r3, [r1, #112]	; 0x70
 80074a0:	e004      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	75bb      	strb	r3, [r7, #22]
 80074a6:	e001      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d07e      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074bc:	2b28      	cmp	r3, #40	; 0x28
 80074be:	d867      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80074c0:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80074c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c6:	bf00      	nop
 80074c8:	08007597 	.word	0x08007597
 80074cc:	08007591 	.word	0x08007591
 80074d0:	08007591 	.word	0x08007591
 80074d4:	08007591 	.word	0x08007591
 80074d8:	08007591 	.word	0x08007591
 80074dc:	08007591 	.word	0x08007591
 80074e0:	08007591 	.word	0x08007591
 80074e4:	08007591 	.word	0x08007591
 80074e8:	0800756d 	.word	0x0800756d
 80074ec:	08007591 	.word	0x08007591
 80074f0:	08007591 	.word	0x08007591
 80074f4:	08007591 	.word	0x08007591
 80074f8:	08007591 	.word	0x08007591
 80074fc:	08007591 	.word	0x08007591
 8007500:	08007591 	.word	0x08007591
 8007504:	08007591 	.word	0x08007591
 8007508:	0800757f 	.word	0x0800757f
 800750c:	08007591 	.word	0x08007591
 8007510:	08007591 	.word	0x08007591
 8007514:	08007591 	.word	0x08007591
 8007518:	08007591 	.word	0x08007591
 800751c:	08007591 	.word	0x08007591
 8007520:	08007591 	.word	0x08007591
 8007524:	08007591 	.word	0x08007591
 8007528:	08007597 	.word	0x08007597
 800752c:	08007591 	.word	0x08007591
 8007530:	08007591 	.word	0x08007591
 8007534:	08007591 	.word	0x08007591
 8007538:	08007591 	.word	0x08007591
 800753c:	08007591 	.word	0x08007591
 8007540:	08007591 	.word	0x08007591
 8007544:	08007591 	.word	0x08007591
 8007548:	08007597 	.word	0x08007597
 800754c:	08007591 	.word	0x08007591
 8007550:	08007591 	.word	0x08007591
 8007554:	08007591 	.word	0x08007591
 8007558:	08007591 	.word	0x08007591
 800755c:	08007591 	.word	0x08007591
 8007560:	08007591 	.word	0x08007591
 8007564:	08007591 	.word	0x08007591
 8007568:	08007597 	.word	0x08007597
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	2101      	movs	r1, #1
 8007572:	4618      	mov	r0, r3
 8007574:	f001 fc18 	bl	8008da8 <RCCEx_PLL2_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800757c:	e00c      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3324      	adds	r3, #36	; 0x24
 8007582:	2101      	movs	r1, #1
 8007584:	4618      	mov	r0, r3
 8007586:	f001 fcc1 	bl	8008f0c <RCCEx_PLL3_Config>
 800758a:	4603      	mov	r3, r0
 800758c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800758e:	e003      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	75fb      	strb	r3, [r7, #23]
      break;
 8007594:	e000      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d109      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800759e:	4b24      	ldr	r3, [pc, #144]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075aa:	4921      	ldr	r1, [pc, #132]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	654b      	str	r3, [r1, #84]	; 0x54
 80075b0:	e001      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d03e      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075c6:	2b05      	cmp	r3, #5
 80075c8:	d820      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80075ca:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	08007613 	.word	0x08007613
 80075d4:	080075e9 	.word	0x080075e9
 80075d8:	080075fb 	.word	0x080075fb
 80075dc:	08007613 	.word	0x08007613
 80075e0:	08007613 	.word	0x08007613
 80075e4:	08007613 	.word	0x08007613
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3304      	adds	r3, #4
 80075ec:	2101      	movs	r1, #1
 80075ee:	4618      	mov	r0, r3
 80075f0:	f001 fbda 	bl	8008da8 <RCCEx_PLL2_Config>
 80075f4:	4603      	mov	r3, r0
 80075f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80075f8:	e00c      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	3324      	adds	r3, #36	; 0x24
 80075fe:	2101      	movs	r1, #1
 8007600:	4618      	mov	r0, r3
 8007602:	f001 fc83 	bl	8008f0c <RCCEx_PLL3_Config>
 8007606:	4603      	mov	r3, r0
 8007608:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800760a:	e003      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	75fb      	strb	r3, [r7, #23]
      break;
 8007610:	e000      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d110      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800761a:	4b05      	ldr	r3, [pc, #20]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800761c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761e:	f023 0207 	bic.w	r2, r3, #7
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007626:	4902      	ldr	r1, [pc, #8]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007628:	4313      	orrs	r3, r2
 800762a:	654b      	str	r3, [r1, #84]	; 0x54
 800762c:	e008      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800762e:	bf00      	nop
 8007630:	58024400 	.word	0x58024400
 8007634:	58024800 	.word	0x58024800
 8007638:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d039      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007652:	2b05      	cmp	r3, #5
 8007654:	d820      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007656:	a201      	add	r2, pc, #4	; (adr r2, 800765c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	0800769f 	.word	0x0800769f
 8007660:	08007675 	.word	0x08007675
 8007664:	08007687 	.word	0x08007687
 8007668:	0800769f 	.word	0x0800769f
 800766c:	0800769f 	.word	0x0800769f
 8007670:	0800769f 	.word	0x0800769f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	2101      	movs	r1, #1
 800767a:	4618      	mov	r0, r3
 800767c:	f001 fb94 	bl	8008da8 <RCCEx_PLL2_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007684:	e00c      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3324      	adds	r3, #36	; 0x24
 800768a:	2101      	movs	r1, #1
 800768c:	4618      	mov	r0, r3
 800768e:	f001 fc3d 	bl	8008f0c <RCCEx_PLL3_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007696:	e003      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]
      break;
 800769c:	e000      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800769e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076a6:	4bb7      	ldr	r3, [pc, #732]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076aa:	f023 0207 	bic.w	r2, r3, #7
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b4:	49b3      	ldr	r1, [pc, #716]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	658b      	str	r3, [r1, #88]	; 0x58
 80076ba:	e001      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
 80076be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0320 	and.w	r3, r3, #32
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d04b      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076d6:	d02e      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80076d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076dc:	d828      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80076de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e2:	d02a      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80076e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e8:	d822      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80076ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076ee:	d026      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80076f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076f4:	d81c      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80076f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076fa:	d010      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80076fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007700:	d816      	bhi.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d01d      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800770a:	d111      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3304      	adds	r3, #4
 8007710:	2100      	movs	r1, #0
 8007712:	4618      	mov	r0, r3
 8007714:	f001 fb48 	bl	8008da8 <RCCEx_PLL2_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800771c:	e012      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3324      	adds	r3, #36	; 0x24
 8007722:	2102      	movs	r1, #2
 8007724:	4618      	mov	r0, r3
 8007726:	f001 fbf1 	bl	8008f0c <RCCEx_PLL3_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800772e:	e009      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	75fb      	strb	r3, [r7, #23]
      break;
 8007734:	e006      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007736:	bf00      	nop
 8007738:	e004      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007744:	7dfb      	ldrb	r3, [r7, #23]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800774a:	4b8e      	ldr	r3, [pc, #568]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800774c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007758:	498a      	ldr	r1, [pc, #552]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800775a:	4313      	orrs	r3, r2
 800775c:	654b      	str	r3, [r1, #84]	; 0x54
 800775e:	e001      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	d04b      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007776:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800777a:	d02e      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800777c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007780:	d828      	bhi.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007786:	d02a      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778c:	d822      	bhi.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800778e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007792:	d026      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007794:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007798:	d81c      	bhi.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800779a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800779e:	d010      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80077a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a4:	d816      	bhi.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d01d      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80077aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ae:	d111      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3304      	adds	r3, #4
 80077b4:	2100      	movs	r1, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 faf6 	bl	8008da8 <RCCEx_PLL2_Config>
 80077bc:	4603      	mov	r3, r0
 80077be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80077c0:	e012      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3324      	adds	r3, #36	; 0x24
 80077c6:	2102      	movs	r1, #2
 80077c8:	4618      	mov	r0, r3
 80077ca:	f001 fb9f 	bl	8008f0c <RCCEx_PLL3_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80077d2:	e009      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	75fb      	strb	r3, [r7, #23]
      break;
 80077d8:	e006      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80077da:	bf00      	nop
 80077dc:	e004      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80077de:	bf00      	nop
 80077e0:	e002      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80077e2:	bf00      	nop
 80077e4:	e000      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80077e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10a      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077ee:	4b65      	ldr	r3, [pc, #404]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077fc:	4961      	ldr	r1, [pc, #388]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	658b      	str	r3, [r1, #88]	; 0x58
 8007802:	e001      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007810:	2b00      	cmp	r3, #0
 8007812:	d04b      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800781a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800781e:	d02e      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007820:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007824:	d828      	bhi.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800782a:	d02a      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800782c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007830:	d822      	bhi.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007832:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007836:	d026      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007838:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800783c:	d81c      	bhi.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800783e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007842:	d010      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007848:	d816      	bhi.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d01d      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800784e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007852:	d111      	bne.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3304      	adds	r3, #4
 8007858:	2100      	movs	r1, #0
 800785a:	4618      	mov	r0, r3
 800785c:	f001 faa4 	bl	8008da8 <RCCEx_PLL2_Config>
 8007860:	4603      	mov	r3, r0
 8007862:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007864:	e012      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3324      	adds	r3, #36	; 0x24
 800786a:	2102      	movs	r1, #2
 800786c:	4618      	mov	r0, r3
 800786e:	f001 fb4d 	bl	8008f0c <RCCEx_PLL3_Config>
 8007872:	4603      	mov	r3, r0
 8007874:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007876:	e009      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	75fb      	strb	r3, [r7, #23]
      break;
 800787c:	e006      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800787e:	bf00      	nop
 8007880:	e004      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007882:	bf00      	nop
 8007884:	e002      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007886:	bf00      	nop
 8007888:	e000      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800788a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007892:	4b3c      	ldr	r3, [pc, #240]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078a0:	4938      	ldr	r1, [pc, #224]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	658b      	str	r3, [r1, #88]	; 0x58
 80078a6:	e001      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
 80078aa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c2:	d10a      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3324      	adds	r3, #36	; 0x24
 80078c8:	2102      	movs	r1, #2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 fb1e 	bl	8008f0c <RCCEx_PLL3_Config>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80078da:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078e8:	4926      	ldr	r1, [pc, #152]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d01a      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007904:	d10a      	bne.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	3324      	adds	r3, #36	; 0x24
 800790a:	2102      	movs	r1, #2
 800790c:	4618      	mov	r0, r3
 800790e:	f001 fafd 	bl	8008f0c <RCCEx_PLL3_Config>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800791c:	4b19      	ldr	r3, [pc, #100]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800791e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800792a:	4916      	ldr	r1, [pc, #88]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800792c:	4313      	orrs	r3, r2
 800792e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d036      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007946:	d01f      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800794c:	d817      	bhi.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007956:	d009      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007958:	e011      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3304      	adds	r3, #4
 800795e:	2100      	movs	r1, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f001 fa21 	bl	8008da8 <RCCEx_PLL2_Config>
 8007966:	4603      	mov	r3, r0
 8007968:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800796a:	e00e      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3324      	adds	r3, #36	; 0x24
 8007970:	2102      	movs	r1, #2
 8007972:	4618      	mov	r0, r3
 8007974:	f001 faca 	bl	8008f0c <RCCEx_PLL3_Config>
 8007978:	4603      	mov	r3, r0
 800797a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800797c:	e005      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	75fb      	strb	r3, [r7, #23]
      break;
 8007982:	e002      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007984:	58024400 	.word	0x58024400
      break;
 8007988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10a      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007990:	4b93      	ldr	r3, [pc, #588]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800799e:	4990      	ldr	r1, [pc, #576]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	658b      	str	r3, [r1, #88]	; 0x58
 80079a4:	e001      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
 80079a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d033      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079c0:	d01c      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80079c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079c6:	d816      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80079c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079cc:	d003      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80079ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079d2:	d007      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80079d4:	e00f      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d6:	4b82      	ldr	r3, [pc, #520]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	4a81      	ldr	r2, [pc, #516]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80079e2:	e00c      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3324      	adds	r3, #36	; 0x24
 80079e8:	2101      	movs	r1, #1
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 fa8e 	bl	8008f0c <RCCEx_PLL3_Config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80079f4:	e003      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
      break;
 80079fa:	e000      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80079fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a04:	4b76      	ldr	r3, [pc, #472]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a12:	4973      	ldr	r1, [pc, #460]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	654b      	str	r3, [r1, #84]	; 0x54
 8007a18:	e001      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d029      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a36:	d007      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007a38:	e00f      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a3a:	4b69      	ldr	r3, [pc, #420]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3e:	4a68      	ldr	r2, [pc, #416]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a46:	e00b      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	2102      	movs	r1, #2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f001 f9aa 	bl	8008da8 <RCCEx_PLL2_Config>
 8007a54:	4603      	mov	r3, r0
 8007a56:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a58:	e002      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a66:	4b5e      	ldr	r3, [pc, #376]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a72:	495b      	ldr	r1, [pc, #364]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a78:	e001      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3324      	adds	r3, #36	; 0x24
 8007a8e:	2102      	movs	r1, #2
 8007a90:	4618      	mov	r0, r3
 8007a92:	f001 fa3b 	bl	8008f0c <RCCEx_PLL3_Config>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d030      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ab0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ab4:	d017      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aba:	d811      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac0:	d013      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac6:	d80b      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d010      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ad0:	d106      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ad2:	4b43      	ldr	r3, [pc, #268]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad6:	4a42      	ldr	r2, [pc, #264]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007adc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007ade:	e007      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae4:	e004      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007ae6:	bf00      	nop
 8007ae8:	e002      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007aea:	bf00      	nop
 8007aec:	e000      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d109      	bne.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007af6:	4b3a      	ldr	r3, [pc, #232]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b02:	4937      	ldr	r1, [pc, #220]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	654b      	str	r3, [r1, #84]	; 0x54
 8007b08:	e001      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0a:	7dfb      	ldrb	r3, [r7, #23]
 8007b0c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d008      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b1a:	4b31      	ldr	r3, [pc, #196]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b26:	492e      	ldr	r1, [pc, #184]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d009      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b38:	4b29      	ldr	r3, [pc, #164]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b46:	4926      	ldr	r1, [pc, #152]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d008      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b58:	4b21      	ldr	r3, [pc, #132]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b64:	491e      	ldr	r1, [pc, #120]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00d      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b76:	4b1a      	ldr	r3, [pc, #104]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	4a19      	ldr	r2, [pc, #100]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b80:	6113      	str	r3, [r2, #16]
 8007b82:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b84:	691a      	ldr	r2, [r3, #16]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007b8c:	4914      	ldr	r1, [pc, #80]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	da08      	bge.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b9a:	4b11      	ldr	r3, [pc, #68]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba6:	490e      	ldr	r1, [pc, #56]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d009      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bb8:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc6:	4906      	ldr	r1, [pc, #24]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007bcc:	7dbb      	ldrb	r3, [r7, #22]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e000      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	58024400 	.word	0x58024400

08007be4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b090      	sub	sp, #64	; 0x40
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf2:	f040 8095 	bne.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007bf6:	4bae      	ldr	r3, [pc, #696]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bfa:	f003 0307 	and.w	r3, r3, #7
 8007bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	f200 8088 	bhi.w	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c25 	.word	0x08007c25
 8007c14:	08007c4d 	.word	0x08007c4d
 8007c18:	08007c75 	.word	0x08007c75
 8007c1c:	08007d11 	.word	0x08007d11
 8007c20:	08007c9d 	.word	0x08007c9d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c24:	4ba2      	ldr	r3, [pc, #648]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c30:	d108      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 ff64 	bl	8008b04 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c40:	f000 bc95 	b.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c48:	f000 bc91 	b.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c4c:	4b98      	ldr	r3, [pc, #608]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c58:	d108      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c5a:	f107 0318 	add.w	r3, r7, #24
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fca8 	bl	80085b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c68:	f000 bc81 	b.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c70:	f000 bc7d 	b.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c74:	4b8e      	ldr	r3, [pc, #568]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c80:	d108      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c82:	f107 030c 	add.w	r3, r7, #12
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fde8 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c90:	f000 bc6d 	b.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c98:	f000 bc69 	b.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c9c:	4b84      	ldr	r3, [pc, #528]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ca4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ca6:	4b82      	ldr	r3, [pc, #520]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0304 	and.w	r3, r3, #4
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d10c      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d109      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cb8:	4b7d      	ldr	r3, [pc, #500]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	08db      	lsrs	r3, r3, #3
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	4a7c      	ldr	r2, [pc, #496]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cca:	e01f      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ccc:	4b78      	ldr	r3, [pc, #480]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd8:	d106      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ce0:	d102      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007ce2:	4b75      	ldr	r3, [pc, #468]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ce6:	e011      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ce8:	4b71      	ldr	r3, [pc, #452]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cf4:	d106      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cfc:	d102      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007cfe:	4b6f      	ldr	r3, [pc, #444]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d02:	e003      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007d08:	f000 bc31 	b.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d0c:	f000 bc2f 	b.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d10:	4b6b      	ldr	r3, [pc, #428]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d14:	f000 bc2b 	b.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d1c:	f000 bc27 	b.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d26:	f040 8095 	bne.w	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007d2a:	4b61      	ldr	r3, [pc, #388]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007d32:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d3a:	d04d      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d42:	f200 8084 	bhi.w	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	2bc0      	cmp	r3, #192	; 0xc0
 8007d4a:	d07d      	beq.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d50:	d87d      	bhi.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	2b80      	cmp	r3, #128	; 0x80
 8007d56:	d02d      	beq.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	2b80      	cmp	r3, #128	; 0x80
 8007d5c:	d877      	bhi.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d003      	beq.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	2b40      	cmp	r3, #64	; 0x40
 8007d68:	d012      	beq.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007d6a:	e070      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d6c:	4b50      	ldr	r3, [pc, #320]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d78:	d107      	bne.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 fec0 	bl	8008b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d88:	e3f1      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d8e:	e3ee      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d90:	4b47      	ldr	r3, [pc, #284]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d9c:	d107      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d9e:	f107 0318 	add.w	r3, r7, #24
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 fc06 	bl	80085b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007dac:	e3df      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db2:	e3dc      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007db4:	4b3e      	ldr	r3, [pc, #248]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dc0:	d107      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc2:	f107 030c 	add.w	r3, r7, #12
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fd48 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007dd0:	e3cd      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dd6:	e3ca      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dd8:	4b35      	ldr	r3, [pc, #212]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ddc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007de2:	4b33      	ldr	r3, [pc, #204]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0304 	and.w	r3, r3, #4
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d10c      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8007dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d109      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007df4:	4b2e      	ldr	r3, [pc, #184]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	08db      	lsrs	r3, r3, #3
 8007dfa:	f003 0303 	and.w	r3, r3, #3
 8007dfe:	4a2d      	ldr	r2, [pc, #180]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007e00:	fa22 f303 	lsr.w	r3, r2, r3
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e06:	e01e      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e08:	4b29      	ldr	r3, [pc, #164]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e14:	d106      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e1c:	d102      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007e1e:	4b26      	ldr	r3, [pc, #152]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e22:	e010      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e24:	4b22      	ldr	r3, [pc, #136]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e30:	d106      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e38:	d102      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007e3a:	4b20      	ldr	r3, [pc, #128]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e3e:	e002      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007e44:	e393      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007e46:	e392      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e48:	4b1d      	ldr	r3, [pc, #116]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e4c:	e38f      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e52:	e38c      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e5a:	f040 80a7 	bne.w	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007e5e:	4b14      	ldr	r3, [pc, #80]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e62:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007e66:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e6e:	d05f      	beq.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e76:	f200 8096 	bhi.w	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e80:	f000 808e 	beq.w	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e8a:	f200 808c 	bhi.w	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e94:	d03a      	beq.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e9c:	f200 8083 	bhi.w	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00e      	beq.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eac:	d01c      	beq.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8007eae:	e07a      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007eb0:	58024400 	.word	0x58024400
 8007eb4:	03d09000 	.word	0x03d09000
 8007eb8:	003d0900 	.word	0x003d0900
 8007ebc:	02dc6c00 	.word	0x02dc6c00
 8007ec0:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ec4:	4baa      	ldr	r3, [pc, #680]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ed0:	d107      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fe14 	bl	8008b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ee0:	e345      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ee6:	e342      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ee8:	4ba1      	ldr	r3, [pc, #644]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ef4:	d107      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ef6:	f107 0318 	add.w	r3, r7, #24
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fb5a 	bl	80085b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f04:	e333      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f0a:	e330      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f0c:	4b98      	ldr	r3, [pc, #608]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f18:	d107      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f1a:	f107 030c 	add.w	r3, r7, #12
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fc9c 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f28:	e321      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f2e:	e31e      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f30:	4b8f      	ldr	r3, [pc, #572]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f3a:	4b8d      	ldr	r3, [pc, #564]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0304 	and.w	r3, r3, #4
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d10c      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8007f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f4c:	4b88      	ldr	r3, [pc, #544]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	08db      	lsrs	r3, r3, #3
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	4a87      	ldr	r2, [pc, #540]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f58:	fa22 f303 	lsr.w	r3, r2, r3
 8007f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f5e:	e01e      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f60:	4b83      	ldr	r3, [pc, #524]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6c:	d106      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8007f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f74:	d102      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007f76:	4b80      	ldr	r3, [pc, #512]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f7a:	e010      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f7c:	4b7c      	ldr	r3, [pc, #496]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f88:	d106      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8007f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f90:	d102      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007f92:	4b7a      	ldr	r3, [pc, #488]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f96:	e002      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007f9c:	e2e7      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f9e:	e2e6      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007fa0:	4b77      	ldr	r3, [pc, #476]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fa4:	e2e3      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007faa:	e2e0      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fb2:	f040 809c 	bne.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007fb6:	4b6e      	ldr	r3, [pc, #440]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fc6:	d054      	beq.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fce:	f200 808b 	bhi.w	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fd8:	f000 8083 	beq.w	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fe2:	f200 8081 	bhi.w	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fec:	d02f      	beq.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ff4:	d878      	bhi.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d004      	beq.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008002:	d012      	beq.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008004:	e070      	b.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008006:	4b5a      	ldr	r3, [pc, #360]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800800e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008012:	d107      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fd73 	bl	8008b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008022:	e2a4      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008028:	e2a1      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800802a:	4b51      	ldr	r3, [pc, #324]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008036:	d107      	bne.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008038:	f107 0318 	add.w	r3, r7, #24
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fab9 	bl	80085b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008046:	e292      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800804c:	e28f      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800804e:	4b48      	ldr	r3, [pc, #288]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805a:	d107      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	4618      	mov	r0, r3
 8008062:	f000 fbfb 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800806a:	e280      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008070:	e27d      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008072:	4b3f      	ldr	r3, [pc, #252]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008076:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800807a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800807c:	4b3c      	ldr	r3, [pc, #240]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b04      	cmp	r3, #4
 8008086:	d10c      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808a:	2b00      	cmp	r3, #0
 800808c:	d109      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800808e:	4b38      	ldr	r3, [pc, #224]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	08db      	lsrs	r3, r3, #3
 8008094:	f003 0303 	and.w	r3, r3, #3
 8008098:	4a36      	ldr	r2, [pc, #216]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800809a:	fa22 f303 	lsr.w	r3, r2, r3
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080a0:	e01e      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080a2:	4b33      	ldr	r3, [pc, #204]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ae:	d106      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80080b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080b6:	d102      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80080b8:	4b2f      	ldr	r3, [pc, #188]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080bc:	e010      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080be:	4b2c      	ldr	r3, [pc, #176]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080ca:	d106      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80080cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d2:	d102      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80080d4:	4b29      	ldr	r3, [pc, #164]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80080d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d8:	e002      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80080de:	e246      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80080e0:	e245      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80080e2:	4b27      	ldr	r3, [pc, #156]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e6:	e242      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ec:	e23f      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f4:	f040 80a8 	bne.w	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80080f8:	4b1d      	ldr	r3, [pc, #116]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80080fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080fc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008100:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008108:	d060      	beq.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008110:	f200 8097 	bhi.w	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800811a:	f000 808f 	beq.w	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008120:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008124:	f200 808d 	bhi.w	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800812e:	d03b      	beq.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008136:	f200 8084 	bhi.w	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800813a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813c:	2b00      	cmp	r3, #0
 800813e:	d004      	beq.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008146:	d01d      	beq.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008148:	e07b      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800814a:	4b09      	ldr	r3, [pc, #36]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008156:	d107      	bne.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fcd1 	bl	8008b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008166:	e202      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800816c:	e1ff      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800816e:	bf00      	nop
 8008170:	58024400 	.word	0x58024400
 8008174:	03d09000 	.word	0x03d09000
 8008178:	003d0900 	.word	0x003d0900
 800817c:	02dc6c00 	.word	0x02dc6c00
 8008180:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008184:	4ba3      	ldr	r3, [pc, #652]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800818c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008190:	d107      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008192:	f107 0318 	add.w	r3, r7, #24
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fa0c 	bl	80085b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081a0:	e1e5      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a6:	e1e2      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081a8:	4b9a      	ldr	r3, [pc, #616]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081b4:	d107      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081b6:	f107 030c 	add.w	r3, r7, #12
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 fb4e 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081c4:	e1d3      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ca:	e1d0      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80081cc:	4b91      	ldr	r3, [pc, #580]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80081ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081d4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081d6:	4b8f      	ldr	r3, [pc, #572]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0304 	and.w	r3, r3, #4
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d10c      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80081e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d109      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081e8:	4b8a      	ldr	r3, [pc, #552]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	08db      	lsrs	r3, r3, #3
 80081ee:	f003 0303 	and.w	r3, r3, #3
 80081f2:	4a89      	ldr	r2, [pc, #548]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80081f4:	fa22 f303 	lsr.w	r3, r2, r3
 80081f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081fa:	e01e      	b.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081fc:	4b85      	ldr	r3, [pc, #532]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008208:	d106      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008210:	d102      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008212:	4b82      	ldr	r3, [pc, #520]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008216:	e010      	b.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008218:	4b7e      	ldr	r3, [pc, #504]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008224:	d106      	bne.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800822c:	d102      	bne.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800822e:	4b7c      	ldr	r3, [pc, #496]	; (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008232:	e002      	b.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008238:	e199      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800823a:	e198      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800823c:	4b79      	ldr	r3, [pc, #484]	; (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008240:	e195      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008246:	e192      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800824e:	d173      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008250:	4b70      	ldr	r3, [pc, #448]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008258:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008260:	d02f      	beq.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008268:	d863      	bhi.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008276:	d012      	beq.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008278:	e05b      	b.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800827a:	4b66      	ldr	r3, [pc, #408]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008286:	d107      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008288:	f107 0318 	add.w	r3, r7, #24
 800828c:	4618      	mov	r0, r3
 800828e:	f000 f991 	bl	80085b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008296:	e16a      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800829c:	e167      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800829e:	4b5d      	ldr	r3, [pc, #372]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082aa:	d107      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ac:	f107 030c 	add.w	r3, r7, #12
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fad3 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082ba:	e158      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082c0:	e155      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80082c2:	4b54      	ldr	r3, [pc, #336]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80082c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082ca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082cc:	4b51      	ldr	r3, [pc, #324]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d10c      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80082d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082de:	4b4d      	ldr	r3, [pc, #308]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	08db      	lsrs	r3, r3, #3
 80082e4:	f003 0303 	and.w	r3, r3, #3
 80082e8:	4a4b      	ldr	r2, [pc, #300]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80082ea:	fa22 f303 	lsr.w	r3, r2, r3
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f0:	e01e      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082f2:	4b48      	ldr	r3, [pc, #288]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fe:	d106      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008306:	d102      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008308:	4b44      	ldr	r3, [pc, #272]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800830a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800830c:	e010      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800830e:	4b41      	ldr	r3, [pc, #260]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800831a:	d106      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800831c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008322:	d102      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008324:	4b3e      	ldr	r3, [pc, #248]	; (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008328:	e002      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800832e:	e11e      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008330:	e11d      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008336:	e11a      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800833e:	d133      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008340:	4b34      	ldr	r3, [pc, #208]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008348:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008356:	d012      	beq.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008358:	e023      	b.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800835a:	4b2e      	ldr	r3, [pc, #184]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008366:	d107      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fbc9 	bl	8008b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008376:	e0fa      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800837c:	e0f7      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800837e:	4b25      	ldr	r3, [pc, #148]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800838a:	d107      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800838c:	f107 0318 	add.w	r3, r7, #24
 8008390:	4618      	mov	r0, r3
 8008392:	f000 f90f 	bl	80085b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800839a:	e0e8      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a0:	e0e5      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80083a2:	2300      	movs	r3, #0
 80083a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a6:	e0e2      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083ae:	f040 808f 	bne.w	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80083b2:	4b18      	ldr	r3, [pc, #96]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80083b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80083ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083c2:	d075      	beq.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80083c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083ca:	d87e      	bhi.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d2:	d060      	beq.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80083d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083da:	d876      	bhi.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083e2:	d045      	beq.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083ea:	d86e      	bhi.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083f2:	d02b      	beq.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083fa:	d866      	bhi.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80083fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d004      	beq.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008408:	d00e      	beq.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800840a:	e05e      	b.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800840c:	f000 f8bc 	bl	8008588 <HAL_RCCEx_GetD3PCLK1Freq>
 8008410:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008412:	e0ac      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008414:	58024400 	.word	0x58024400
 8008418:	03d09000 	.word	0x03d09000
 800841c:	003d0900 	.word	0x003d0900
 8008420:	02dc6c00 	.word	0x02dc6c00
 8008424:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008428:	4b53      	ldr	r3, [pc, #332]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008434:	d107      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008436:	f107 0318 	add.w	r3, r7, #24
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f8ba 	bl	80085b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008444:	e093      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800844a:	e090      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800844c:	4b4a      	ldr	r3, [pc, #296]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008458:	d107      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800845a:	f107 030c 	add.w	r3, r7, #12
 800845e:	4618      	mov	r0, r3
 8008460:	f000 f9fc 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008468:	e081      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800846e:	e07e      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008470:	4b41      	ldr	r3, [pc, #260]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0304 	and.w	r3, r3, #4
 8008478:	2b04      	cmp	r3, #4
 800847a:	d109      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800847c:	4b3e      	ldr	r3, [pc, #248]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	08db      	lsrs	r3, r3, #3
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	4a3d      	ldr	r2, [pc, #244]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008488:	fa22 f303 	lsr.w	r3, r2, r3
 800848c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800848e:	e06e      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008494:	e06b      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008496:	4b38      	ldr	r3, [pc, #224]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800849e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a2:	d102      	bne.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80084a4:	4b36      	ldr	r3, [pc, #216]	; (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80084a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084a8:	e061      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ae:	e05e      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084b0:	4b31      	ldr	r3, [pc, #196]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084bc:	d102      	bne.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80084be:	4b31      	ldr	r3, [pc, #196]	; (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80084c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084c2:	e054      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084c8:	e051      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ce:	e04e      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d6:	d148      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80084d8:	4b27      	ldr	r3, [pc, #156]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084e8:	d02a      	beq.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80084ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f0:	d838      	bhi.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80084f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d004      	beq.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084fe:	d00d      	beq.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008500:	e030      	b.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008502:	4b1d      	ldr	r3, [pc, #116]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800850a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800850e:	d102      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8008510:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008512:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008514:	e02b      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800851a:	e028      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800851c:	4b16      	ldr	r3, [pc, #88]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008528:	d107      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800852a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fae8 	bl	8008b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008538:	e019      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800853e:	e016      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008540:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800854c:	d107      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800854e:	f107 0318 	add.w	r3, r7, #24
 8008552:	4618      	mov	r0, r3
 8008554:	f000 f82e 	bl	80085b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800855c:	e007      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008562:	e004      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008568:	e001      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800856e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008570:	4618      	mov	r0, r3
 8008572:	3740      	adds	r7, #64	; 0x40
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	58024400 	.word	0x58024400
 800857c:	03d09000 	.word	0x03d09000
 8008580:	003d0900 	.word	0x003d0900
 8008584:	02dc6c00 	.word	0x02dc6c00

08008588 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800858c:	f7fe fb8e 	bl	8006cac <HAL_RCC_GetHCLKFreq>
 8008590:	4602      	mov	r2, r0
 8008592:	4b06      	ldr	r3, [pc, #24]	; (80085ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	091b      	lsrs	r3, r3, #4
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	4904      	ldr	r1, [pc, #16]	; (80085b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800859e:	5ccb      	ldrb	r3, [r1, r3]
 80085a0:	f003 031f 	and.w	r3, r3, #31
 80085a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	58024400 	.word	0x58024400
 80085b0:	0800bde8 	.word	0x0800bde8

080085b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b089      	sub	sp, #36	; 0x24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085bc:	4ba1      	ldr	r3, [pc, #644]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c0:	f003 0303 	and.w	r3, r3, #3
 80085c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80085c6:	4b9f      	ldr	r3, [pc, #636]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ca:	0b1b      	lsrs	r3, r3, #12
 80085cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80085d2:	4b9c      	ldr	r3, [pc, #624]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d6:	091b      	lsrs	r3, r3, #4
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80085de:	4b99      	ldr	r3, [pc, #612]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e2:	08db      	lsrs	r3, r3, #3
 80085e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	fb02 f303 	mul.w	r3, r2, r3
 80085ee:	ee07 3a90 	vmov	s15, r3
 80085f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 8111 	beq.w	8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	2b02      	cmp	r3, #2
 8008606:	f000 8083 	beq.w	8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	2b02      	cmp	r3, #2
 800860e:	f200 80a1 	bhi.w	8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d056      	beq.n	80086cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800861e:	e099      	b.n	8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008620:	4b88      	ldr	r3, [pc, #544]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0320 	and.w	r3, r3, #32
 8008628:	2b00      	cmp	r3, #0
 800862a:	d02d      	beq.n	8008688 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800862c:	4b85      	ldr	r3, [pc, #532]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	08db      	lsrs	r3, r3, #3
 8008632:	f003 0303 	and.w	r3, r3, #3
 8008636:	4a84      	ldr	r2, [pc, #528]	; (8008848 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008638:	fa22 f303 	lsr.w	r3, r2, r3
 800863c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	ee07 3a90 	vmov	s15, r3
 8008644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008656:	4b7b      	ldr	r3, [pc, #492]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008666:	ed97 6a03 	vldr	s12, [r7, #12]
 800866a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800884c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800866e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800867a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800867e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008682:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008686:	e087      	b.n	8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008692:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008850 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800869a:	4b6a      	ldr	r3, [pc, #424]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800869c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800884c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086ca:	e065      	b.n	8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80086da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086de:	4b59      	ldr	r3, [pc, #356]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e6:	ee07 3a90 	vmov	s15, r3
 80086ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80086f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800884c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800870e:	e043      	b.n	8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	ee07 3a90 	vmov	s15, r3
 8008716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800871a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008858 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800871e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008722:	4b48      	ldr	r3, [pc, #288]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872a:	ee07 3a90 	vmov	s15, r3
 800872e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008732:	ed97 6a03 	vldr	s12, [r7, #12]
 8008736:	eddf 5a45 	vldr	s11, [pc, #276]	; 800884c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800873a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800873e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008752:	e021      	b.n	8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008766:	4b37      	ldr	r3, [pc, #220]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876e:	ee07 3a90 	vmov	s15, r3
 8008772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008776:	ed97 6a03 	vldr	s12, [r7, #12]
 800877a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800884c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800877e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800878a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800878e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008792:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008796:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008798:	4b2a      	ldr	r3, [pc, #168]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	0a5b      	lsrs	r3, r3, #9
 800879e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80087b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087be:	ee17 2a90 	vmov	r2, s15
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80087c6:	4b1f      	ldr	r3, [pc, #124]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ca:	0c1b      	lsrs	r3, r3, #16
 80087cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80087e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ec:	ee17 2a90 	vmov	r2, s15
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80087f4:	4b13      	ldr	r3, [pc, #76]	; (8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f8:	0e1b      	lsrs	r3, r3, #24
 80087fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800880a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800880e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800881a:	ee17 2a90 	vmov	r2, s15
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008822:	e008      	b.n	8008836 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	609a      	str	r2, [r3, #8]
}
 8008836:	bf00      	nop
 8008838:	3724      	adds	r7, #36	; 0x24
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	58024400 	.word	0x58024400
 8008848:	03d09000 	.word	0x03d09000
 800884c:	46000000 	.word	0x46000000
 8008850:	4c742400 	.word	0x4c742400
 8008854:	4a742400 	.word	0x4a742400
 8008858:	4c371b00 	.word	0x4c371b00

0800885c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800885c:	b480      	push	{r7}
 800885e:	b089      	sub	sp, #36	; 0x24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008864:	4ba1      	ldr	r3, [pc, #644]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008868:	f003 0303 	and.w	r3, r3, #3
 800886c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800886e:	4b9f      	ldr	r3, [pc, #636]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008872:	0d1b      	lsrs	r3, r3, #20
 8008874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008878:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800887a:	4b9c      	ldr	r3, [pc, #624]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	0a1b      	lsrs	r3, r3, #8
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008886:	4b99      	ldr	r3, [pc, #612]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888a:	08db      	lsrs	r3, r3, #3
 800888c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	fb02 f303 	mul.w	r3, r2, r3
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8111 	beq.w	8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	f000 8083 	beq.w	80089b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	f200 80a1 	bhi.w	80089fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d003      	beq.n	80088c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d056      	beq.n	8008974 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80088c6:	e099      	b.n	80089fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088c8:	4b88      	ldr	r3, [pc, #544]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0320 	and.w	r3, r3, #32
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d02d      	beq.n	8008930 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088d4:	4b85      	ldr	r3, [pc, #532]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	08db      	lsrs	r3, r3, #3
 80088da:	f003 0303 	and.w	r3, r3, #3
 80088de:	4a84      	ldr	r2, [pc, #528]	; (8008af0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80088e0:	fa22 f303 	lsr.w	r3, r2, r3
 80088e4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	ee07 3a90 	vmov	s15, r3
 80088ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	ee07 3a90 	vmov	s15, r3
 80088f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088fe:	4b7b      	ldr	r3, [pc, #492]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800890e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008912:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800891a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800891e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800892a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800892e:	e087      	b.n	8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008af8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800893e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008942:	4b6a      	ldr	r3, [pc, #424]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008952:	ed97 6a03 	vldr	s12, [r7, #12]
 8008956:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800895a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800895e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800896a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800896e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008972:	e065      	b.n	8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008afc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008986:	4b59      	ldr	r3, [pc, #356]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008996:	ed97 6a03 	vldr	s12, [r7, #12]
 800899a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800899e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089b6:	e043      	b.n	8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80089c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ca:	4b48      	ldr	r3, [pc, #288]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089da:	ed97 6a03 	vldr	s12, [r7, #12]
 80089de:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089fa:	e021      	b.n	8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008afc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0e:	4b37      	ldr	r3, [pc, #220]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008a40:	4b2a      	ldr	r3, [pc, #168]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	0a5b      	lsrs	r3, r3, #9
 8008a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a66:	ee17 2a90 	vmov	r2, s15
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008a6e:	4b1f      	ldr	r3, [pc, #124]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a72:	0c1b      	lsrs	r3, r3, #16
 8008a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a78:	ee07 3a90 	vmov	s15, r3
 8008a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a88:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a94:	ee17 2a90 	vmov	r2, s15
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008a9c:	4b13      	ldr	r3, [pc, #76]	; (8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa0:	0e1b      	lsrs	r3, r3, #24
 8008aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ac2:	ee17 2a90 	vmov	r2, s15
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008aca:	e008      	b.n	8008ade <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	609a      	str	r2, [r3, #8]
}
 8008ade:	bf00      	nop
 8008ae0:	3724      	adds	r7, #36	; 0x24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	58024400 	.word	0x58024400
 8008af0:	03d09000 	.word	0x03d09000
 8008af4:	46000000 	.word	0x46000000
 8008af8:	4c742400 	.word	0x4c742400
 8008afc:	4a742400 	.word	0x4a742400
 8008b00:	4c371b00 	.word	0x4c371b00

08008b04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b089      	sub	sp, #36	; 0x24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b0c:	4ba0      	ldr	r3, [pc, #640]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	f003 0303 	and.w	r3, r3, #3
 8008b14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008b16:	4b9e      	ldr	r3, [pc, #632]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1a:	091b      	lsrs	r3, r3, #4
 8008b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008b22:	4b9b      	ldr	r3, [pc, #620]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008b2c:	4b98      	ldr	r3, [pc, #608]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b30:	08db      	lsrs	r3, r3, #3
 8008b32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	fb02 f303 	mul.w	r3, r2, r3
 8008b3c:	ee07 3a90 	vmov	s15, r3
 8008b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f000 8111 	beq.w	8008d72 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	f000 8083 	beq.w	8008c5e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	f200 80a1 	bhi.w	8008ca2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d003      	beq.n	8008b6e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d056      	beq.n	8008c1a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008b6c:	e099      	b.n	8008ca2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b6e:	4b88      	ldr	r3, [pc, #544]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0320 	and.w	r3, r3, #32
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d02d      	beq.n	8008bd6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b7a:	4b85      	ldr	r3, [pc, #532]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	08db      	lsrs	r3, r3, #3
 8008b80:	f003 0303 	and.w	r3, r3, #3
 8008b84:	4a83      	ldr	r2, [pc, #524]	; (8008d94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008b86:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	ee07 3a90 	vmov	s15, r3
 8008b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ba4:	4b7a      	ldr	r3, [pc, #488]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bac:	ee07 3a90 	vmov	s15, r3
 8008bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bb8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008bd4:	e087      	b.n	8008ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	ee07 3a90 	vmov	s15, r3
 8008bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008d9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be8:	4b69      	ldr	r3, [pc, #420]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bfc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c18:	e065      	b.n	8008ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	ee07 3a90 	vmov	s15, r3
 8008c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c24:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008da0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2c:	4b58      	ldr	r3, [pc, #352]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c34:	ee07 3a90 	vmov	s15, r3
 8008c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c40:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c5c:	e043      	b.n	8008ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	ee07 3a90 	vmov	s15, r3
 8008c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c68:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c70:	4b47      	ldr	r3, [pc, #284]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c78:	ee07 3a90 	vmov	s15, r3
 8008c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c80:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c84:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ca0:	e021      	b.n	8008ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	ee07 3a90 	vmov	s15, r3
 8008ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008d9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb4:	4b36      	ldr	r3, [pc, #216]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbc:	ee07 3a90 	vmov	s15, r3
 8008cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cc8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ce4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008ce6:	4b2a      	ldr	r3, [pc, #168]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	0a5b      	lsrs	r3, r3, #9
 8008cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf0:	ee07 3a90 	vmov	s15, r3
 8008cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d0c:	ee17 2a90 	vmov	r2, s15
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008d14:	4b1e      	ldr	r3, [pc, #120]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d18:	0c1b      	lsrs	r3, r3, #16
 8008d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d3a:	ee17 2a90 	vmov	r2, s15
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008d42:	4b13      	ldr	r3, [pc, #76]	; (8008d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d46:	0e1b      	lsrs	r3, r3, #24
 8008d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d4c:	ee07 3a90 	vmov	s15, r3
 8008d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d68:	ee17 2a90 	vmov	r2, s15
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008d70:	e008      	b.n	8008d84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	609a      	str	r2, [r3, #8]
}
 8008d84:	bf00      	nop
 8008d86:	3724      	adds	r7, #36	; 0x24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	58024400 	.word	0x58024400
 8008d94:	03d09000 	.word	0x03d09000
 8008d98:	46000000 	.word	0x46000000
 8008d9c:	4c742400 	.word	0x4c742400
 8008da0:	4a742400 	.word	0x4a742400
 8008da4:	4c371b00 	.word	0x4c371b00

08008da8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008db6:	4b53      	ldr	r3, [pc, #332]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dba:	f003 0303 	and.w	r3, r3, #3
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	d101      	bne.n	8008dc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e099      	b.n	8008efa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008dc6:	4b4f      	ldr	r3, [pc, #316]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a4e      	ldr	r2, [pc, #312]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008dcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dd2:	f7f9 fad7 	bl	8002384 <HAL_GetTick>
 8008dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008dd8:	e008      	b.n	8008dec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008dda:	f7f9 fad3 	bl	8002384 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d901      	bls.n	8008dec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e086      	b.n	8008efa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008dec:	4b45      	ldr	r3, [pc, #276]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1f0      	bne.n	8008dda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008df8:	4b42      	ldr	r3, [pc, #264]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	031b      	lsls	r3, r3, #12
 8008e06:	493f      	ldr	r1, [pc, #252]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	628b      	str	r3, [r1, #40]	; 0x28
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	025b      	lsls	r3, r3, #9
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	431a      	orrs	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	041b      	lsls	r3, r3, #16
 8008e2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	061b      	lsls	r3, r3, #24
 8008e38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e3c:	4931      	ldr	r1, [pc, #196]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e42:	4b30      	ldr	r3, [pc, #192]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	492d      	ldr	r1, [pc, #180]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e54:	4b2b      	ldr	r3, [pc, #172]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	f023 0220 	bic.w	r2, r3, #32
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	4928      	ldr	r1, [pc, #160]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e66:	4b27      	ldr	r3, [pc, #156]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6a:	4a26      	ldr	r2, [pc, #152]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e6c:	f023 0310 	bic.w	r3, r3, #16
 8008e70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e72:	4b24      	ldr	r3, [pc, #144]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e76:	4b24      	ldr	r3, [pc, #144]	; (8008f08 <RCCEx_PLL2_Config+0x160>)
 8008e78:	4013      	ands	r3, r2
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	69d2      	ldr	r2, [r2, #28]
 8008e7e:	00d2      	lsls	r2, r2, #3
 8008e80:	4920      	ldr	r1, [pc, #128]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e86:	4b1f      	ldr	r3, [pc, #124]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8a:	4a1e      	ldr	r2, [pc, #120]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e8c:	f043 0310 	orr.w	r3, r3, #16
 8008e90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d106      	bne.n	8008ea6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008e98:	4b1a      	ldr	r3, [pc, #104]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9c:	4a19      	ldr	r2, [pc, #100]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008e9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ea4:	e00f      	b.n	8008ec6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d106      	bne.n	8008eba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008eac:	4b15      	ldr	r3, [pc, #84]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb0:	4a14      	ldr	r2, [pc, #80]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008eb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008eb8:	e005      	b.n	8008ec6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008eba:	4b12      	ldr	r3, [pc, #72]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebe:	4a11      	ldr	r2, [pc, #68]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ec4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a0e      	ldr	r2, [pc, #56]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008ecc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ed2:	f7f9 fa57 	bl	8002384 <HAL_GetTick>
 8008ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ed8:	e008      	b.n	8008eec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008eda:	f7f9 fa53 	bl	8002384 <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d901      	bls.n	8008eec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e006      	b.n	8008efa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008eec:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <RCCEx_PLL2_Config+0x15c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d0f0      	beq.n	8008eda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	58024400 	.word	0x58024400
 8008f08:	ffff0007 	.word	0xffff0007

08008f0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f1a:	4b53      	ldr	r3, [pc, #332]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1e:	f003 0303 	and.w	r3, r3, #3
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d101      	bne.n	8008f2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e099      	b.n	800905e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f2a:	4b4f      	ldr	r3, [pc, #316]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a4e      	ldr	r2, [pc, #312]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f36:	f7f9 fa25 	bl	8002384 <HAL_GetTick>
 8008f3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f3c:	e008      	b.n	8008f50 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f3e:	f7f9 fa21 	bl	8002384 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d901      	bls.n	8008f50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e086      	b.n	800905e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f50:	4b45      	ldr	r3, [pc, #276]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1f0      	bne.n	8008f3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f5c:	4b42      	ldr	r3, [pc, #264]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f60:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	051b      	lsls	r3, r3, #20
 8008f6a:	493f      	ldr	r1, [pc, #252]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	628b      	str	r3, [r1, #40]	; 0x28
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	3b01      	subs	r3, #1
 8008f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	025b      	lsls	r3, r3, #9
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	431a      	orrs	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	041b      	lsls	r3, r3, #16
 8008f8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	061b      	lsls	r3, r3, #24
 8008f9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008fa0:	4931      	ldr	r1, [pc, #196]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008fa6:	4b30      	ldr	r3, [pc, #192]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	492d      	ldr	r1, [pc, #180]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008fb8:	4b2b      	ldr	r3, [pc, #172]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	4928      	ldr	r1, [pc, #160]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008fca:	4b27      	ldr	r3, [pc, #156]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fce:	4a26      	ldr	r2, [pc, #152]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008fd6:	4b24      	ldr	r3, [pc, #144]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fda:	4b24      	ldr	r3, [pc, #144]	; (800906c <RCCEx_PLL3_Config+0x160>)
 8008fdc:	4013      	ands	r3, r2
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	69d2      	ldr	r2, [r2, #28]
 8008fe2:	00d2      	lsls	r2, r2, #3
 8008fe4:	4920      	ldr	r1, [pc, #128]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008fea:	4b1f      	ldr	r3, [pc, #124]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fee:	4a1e      	ldr	r2, [pc, #120]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d106      	bne.n	800900a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ffc:	4b1a      	ldr	r3, [pc, #104]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	4a19      	ldr	r2, [pc, #100]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009002:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009006:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009008:	e00f      	b.n	800902a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d106      	bne.n	800901e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009010:	4b15      	ldr	r3, [pc, #84]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009014:	4a14      	ldr	r2, [pc, #80]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009016:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800901a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800901c:	e005      	b.n	800902a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800901e:	4b12      	ldr	r3, [pc, #72]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009022:	4a11      	ldr	r2, [pc, #68]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009028:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800902a:	4b0f      	ldr	r3, [pc, #60]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a0e      	ldr	r2, [pc, #56]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009036:	f7f9 f9a5 	bl	8002384 <HAL_GetTick>
 800903a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800903c:	e008      	b.n	8009050 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800903e:	f7f9 f9a1 	bl	8002384 <HAL_GetTick>
 8009042:	4602      	mov	r2, r0
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	2b02      	cmp	r3, #2
 800904a:	d901      	bls.n	8009050 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e006      	b.n	800905e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009050:	4b05      	ldr	r3, [pc, #20]	; (8009068 <RCCEx_PLL3_Config+0x15c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d0f0      	beq.n	800903e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800905c:	7bfb      	ldrb	r3, [r7, #15]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	58024400 	.word	0x58024400
 800906c:	ffff0007 	.word	0xffff0007

08009070 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8009078:	2300      	movs	r3, #0
 800907a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e0eb      	b.n	800925e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a75      	ldr	r2, [pc, #468]	; (8009268 <HAL_SPI_Init+0x1f8>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d00f      	beq.n	80090b6 <HAL_SPI_Init+0x46>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a74      	ldr	r2, [pc, #464]	; (800926c <HAL_SPI_Init+0x1fc>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d00a      	beq.n	80090b6 <HAL_SPI_Init+0x46>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a72      	ldr	r2, [pc, #456]	; (8009270 <HAL_SPI_Init+0x200>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d005      	beq.n	80090b6 <HAL_SPI_Init+0x46>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	2b0f      	cmp	r3, #15
 80090b0:	d901      	bls.n	80090b6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e0d3      	b.n	800925e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f8dc 	bl	8009274 <SPI_GetPacketSize>
 80090bc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a69      	ldr	r2, [pc, #420]	; (8009268 <HAL_SPI_Init+0x1f8>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d00c      	beq.n	80090e2 <HAL_SPI_Init+0x72>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a67      	ldr	r2, [pc, #412]	; (800926c <HAL_SPI_Init+0x1fc>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d007      	beq.n	80090e2 <HAL_SPI_Init+0x72>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a66      	ldr	r2, [pc, #408]	; (8009270 <HAL_SPI_Init+0x200>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d002      	beq.n	80090e2 <HAL_SPI_Init+0x72>
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b08      	cmp	r3, #8
 80090e0:	d811      	bhi.n	8009106 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80090e6:	4a60      	ldr	r2, [pc, #384]	; (8009268 <HAL_SPI_Init+0x1f8>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d009      	beq.n	8009100 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a5e      	ldr	r2, [pc, #376]	; (800926c <HAL_SPI_Init+0x1fc>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d004      	beq.n	8009100 <HAL_SPI_Init+0x90>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a5d      	ldr	r2, [pc, #372]	; (8009270 <HAL_SPI_Init+0x200>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d104      	bne.n	800910a <HAL_SPI_Init+0x9a>
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b10      	cmp	r3, #16
 8009104:	d901      	bls.n	800910a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e0a9      	b.n	800925e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d106      	bne.n	8009124 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7f8 fb56 	bl	80017d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2202      	movs	r2, #2
 8009128:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 0201 	bic.w	r2, r2, #1
 800913a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009144:	d119      	bne.n	800917a <HAL_SPI_Init+0x10a>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800914e:	d103      	bne.n	8009158 <HAL_SPI_Init+0xe8>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009154:	2b00      	cmp	r3, #0
 8009156:	d008      	beq.n	800916a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10c      	bne.n	800917a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009168:	d107      	bne.n	800917a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009178:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	69da      	ldr	r2, [r3, #28]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009182:	431a      	orrs	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	431a      	orrs	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918c:	ea42 0103 	orr.w	r1, r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	68da      	ldr	r2, [r3, #12]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	431a      	orrs	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	431a      	orrs	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	431a      	orrs	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	431a      	orrs	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ce:	431a      	orrs	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	431a      	orrs	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091da:	ea42 0103 	orr.w	r1, r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d113      	bne.n	800921a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009204:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009218:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f022 0201 	bic.w	r2, r2, #1
 8009228:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	430a      	orrs	r2, r1
 800924a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	40013000 	.word	0x40013000
 800926c:	40003800 	.word	0x40003800
 8009270:	40003c00 	.word	0x40003c00

08009274 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009280:	095b      	lsrs	r3, r3, #5
 8009282:	3301      	adds	r3, #1
 8009284:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	3301      	adds	r3, #1
 800928c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	3307      	adds	r3, #7
 8009292:	08db      	lsrs	r3, r3, #3
 8009294:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	fb02 f303 	mul.w	r3, r2, r3
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e049      	b.n	8009350 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d106      	bne.n	80092d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7f8 fc21 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2202      	movs	r2, #2
 80092da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	3304      	adds	r3, #4
 80092e6:	4619      	mov	r1, r3
 80092e8:	4610      	mov	r0, r2
 80092ea:	f000 fd17 	bl	8009d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e049      	b.n	80093fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b00      	cmp	r3, #0
 8009374:	d106      	bne.n	8009384 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7f8 fc32 	bl	8001be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2202      	movs	r2, #2
 8009388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3304      	adds	r3, #4
 8009394:	4619      	mov	r1, r3
 8009396:	4610      	mov	r0, r2
 8009398:	f000 fcc0 	bl	8009d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
	...

08009408 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e08f      	b.n	800953c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	d106      	bne.n	8009436 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7f8 fa59 	bl	80018e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2202      	movs	r2, #2
 800943a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6899      	ldr	r1, [r3, #8]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	4b3e      	ldr	r3, [pc, #248]	; (8009544 <HAL_TIM_Encoder_Init+0x13c>)
 800944a:	400b      	ands	r3, r1
 800944c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	3304      	adds	r3, #4
 8009456:	4619      	mov	r1, r3
 8009458:	4610      	mov	r0, r2
 800945a:	f000 fc5f 	bl	8009d1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6a1b      	ldr	r3, [r3, #32]
 8009474:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	4313      	orrs	r3, r2
 800947e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	4b31      	ldr	r3, [pc, #196]	; (8009548 <HAL_TIM_Encoder_Init+0x140>)
 8009484:	4013      	ands	r3, r2
 8009486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	689a      	ldr	r2, [r3, #8]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	021b      	lsls	r3, r3, #8
 8009492:	4313      	orrs	r3, r2
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	4313      	orrs	r3, r2
 8009498:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	4b2b      	ldr	r3, [pc, #172]	; (800954c <HAL_TIM_Encoder_Init+0x144>)
 800949e:	4013      	ands	r3, r2
 80094a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	4b2a      	ldr	r3, [pc, #168]	; (8009550 <HAL_TIM_Encoder_Init+0x148>)
 80094a6:	4013      	ands	r3, r2
 80094a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	021b      	lsls	r3, r3, #8
 80094b4:	4313      	orrs	r3, r2
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	011a      	lsls	r2, r3, #4
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	031b      	lsls	r3, r3, #12
 80094c8:	4313      	orrs	r3, r2
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80094d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80094de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	4313      	orrs	r3, r2
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	fffebff8 	.word	0xfffebff8
 8009548:	fffffcfc 	.word	0xfffffcfc
 800954c:	fffff3f3 	.word	0xfffff3f3
 8009550:	ffff0f0f 	.word	0xffff0f0f

08009554 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009564:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800956c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009574:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800957c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d110      	bne.n	80095a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d102      	bne.n	8009590 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800958a:	7b7b      	ldrb	r3, [r7, #13]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d001      	beq.n	8009594 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e069      	b.n	8009668 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2202      	movs	r2, #2
 8009598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095a4:	e031      	b.n	800960a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2b04      	cmp	r3, #4
 80095aa:	d110      	bne.n	80095ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d102      	bne.n	80095b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80095b2:	7b3b      	ldrb	r3, [r7, #12]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d001      	beq.n	80095bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e055      	b.n	8009668 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2202      	movs	r2, #2
 80095c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2202      	movs	r2, #2
 80095c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095cc:	e01d      	b.n	800960a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d108      	bne.n	80095e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d105      	bne.n	80095e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095da:	7b7b      	ldrb	r3, [r7, #13]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d102      	bne.n	80095e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80095e0:	7b3b      	ldrb	r3, [r7, #12]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d001      	beq.n	80095ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e03e      	b.n	8009668 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2202      	movs	r2, #2
 80095ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2202      	movs	r2, #2
 80095f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2202      	movs	r2, #2
 80095fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2202      	movs	r2, #2
 8009606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <HAL_TIM_Encoder_Start+0xc4>
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	2b04      	cmp	r3, #4
 8009614:	d008      	beq.n	8009628 <HAL_TIM_Encoder_Start+0xd4>
 8009616:	e00f      	b.n	8009638 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2201      	movs	r2, #1
 800961e:	2100      	movs	r1, #0
 8009620:	4618      	mov	r0, r3
 8009622:	f000 ff81 	bl	800a528 <TIM_CCxChannelCmd>
      break;
 8009626:	e016      	b.n	8009656 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2201      	movs	r2, #1
 800962e:	2104      	movs	r1, #4
 8009630:	4618      	mov	r0, r3
 8009632:	f000 ff79 	bl	800a528 <TIM_CCxChannelCmd>
      break;
 8009636:	e00e      	b.n	8009656 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2201      	movs	r2, #1
 800963e:	2100      	movs	r1, #0
 8009640:	4618      	mov	r0, r3
 8009642:	f000 ff71 	bl	800a528 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2201      	movs	r2, #1
 800964c:	2104      	movs	r1, #4
 800964e:	4618      	mov	r0, r3
 8009650:	f000 ff6a 	bl	800a528 <TIM_CCxChannelCmd>
      break;
 8009654:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f042 0201 	orr.w	r2, r2, #1
 8009664:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	f003 0302 	and.w	r3, r3, #2
 8009682:	2b02      	cmp	r3, #2
 8009684:	d122      	bne.n	80096cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	f003 0302 	and.w	r3, r3, #2
 8009690:	2b02      	cmp	r3, #2
 8009692:	d11b      	bne.n	80096cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f06f 0202 	mvn.w	r2, #2
 800969c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	f003 0303 	and.w	r3, r3, #3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fb14 	bl	8009ce0 <HAL_TIM_IC_CaptureCallback>
 80096b8:	e005      	b.n	80096c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fb06 	bl	8009ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fb17 	bl	8009cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	f003 0304 	and.w	r3, r3, #4
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	d122      	bne.n	8009720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f003 0304 	and.w	r3, r3, #4
 80096e4:	2b04      	cmp	r3, #4
 80096e6:	d11b      	bne.n	8009720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f06f 0204 	mvn.w	r2, #4
 80096f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2202      	movs	r2, #2
 80096f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009702:	2b00      	cmp	r3, #0
 8009704:	d003      	beq.n	800970e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 faea 	bl	8009ce0 <HAL_TIM_IC_CaptureCallback>
 800970c:	e005      	b.n	800971a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fadc 	bl	8009ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 faed 	bl	8009cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	f003 0308 	and.w	r3, r3, #8
 800972a:	2b08      	cmp	r3, #8
 800972c:	d122      	bne.n	8009774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	f003 0308 	and.w	r3, r3, #8
 8009738:	2b08      	cmp	r3, #8
 800973a:	d11b      	bne.n	8009774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f06f 0208 	mvn.w	r2, #8
 8009744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2204      	movs	r2, #4
 800974a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	f003 0303 	and.w	r3, r3, #3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fac0 	bl	8009ce0 <HAL_TIM_IC_CaptureCallback>
 8009760:	e005      	b.n	800976e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fab2 	bl	8009ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fac3 	bl	8009cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	f003 0310 	and.w	r3, r3, #16
 800977e:	2b10      	cmp	r3, #16
 8009780:	d122      	bne.n	80097c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f003 0310 	and.w	r3, r3, #16
 800978c:	2b10      	cmp	r3, #16
 800978e:	d11b      	bne.n	80097c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f06f 0210 	mvn.w	r2, #16
 8009798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2208      	movs	r2, #8
 800979e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fa96 	bl	8009ce0 <HAL_TIM_IC_CaptureCallback>
 80097b4:	e005      	b.n	80097c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fa88 	bl	8009ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fa99 	bl	8009cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d10e      	bne.n	80097f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d107      	bne.n	80097f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f06f 0201 	mvn.w	r2, #1
 80097ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa62 	bl	8009cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097fe:	2b80      	cmp	r3, #128	; 0x80
 8009800:	d10e      	bne.n	8009820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800980c:	2b80      	cmp	r3, #128	; 0x80
 800980e:	d107      	bne.n	8009820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 ffba 	bl	800a794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800982a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800982e:	d10e      	bne.n	800984e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800983a:	2b80      	cmp	r3, #128	; 0x80
 800983c:	d107      	bne.n	800984e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 ffad 	bl	800a7a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009858:	2b40      	cmp	r3, #64	; 0x40
 800985a:	d10e      	bne.n	800987a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009866:	2b40      	cmp	r3, #64	; 0x40
 8009868:	d107      	bne.n	800987a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fa47 	bl	8009d08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	f003 0320 	and.w	r3, r3, #32
 8009884:	2b20      	cmp	r3, #32
 8009886:	d10e      	bne.n	80098a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	f003 0320 	and.w	r3, r3, #32
 8009892:	2b20      	cmp	r3, #32
 8009894:	d107      	bne.n	80098a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f06f 0220 	mvn.w	r2, #32
 800989e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 ff6d 	bl	800a780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098a6:	bf00      	nop
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d101      	bne.n	80098ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80098c6:	2302      	movs	r3, #2
 80098c8:	e0fd      	b.n	8009ac6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b14      	cmp	r3, #20
 80098d6:	f200 80f0 	bhi.w	8009aba <HAL_TIM_PWM_ConfigChannel+0x20a>
 80098da:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80098dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e0:	08009935 	.word	0x08009935
 80098e4:	08009abb 	.word	0x08009abb
 80098e8:	08009abb 	.word	0x08009abb
 80098ec:	08009abb 	.word	0x08009abb
 80098f0:	08009975 	.word	0x08009975
 80098f4:	08009abb 	.word	0x08009abb
 80098f8:	08009abb 	.word	0x08009abb
 80098fc:	08009abb 	.word	0x08009abb
 8009900:	080099b7 	.word	0x080099b7
 8009904:	08009abb 	.word	0x08009abb
 8009908:	08009abb 	.word	0x08009abb
 800990c:	08009abb 	.word	0x08009abb
 8009910:	080099f7 	.word	0x080099f7
 8009914:	08009abb 	.word	0x08009abb
 8009918:	08009abb 	.word	0x08009abb
 800991c:	08009abb 	.word	0x08009abb
 8009920:	08009a39 	.word	0x08009a39
 8009924:	08009abb 	.word	0x08009abb
 8009928:	08009abb 	.word	0x08009abb
 800992c:	08009abb 	.word	0x08009abb
 8009930:	08009a79 	.word	0x08009a79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68b9      	ldr	r1, [r7, #8]
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fa88 	bl	8009e50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	699a      	ldr	r2, [r3, #24]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f042 0208 	orr.w	r2, r2, #8
 800994e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	699a      	ldr	r2, [r3, #24]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f022 0204 	bic.w	r2, r2, #4
 800995e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6999      	ldr	r1, [r3, #24]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	691a      	ldr	r2, [r3, #16]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	619a      	str	r2, [r3, #24]
      break;
 8009972:	e0a3      	b.n	8009abc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68b9      	ldr	r1, [r7, #8]
 800997a:	4618      	mov	r0, r3
 800997c:	f000 faf8 	bl	8009f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	699a      	ldr	r2, [r3, #24]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800998e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	699a      	ldr	r2, [r3, #24]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800999e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6999      	ldr	r1, [r3, #24]
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	021a      	lsls	r2, r3, #8
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	430a      	orrs	r2, r1
 80099b2:	619a      	str	r2, [r3, #24]
      break;
 80099b4:	e082      	b.n	8009abc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68b9      	ldr	r1, [r7, #8]
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fb61 	bl	800a084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	69da      	ldr	r2, [r3, #28]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f042 0208 	orr.w	r2, r2, #8
 80099d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	69da      	ldr	r2, [r3, #28]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f022 0204 	bic.w	r2, r2, #4
 80099e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	69d9      	ldr	r1, [r3, #28]
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	691a      	ldr	r2, [r3, #16]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	430a      	orrs	r2, r1
 80099f2:	61da      	str	r2, [r3, #28]
      break;
 80099f4:	e062      	b.n	8009abc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 fbc7 	bl	800a190 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	69da      	ldr	r2, [r3, #28]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	69da      	ldr	r2, [r3, #28]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	69d9      	ldr	r1, [r3, #28]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	021a      	lsls	r2, r3, #8
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	61da      	str	r2, [r3, #28]
      break;
 8009a36:	e041      	b.n	8009abc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68b9      	ldr	r1, [r7, #8]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 fc0e 	bl	800a260 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0208 	orr.w	r2, r2, #8
 8009a52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f022 0204 	bic.w	r2, r2, #4
 8009a62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	691a      	ldr	r2, [r3, #16]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009a76:	e021      	b.n	8009abc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68b9      	ldr	r1, [r7, #8]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fc50 	bl	800a324 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009aa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	021a      	lsls	r2, r3, #8
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ab8:	e000      	b.n	8009abc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009aba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop

08009ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d101      	bne.n	8009ae8 <HAL_TIM_ConfigClockSource+0x18>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e0db      	b.n	8009ca0 <HAL_TIM_ConfigClockSource+0x1d0>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	4b69      	ldr	r3, [pc, #420]	; (8009ca8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8009b04:	4013      	ands	r3, r2
 8009b06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a63      	ldr	r2, [pc, #396]	; (8009cac <HAL_TIM_ConfigClockSource+0x1dc>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	f000 80a9 	beq.w	8009c76 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b24:	4a61      	ldr	r2, [pc, #388]	; (8009cac <HAL_TIM_ConfigClockSource+0x1dc>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	f200 80ae 	bhi.w	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b2c:	4a60      	ldr	r2, [pc, #384]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	f000 80a1 	beq.w	8009c76 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b34:	4a5e      	ldr	r2, [pc, #376]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	f200 80a6 	bhi.w	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b3c:	4a5d      	ldr	r2, [pc, #372]	; (8009cb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	f000 8099 	beq.w	8009c76 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b44:	4a5b      	ldr	r2, [pc, #364]	; (8009cb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	f200 809e 	bhi.w	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009b50:	f000 8091 	beq.w	8009c76 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009b58:	f200 8096 	bhi.w	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b60:	f000 8089 	beq.w	8009c76 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b68:	f200 808e 	bhi.w	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b70:	d03e      	beq.n	8009bf0 <HAL_TIM_ConfigClockSource+0x120>
 8009b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b76:	f200 8087 	bhi.w	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b7e:	f000 8085 	beq.w	8009c8c <HAL_TIM_ConfigClockSource+0x1bc>
 8009b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b86:	d87f      	bhi.n	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b88:	2b70      	cmp	r3, #112	; 0x70
 8009b8a:	d01a      	beq.n	8009bc2 <HAL_TIM_ConfigClockSource+0xf2>
 8009b8c:	2b70      	cmp	r3, #112	; 0x70
 8009b8e:	d87b      	bhi.n	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b90:	2b60      	cmp	r3, #96	; 0x60
 8009b92:	d050      	beq.n	8009c36 <HAL_TIM_ConfigClockSource+0x166>
 8009b94:	2b60      	cmp	r3, #96	; 0x60
 8009b96:	d877      	bhi.n	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b98:	2b50      	cmp	r3, #80	; 0x50
 8009b9a:	d03c      	beq.n	8009c16 <HAL_TIM_ConfigClockSource+0x146>
 8009b9c:	2b50      	cmp	r3, #80	; 0x50
 8009b9e:	d873      	bhi.n	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009ba0:	2b40      	cmp	r3, #64	; 0x40
 8009ba2:	d058      	beq.n	8009c56 <HAL_TIM_ConfigClockSource+0x186>
 8009ba4:	2b40      	cmp	r3, #64	; 0x40
 8009ba6:	d86f      	bhi.n	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009ba8:	2b30      	cmp	r3, #48	; 0x30
 8009baa:	d064      	beq.n	8009c76 <HAL_TIM_ConfigClockSource+0x1a6>
 8009bac:	2b30      	cmp	r3, #48	; 0x30
 8009bae:	d86b      	bhi.n	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009bb0:	2b20      	cmp	r3, #32
 8009bb2:	d060      	beq.n	8009c76 <HAL_TIM_ConfigClockSource+0x1a6>
 8009bb4:	2b20      	cmp	r3, #32
 8009bb6:	d867      	bhi.n	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d05c      	beq.n	8009c76 <HAL_TIM_ConfigClockSource+0x1a6>
 8009bbc:	2b10      	cmp	r3, #16
 8009bbe:	d05a      	beq.n	8009c76 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009bc0:	e062      	b.n	8009c88 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6818      	ldr	r0, [r3, #0]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	6899      	ldr	r1, [r3, #8]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	f000 fc89 	bl	800a4e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009be4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	609a      	str	r2, [r3, #8]
      break;
 8009bee:	e04e      	b.n	8009c8e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6818      	ldr	r0, [r3, #0]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	6899      	ldr	r1, [r3, #8]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	f000 fc72 	bl	800a4e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689a      	ldr	r2, [r3, #8]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c12:	609a      	str	r2, [r3, #8]
      break;
 8009c14:	e03b      	b.n	8009c8e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6818      	ldr	r0, [r3, #0]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	6859      	ldr	r1, [r3, #4]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	461a      	mov	r2, r3
 8009c24:	f000 fbe2 	bl	800a3ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2150      	movs	r1, #80	; 0x50
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fc3c 	bl	800a4ac <TIM_ITRx_SetConfig>
      break;
 8009c34:	e02b      	b.n	8009c8e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6818      	ldr	r0, [r3, #0]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	6859      	ldr	r1, [r3, #4]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	461a      	mov	r2, r3
 8009c44:	f000 fc01 	bl	800a44a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2160      	movs	r1, #96	; 0x60
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 fc2c 	bl	800a4ac <TIM_ITRx_SetConfig>
      break;
 8009c54:	e01b      	b.n	8009c8e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6818      	ldr	r0, [r3, #0]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	6859      	ldr	r1, [r3, #4]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	461a      	mov	r2, r3
 8009c64:	f000 fbc2 	bl	800a3ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2140      	movs	r1, #64	; 0x40
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fc1c 	bl	800a4ac <TIM_ITRx_SetConfig>
      break;
 8009c74:	e00b      	b.n	8009c8e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4610      	mov	r0, r2
 8009c82:	f000 fc13 	bl	800a4ac <TIM_ITRx_SetConfig>
        break;
 8009c86:	e002      	b.n	8009c8e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009c88:	bf00      	nop
 8009c8a:	e000      	b.n	8009c8e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009c8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	ffceff88 	.word	0xffceff88
 8009cac:	00100040 	.word	0x00100040
 8009cb0:	00100030 	.word	0x00100030
 8009cb4:	00100020 	.word	0x00100020

08009cb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a40      	ldr	r2, [pc, #256]	; (8009e30 <TIM_Base_SetConfig+0x114>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d013      	beq.n	8009d5c <TIM_Base_SetConfig+0x40>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d3a:	d00f      	beq.n	8009d5c <TIM_Base_SetConfig+0x40>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a3d      	ldr	r2, [pc, #244]	; (8009e34 <TIM_Base_SetConfig+0x118>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d00b      	beq.n	8009d5c <TIM_Base_SetConfig+0x40>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a3c      	ldr	r2, [pc, #240]	; (8009e38 <TIM_Base_SetConfig+0x11c>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d007      	beq.n	8009d5c <TIM_Base_SetConfig+0x40>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a3b      	ldr	r2, [pc, #236]	; (8009e3c <TIM_Base_SetConfig+0x120>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d003      	beq.n	8009d5c <TIM_Base_SetConfig+0x40>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a3a      	ldr	r2, [pc, #232]	; (8009e40 <TIM_Base_SetConfig+0x124>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d108      	bne.n	8009d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a2f      	ldr	r2, [pc, #188]	; (8009e30 <TIM_Base_SetConfig+0x114>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d01f      	beq.n	8009db6 <TIM_Base_SetConfig+0x9a>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d7c:	d01b      	beq.n	8009db6 <TIM_Base_SetConfig+0x9a>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a2c      	ldr	r2, [pc, #176]	; (8009e34 <TIM_Base_SetConfig+0x118>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d017      	beq.n	8009db6 <TIM_Base_SetConfig+0x9a>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a2b      	ldr	r2, [pc, #172]	; (8009e38 <TIM_Base_SetConfig+0x11c>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d013      	beq.n	8009db6 <TIM_Base_SetConfig+0x9a>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a2a      	ldr	r2, [pc, #168]	; (8009e3c <TIM_Base_SetConfig+0x120>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d00f      	beq.n	8009db6 <TIM_Base_SetConfig+0x9a>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a29      	ldr	r2, [pc, #164]	; (8009e40 <TIM_Base_SetConfig+0x124>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d00b      	beq.n	8009db6 <TIM_Base_SetConfig+0x9a>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a28      	ldr	r2, [pc, #160]	; (8009e44 <TIM_Base_SetConfig+0x128>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d007      	beq.n	8009db6 <TIM_Base_SetConfig+0x9a>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a27      	ldr	r2, [pc, #156]	; (8009e48 <TIM_Base_SetConfig+0x12c>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d003      	beq.n	8009db6 <TIM_Base_SetConfig+0x9a>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a26      	ldr	r2, [pc, #152]	; (8009e4c <TIM_Base_SetConfig+0x130>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d108      	bne.n	8009dc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a10      	ldr	r2, [pc, #64]	; (8009e30 <TIM_Base_SetConfig+0x114>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d00f      	beq.n	8009e14 <TIM_Base_SetConfig+0xf8>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a12      	ldr	r2, [pc, #72]	; (8009e40 <TIM_Base_SetConfig+0x124>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00b      	beq.n	8009e14 <TIM_Base_SetConfig+0xf8>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a11      	ldr	r2, [pc, #68]	; (8009e44 <TIM_Base_SetConfig+0x128>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d007      	beq.n	8009e14 <TIM_Base_SetConfig+0xf8>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a10      	ldr	r2, [pc, #64]	; (8009e48 <TIM_Base_SetConfig+0x12c>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d003      	beq.n	8009e14 <TIM_Base_SetConfig+0xf8>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a0f      	ldr	r2, [pc, #60]	; (8009e4c <TIM_Base_SetConfig+0x130>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d103      	bne.n	8009e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	691a      	ldr	r2, [r3, #16]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	615a      	str	r2, [r3, #20]
}
 8009e22:	bf00      	nop
 8009e24:	3714      	adds	r7, #20
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	40010000 	.word	0x40010000
 8009e34:	40000400 	.word	0x40000400
 8009e38:	40000800 	.word	0x40000800
 8009e3c:	40000c00 	.word	0x40000c00
 8009e40:	40010400 	.word	0x40010400
 8009e44:	40014000 	.word	0x40014000
 8009e48:	40014400 	.word	0x40014400
 8009e4c:	40014800 	.word	0x40014800

08009e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	f023 0201 	bic.w	r2, r3, #1
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	4b37      	ldr	r3, [pc, #220]	; (8009f58 <TIM_OC1_SetConfig+0x108>)
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 0303 	bic.w	r3, r3, #3
 8009e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f023 0302 	bic.w	r3, r3, #2
 8009e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a2d      	ldr	r2, [pc, #180]	; (8009f5c <TIM_OC1_SetConfig+0x10c>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d00f      	beq.n	8009ecc <TIM_OC1_SetConfig+0x7c>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a2c      	ldr	r2, [pc, #176]	; (8009f60 <TIM_OC1_SetConfig+0x110>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d00b      	beq.n	8009ecc <TIM_OC1_SetConfig+0x7c>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a2b      	ldr	r2, [pc, #172]	; (8009f64 <TIM_OC1_SetConfig+0x114>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d007      	beq.n	8009ecc <TIM_OC1_SetConfig+0x7c>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a2a      	ldr	r2, [pc, #168]	; (8009f68 <TIM_OC1_SetConfig+0x118>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d003      	beq.n	8009ecc <TIM_OC1_SetConfig+0x7c>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a29      	ldr	r2, [pc, #164]	; (8009f6c <TIM_OC1_SetConfig+0x11c>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d10c      	bne.n	8009ee6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f023 0308 	bic.w	r3, r3, #8
 8009ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f023 0304 	bic.w	r3, r3, #4
 8009ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a1c      	ldr	r2, [pc, #112]	; (8009f5c <TIM_OC1_SetConfig+0x10c>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d00f      	beq.n	8009f0e <TIM_OC1_SetConfig+0xbe>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a1b      	ldr	r2, [pc, #108]	; (8009f60 <TIM_OC1_SetConfig+0x110>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d00b      	beq.n	8009f0e <TIM_OC1_SetConfig+0xbe>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a1a      	ldr	r2, [pc, #104]	; (8009f64 <TIM_OC1_SetConfig+0x114>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d007      	beq.n	8009f0e <TIM_OC1_SetConfig+0xbe>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a19      	ldr	r2, [pc, #100]	; (8009f68 <TIM_OC1_SetConfig+0x118>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d003      	beq.n	8009f0e <TIM_OC1_SetConfig+0xbe>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a18      	ldr	r2, [pc, #96]	; (8009f6c <TIM_OC1_SetConfig+0x11c>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d111      	bne.n	8009f32 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	621a      	str	r2, [r3, #32]
}
 8009f4c:	bf00      	nop
 8009f4e:	371c      	adds	r7, #28
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	fffeff8f 	.word	0xfffeff8f
 8009f5c:	40010000 	.word	0x40010000
 8009f60:	40010400 	.word	0x40010400
 8009f64:	40014000 	.word	0x40014000
 8009f68:	40014400 	.word	0x40014400
 8009f6c:	40014800 	.word	0x40014800

08009f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	f023 0210 	bic.w	r2, r3, #16
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4b34      	ldr	r3, [pc, #208]	; (800a06c <TIM_OC2_SetConfig+0xfc>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	021b      	lsls	r3, r3, #8
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f023 0320 	bic.w	r3, r3, #32
 8009fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	011b      	lsls	r3, r3, #4
 8009fc2:	697a      	ldr	r2, [r7, #20]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a29      	ldr	r2, [pc, #164]	; (800a070 <TIM_OC2_SetConfig+0x100>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d003      	beq.n	8009fd8 <TIM_OC2_SetConfig+0x68>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a28      	ldr	r2, [pc, #160]	; (800a074 <TIM_OC2_SetConfig+0x104>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d10d      	bne.n	8009ff4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	011b      	lsls	r3, r3, #4
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a1e      	ldr	r2, [pc, #120]	; (800a070 <TIM_OC2_SetConfig+0x100>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d00f      	beq.n	800a01c <TIM_OC2_SetConfig+0xac>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a1d      	ldr	r2, [pc, #116]	; (800a074 <TIM_OC2_SetConfig+0x104>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d00b      	beq.n	800a01c <TIM_OC2_SetConfig+0xac>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a1c      	ldr	r2, [pc, #112]	; (800a078 <TIM_OC2_SetConfig+0x108>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d007      	beq.n	800a01c <TIM_OC2_SetConfig+0xac>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a1b      	ldr	r2, [pc, #108]	; (800a07c <TIM_OC2_SetConfig+0x10c>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d003      	beq.n	800a01c <TIM_OC2_SetConfig+0xac>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a1a      	ldr	r2, [pc, #104]	; (800a080 <TIM_OC2_SetConfig+0x110>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d113      	bne.n	800a044 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a02a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	4313      	orrs	r3, r2
 800a036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	4313      	orrs	r3, r2
 800a042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685a      	ldr	r2, [r3, #4]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	697a      	ldr	r2, [r7, #20]
 800a05c:	621a      	str	r2, [r3, #32]
}
 800a05e:	bf00      	nop
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	feff8fff 	.word	0xfeff8fff
 800a070:	40010000 	.word	0x40010000
 800a074:	40010400 	.word	0x40010400
 800a078:	40014000 	.word	0x40014000
 800a07c:	40014400 	.word	0x40014400
 800a080:	40014800 	.word	0x40014800

0800a084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a1b      	ldr	r3, [r3, #32]
 800a092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f023 0303 	bic.w	r3, r3, #3
 800a0ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	021b      	lsls	r3, r3, #8
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a27      	ldr	r2, [pc, #156]	; (800a17c <TIM_OC3_SetConfig+0xf8>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d003      	beq.n	800a0ea <TIM_OC3_SetConfig+0x66>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a26      	ldr	r2, [pc, #152]	; (800a180 <TIM_OC3_SetConfig+0xfc>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d10d      	bne.n	800a106 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	021b      	lsls	r3, r3, #8
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a1c      	ldr	r2, [pc, #112]	; (800a17c <TIM_OC3_SetConfig+0xf8>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d00f      	beq.n	800a12e <TIM_OC3_SetConfig+0xaa>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a1b      	ldr	r2, [pc, #108]	; (800a180 <TIM_OC3_SetConfig+0xfc>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d00b      	beq.n	800a12e <TIM_OC3_SetConfig+0xaa>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a1a      	ldr	r2, [pc, #104]	; (800a184 <TIM_OC3_SetConfig+0x100>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d007      	beq.n	800a12e <TIM_OC3_SetConfig+0xaa>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a19      	ldr	r2, [pc, #100]	; (800a188 <TIM_OC3_SetConfig+0x104>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d003      	beq.n	800a12e <TIM_OC3_SetConfig+0xaa>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a18      	ldr	r2, [pc, #96]	; (800a18c <TIM_OC3_SetConfig+0x108>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d113      	bne.n	800a156 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a13c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	695b      	ldr	r3, [r3, #20]
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	4313      	orrs	r3, r2
 800a148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	011b      	lsls	r3, r3, #4
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	4313      	orrs	r3, r2
 800a154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	621a      	str	r2, [r3, #32]
}
 800a170:	bf00      	nop
 800a172:	371c      	adds	r7, #28
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	40010000 	.word	0x40010000
 800a180:	40010400 	.word	0x40010400
 800a184:	40014000 	.word	0x40014000
 800a188:	40014400 	.word	0x40014400
 800a18c:	40014800 	.word	0x40014800

0800a190 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a190:	b480      	push	{r7}
 800a192:	b087      	sub	sp, #28
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	021b      	lsls	r3, r3, #8
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	031b      	lsls	r3, r3, #12
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a18      	ldr	r2, [pc, #96]	; (800a24c <TIM_OC4_SetConfig+0xbc>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d00f      	beq.n	800a210 <TIM_OC4_SetConfig+0x80>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a17      	ldr	r2, [pc, #92]	; (800a250 <TIM_OC4_SetConfig+0xc0>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00b      	beq.n	800a210 <TIM_OC4_SetConfig+0x80>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a16      	ldr	r2, [pc, #88]	; (800a254 <TIM_OC4_SetConfig+0xc4>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d007      	beq.n	800a210 <TIM_OC4_SetConfig+0x80>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a15      	ldr	r2, [pc, #84]	; (800a258 <TIM_OC4_SetConfig+0xc8>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d003      	beq.n	800a210 <TIM_OC4_SetConfig+0x80>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a14      	ldr	r2, [pc, #80]	; (800a25c <TIM_OC4_SetConfig+0xcc>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d109      	bne.n	800a224 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	019b      	lsls	r3, r3, #6
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	4313      	orrs	r3, r2
 800a222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	621a      	str	r2, [r3, #32]
}
 800a23e:	bf00      	nop
 800a240:	371c      	adds	r7, #28
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	40010000 	.word	0x40010000
 800a250:	40010400 	.word	0x40010400
 800a254:	40014000 	.word	0x40014000
 800a258:	40014400 	.word	0x40014400
 800a25c:	40014800 	.word	0x40014800

0800a260 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a28e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a2a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	041b      	lsls	r3, r3, #16
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a17      	ldr	r2, [pc, #92]	; (800a310 <TIM_OC5_SetConfig+0xb0>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d00f      	beq.n	800a2d6 <TIM_OC5_SetConfig+0x76>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a16      	ldr	r2, [pc, #88]	; (800a314 <TIM_OC5_SetConfig+0xb4>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d00b      	beq.n	800a2d6 <TIM_OC5_SetConfig+0x76>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a15      	ldr	r2, [pc, #84]	; (800a318 <TIM_OC5_SetConfig+0xb8>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d007      	beq.n	800a2d6 <TIM_OC5_SetConfig+0x76>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a14      	ldr	r2, [pc, #80]	; (800a31c <TIM_OC5_SetConfig+0xbc>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d003      	beq.n	800a2d6 <TIM_OC5_SetConfig+0x76>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a13      	ldr	r2, [pc, #76]	; (800a320 <TIM_OC5_SetConfig+0xc0>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d109      	bne.n	800a2ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	021b      	lsls	r3, r3, #8
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	685a      	ldr	r2, [r3, #4]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	621a      	str	r2, [r3, #32]
}
 800a304:	bf00      	nop
 800a306:	371c      	adds	r7, #28
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	40010000 	.word	0x40010000
 800a314:	40010400 	.word	0x40010400
 800a318:	40014000 	.word	0x40014000
 800a31c:	40014400 	.word	0x40014400
 800a320:	40014800 	.word	0x40014800

0800a324 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a324:	b480      	push	{r7}
 800a326:	b087      	sub	sp, #28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	021b      	lsls	r3, r3, #8
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	051b      	lsls	r3, r3, #20
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	4313      	orrs	r3, r2
 800a372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a18      	ldr	r2, [pc, #96]	; (800a3d8 <TIM_OC6_SetConfig+0xb4>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d00f      	beq.n	800a39c <TIM_OC6_SetConfig+0x78>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a17      	ldr	r2, [pc, #92]	; (800a3dc <TIM_OC6_SetConfig+0xb8>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d00b      	beq.n	800a39c <TIM_OC6_SetConfig+0x78>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a16      	ldr	r2, [pc, #88]	; (800a3e0 <TIM_OC6_SetConfig+0xbc>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d007      	beq.n	800a39c <TIM_OC6_SetConfig+0x78>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a15      	ldr	r2, [pc, #84]	; (800a3e4 <TIM_OC6_SetConfig+0xc0>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d003      	beq.n	800a39c <TIM_OC6_SetConfig+0x78>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a14      	ldr	r2, [pc, #80]	; (800a3e8 <TIM_OC6_SetConfig+0xc4>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d109      	bne.n	800a3b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a3a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	029b      	lsls	r3, r3, #10
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	621a      	str	r2, [r3, #32]
}
 800a3ca:	bf00      	nop
 800a3cc:	371c      	adds	r7, #28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	40010000 	.word	0x40010000
 800a3dc:	40010400 	.word	0x40010400
 800a3e0:	40014000 	.word	0x40014000
 800a3e4:	40014400 	.word	0x40014400
 800a3e8:	40014800 	.word	0x40014800

0800a3ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	f023 0201 	bic.w	r2, r3, #1
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	4313      	orrs	r3, r2
 800a420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f023 030a 	bic.w	r3, r3, #10
 800a428:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	4313      	orrs	r3, r2
 800a430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	621a      	str	r2, [r3, #32]
}
 800a43e:	bf00      	nop
 800a440:	371c      	adds	r7, #28
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b087      	sub	sp, #28
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	f023 0210 	bic.w	r2, r3, #16
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6a1b      	ldr	r3, [r3, #32]
 800a46c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	031b      	lsls	r3, r3, #12
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a486:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	4313      	orrs	r3, r2
 800a490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	621a      	str	r2, [r3, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
	...

0800a4ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	4b09      	ldr	r3, [pc, #36]	; (800a4e4 <TIM_ITRx_SetConfig+0x38>)
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	f043 0307 	orr.w	r3, r3, #7
 800a4ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	609a      	str	r2, [r3, #8]
}
 800a4d6:	bf00      	nop
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	ffcfff8f 	.word	0xffcfff8f

0800a4e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
 800a4f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a502:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	021a      	lsls	r2, r3, #8
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	431a      	orrs	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	4313      	orrs	r3, r2
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	4313      	orrs	r3, r2
 800a514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	609a      	str	r2, [r3, #8]
}
 800a51c:	bf00      	nop
 800a51e:	371c      	adds	r7, #28
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a528:	b480      	push	{r7}
 800a52a:	b087      	sub	sp, #28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f003 031f 	and.w	r3, r3, #31
 800a53a:	2201      	movs	r2, #1
 800a53c:	fa02 f303 	lsl.w	r3, r2, r3
 800a540:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6a1a      	ldr	r2, [r3, #32]
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	43db      	mvns	r3, r3
 800a54a:	401a      	ands	r2, r3
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6a1a      	ldr	r2, [r3, #32]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f003 031f 	and.w	r3, r3, #31
 800a55a:	6879      	ldr	r1, [r7, #4]
 800a55c:	fa01 f303 	lsl.w	r3, r1, r3
 800a560:	431a      	orrs	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	621a      	str	r2, [r3, #32]
}
 800a566:	bf00      	nop
 800a568:	371c      	adds	r7, #28
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
	...

0800a574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a584:	2b01      	cmp	r3, #1
 800a586:	d101      	bne.n	800a58c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a588:	2302      	movs	r3, #2
 800a58a:	e068      	b.n	800a65e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2202      	movs	r2, #2
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a2e      	ldr	r2, [pc, #184]	; (800a66c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d004      	beq.n	800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a2d      	ldr	r2, [pc, #180]	; (800a670 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d108      	bne.n	800a5d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a1e      	ldr	r2, [pc, #120]	; (800a66c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d01d      	beq.n	800a632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5fe:	d018      	beq.n	800a632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a1b      	ldr	r2, [pc, #108]	; (800a674 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d013      	beq.n	800a632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a1a      	ldr	r2, [pc, #104]	; (800a678 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d00e      	beq.n	800a632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a18      	ldr	r2, [pc, #96]	; (800a67c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d009      	beq.n	800a632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a13      	ldr	r2, [pc, #76]	; (800a670 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d004      	beq.n	800a632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a14      	ldr	r2, [pc, #80]	; (800a680 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d10c      	bne.n	800a64c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	4313      	orrs	r3, r2
 800a642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	40010000 	.word	0x40010000
 800a670:	40010400 	.word	0x40010400
 800a674:	40000400 	.word	0x40000400
 800a678:	40000800 	.word	0x40000800
 800a67c:	40000c00 	.word	0x40000c00
 800a680:	40001800 	.word	0x40001800

0800a684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a68e:	2300      	movs	r3, #0
 800a690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d101      	bne.n	800a6a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a69c:	2302      	movs	r3, #2
 800a69e:	e065      	b.n	800a76c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a706:	4313      	orrs	r3, r2
 800a708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	041b      	lsls	r3, r3, #16
 800a716:	4313      	orrs	r3, r2
 800a718:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a16      	ldr	r2, [pc, #88]	; (800a778 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d004      	beq.n	800a72e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a14      	ldr	r2, [pc, #80]	; (800a77c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d115      	bne.n	800a75a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	051b      	lsls	r3, r3, #20
 800a73a:	4313      	orrs	r3, r2
 800a73c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	69db      	ldr	r3, [r3, #28]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3714      	adds	r7, #20
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr
 800a778:	40010000 	.word	0x40010000
 800a77c:	40010400 	.word	0x40010400

0800a780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d101      	bne.n	800a7ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e042      	b.n	800a854 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d106      	bne.n	800a7e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f7f7 fad7 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2224      	movs	r2, #36	; 0x24
 800a7ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 0201 	bic.w	r2, r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f82c 	bl	800a85c <UART_SetConfig>
 800a804:	4603      	mov	r3, r0
 800a806:	2b01      	cmp	r3, #1
 800a808:	d101      	bne.n	800a80e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e022      	b.n	800a854 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a812:	2b00      	cmp	r3, #0
 800a814:	d002      	beq.n	800a81c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fd80 	bl	800b31c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	685a      	ldr	r2, [r3, #4]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a82a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	689a      	ldr	r2, [r3, #8]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a83a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f042 0201 	orr.w	r2, r2, #1
 800a84a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fe07 	bl	800b460 <UART_CheckIdleState>
 800a852:	4603      	mov	r3, r0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a85c:	b5b0      	push	{r4, r5, r7, lr}
 800a85e:	b08e      	sub	sp, #56	; 0x38
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	689a      	ldr	r2, [r3, #8]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	431a      	orrs	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	431a      	orrs	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	4313      	orrs	r3, r2
 800a880:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	4bbf      	ldr	r3, [pc, #764]	; (800ab88 <UART_SetConfig+0x32c>)
 800a88a:	4013      	ands	r3, r2
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	6812      	ldr	r2, [r2, #0]
 800a890:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a892:	430b      	orrs	r3, r1
 800a894:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68da      	ldr	r2, [r3, #12]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	430a      	orrs	r2, r1
 800a8aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4ab5      	ldr	r2, [pc, #724]	; (800ab8c <UART_SetConfig+0x330>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d004      	beq.n	800a8c6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	689a      	ldr	r2, [r3, #8]
 800a8cc:	4bb0      	ldr	r3, [pc, #704]	; (800ab90 <UART_SetConfig+0x334>)
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	6812      	ldr	r2, [r2, #0]
 800a8d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a8d6:	430b      	orrs	r3, r1
 800a8d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e0:	f023 010f 	bic.w	r1, r3, #15
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	430a      	orrs	r2, r1
 800a8ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4aa7      	ldr	r2, [pc, #668]	; (800ab94 <UART_SetConfig+0x338>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d176      	bne.n	800a9e8 <UART_SetConfig+0x18c>
 800a8fa:	4ba7      	ldr	r3, [pc, #668]	; (800ab98 <UART_SetConfig+0x33c>)
 800a8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a902:	2b28      	cmp	r3, #40	; 0x28
 800a904:	d86c      	bhi.n	800a9e0 <UART_SetConfig+0x184>
 800a906:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <UART_SetConfig+0xb0>)
 800a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90c:	0800a9b1 	.word	0x0800a9b1
 800a910:	0800a9e1 	.word	0x0800a9e1
 800a914:	0800a9e1 	.word	0x0800a9e1
 800a918:	0800a9e1 	.word	0x0800a9e1
 800a91c:	0800a9e1 	.word	0x0800a9e1
 800a920:	0800a9e1 	.word	0x0800a9e1
 800a924:	0800a9e1 	.word	0x0800a9e1
 800a928:	0800a9e1 	.word	0x0800a9e1
 800a92c:	0800a9b9 	.word	0x0800a9b9
 800a930:	0800a9e1 	.word	0x0800a9e1
 800a934:	0800a9e1 	.word	0x0800a9e1
 800a938:	0800a9e1 	.word	0x0800a9e1
 800a93c:	0800a9e1 	.word	0x0800a9e1
 800a940:	0800a9e1 	.word	0x0800a9e1
 800a944:	0800a9e1 	.word	0x0800a9e1
 800a948:	0800a9e1 	.word	0x0800a9e1
 800a94c:	0800a9c1 	.word	0x0800a9c1
 800a950:	0800a9e1 	.word	0x0800a9e1
 800a954:	0800a9e1 	.word	0x0800a9e1
 800a958:	0800a9e1 	.word	0x0800a9e1
 800a95c:	0800a9e1 	.word	0x0800a9e1
 800a960:	0800a9e1 	.word	0x0800a9e1
 800a964:	0800a9e1 	.word	0x0800a9e1
 800a968:	0800a9e1 	.word	0x0800a9e1
 800a96c:	0800a9c9 	.word	0x0800a9c9
 800a970:	0800a9e1 	.word	0x0800a9e1
 800a974:	0800a9e1 	.word	0x0800a9e1
 800a978:	0800a9e1 	.word	0x0800a9e1
 800a97c:	0800a9e1 	.word	0x0800a9e1
 800a980:	0800a9e1 	.word	0x0800a9e1
 800a984:	0800a9e1 	.word	0x0800a9e1
 800a988:	0800a9e1 	.word	0x0800a9e1
 800a98c:	0800a9d1 	.word	0x0800a9d1
 800a990:	0800a9e1 	.word	0x0800a9e1
 800a994:	0800a9e1 	.word	0x0800a9e1
 800a998:	0800a9e1 	.word	0x0800a9e1
 800a99c:	0800a9e1 	.word	0x0800a9e1
 800a9a0:	0800a9e1 	.word	0x0800a9e1
 800a9a4:	0800a9e1 	.word	0x0800a9e1
 800a9a8:	0800a9e1 	.word	0x0800a9e1
 800a9ac:	0800a9d9 	.word	0x0800a9d9
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9b6:	e222      	b.n	800adfe <UART_SetConfig+0x5a2>
 800a9b8:	2304      	movs	r3, #4
 800a9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9be:	e21e      	b.n	800adfe <UART_SetConfig+0x5a2>
 800a9c0:	2308      	movs	r3, #8
 800a9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9c6:	e21a      	b.n	800adfe <UART_SetConfig+0x5a2>
 800a9c8:	2310      	movs	r3, #16
 800a9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ce:	e216      	b.n	800adfe <UART_SetConfig+0x5a2>
 800a9d0:	2320      	movs	r3, #32
 800a9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9d6:	e212      	b.n	800adfe <UART_SetConfig+0x5a2>
 800a9d8:	2340      	movs	r3, #64	; 0x40
 800a9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9de:	e20e      	b.n	800adfe <UART_SetConfig+0x5a2>
 800a9e0:	2380      	movs	r3, #128	; 0x80
 800a9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9e6:	e20a      	b.n	800adfe <UART_SetConfig+0x5a2>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a6b      	ldr	r2, [pc, #428]	; (800ab9c <UART_SetConfig+0x340>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d130      	bne.n	800aa54 <UART_SetConfig+0x1f8>
 800a9f2:	4b69      	ldr	r3, [pc, #420]	; (800ab98 <UART_SetConfig+0x33c>)
 800a9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f6:	f003 0307 	and.w	r3, r3, #7
 800a9fa:	2b05      	cmp	r3, #5
 800a9fc:	d826      	bhi.n	800aa4c <UART_SetConfig+0x1f0>
 800a9fe:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <UART_SetConfig+0x1a8>)
 800aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa04:	0800aa1d 	.word	0x0800aa1d
 800aa08:	0800aa25 	.word	0x0800aa25
 800aa0c:	0800aa2d 	.word	0x0800aa2d
 800aa10:	0800aa35 	.word	0x0800aa35
 800aa14:	0800aa3d 	.word	0x0800aa3d
 800aa18:	0800aa45 	.word	0x0800aa45
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa22:	e1ec      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aa24:	2304      	movs	r3, #4
 800aa26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa2a:	e1e8      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aa2c:	2308      	movs	r3, #8
 800aa2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa32:	e1e4      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aa34:	2310      	movs	r3, #16
 800aa36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa3a:	e1e0      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aa3c:	2320      	movs	r3, #32
 800aa3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa42:	e1dc      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aa44:	2340      	movs	r3, #64	; 0x40
 800aa46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa4a:	e1d8      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aa4c:	2380      	movs	r3, #128	; 0x80
 800aa4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa52:	e1d4      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a51      	ldr	r2, [pc, #324]	; (800aba0 <UART_SetConfig+0x344>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d130      	bne.n	800aac0 <UART_SetConfig+0x264>
 800aa5e:	4b4e      	ldr	r3, [pc, #312]	; (800ab98 <UART_SetConfig+0x33c>)
 800aa60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa62:	f003 0307 	and.w	r3, r3, #7
 800aa66:	2b05      	cmp	r3, #5
 800aa68:	d826      	bhi.n	800aab8 <UART_SetConfig+0x25c>
 800aa6a:	a201      	add	r2, pc, #4	; (adr r2, 800aa70 <UART_SetConfig+0x214>)
 800aa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa70:	0800aa89 	.word	0x0800aa89
 800aa74:	0800aa91 	.word	0x0800aa91
 800aa78:	0800aa99 	.word	0x0800aa99
 800aa7c:	0800aaa1 	.word	0x0800aaa1
 800aa80:	0800aaa9 	.word	0x0800aaa9
 800aa84:	0800aab1 	.word	0x0800aab1
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa8e:	e1b6      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aa90:	2304      	movs	r3, #4
 800aa92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa96:	e1b2      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aa98:	2308      	movs	r3, #8
 800aa9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa9e:	e1ae      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aaa0:	2310      	movs	r3, #16
 800aaa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaa6:	e1aa      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aaa8:	2320      	movs	r3, #32
 800aaaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaae:	e1a6      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aab0:	2340      	movs	r3, #64	; 0x40
 800aab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aab6:	e1a2      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aab8:	2380      	movs	r3, #128	; 0x80
 800aaba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aabe:	e19e      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a37      	ldr	r2, [pc, #220]	; (800aba4 <UART_SetConfig+0x348>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d130      	bne.n	800ab2c <UART_SetConfig+0x2d0>
 800aaca:	4b33      	ldr	r3, [pc, #204]	; (800ab98 <UART_SetConfig+0x33c>)
 800aacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aace:	f003 0307 	and.w	r3, r3, #7
 800aad2:	2b05      	cmp	r3, #5
 800aad4:	d826      	bhi.n	800ab24 <UART_SetConfig+0x2c8>
 800aad6:	a201      	add	r2, pc, #4	; (adr r2, 800aadc <UART_SetConfig+0x280>)
 800aad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aadc:	0800aaf5 	.word	0x0800aaf5
 800aae0:	0800aafd 	.word	0x0800aafd
 800aae4:	0800ab05 	.word	0x0800ab05
 800aae8:	0800ab0d 	.word	0x0800ab0d
 800aaec:	0800ab15 	.word	0x0800ab15
 800aaf0:	0800ab1d 	.word	0x0800ab1d
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aafa:	e180      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aafc:	2304      	movs	r3, #4
 800aafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab02:	e17c      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ab04:	2308      	movs	r3, #8
 800ab06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab0a:	e178      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ab0c:	2310      	movs	r3, #16
 800ab0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab12:	e174      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ab14:	2320      	movs	r3, #32
 800ab16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab1a:	e170      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ab1c:	2340      	movs	r3, #64	; 0x40
 800ab1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab22:	e16c      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ab24:	2380      	movs	r3, #128	; 0x80
 800ab26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab2a:	e168      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a1d      	ldr	r2, [pc, #116]	; (800aba8 <UART_SetConfig+0x34c>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d142      	bne.n	800abbc <UART_SetConfig+0x360>
 800ab36:	4b18      	ldr	r3, [pc, #96]	; (800ab98 <UART_SetConfig+0x33c>)
 800ab38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab3a:	f003 0307 	and.w	r3, r3, #7
 800ab3e:	2b05      	cmp	r3, #5
 800ab40:	d838      	bhi.n	800abb4 <UART_SetConfig+0x358>
 800ab42:	a201      	add	r2, pc, #4	; (adr r2, 800ab48 <UART_SetConfig+0x2ec>)
 800ab44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab48:	0800ab61 	.word	0x0800ab61
 800ab4c:	0800ab69 	.word	0x0800ab69
 800ab50:	0800ab71 	.word	0x0800ab71
 800ab54:	0800ab79 	.word	0x0800ab79
 800ab58:	0800ab81 	.word	0x0800ab81
 800ab5c:	0800abad 	.word	0x0800abad
 800ab60:	2300      	movs	r3, #0
 800ab62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab66:	e14a      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ab68:	2304      	movs	r3, #4
 800ab6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab6e:	e146      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ab70:	2308      	movs	r3, #8
 800ab72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab76:	e142      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ab78:	2310      	movs	r3, #16
 800ab7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab7e:	e13e      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ab80:	2320      	movs	r3, #32
 800ab82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab86:	e13a      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ab88:	cfff69f3 	.word	0xcfff69f3
 800ab8c:	58000c00 	.word	0x58000c00
 800ab90:	11fff4ff 	.word	0x11fff4ff
 800ab94:	40011000 	.word	0x40011000
 800ab98:	58024400 	.word	0x58024400
 800ab9c:	40004400 	.word	0x40004400
 800aba0:	40004800 	.word	0x40004800
 800aba4:	40004c00 	.word	0x40004c00
 800aba8:	40005000 	.word	0x40005000
 800abac:	2340      	movs	r3, #64	; 0x40
 800abae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abb2:	e124      	b.n	800adfe <UART_SetConfig+0x5a2>
 800abb4:	2380      	movs	r3, #128	; 0x80
 800abb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abba:	e120      	b.n	800adfe <UART_SetConfig+0x5a2>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4acc      	ldr	r2, [pc, #816]	; (800aef4 <UART_SetConfig+0x698>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d176      	bne.n	800acb4 <UART_SetConfig+0x458>
 800abc6:	4bcc      	ldr	r3, [pc, #816]	; (800aef8 <UART_SetConfig+0x69c>)
 800abc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abce:	2b28      	cmp	r3, #40	; 0x28
 800abd0:	d86c      	bhi.n	800acac <UART_SetConfig+0x450>
 800abd2:	a201      	add	r2, pc, #4	; (adr r2, 800abd8 <UART_SetConfig+0x37c>)
 800abd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd8:	0800ac7d 	.word	0x0800ac7d
 800abdc:	0800acad 	.word	0x0800acad
 800abe0:	0800acad 	.word	0x0800acad
 800abe4:	0800acad 	.word	0x0800acad
 800abe8:	0800acad 	.word	0x0800acad
 800abec:	0800acad 	.word	0x0800acad
 800abf0:	0800acad 	.word	0x0800acad
 800abf4:	0800acad 	.word	0x0800acad
 800abf8:	0800ac85 	.word	0x0800ac85
 800abfc:	0800acad 	.word	0x0800acad
 800ac00:	0800acad 	.word	0x0800acad
 800ac04:	0800acad 	.word	0x0800acad
 800ac08:	0800acad 	.word	0x0800acad
 800ac0c:	0800acad 	.word	0x0800acad
 800ac10:	0800acad 	.word	0x0800acad
 800ac14:	0800acad 	.word	0x0800acad
 800ac18:	0800ac8d 	.word	0x0800ac8d
 800ac1c:	0800acad 	.word	0x0800acad
 800ac20:	0800acad 	.word	0x0800acad
 800ac24:	0800acad 	.word	0x0800acad
 800ac28:	0800acad 	.word	0x0800acad
 800ac2c:	0800acad 	.word	0x0800acad
 800ac30:	0800acad 	.word	0x0800acad
 800ac34:	0800acad 	.word	0x0800acad
 800ac38:	0800ac95 	.word	0x0800ac95
 800ac3c:	0800acad 	.word	0x0800acad
 800ac40:	0800acad 	.word	0x0800acad
 800ac44:	0800acad 	.word	0x0800acad
 800ac48:	0800acad 	.word	0x0800acad
 800ac4c:	0800acad 	.word	0x0800acad
 800ac50:	0800acad 	.word	0x0800acad
 800ac54:	0800acad 	.word	0x0800acad
 800ac58:	0800ac9d 	.word	0x0800ac9d
 800ac5c:	0800acad 	.word	0x0800acad
 800ac60:	0800acad 	.word	0x0800acad
 800ac64:	0800acad 	.word	0x0800acad
 800ac68:	0800acad 	.word	0x0800acad
 800ac6c:	0800acad 	.word	0x0800acad
 800ac70:	0800acad 	.word	0x0800acad
 800ac74:	0800acad 	.word	0x0800acad
 800ac78:	0800aca5 	.word	0x0800aca5
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac82:	e0bc      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ac84:	2304      	movs	r3, #4
 800ac86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac8a:	e0b8      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ac8c:	2308      	movs	r3, #8
 800ac8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac92:	e0b4      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ac94:	2310      	movs	r3, #16
 800ac96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac9a:	e0b0      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ac9c:	2320      	movs	r3, #32
 800ac9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aca2:	e0ac      	b.n	800adfe <UART_SetConfig+0x5a2>
 800aca4:	2340      	movs	r3, #64	; 0x40
 800aca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acaa:	e0a8      	b.n	800adfe <UART_SetConfig+0x5a2>
 800acac:	2380      	movs	r3, #128	; 0x80
 800acae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acb2:	e0a4      	b.n	800adfe <UART_SetConfig+0x5a2>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a90      	ldr	r2, [pc, #576]	; (800aefc <UART_SetConfig+0x6a0>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d130      	bne.n	800ad20 <UART_SetConfig+0x4c4>
 800acbe:	4b8e      	ldr	r3, [pc, #568]	; (800aef8 <UART_SetConfig+0x69c>)
 800acc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc2:	f003 0307 	and.w	r3, r3, #7
 800acc6:	2b05      	cmp	r3, #5
 800acc8:	d826      	bhi.n	800ad18 <UART_SetConfig+0x4bc>
 800acca:	a201      	add	r2, pc, #4	; (adr r2, 800acd0 <UART_SetConfig+0x474>)
 800accc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd0:	0800ace9 	.word	0x0800ace9
 800acd4:	0800acf1 	.word	0x0800acf1
 800acd8:	0800acf9 	.word	0x0800acf9
 800acdc:	0800ad01 	.word	0x0800ad01
 800ace0:	0800ad09 	.word	0x0800ad09
 800ace4:	0800ad11 	.word	0x0800ad11
 800ace8:	2300      	movs	r3, #0
 800acea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acee:	e086      	b.n	800adfe <UART_SetConfig+0x5a2>
 800acf0:	2304      	movs	r3, #4
 800acf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acf6:	e082      	b.n	800adfe <UART_SetConfig+0x5a2>
 800acf8:	2308      	movs	r3, #8
 800acfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acfe:	e07e      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ad00:	2310      	movs	r3, #16
 800ad02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad06:	e07a      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ad08:	2320      	movs	r3, #32
 800ad0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad0e:	e076      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ad10:	2340      	movs	r3, #64	; 0x40
 800ad12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad16:	e072      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ad18:	2380      	movs	r3, #128	; 0x80
 800ad1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad1e:	e06e      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a76      	ldr	r2, [pc, #472]	; (800af00 <UART_SetConfig+0x6a4>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d130      	bne.n	800ad8c <UART_SetConfig+0x530>
 800ad2a:	4b73      	ldr	r3, [pc, #460]	; (800aef8 <UART_SetConfig+0x69c>)
 800ad2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad2e:	f003 0307 	and.w	r3, r3, #7
 800ad32:	2b05      	cmp	r3, #5
 800ad34:	d826      	bhi.n	800ad84 <UART_SetConfig+0x528>
 800ad36:	a201      	add	r2, pc, #4	; (adr r2, 800ad3c <UART_SetConfig+0x4e0>)
 800ad38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3c:	0800ad55 	.word	0x0800ad55
 800ad40:	0800ad5d 	.word	0x0800ad5d
 800ad44:	0800ad65 	.word	0x0800ad65
 800ad48:	0800ad6d 	.word	0x0800ad6d
 800ad4c:	0800ad75 	.word	0x0800ad75
 800ad50:	0800ad7d 	.word	0x0800ad7d
 800ad54:	2300      	movs	r3, #0
 800ad56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad5a:	e050      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ad5c:	2304      	movs	r3, #4
 800ad5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad62:	e04c      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ad64:	2308      	movs	r3, #8
 800ad66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad6a:	e048      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ad6c:	2310      	movs	r3, #16
 800ad6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad72:	e044      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ad74:	2320      	movs	r3, #32
 800ad76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad7a:	e040      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ad7c:	2340      	movs	r3, #64	; 0x40
 800ad7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad82:	e03c      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ad84:	2380      	movs	r3, #128	; 0x80
 800ad86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad8a:	e038      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a5c      	ldr	r2, [pc, #368]	; (800af04 <UART_SetConfig+0x6a8>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d130      	bne.n	800adf8 <UART_SetConfig+0x59c>
 800ad96:	4b58      	ldr	r3, [pc, #352]	; (800aef8 <UART_SetConfig+0x69c>)
 800ad98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad9a:	f003 0307 	and.w	r3, r3, #7
 800ad9e:	2b05      	cmp	r3, #5
 800ada0:	d826      	bhi.n	800adf0 <UART_SetConfig+0x594>
 800ada2:	a201      	add	r2, pc, #4	; (adr r2, 800ada8 <UART_SetConfig+0x54c>)
 800ada4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada8:	0800adc1 	.word	0x0800adc1
 800adac:	0800adc9 	.word	0x0800adc9
 800adb0:	0800add1 	.word	0x0800add1
 800adb4:	0800add9 	.word	0x0800add9
 800adb8:	0800ade1 	.word	0x0800ade1
 800adbc:	0800ade9 	.word	0x0800ade9
 800adc0:	2302      	movs	r3, #2
 800adc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adc6:	e01a      	b.n	800adfe <UART_SetConfig+0x5a2>
 800adc8:	2304      	movs	r3, #4
 800adca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adce:	e016      	b.n	800adfe <UART_SetConfig+0x5a2>
 800add0:	2308      	movs	r3, #8
 800add2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800add6:	e012      	b.n	800adfe <UART_SetConfig+0x5a2>
 800add8:	2310      	movs	r3, #16
 800adda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adde:	e00e      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ade0:	2320      	movs	r3, #32
 800ade2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ade6:	e00a      	b.n	800adfe <UART_SetConfig+0x5a2>
 800ade8:	2340      	movs	r3, #64	; 0x40
 800adea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adee:	e006      	b.n	800adfe <UART_SetConfig+0x5a2>
 800adf0:	2380      	movs	r3, #128	; 0x80
 800adf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adf6:	e002      	b.n	800adfe <UART_SetConfig+0x5a2>
 800adf8:	2380      	movs	r3, #128	; 0x80
 800adfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a40      	ldr	r2, [pc, #256]	; (800af04 <UART_SetConfig+0x6a8>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	f040 80ef 	bne.w	800afe8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae0e:	2b20      	cmp	r3, #32
 800ae10:	dc46      	bgt.n	800aea0 <UART_SetConfig+0x644>
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	f2c0 8081 	blt.w	800af1a <UART_SetConfig+0x6be>
 800ae18:	3b02      	subs	r3, #2
 800ae1a:	2b1e      	cmp	r3, #30
 800ae1c:	d87d      	bhi.n	800af1a <UART_SetConfig+0x6be>
 800ae1e:	a201      	add	r2, pc, #4	; (adr r2, 800ae24 <UART_SetConfig+0x5c8>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800aea7 	.word	0x0800aea7
 800ae28:	0800af1b 	.word	0x0800af1b
 800ae2c:	0800aeaf 	.word	0x0800aeaf
 800ae30:	0800af1b 	.word	0x0800af1b
 800ae34:	0800af1b 	.word	0x0800af1b
 800ae38:	0800af1b 	.word	0x0800af1b
 800ae3c:	0800aebf 	.word	0x0800aebf
 800ae40:	0800af1b 	.word	0x0800af1b
 800ae44:	0800af1b 	.word	0x0800af1b
 800ae48:	0800af1b 	.word	0x0800af1b
 800ae4c:	0800af1b 	.word	0x0800af1b
 800ae50:	0800af1b 	.word	0x0800af1b
 800ae54:	0800af1b 	.word	0x0800af1b
 800ae58:	0800af1b 	.word	0x0800af1b
 800ae5c:	0800aecf 	.word	0x0800aecf
 800ae60:	0800af1b 	.word	0x0800af1b
 800ae64:	0800af1b 	.word	0x0800af1b
 800ae68:	0800af1b 	.word	0x0800af1b
 800ae6c:	0800af1b 	.word	0x0800af1b
 800ae70:	0800af1b 	.word	0x0800af1b
 800ae74:	0800af1b 	.word	0x0800af1b
 800ae78:	0800af1b 	.word	0x0800af1b
 800ae7c:	0800af1b 	.word	0x0800af1b
 800ae80:	0800af1b 	.word	0x0800af1b
 800ae84:	0800af1b 	.word	0x0800af1b
 800ae88:	0800af1b 	.word	0x0800af1b
 800ae8c:	0800af1b 	.word	0x0800af1b
 800ae90:	0800af1b 	.word	0x0800af1b
 800ae94:	0800af1b 	.word	0x0800af1b
 800ae98:	0800af1b 	.word	0x0800af1b
 800ae9c:	0800af0d 	.word	0x0800af0d
 800aea0:	2b40      	cmp	r3, #64	; 0x40
 800aea2:	d036      	beq.n	800af12 <UART_SetConfig+0x6b6>
 800aea4:	e039      	b.n	800af1a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aea6:	f7fd fb6f 	bl	8008588 <HAL_RCCEx_GetD3PCLK1Freq>
 800aeaa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aeac:	e03b      	b.n	800af26 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeae:	f107 0314 	add.w	r3, r7, #20
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fd fb7e 	bl	80085b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aebc:	e033      	b.n	800af26 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aebe:	f107 0308 	add.w	r3, r7, #8
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fd fcca 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aecc:	e02b      	b.n	800af26 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aece:	4b0a      	ldr	r3, [pc, #40]	; (800aef8 <UART_SetConfig+0x69c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 0320 	and.w	r3, r3, #32
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d009      	beq.n	800aeee <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aeda:	4b07      	ldr	r3, [pc, #28]	; (800aef8 <UART_SetConfig+0x69c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	08db      	lsrs	r3, r3, #3
 800aee0:	f003 0303 	and.w	r3, r3, #3
 800aee4:	4a08      	ldr	r2, [pc, #32]	; (800af08 <UART_SetConfig+0x6ac>)
 800aee6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aeec:	e01b      	b.n	800af26 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800aeee:	4b06      	ldr	r3, [pc, #24]	; (800af08 <UART_SetConfig+0x6ac>)
 800aef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aef2:	e018      	b.n	800af26 <UART_SetConfig+0x6ca>
 800aef4:	40011400 	.word	0x40011400
 800aef8:	58024400 	.word	0x58024400
 800aefc:	40007800 	.word	0x40007800
 800af00:	40007c00 	.word	0x40007c00
 800af04:	58000c00 	.word	0x58000c00
 800af08:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af0c:	4bc4      	ldr	r3, [pc, #784]	; (800b220 <UART_SetConfig+0x9c4>)
 800af0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af10:	e009      	b.n	800af26 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af18:	e005      	b.n	800af26 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800af1a:	2300      	movs	r3, #0
 800af1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800af24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 81da 	beq.w	800b2e2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af32:	4abc      	ldr	r2, [pc, #752]	; (800b224 <UART_SetConfig+0x9c8>)
 800af34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af38:	461a      	mov	r2, r3
 800af3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af40:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	685a      	ldr	r2, [r3, #4]
 800af46:	4613      	mov	r3, r2
 800af48:	005b      	lsls	r3, r3, #1
 800af4a:	4413      	add	r3, r2
 800af4c:	6a3a      	ldr	r2, [r7, #32]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d305      	bcc.n	800af5e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af58:	6a3a      	ldr	r2, [r7, #32]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d903      	bls.n	800af66 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800af64:	e1bd      	b.n	800b2e2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af68:	4618      	mov	r0, r3
 800af6a:	f04f 0100 	mov.w	r1, #0
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af72:	4aac      	ldr	r2, [pc, #688]	; (800b224 <UART_SetConfig+0x9c8>)
 800af74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af78:	b29a      	uxth	r2, r3
 800af7a:	f04f 0300 	mov.w	r3, #0
 800af7e:	f7f5 f9ab 	bl	80002d8 <__aeabi_uldivmod>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	4610      	mov	r0, r2
 800af88:	4619      	mov	r1, r3
 800af8a:	f04f 0200 	mov.w	r2, #0
 800af8e:	f04f 0300 	mov.w	r3, #0
 800af92:	020b      	lsls	r3, r1, #8
 800af94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af98:	0202      	lsls	r2, r0, #8
 800af9a:	6879      	ldr	r1, [r7, #4]
 800af9c:	6849      	ldr	r1, [r1, #4]
 800af9e:	0849      	lsrs	r1, r1, #1
 800afa0:	4608      	mov	r0, r1
 800afa2:	f04f 0100 	mov.w	r1, #0
 800afa6:	1814      	adds	r4, r2, r0
 800afa8:	eb43 0501 	adc.w	r5, r3, r1
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	461a      	mov	r2, r3
 800afb2:	f04f 0300 	mov.w	r3, #0
 800afb6:	4620      	mov	r0, r4
 800afb8:	4629      	mov	r1, r5
 800afba:	f7f5 f98d 	bl	80002d8 <__aeabi_uldivmod>
 800afbe:	4602      	mov	r2, r0
 800afc0:	460b      	mov	r3, r1
 800afc2:	4613      	mov	r3, r2
 800afc4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800afc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afcc:	d308      	bcc.n	800afe0 <UART_SetConfig+0x784>
 800afce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afd4:	d204      	bcs.n	800afe0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afdc:	60da      	str	r2, [r3, #12]
 800afde:	e180      	b.n	800b2e2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800afe6:	e17c      	b.n	800b2e2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	69db      	ldr	r3, [r3, #28]
 800afec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aff0:	f040 80bf 	bne.w	800b172 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800aff4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aff8:	2b20      	cmp	r3, #32
 800affa:	dc49      	bgt.n	800b090 <UART_SetConfig+0x834>
 800affc:	2b00      	cmp	r3, #0
 800affe:	db7c      	blt.n	800b0fa <UART_SetConfig+0x89e>
 800b000:	2b20      	cmp	r3, #32
 800b002:	d87a      	bhi.n	800b0fa <UART_SetConfig+0x89e>
 800b004:	a201      	add	r2, pc, #4	; (adr r2, 800b00c <UART_SetConfig+0x7b0>)
 800b006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00a:	bf00      	nop
 800b00c:	0800b097 	.word	0x0800b097
 800b010:	0800b09f 	.word	0x0800b09f
 800b014:	0800b0fb 	.word	0x0800b0fb
 800b018:	0800b0fb 	.word	0x0800b0fb
 800b01c:	0800b0a7 	.word	0x0800b0a7
 800b020:	0800b0fb 	.word	0x0800b0fb
 800b024:	0800b0fb 	.word	0x0800b0fb
 800b028:	0800b0fb 	.word	0x0800b0fb
 800b02c:	0800b0b7 	.word	0x0800b0b7
 800b030:	0800b0fb 	.word	0x0800b0fb
 800b034:	0800b0fb 	.word	0x0800b0fb
 800b038:	0800b0fb 	.word	0x0800b0fb
 800b03c:	0800b0fb 	.word	0x0800b0fb
 800b040:	0800b0fb 	.word	0x0800b0fb
 800b044:	0800b0fb 	.word	0x0800b0fb
 800b048:	0800b0fb 	.word	0x0800b0fb
 800b04c:	0800b0c7 	.word	0x0800b0c7
 800b050:	0800b0fb 	.word	0x0800b0fb
 800b054:	0800b0fb 	.word	0x0800b0fb
 800b058:	0800b0fb 	.word	0x0800b0fb
 800b05c:	0800b0fb 	.word	0x0800b0fb
 800b060:	0800b0fb 	.word	0x0800b0fb
 800b064:	0800b0fb 	.word	0x0800b0fb
 800b068:	0800b0fb 	.word	0x0800b0fb
 800b06c:	0800b0fb 	.word	0x0800b0fb
 800b070:	0800b0fb 	.word	0x0800b0fb
 800b074:	0800b0fb 	.word	0x0800b0fb
 800b078:	0800b0fb 	.word	0x0800b0fb
 800b07c:	0800b0fb 	.word	0x0800b0fb
 800b080:	0800b0fb 	.word	0x0800b0fb
 800b084:	0800b0fb 	.word	0x0800b0fb
 800b088:	0800b0fb 	.word	0x0800b0fb
 800b08c:	0800b0ed 	.word	0x0800b0ed
 800b090:	2b40      	cmp	r3, #64	; 0x40
 800b092:	d02e      	beq.n	800b0f2 <UART_SetConfig+0x896>
 800b094:	e031      	b.n	800b0fa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b096:	f7fb fe39 	bl	8006d0c <HAL_RCC_GetPCLK1Freq>
 800b09a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b09c:	e033      	b.n	800b106 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b09e:	f7fb fe4b 	bl	8006d38 <HAL_RCC_GetPCLK2Freq>
 800b0a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b0a4:	e02f      	b.n	800b106 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0a6:	f107 0314 	add.w	r3, r7, #20
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fd fa82 	bl	80085b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0b4:	e027      	b.n	800b106 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0b6:	f107 0308 	add.w	r3, r7, #8
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fd fbce 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0c4:	e01f      	b.n	800b106 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0c6:	4b58      	ldr	r3, [pc, #352]	; (800b228 <UART_SetConfig+0x9cc>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 0320 	and.w	r3, r3, #32
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d009      	beq.n	800b0e6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0d2:	4b55      	ldr	r3, [pc, #340]	; (800b228 <UART_SetConfig+0x9cc>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	08db      	lsrs	r3, r3, #3
 800b0d8:	f003 0303 	and.w	r3, r3, #3
 800b0dc:	4a53      	ldr	r2, [pc, #332]	; (800b22c <UART_SetConfig+0x9d0>)
 800b0de:	fa22 f303 	lsr.w	r3, r2, r3
 800b0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0e4:	e00f      	b.n	800b106 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b0e6:	4b51      	ldr	r3, [pc, #324]	; (800b22c <UART_SetConfig+0x9d0>)
 800b0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0ea:	e00c      	b.n	800b106 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0ec:	4b4c      	ldr	r3, [pc, #304]	; (800b220 <UART_SetConfig+0x9c4>)
 800b0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0f0:	e009      	b.n	800b106 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0f8:	e005      	b.n	800b106 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b104:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 80ea 	beq.w	800b2e2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b112:	4a44      	ldr	r2, [pc, #272]	; (800b224 <UART_SetConfig+0x9c8>)
 800b114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b118:	461a      	mov	r2, r3
 800b11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b120:	005a      	lsls	r2, r3, #1
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	085b      	lsrs	r3, r3, #1
 800b128:	441a      	add	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b132:	b29b      	uxth	r3, r3
 800b134:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	2b0f      	cmp	r3, #15
 800b13a:	d916      	bls.n	800b16a <UART_SetConfig+0x90e>
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b142:	d212      	bcs.n	800b16a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b146:	b29b      	uxth	r3, r3
 800b148:	f023 030f 	bic.w	r3, r3, #15
 800b14c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b150:	085b      	lsrs	r3, r3, #1
 800b152:	b29b      	uxth	r3, r3
 800b154:	f003 0307 	and.w	r3, r3, #7
 800b158:	b29a      	uxth	r2, r3
 800b15a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b15c:	4313      	orrs	r3, r2
 800b15e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b166:	60da      	str	r2, [r3, #12]
 800b168:	e0bb      	b.n	800b2e2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b170:	e0b7      	b.n	800b2e2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b172:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b176:	2b20      	cmp	r3, #32
 800b178:	dc4a      	bgt.n	800b210 <UART_SetConfig+0x9b4>
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f2c0 8086 	blt.w	800b28c <UART_SetConfig+0xa30>
 800b180:	2b20      	cmp	r3, #32
 800b182:	f200 8083 	bhi.w	800b28c <UART_SetConfig+0xa30>
 800b186:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <UART_SetConfig+0x930>)
 800b188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18c:	0800b217 	.word	0x0800b217
 800b190:	0800b231 	.word	0x0800b231
 800b194:	0800b28d 	.word	0x0800b28d
 800b198:	0800b28d 	.word	0x0800b28d
 800b19c:	0800b239 	.word	0x0800b239
 800b1a0:	0800b28d 	.word	0x0800b28d
 800b1a4:	0800b28d 	.word	0x0800b28d
 800b1a8:	0800b28d 	.word	0x0800b28d
 800b1ac:	0800b249 	.word	0x0800b249
 800b1b0:	0800b28d 	.word	0x0800b28d
 800b1b4:	0800b28d 	.word	0x0800b28d
 800b1b8:	0800b28d 	.word	0x0800b28d
 800b1bc:	0800b28d 	.word	0x0800b28d
 800b1c0:	0800b28d 	.word	0x0800b28d
 800b1c4:	0800b28d 	.word	0x0800b28d
 800b1c8:	0800b28d 	.word	0x0800b28d
 800b1cc:	0800b259 	.word	0x0800b259
 800b1d0:	0800b28d 	.word	0x0800b28d
 800b1d4:	0800b28d 	.word	0x0800b28d
 800b1d8:	0800b28d 	.word	0x0800b28d
 800b1dc:	0800b28d 	.word	0x0800b28d
 800b1e0:	0800b28d 	.word	0x0800b28d
 800b1e4:	0800b28d 	.word	0x0800b28d
 800b1e8:	0800b28d 	.word	0x0800b28d
 800b1ec:	0800b28d 	.word	0x0800b28d
 800b1f0:	0800b28d 	.word	0x0800b28d
 800b1f4:	0800b28d 	.word	0x0800b28d
 800b1f8:	0800b28d 	.word	0x0800b28d
 800b1fc:	0800b28d 	.word	0x0800b28d
 800b200:	0800b28d 	.word	0x0800b28d
 800b204:	0800b28d 	.word	0x0800b28d
 800b208:	0800b28d 	.word	0x0800b28d
 800b20c:	0800b27f 	.word	0x0800b27f
 800b210:	2b40      	cmp	r3, #64	; 0x40
 800b212:	d037      	beq.n	800b284 <UART_SetConfig+0xa28>
 800b214:	e03a      	b.n	800b28c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b216:	f7fb fd79 	bl	8006d0c <HAL_RCC_GetPCLK1Freq>
 800b21a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b21c:	e03c      	b.n	800b298 <UART_SetConfig+0xa3c>
 800b21e:	bf00      	nop
 800b220:	003d0900 	.word	0x003d0900
 800b224:	0800be00 	.word	0x0800be00
 800b228:	58024400 	.word	0x58024400
 800b22c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b230:	f7fb fd82 	bl	8006d38 <HAL_RCC_GetPCLK2Freq>
 800b234:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b236:	e02f      	b.n	800b298 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b238:	f107 0314 	add.w	r3, r7, #20
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fd f9b9 	bl	80085b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b246:	e027      	b.n	800b298 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b248:	f107 0308 	add.w	r3, r7, #8
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fd fb05 	bl	800885c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b256:	e01f      	b.n	800b298 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b258:	4b2c      	ldr	r3, [pc, #176]	; (800b30c <UART_SetConfig+0xab0>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 0320 	and.w	r3, r3, #32
 800b260:	2b00      	cmp	r3, #0
 800b262:	d009      	beq.n	800b278 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b264:	4b29      	ldr	r3, [pc, #164]	; (800b30c <UART_SetConfig+0xab0>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	08db      	lsrs	r3, r3, #3
 800b26a:	f003 0303 	and.w	r3, r3, #3
 800b26e:	4a28      	ldr	r2, [pc, #160]	; (800b310 <UART_SetConfig+0xab4>)
 800b270:	fa22 f303 	lsr.w	r3, r2, r3
 800b274:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b276:	e00f      	b.n	800b298 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b278:	4b25      	ldr	r3, [pc, #148]	; (800b310 <UART_SetConfig+0xab4>)
 800b27a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b27c:	e00c      	b.n	800b298 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b27e:	4b25      	ldr	r3, [pc, #148]	; (800b314 <UART_SetConfig+0xab8>)
 800b280:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b282:	e009      	b.n	800b298 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b288:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b28a:	e005      	b.n	800b298 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b28c:	2300      	movs	r3, #0
 800b28e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b296:	bf00      	nop
    }

    if (pclk != 0U)
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d021      	beq.n	800b2e2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a2:	4a1d      	ldr	r2, [pc, #116]	; (800b318 <UART_SetConfig+0xabc>)
 800b2a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	085b      	lsrs	r3, r3, #1
 800b2b6:	441a      	add	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c6:	2b0f      	cmp	r3, #15
 800b2c8:	d908      	bls.n	800b2dc <UART_SetConfig+0xa80>
 800b2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d0:	d204      	bcs.n	800b2dc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2d8:	60da      	str	r2, [r3, #12]
 800b2da:	e002      	b.n	800b2e2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b2fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b302:	4618      	mov	r0, r3
 800b304:	3738      	adds	r7, #56	; 0x38
 800b306:	46bd      	mov	sp, r7
 800b308:	bdb0      	pop	{r4, r5, r7, pc}
 800b30a:	bf00      	nop
 800b30c:	58024400 	.word	0x58024400
 800b310:	03d09000 	.word	0x03d09000
 800b314:	003d0900 	.word	0x003d0900
 800b318:	0800be00 	.word	0x0800be00

0800b31c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b328:	f003 0301 	and.w	r3, r3, #1
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00a      	beq.n	800b346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	430a      	orrs	r2, r1
 800b344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34a:	f003 0302 	and.w	r3, r3, #2
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00a      	beq.n	800b368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	430a      	orrs	r2, r1
 800b366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36c:	f003 0304 	and.w	r3, r3, #4
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00a      	beq.n	800b38a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	430a      	orrs	r2, r1
 800b388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38e:	f003 0308 	and.w	r3, r3, #8
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00a      	beq.n	800b3ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	430a      	orrs	r2, r1
 800b3aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b0:	f003 0310 	and.w	r3, r3, #16
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00a      	beq.n	800b3ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d2:	f003 0320 	and.w	r3, r3, #32
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00a      	beq.n	800b3f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	430a      	orrs	r2, r1
 800b3ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d01a      	beq.n	800b432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	430a      	orrs	r2, r1
 800b410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b41a:	d10a      	bne.n	800b432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	430a      	orrs	r2, r1
 800b430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00a      	beq.n	800b454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	430a      	orrs	r2, r1
 800b452:	605a      	str	r2, [r3, #4]
  }
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af02      	add	r7, sp, #8
 800b466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b470:	f7f6 ff88 	bl	8002384 <HAL_GetTick>
 800b474:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f003 0308 	and.w	r3, r3, #8
 800b480:	2b08      	cmp	r3, #8
 800b482:	d10e      	bne.n	800b4a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b488:	9300      	str	r3, [sp, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 f82f 	bl	800b4f6 <UART_WaitOnFlagUntilTimeout>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	e025      	b.n	800b4ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0304 	and.w	r3, r3, #4
 800b4ac:	2b04      	cmp	r3, #4
 800b4ae:	d10e      	bne.n	800b4ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f819 	bl	800b4f6 <UART_WaitOnFlagUntilTimeout>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d001      	beq.n	800b4ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4ca:	2303      	movs	r3, #3
 800b4cc:	e00f      	b.n	800b4ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2220      	movs	r2, #32
 800b4da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	60f8      	str	r0, [r7, #12]
 800b4fe:	60b9      	str	r1, [r7, #8]
 800b500:	603b      	str	r3, [r7, #0]
 800b502:	4613      	mov	r3, r2
 800b504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b506:	e062      	b.n	800b5ce <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b50e:	d05e      	beq.n	800b5ce <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b510:	f7f6 ff38 	bl	8002384 <HAL_GetTick>
 800b514:	4602      	mov	r2, r0
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	69ba      	ldr	r2, [r7, #24]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d302      	bcc.n	800b526 <UART_WaitOnFlagUntilTimeout+0x30>
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d11d      	bne.n	800b562 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b534:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	689a      	ldr	r2, [r3, #8]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f022 0201 	bic.w	r2, r2, #1
 800b544:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2220      	movs	r2, #32
 800b54a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2220      	movs	r2, #32
 800b552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b55e:	2303      	movs	r3, #3
 800b560:	e045      	b.n	800b5ee <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 0304 	and.w	r3, r3, #4
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d02e      	beq.n	800b5ce <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	69db      	ldr	r3, [r3, #28]
 800b576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b57a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b57e:	d126      	bne.n	800b5ce <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b588:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b598:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	689a      	ldr	r2, [r3, #8]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f022 0201 	bic.w	r2, r2, #1
 800b5a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2220      	movs	r2, #32
 800b5b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2220      	movs	r2, #32
 800b5be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e00f      	b.n	800b5ee <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	69da      	ldr	r2, [r3, #28]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	4013      	ands	r3, r2
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	bf0c      	ite	eq
 800b5de:	2301      	moveq	r3, #1
 800b5e0:	2300      	movne	r3, #0
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	79fb      	ldrb	r3, [r7, #7]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d08d      	beq.n	800b508 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b085      	sub	sp, #20
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b604:	2b01      	cmp	r3, #1
 800b606:	d101      	bne.n	800b60c <HAL_UARTEx_DisableFifoMode+0x16>
 800b608:	2302      	movs	r3, #2
 800b60a:	e027      	b.n	800b65c <HAL_UARTEx_DisableFifoMode+0x66>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2201      	movs	r2, #1
 800b610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2224      	movs	r2, #36	; 0x24
 800b618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f022 0201 	bic.w	r2, r2, #1
 800b632:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b63a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2220      	movs	r2, #32
 800b64e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d101      	bne.n	800b680 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b67c:	2302      	movs	r3, #2
 800b67e:	e02d      	b.n	800b6dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2224      	movs	r2, #36	; 0x24
 800b68c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f022 0201 	bic.w	r2, r2, #1
 800b6a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	430a      	orrs	r2, r1
 800b6ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 f84f 	bl	800b760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2220      	movs	r2, #32
 800b6ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d101      	bne.n	800b6fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e02d      	b.n	800b758 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2224      	movs	r2, #36	; 0x24
 800b708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f022 0201 	bic.w	r2, r2, #1
 800b722:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	430a      	orrs	r2, r1
 800b736:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f811 	bl	800b760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2220      	movs	r2, #32
 800b74a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d108      	bne.n	800b782 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2201      	movs	r2, #1
 800b774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b780:	e031      	b.n	800b7e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b782:	2310      	movs	r3, #16
 800b784:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b786:	2310      	movs	r3, #16
 800b788:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	0e5b      	lsrs	r3, r3, #25
 800b792:	b2db      	uxtb	r3, r3
 800b794:	f003 0307 	and.w	r3, r3, #7
 800b798:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	0f5b      	lsrs	r3, r3, #29
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	f003 0307 	and.w	r3, r3, #7
 800b7a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	7b3a      	ldrb	r2, [r7, #12]
 800b7ae:	4911      	ldr	r1, [pc, #68]	; (800b7f4 <UARTEx_SetNbDataToProcess+0x94>)
 800b7b0:	5c8a      	ldrb	r2, [r1, r2]
 800b7b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b7b6:	7b3a      	ldrb	r2, [r7, #12]
 800b7b8:	490f      	ldr	r1, [pc, #60]	; (800b7f8 <UARTEx_SetNbDataToProcess+0x98>)
 800b7ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7c8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ca:	7b7a      	ldrb	r2, [r7, #13]
 800b7cc:	4909      	ldr	r1, [pc, #36]	; (800b7f4 <UARTEx_SetNbDataToProcess+0x94>)
 800b7ce:	5c8a      	ldrb	r2, [r1, r2]
 800b7d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b7d4:	7b7a      	ldrb	r2, [r7, #13]
 800b7d6:	4908      	ldr	r1, [pc, #32]	; (800b7f8 <UARTEx_SetNbDataToProcess+0x98>)
 800b7d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7da:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7de:	b29a      	uxth	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b7e6:	bf00      	nop
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	0800be18 	.word	0x0800be18
 800b7f8:	0800be20 	.word	0x0800be20

0800b7fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b7fc:	b084      	sub	sp, #16
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
 800b806:	f107 001c 	add.w	r0, r7, #28
 800b80a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	2b01      	cmp	r3, #1
 800b812:	d120      	bne.n	800b856 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b818:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	68da      	ldr	r2, [r3, #12]
 800b824:	4b2a      	ldr	r3, [pc, #168]	; (800b8d0 <USB_CoreInit+0xd4>)
 800b826:	4013      	ands	r3, r2
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d105      	bne.n	800b84a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 fa60 	bl	800bd10 <USB_CoreReset>
 800b850:	4603      	mov	r3, r0
 800b852:	73fb      	strb	r3, [r7, #15]
 800b854:	e01a      	b.n	800b88c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fa54 	bl	800bd10 <USB_CoreReset>
 800b868:	4603      	mov	r3, r0
 800b86a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b86c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d106      	bne.n	800b880 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b876:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	639a      	str	r2, [r3, #56]	; 0x38
 800b87e:	e005      	b.n	800b88c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b884:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d116      	bne.n	800b8c0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b896:	b29a      	uxth	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b8a0:	4b0c      	ldr	r3, [pc, #48]	; (800b8d4 <USB_CoreInit+0xd8>)
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	f043 0206 	orr.w	r2, r3, #6
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	f043 0220 	orr.w	r2, r3, #32
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8cc:	b004      	add	sp, #16
 800b8ce:	4770      	bx	lr
 800b8d0:	ffbdffbf 	.word	0xffbdffbf
 800b8d4:	03ee0000 	.word	0x03ee0000

0800b8d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	f023 0201 	bic.w	r2, r3, #1
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b082      	sub	sp, #8
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	460b      	mov	r3, r1
 800b904:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b912:	78fb      	ldrb	r3, [r7, #3]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d106      	bne.n	800b926 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	60da      	str	r2, [r3, #12]
 800b924:	e00b      	b.n	800b93e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b926:	78fb      	ldrb	r3, [r7, #3]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d106      	bne.n	800b93a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	60da      	str	r2, [r3, #12]
 800b938:	e001      	b.n	800b93e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e003      	b.n	800b946 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b93e:	2032      	movs	r0, #50	; 0x32
 800b940:	f7f6 fd2c 	bl	800239c <HAL_Delay>

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
	...

0800b950 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b950:	b084      	sub	sp, #16
 800b952:	b580      	push	{r7, lr}
 800b954:	b086      	sub	sp, #24
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b95e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b96a:	2300      	movs	r3, #0
 800b96c:	613b      	str	r3, [r7, #16]
 800b96e:	e009      	b.n	800b984 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	3340      	adds	r3, #64	; 0x40
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4413      	add	r3, r2
 800b97a:	2200      	movs	r2, #0
 800b97c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	3301      	adds	r3, #1
 800b982:	613b      	str	r3, [r7, #16]
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	2b0e      	cmp	r3, #14
 800b988:	d9f2      	bls.n	800b970 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b98a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d11c      	bne.n	800b9ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b99e:	f043 0302 	orr.w	r3, r3, #2
 800b9a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	601a      	str	r2, [r3, #0]
 800b9c8:	e005      	b.n	800b9d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9dc:	461a      	mov	r2, r3
 800b9de:	2300      	movs	r3, #0
 800b9e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	680b      	ldr	r3, [r1, #0]
 800b9f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d10c      	bne.n	800ba16 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d104      	bne.n	800ba0c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ba02:	2100      	movs	r1, #0
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f949 	bl	800bc9c <USB_SetDevSpeed>
 800ba0a:	e008      	b.n	800ba1e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ba0c:	2101      	movs	r1, #1
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f944 	bl	800bc9c <USB_SetDevSpeed>
 800ba14:	e003      	b.n	800ba1e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ba16:	2103      	movs	r1, #3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 f93f 	bl	800bc9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ba1e:	2110      	movs	r1, #16
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f8f3 	bl	800bc0c <USB_FlushTxFifo>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 f911 	bl	800bc58 <USB_FlushRxFifo>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d001      	beq.n	800ba40 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba46:	461a      	mov	r2, r3
 800ba48:	2300      	movs	r3, #0
 800ba4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba52:	461a      	mov	r2, r3
 800ba54:	2300      	movs	r3, #0
 800ba56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba5e:	461a      	mov	r2, r3
 800ba60:	2300      	movs	r3, #0
 800ba62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba64:	2300      	movs	r3, #0
 800ba66:	613b      	str	r3, [r7, #16]
 800ba68:	e043      	b.n	800baf2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	015a      	lsls	r2, r3, #5
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	4413      	add	r3, r2
 800ba72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba80:	d118      	bne.n	800bab4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10a      	bne.n	800ba9e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba94:	461a      	mov	r2, r3
 800ba96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba9a:	6013      	str	r3, [r2, #0]
 800ba9c:	e013      	b.n	800bac6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	015a      	lsls	r2, r3, #5
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	4413      	add	r3, r2
 800baa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baaa:	461a      	mov	r2, r3
 800baac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bab0:	6013      	str	r3, [r2, #0]
 800bab2:	e008      	b.n	800bac6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	015a      	lsls	r2, r3, #5
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	4413      	add	r3, r2
 800babc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac0:	461a      	mov	r2, r3
 800bac2:	2300      	movs	r3, #0
 800bac4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	015a      	lsls	r2, r3, #5
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	4413      	add	r3, r2
 800bace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bad2:	461a      	mov	r2, r3
 800bad4:	2300      	movs	r3, #0
 800bad6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	015a      	lsls	r2, r3, #5
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	4413      	add	r3, r2
 800bae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bae4:	461a      	mov	r2, r3
 800bae6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800baea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	3301      	adds	r3, #1
 800baf0:	613b      	str	r3, [r7, #16]
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d3b7      	bcc.n	800ba6a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bafa:	2300      	movs	r3, #0
 800bafc:	613b      	str	r3, [r7, #16]
 800bafe:	e043      	b.n	800bb88 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	015a      	lsls	r2, r3, #5
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	4413      	add	r3, r2
 800bb08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb16:	d118      	bne.n	800bb4a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10a      	bne.n	800bb34 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	015a      	lsls	r2, r3, #5
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	4413      	add	r3, r2
 800bb26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb30:	6013      	str	r3, [r2, #0]
 800bb32:	e013      	b.n	800bb5c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	015a      	lsls	r2, r3, #5
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb40:	461a      	mov	r2, r3
 800bb42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb46:	6013      	str	r3, [r2, #0]
 800bb48:	e008      	b.n	800bb5c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	015a      	lsls	r2, r3, #5
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	4413      	add	r3, r2
 800bb52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb56:	461a      	mov	r2, r3
 800bb58:	2300      	movs	r3, #0
 800bb5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb68:	461a      	mov	r2, r3
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	015a      	lsls	r2, r3, #5
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	4413      	add	r3, r2
 800bb76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	3301      	adds	r3, #1
 800bb86:	613b      	str	r3, [r7, #16]
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d3b7      	bcc.n	800bb00 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bba2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bbb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d105      	bne.n	800bbc4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	699b      	ldr	r3, [r3, #24]
 800bbbc:	f043 0210 	orr.w	r2, r3, #16
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	699a      	ldr	r2, [r3, #24]
 800bbc8:	4b0e      	ldr	r3, [pc, #56]	; (800bc04 <USB_DevInit+0x2b4>)
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d005      	beq.n	800bbe2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	699b      	ldr	r3, [r3, #24]
 800bbda:	f043 0208 	orr.w	r2, r3, #8
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bbe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d105      	bne.n	800bbf4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	699a      	ldr	r2, [r3, #24]
 800bbec:	4b06      	ldr	r3, [pc, #24]	; (800bc08 <USB_DevInit+0x2b8>)
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bbf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc00:	b004      	add	sp, #16
 800bc02:	4770      	bx	lr
 800bc04:	803c3800 	.word	0x803c3800
 800bc08:	40000004 	.word	0x40000004

0800bc0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b085      	sub	sp, #20
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bc16:	2300      	movs	r3, #0
 800bc18:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	019b      	lsls	r3, r3, #6
 800bc1e:	f043 0220 	orr.w	r2, r3, #32
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	4a09      	ldr	r2, [pc, #36]	; (800bc54 <USB_FlushTxFifo+0x48>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d901      	bls.n	800bc38 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bc34:	2303      	movs	r3, #3
 800bc36:	e006      	b.n	800bc46 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	f003 0320 	and.w	r3, r3, #32
 800bc40:	2b20      	cmp	r3, #32
 800bc42:	d0f0      	beq.n	800bc26 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	00030d40 	.word	0x00030d40

0800bc58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2210      	movs	r2, #16
 800bc68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	60fb      	str	r3, [r7, #12]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	4a09      	ldr	r2, [pc, #36]	; (800bc98 <USB_FlushRxFifo+0x40>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d901      	bls.n	800bc7c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bc78:	2303      	movs	r3, #3
 800bc7a:	e006      	b.n	800bc8a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	f003 0310 	and.w	r3, r3, #16
 800bc84:	2b10      	cmp	r3, #16
 800bc86:	d0f0      	beq.n	800bc6a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3714      	adds	r7, #20
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	00030d40 	.word	0x00030d40

0800bc9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	460b      	mov	r3, r1
 800bca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	78fb      	ldrb	r3, [r7, #3]
 800bcb6:	68f9      	ldr	r1, [r7, #12]
 800bcb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3714      	adds	r7, #20
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr

0800bcce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b085      	sub	sp, #20
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bce8:	f023 0303 	bic.w	r3, r3, #3
 800bcec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	68fa      	ldr	r2, [r7, #12]
 800bcf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcfc:	f043 0302 	orr.w	r3, r3, #2
 800bd00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	60fb      	str	r3, [r7, #12]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	4a13      	ldr	r2, [pc, #76]	; (800bd74 <USB_CoreReset+0x64>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d901      	bls.n	800bd2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	e01b      	b.n	800bd66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	daf2      	bge.n	800bd1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bd36:	2300      	movs	r3, #0
 800bd38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	691b      	ldr	r3, [r3, #16]
 800bd3e:	f043 0201 	orr.w	r2, r3, #1
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	4a09      	ldr	r2, [pc, #36]	; (800bd74 <USB_CoreReset+0x64>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d901      	bls.n	800bd58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e006      	b.n	800bd66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	f003 0301 	and.w	r3, r3, #1
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d0f0      	beq.n	800bd46 <USB_CoreReset+0x36>

  return HAL_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3714      	adds	r7, #20
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	00030d40 	.word	0x00030d40

0800bd78 <__libc_init_array>:
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	4d0d      	ldr	r5, [pc, #52]	; (800bdb0 <__libc_init_array+0x38>)
 800bd7c:	4c0d      	ldr	r4, [pc, #52]	; (800bdb4 <__libc_init_array+0x3c>)
 800bd7e:	1b64      	subs	r4, r4, r5
 800bd80:	10a4      	asrs	r4, r4, #2
 800bd82:	2600      	movs	r6, #0
 800bd84:	42a6      	cmp	r6, r4
 800bd86:	d109      	bne.n	800bd9c <__libc_init_array+0x24>
 800bd88:	4d0b      	ldr	r5, [pc, #44]	; (800bdb8 <__libc_init_array+0x40>)
 800bd8a:	4c0c      	ldr	r4, [pc, #48]	; (800bdbc <__libc_init_array+0x44>)
 800bd8c:	f000 f820 	bl	800bdd0 <_init>
 800bd90:	1b64      	subs	r4, r4, r5
 800bd92:	10a4      	asrs	r4, r4, #2
 800bd94:	2600      	movs	r6, #0
 800bd96:	42a6      	cmp	r6, r4
 800bd98:	d105      	bne.n	800bda6 <__libc_init_array+0x2e>
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}
 800bd9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bda0:	4798      	blx	r3
 800bda2:	3601      	adds	r6, #1
 800bda4:	e7ee      	b.n	800bd84 <__libc_init_array+0xc>
 800bda6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdaa:	4798      	blx	r3
 800bdac:	3601      	adds	r6, #1
 800bdae:	e7f2      	b.n	800bd96 <__libc_init_array+0x1e>
 800bdb0:	0800be30 	.word	0x0800be30
 800bdb4:	0800be30 	.word	0x0800be30
 800bdb8:	0800be30 	.word	0x0800be30
 800bdbc:	0800be34 	.word	0x0800be34

0800bdc0 <memset>:
 800bdc0:	4402      	add	r2, r0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d100      	bne.n	800bdca <memset+0xa>
 800bdc8:	4770      	bx	lr
 800bdca:	f803 1b01 	strb.w	r1, [r3], #1
 800bdce:	e7f9      	b.n	800bdc4 <memset+0x4>

0800bdd0 <_init>:
 800bdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd2:	bf00      	nop
 800bdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdd6:	bc08      	pop	{r3}
 800bdd8:	469e      	mov	lr, r3
 800bdda:	4770      	bx	lr

0800bddc <_fini>:
 800bddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdde:	bf00      	nop
 800bde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde2:	bc08      	pop	{r3}
 800bde4:	469e      	mov	lr, r3
 800bde6:	4770      	bx	lr
