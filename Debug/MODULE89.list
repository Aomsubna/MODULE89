
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6c0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c958  0800c958  0001c958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c998  0800c998  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c998  0800c998  0001c998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9a0  0800c9a0  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9a0  0800c9a0  0001c9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9a4  0800c9a4  0001c9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800c9a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800c9b8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800ca18  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000ca4  240000d0  0800ca78  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000d74  0800ca78  00020d74  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003084b  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000454f  00000000  00000000  00050949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a78  00000000  00000000  00054e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001920  00000000  00000000  00056910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b62c  00000000  00000000  00058230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021050  00000000  00000000  0009385c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001816f0  00000000  00000000  000b48ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00235f9c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000072dc  00000000  00000000  00235ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c940 	.word	0x0800c940

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800c940 	.word	0x0800c940

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 80005d0:	b480      	push	{r7}
 80005d2:	b08b      	sub	sp, #44	; 0x2c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	61f8      	str	r0, [r7, #28]
 80005d8:	ed87 0a06 	vstr	s0, [r7, #24]
 80005dc:	edc7 0a05 	vstr	s1, [r7, #20]
 80005e0:	ed87 1a04 	vstr	s2, [r7, #16]
 80005e4:	edc7 1a03 	vstr	s3, [r7, #12]
 80005e8:	ed87 2a02 	vstr	s4, [r7, #8]
 80005ec:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	222c      	movs	r2, #44	; 0x2c
 80005f4:	fb02 f303 	mul.w	r3, r2, r3
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <setupPID+0x64>)
 80005fa:	4413      	add	r3, r2
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	69fa      	ldr	r2, [r7, #28]
 8000602:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 8000604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 800060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	611a      	str	r2, [r3, #16]
}
 8000628:	bf00      	nop
 800062a:	372c      	adds	r7, #44	; 0x2c
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	240000ec 	.word	0x240000ec

08000638 <calculator>:


float calculator(int num, int input, float setpoint){
 8000638:	b480      	push	{r7}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	ed87 0a01 	vstr	s0, [r7, #4]
	pid_state * pid = &pids[num];
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	222c      	movs	r2, #44	; 0x2c
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	4a50      	ldr	r2, [pc, #320]	; (8000790 <calculator+0x158>)
 8000650:	4413      	add	r3, r2
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
	// Calculate error
	pid->error = setpoint - input;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	ee07 3a90 	vmov	s15, r3
 800065a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800065e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Proportional term
	float Pout = pid->Kp * pid->error;
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067c:	edc7 7a08 	vstr	s15, [r7, #32]

	// Integral term
	pid->integral += pid->error * pid->Dt;
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	edd3 7a01 	vldr	s15, [r3, #4]
 800068c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	float Iout = pid->Ki * pid->integral;
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b0:	edc7 7a07 	vstr	s15, [r7, #28]
	if (pid->integral > 255) {
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ba:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000794 <calculator+0x15c>
 80006be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c6:	dd02      	ble.n	80006ce <calculator+0x96>
		pid->integral = 255;
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	4a33      	ldr	r2, [pc, #204]	; (8000798 <calculator+0x160>)
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if (pid->integral < -255) {
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006d4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800079c <calculator+0x164>
 80006d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e0:	d502      	bpl.n	80006e8 <calculator+0xb0>
		pid->integral = -255;
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <calculator+0x168>)
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
	}
	// Derivative term
	float derivative = (pid->error - pid->error_pre) / pid->Dt;
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80006f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80006fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000702:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dout = pid->Kd * derivative;
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	edd3 7a04 	vldr	s15, [r3, #16]
 800070c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000714:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate total output
	pid->output = Pout + Iout + Dout;
 8000718:	ed97 7a08 	vldr	s14, [r7, #32]
 800071c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000724:	edd7 7a05 	vldr	s15, [r7, #20]
 8000728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	edc3 7a07 	vstr	s15, [r3, #28]

	// Restrict to max/min
	if( pid->output > pid->Vmax){
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	ed93 7a07 	vldr	s14, [r3, #28]
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	edd3 7a05 	vldr	s15, [r3, #20]
 800073e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000746:	dd04      	ble.n	8000752 <calculator+0x11a>
		pid->output = pid->Vmax;}
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	61da      	str	r2, [r3, #28]
 8000750:	e00e      	b.n	8000770 <calculator+0x138>
	else if( pid->output < pid->Vmin){
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	ed93 7a07 	vldr	s14, [r3, #28]
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	edd3 7a06 	vldr	s15, [r3, #24]
 800075e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000766:	d503      	bpl.n	8000770 <calculator+0x138>
		pid->output = pid->Vmin;}
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	61da      	str	r2, [r3, #28]

	// Save error to previous error
	pid->error_pre = pid->error;
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	621a      	str	r2, [r3, #32]

	return pid->output;
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	ee07 3a90 	vmov	s15, r3
}
 8000780:	eeb0 0a67 	vmov.f32	s0, s15
 8000784:	372c      	adds	r7, #44	; 0x2c
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	240000ec 	.word	0x240000ec
 8000794:	437f0000 	.word	0x437f0000
 8000798:	437f0000 	.word	0x437f0000
 800079c:	c37f0000 	.word	0xc37f0000
 80007a0:	c37f0000 	.word	0xc37f0000

080007a4 <Encoder_Start>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare

static encoder_state encoders[NUM_ENCODER];

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	4613      	mov	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <Encoder_Start+0x40>)
 80007bc:	4413      	add	r3, r2
 80007be:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	68b8      	ldr	r0, [r7, #8]
 80007c4:	f009 fc7e 	bl	800a0c4 <HAL_TIM_Encoder_Start>
	encoder->number = num;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	68ba      	ldr	r2, [r7, #8]
 80007d2:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	609a      	str	r2, [r3, #8]
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2400019c 	.word	0x2400019c

080007e8 <Get_Value_Encoder>:

int Get_Value_Encoder(int num){ //Read Encoder Select by input num
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4a06      	ldr	r2, [pc, #24]	; (8000814 <Get_Value_Encoder+0x2c>)
 80007fc:	4413      	add	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]
	return __HAL_TIM_GET_COUNTER(encoder->QEI_TIMER); //return value to use
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000808:	4618      	mov	r0, r3
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	2400019c 	.word	0x2400019c

08000818 <Stepper_Setup>:
#include "PID.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 8000818:	b480      	push	{r7}
 800081a:	b087      	sub	sp, #28
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	224c      	movs	r2, #76	; 0x4c
 800082a:	fb02 f303 	mul.w	r3, r2, r3
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <Stepper_Setup+0x54>)
 8000830:	4413      	add	r3, r2
 8000832:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	8c3a      	ldrh	r2, [r7, #32]
 8000850:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000858:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	return SERR_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	371c      	adds	r7, #28
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	240001cc 	.word	0x240001cc

08000870 <Stepper_SetMaxMinPosition>:

//Set limit max/min Position
stepper_error Stepper_SetMaxMinPosition(int num, int32_t minPos, int32_t maxPos){
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	224c      	movs	r2, #76	; 0x4c
 8000880:	fb02 f303 	mul.w	r3, r2, r3
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <Stepper_SetMaxMinPosition+0x34>)
 8000886:	4413      	add	r3, r2
 8000888:	617b      	str	r3, [r7, #20]
	stepper->minPosition = minPos;
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	621a      	str	r2, [r3, #32]
	stepper->maxPosition = maxPos;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
	return SERR_OK;
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	371c      	adds	r7, #28
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	240001cc 	.word	0x240001cc

080008a8 <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d064      	beq.n	8000982 <Stepper_SetStepTimer+0xda>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d05f      	beq.n	8000982 <Stepper_SetStepTimer+0xda>
//        timerTicks /= (prescaler + 1);
//    }

//    timer -> PSC = prescaler;
//    timer -> ARR = timerTicks;
    __HAL_TIM_SET_COMPARE(stepper->STEP_TIMER, stepper->STEP_CHANNEL, stepper -> currentSpeed/2);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10b      	bne.n	80008e2 <Stepper_SetStepTimer+0x3a>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	da00      	bge.n	80008d4 <Stepper_SetStepTimer+0x2c>
 80008d2:	3301      	adds	r3, #1
 80008d4:	105b      	asrs	r3, r3, #1
 80008d6:	461a      	mov	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80008e0:	e04f      	b.n	8000982 <Stepper_SetStepTimer+0xda>
    __HAL_TIM_SET_COMPARE(stepper->STEP_TIMER, stepper->STEP_CHANNEL, stepper -> currentSpeed/2);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d10c      	bne.n	8000904 <Stepper_SetStepTimer+0x5c>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da00      	bge.n	80008f4 <Stepper_SetStepTimer+0x4c>
 80008f2:	3301      	adds	r3, #1
 80008f4:	105b      	asrs	r3, r3, #1
 80008f6:	4619      	mov	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	460b      	mov	r3, r1
 8000900:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000902:	e03e      	b.n	8000982 <Stepper_SetStepTimer+0xda>
    __HAL_TIM_SET_COMPARE(stepper->STEP_TIMER, stepper->STEP_CHANNEL, stepper -> currentSpeed/2);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	2b08      	cmp	r3, #8
 800090a:	d10c      	bne.n	8000926 <Stepper_SetStepTimer+0x7e>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000910:	2b00      	cmp	r3, #0
 8000912:	da00      	bge.n	8000916 <Stepper_SetStepTimer+0x6e>
 8000914:	3301      	adds	r3, #1
 8000916:	105b      	asrs	r3, r3, #1
 8000918:	4619      	mov	r1, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	460b      	mov	r3, r1
 8000922:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000924:	e02d      	b.n	8000982 <Stepper_SetStepTimer+0xda>
    __HAL_TIM_SET_COMPARE(stepper->STEP_TIMER, stepper->STEP_CHANNEL, stepper -> currentSpeed/2);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2b0c      	cmp	r3, #12
 800092c:	d10c      	bne.n	8000948 <Stepper_SetStepTimer+0xa0>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000932:	2b00      	cmp	r3, #0
 8000934:	da00      	bge.n	8000938 <Stepper_SetStepTimer+0x90>
 8000936:	3301      	adds	r3, #1
 8000938:	105b      	asrs	r3, r3, #1
 800093a:	4619      	mov	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	460b      	mov	r3, r1
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000946:	e01c      	b.n	8000982 <Stepper_SetStepTimer+0xda>
    __HAL_TIM_SET_COMPARE(stepper->STEP_TIMER, stepper->STEP_CHANNEL, stepper -> currentSpeed/2);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	2b10      	cmp	r3, #16
 800094e:	d10c      	bne.n	800096a <Stepper_SetStepTimer+0xc2>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000954:	2b00      	cmp	r3, #0
 8000956:	da00      	bge.n	800095a <Stepper_SetStepTimer+0xb2>
 8000958:	3301      	adds	r3, #1
 800095a:	105b      	asrs	r3, r3, #1
 800095c:	4619      	mov	r1, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	460b      	mov	r3, r1
 8000966:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000968:	e00b      	b.n	8000982 <Stepper_SetStepTimer+0xda>
    __HAL_TIM_SET_COMPARE(stepper->STEP_TIMER, stepper->STEP_CHANNEL, stepper -> currentSpeed/2);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096e:	2b00      	cmp	r3, #0
 8000970:	da00      	bge.n	8000974 <Stepper_SetStepTimer+0xcc>
 8000972:	3301      	adds	r3, #1
 8000974:	105b      	asrs	r3, r3, #1
 8000976:	4619      	mov	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	460b      	mov	r3, r1
 8000980:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <Stepper_DefaultState>:

stepper_error Stepper_DefaultState(int num){
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	224c      	movs	r2, #76	; 0x4c
 800099c:	fb02 f303 	mul.w	r3, r2, r3
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <Stepper_DefaultState+0x60>)
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
//		stepper -> status = SS_STOPPED;
//	}
//	else if (!(stepper -> status & SS_STOPPED)) {
//		return SERR_MUSTBESTOPPED;
//	}
	stepper -> status = SS_STOPPED;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2201      	movs	r2, #1
 80009b2:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <Stepper_DefaultState+0x64>)
 80009b8:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	699a      	ldr	r2, [r3, #24]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = 0;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2200      	movs	r2, #0
 80009c6:	635a      	str	r2, [r3, #52]	; 0x34
	stepper -> currentPosition = 0;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2200      	movs	r2, #0
 80009cc:	645a      	str	r2, [r3, #68]	; 0x44

	Stepper_SetStepTimer(stepper);
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f7ff ff6a 	bl	80008a8 <Stepper_SetStepTimer>
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	4619      	mov	r1, r3
 80009de:	4610      	mov	r0, r2
 80009e0:	f009 f92c 	bl	8009c3c <HAL_TIM_PWM_Start>

	return SERR_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	240001cc 	.word	0x240001cc
 80009f4:	00061a80 	.word	0x00061a80

080009f8 <Stepper_setTraget>:

stepper_error Stepper_setTraget(int num, int value){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	224c      	movs	r2, #76	; 0x4c
 8000a06:	fb02 f303 	mul.w	r3, r2, r3
 8000a0a:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <Stepper_setTraget+0x64>)
 8000a0c:	4413      	add	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
	if (stepper == NULL)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <Stepper_setTraget+0x22>
		return SERR_STATENOTFOUND;
 8000a16:	2303      	movs	r3, #3
 8000a18:	e01b      	b.n	8000a52 <Stepper_setTraget+0x5a>
	if(stepper->status != SS_STOPPED){
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b80      	cmp	r3, #128	; 0x80
 8000a24:	d008      	beq.n	8000a38 <Stepper_setTraget+0x40>
		stepper->targetPosition = value;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	635a      	str	r2, [r3, #52]	; 0x34
		stepper->status = SS_STARTING;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2204      	movs	r2, #4
 8000a30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	else{
		stepper->status = SS_STOPPED;
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
		return SERR_LIMIT;
	}
	return SERR_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	e00c      	b.n	8000a52 <Stepper_setTraget+0x5a>
		stepper->status = SS_STOPPED;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2280      	movs	r2, #128	; 0x80
 8000a3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	f009 f9fe 	bl	8009e4c <HAL_TIM_PWM_Stop>
		return SERR_LIMIT;
 8000a50:	2304      	movs	r3, #4
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	240001cc 	.word	0x240001cc

08000a60 <Stepper_SetSpeed>:

stepper_error Stepper_SetSpeed(int num, int32_t value){
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	224c      	movs	r2, #76	; 0x4c
 8000a6e:	fb02 f303 	mul.w	r3, r2, r3
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <Stepper_SetSpeed+0x54>)
 8000a74:	4413      	add	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
	if(value<stepper->minSpeed){
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	da04      	bge.n	8000a8c <Stepper_SetSpeed+0x2c>
		stepper->currentSpeed = stepper->minSpeed;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	699a      	ldr	r2, [r3, #24]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a8a:	e00c      	b.n	8000aa6 <Stepper_SetSpeed+0x46>
	}
	else if (value>stepper->maxSpeed) {
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	dd04      	ble.n	8000aa0 <Stepper_SetSpeed+0x40>
		stepper->currentSpeed = stepper->maxSpeed;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	69da      	ldr	r2, [r3, #28]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a9e:	e002      	b.n	8000aa6 <Stepper_SetSpeed+0x46>
	}
	else{
		stepper->currentSpeed = value;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	240001cc 	.word	0x240001cc

08000ab8 <Stepper_Direction>:

void Stepper_Direction(stepper_state * stepper){
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	int32_t input = calculator(stepper->number, Get_Value_Encoder(stepper->number), stepper->targetPosition);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681c      	ldr	r4, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fe8d 	bl	80007e8 <Get_Value_Encoder>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000adc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	f7ff fda8 	bl	8000638 <calculator>
 8000ae8:	eef0 7a40 	vmov.f32	s15, s0
 8000aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af0:	ee17 3a90 	vmov	r3, s15
 8000af4:	60fb      	str	r3, [r7, #12]
	Stepper_SetSpeed(stepper->number, abs(input));
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bfb8      	it	lt
 8000b00:	425b      	neglt	r3, r3
 8000b02:	4619      	mov	r1, r3
 8000b04:	4610      	mov	r0, r2
 8000b06:	f7ff ffab 	bl	8000a60 <Stepper_SetSpeed>
	if(input<0){
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	da0b      	bge.n	8000b28 <Stepper_Direction+0x70>
		stepper->status = SS_RUNNING_FORWARD;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2202      	movs	r2, #2
 8000b14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	8a1b      	ldrh	r3, [r3, #16]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	0412      	lsls	r2, r2, #16
 8000b24:	619a      	str	r2, [r3, #24]
	}
	else {
		stepper->status = SS_RUNNING_BACKWARD;
		stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
	}
}
 8000b26:	e008      	b.n	8000b3a <Stepper_Direction+0x82>
		stepper->status = SS_RUNNING_BACKWARD;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	8a1a      	ldrh	r2, [r3, #16]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	619a      	str	r2, [r3, #24]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd90      	pop	{r4, r7, pc}
	...

08000b44 <Stepper_runStep>:

void Stepper_runStep(int num){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	224c      	movs	r2, #76	; 0x4c
 8000b50:	fb02 f303 	mul.w	r3, r2, r3
 8000b54:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <Stepper_runStep+0x58>)
 8000b56:	4413      	add	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
	Stepper_Direction(stepper);
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f7ff ffac 	bl	8000ab8 <Stepper_Direction>
	Stepper_SetStepTimer(stepper);
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f7ff fea1 	bl	80008a8 <Stepper_SetStepTimer>
	if(stepper->status != SS_STOPPED){
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b80      	cmp	r3, #128	; 0x80
 8000b70:	d008      	beq.n	8000b84 <Stepper_runStep+0x40>
		HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4610      	mov	r0, r2
 8000b7e:	f009 f85d 	bl	8009c3c <HAL_TIM_PWM_Start>
	}
	else{
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
	}
}
 8000b82:	e007      	b.n	8000b94 <Stepper_runStep+0x50>
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4610      	mov	r0, r2
 8000b90:	f009 f95c 	bl	8009e4c <HAL_TIM_PWM_Stop>
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	240001cc 	.word	0x240001cc

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba6:	f001 ff07 	bl	80029b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000baa:	f000 f883 	bl	8000cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bae:	f000 fe6d 	bl	800188c <MX_GPIO_Init>
  MX_BDMA_Init();
 8000bb2:	f000 fe2b 	bl	800180c <MX_BDMA_Init>
  MX_DMA_Init();
 8000bb6:	f000 fe49 	bl	800184c <MX_DMA_Init>
  MX_ETH_Init();
 8000bba:	f000 f965 	bl	8000e88 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bbe:	f000 fdf3 	bl	80017a8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000bc2:	f000 fa63 	bl	800108c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bc6:	f000 fab5 	bl	8001134 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bca:	f000 fb09 	bl	80011e0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000bce:	f000 fa03 	bl	8000fd8 <MX_TIM1_Init>
  MX_SPI3_Init();
 8000bd2:	f000 f9ab 	bl	8000f2c <MX_SPI3_Init>
  MX_ADC3_Init();
 8000bd6:	f000 f8f3 	bl	8000dc0 <MX_ADC3_Init>
  MX_TIM5_Init();
 8000bda:	f000 fb57 	bl	800128c <MX_TIM5_Init>
  MX_UART7_Init();
 8000bde:	f000 fd97 	bl	8001710 <MX_UART7_Init>
  MX_TIM12_Init();
 8000be2:	f000 fba3 	bl	800132c <MX_TIM12_Init>
  MX_TIM13_Init();
 8000be6:	f000 fc05 	bl	80013f4 <MX_TIM13_Init>
  MX_TIM16_Init();
 8000bea:	f000 fc51 	bl	8001490 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000bee:	f000 fcc9 	bl	8001584 <MX_TIM17_Init>
  MX_UART5_Init();
 8000bf2:	f000 fd41 	bl	8001678 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 8000bf6:	f006 fbf9 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <main+0xe8>)
 8000bfe:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 8000c00:	f006 fbf4 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8000c04:	4602      	mov	r2, r0
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <main+0xec>)
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <main+0xf0>)
 8000c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c14:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <main+0xf4>)
 8000c16:	6013      	str	r3, [r2, #0]
  //htim13 DIR PF4
  //htim16 DIR PE8
  //htim17 DIR PF10
//  Stepper_Setup(1, &htim12, TIM_CHANNEL_2, DIR1_GPIO_Port, DIR1_Pin, 0);
//  Stepper_SetMaxMinPosition(1, 0, 3000);
  Stepper_Setup(2, &htim13, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <main+0xf8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	491d      	ldr	r1, [pc, #116]	; (8000c9c <main+0xfc>)
 8000c26:	2002      	movs	r0, #2
 8000c28:	f7ff fdf6 	bl	8000818 <Stepper_Setup>
  Stepper_SetMaxMinPosition(2, 0, 3000);
 8000c2c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c30:	2100      	movs	r1, #0
 8000c32:	2002      	movs	r0, #2
 8000c34:	f7ff fe1c 	bl	8000870 <Stepper_SetMaxMinPosition>
//  Stepper_Setup(3, &htim16, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
//  Stepper_SetMaxMinPosition(3, 0, 3000);
//  Stepper_DefaultState(1);
  Stepper_DefaultState(2);
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f7ff fea9 	bl	8000990 <Stepper_DefaultState>
//  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 8000c3e:	4813      	ldr	r0, [pc, #76]	; (8000c8c <main+0xec>)
 8000c40:	f008 ff2a 	bl	8009a98 <HAL_TIM_Base_Start_IT>
//  setupPID(1, 0.001, -1600, 1600, 3, 0.1, 2);
  setupPID(2, 0.001, -3600, 3600, 2, 0.01, 1.5);
 8000c44:	eef7 2a08 	vmov.f32	s5, #120	; 0x3fc00000  1.5
 8000c48:	ed9f 2a15 	vldr	s4, [pc, #84]	; 8000ca0 <main+0x100>
 8000c4c:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8000c50:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8000ca4 <main+0x104>
 8000c54:	eddf 0a14 	vldr	s1, [pc, #80]	; 8000ca8 <main+0x108>
 8000c58:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8000cac <main+0x10c>
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f7ff fcb7 	bl	80005d0 <setupPID>
//  setupPID(3, 110, 510, 1510, 11, 21, 31);
//  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
//  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 8000c62:	223c      	movs	r2, #60	; 0x3c
 8000c64:	4912      	ldr	r1, [pc, #72]	; (8000cb0 <main+0x110>)
 8000c66:	2002      	movs	r0, #2
 8000c68:	f7ff fd9c 	bl	80007a4 <Encoder_Start>
//	      htim13.Instance->ARR = a;
//	      HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
//	  	  __HAL_TIM_SET_AUTORELOAD(&htim13, a);
//	      __HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, a/2);
//	      HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
	  Stepper_setTraget(2, 2000);
 8000c6c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c70:	2002      	movs	r0, #2
 8000c72:	f7ff fec1 	bl	80009f8 <Stepper_setTraget>
	  Stepper_runStep(2);
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff ff64 	bl	8000b44 <Stepper_runStep>

//	  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
	  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);//Clock wise rotation
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2120      	movs	r1, #32
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <main+0xf8>)
 8000c82:	f005 faa3 	bl	80061cc <HAL_GPIO_WritePin>
  {
 8000c86:	e7f1      	b.n	8000c6c <main+0xcc>
 8000c88:	24000bcc 	.word	0x24000bcc
 8000c8c:	240008a4 	.word	0x240008a4
 8000c90:	000f4240 	.word	0x000f4240
 8000c94:	24000b7c 	.word	0x24000b7c
 8000c98:	58021400 	.word	0x58021400
 8000c9c:	24000b30 	.word	0x24000b30
 8000ca0:	3c23d70a 	.word	0x3c23d70a
 8000ca4:	45610000 	.word	0x45610000
 8000ca8:	c5610000 	.word	0xc5610000
 8000cac:	3a83126f 	.word	0x3a83126f
 8000cb0:	240008f0 	.word	0x240008f0

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b09c      	sub	sp, #112	; 0x70
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	224c      	movs	r2, #76	; 0x4c
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f00b fe34 	bl	800c930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2220      	movs	r2, #32
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f00b fe2e 	bl	800c930 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f005 fbff 	bl	80064d8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <SystemClock_Config+0x100>)
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	4a34      	ldr	r2, [pc, #208]	; (8000db4 <SystemClock_Config+0x100>)
 8000ce4:	f023 0301 	bic.w	r3, r3, #1
 8000ce8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cea:	4b32      	ldr	r3, [pc, #200]	; (8000db4 <SystemClock_Config+0x100>)
 8000cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <SystemClock_Config+0x104>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cfc:	4a2e      	ldr	r2, [pc, #184]	; (8000db8 <SystemClock_Config+0x104>)
 8000cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <SystemClock_Config+0x104>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d10:	bf00      	nop
 8000d12:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <SystemClock_Config+0x104>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d1e:	d1f8      	bne.n	8000d12 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000d20:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <SystemClock_Config+0x108>)
 8000d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d24:	4a25      	ldr	r2, [pc, #148]	; (8000dbc <SystemClock_Config+0x108>)
 8000d26:	f023 0303 	bic.w	r3, r3, #3
 8000d2a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000d2c:	2322      	movs	r3, #34	; 0x22
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d34:	2340      	movs	r3, #64	; 0x40
 8000d36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d40:	2300      	movs	r3, #0
 8000d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d44:	2304      	movs	r3, #4
 8000d46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000d48:	2319      	movs	r3, #25
 8000d4a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d50:	2304      	movs	r3, #4
 8000d52:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d58:	230c      	movs	r3, #12
 8000d5a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f005 fbff 	bl	800656c <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d74:	f000 fed0 	bl	8001b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	233f      	movs	r3, #63	; 0x3f
 8000d7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d84:	2308      	movs	r3, #8
 8000d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d8c:	2340      	movs	r3, #64	; 0x40
 8000d8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f005 fff5 	bl	8006d8c <HAL_RCC_ClockConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000da8:	f000 feb6 	bl	8001b18 <Error_Handler>
  }
}
 8000dac:	bf00      	nop
 8000dae:	3770      	adds	r7, #112	; 0x70
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	58000400 	.word	0x58000400
 8000db8:	58024800 	.word	0x58024800
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	615a      	str	r2, [r3, #20]
 8000dd6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000dda:	4a2a      	ldr	r2, [pc, #168]	; (8000e84 <MX_ADC3_Init+0xc4>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dde:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000df2:	2204      	movs	r2, #4
 8000df4:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e34:	4812      	ldr	r0, [pc, #72]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000e36:	f002 f837 	bl	8002ea8 <HAL_ADC_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000e40:	f000 fe6a 	bl	8001b18 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e44:	2301      	movs	r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e48:	2306      	movs	r3, #6
 8000e4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e50:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e54:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e56:	2304      	movs	r3, #4
 8000e58:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <MX_ADC3_Init+0xc0>)
 8000e68:	f002 f9be 	bl	80031e8 <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000e72:	f000 fe51 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	24000acc 	.word	0x24000acc
 8000e84:	58026000 	.word	0x58026000

08000e88 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_ETH_Init+0x90>)
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <MX_ETH_Init+0x94>)
 8000e90:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_ETH_Init+0x90>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_ETH_Init+0x90>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_ETH_Init+0x90>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	22e1      	movs	r2, #225	; 0xe1
 8000eac:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_ETH_Init+0x90>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	3303      	adds	r3, #3
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_ETH_Init+0x90>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_ETH_Init+0x90>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	3305      	adds	r3, #5
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_ETH_Init+0x90>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_ETH_Init+0x90>)
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <MX_ETH_Init+0x98>)
 8000ed6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_ETH_Init+0x90>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <MX_ETH_Init+0x9c>)
 8000edc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_ETH_Init+0x90>)
 8000ee0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ee4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ee6:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_ETH_Init+0x90>)
 8000ee8:	f004 fbaa 	bl	8005640 <HAL_ETH_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000ef2:	f000 fe11 	bl	8001b18 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ef6:	2234      	movs	r2, #52	; 0x34
 8000ef8:	2100      	movs	r1, #0
 8000efa:	480b      	ldr	r0, [pc, #44]	; (8000f28 <MX_ETH_Init+0xa0>)
 8000efc:	f00b fd18 	bl	800c930 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_ETH_Init+0xa0>)
 8000f02:	2221      	movs	r2, #33	; 0x21
 8000f04:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_ETH_Init+0xa0>)
 8000f08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f0c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_ETH_Init+0xa0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	24000c68 	.word	0x24000c68
 8000f1c:	40028000 	.word	0x40028000
 8000f20:	24000070 	.word	0x24000070
 8000f24:	24000010 	.word	0x24000010
 8000f28:	24000cf0 	.word	0x24000cf0

08000f2c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f32:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <MX_SPI3_Init+0xa8>)
 8000f34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3e:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f46:	2203      	movs	r2, #3
 8000f48:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f5c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_SPI3_Init+0xa4>)
 8000fbc:	f008 fbf8 	bl	80097b0 <HAL_SPI_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000fc6:	f000 fda7 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2400093c 	.word	0x2400093c
 8000fd4:	40003c00 	.word	0x40003c00

08000fd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2224      	movs	r2, #36	; 0x24
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f00b fca2 	bl	800c930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <MX_TIM1_Init+0xac>)
 8000ff8:	4a23      	ldr	r2, [pc, #140]	; (8001088 <MX_TIM1_Init+0xb0>)
 8000ffa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_TIM1_Init+0xac>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <MX_TIM1_Init+0xac>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <MX_TIM1_Init+0xac>)
 800100a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800100e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_TIM1_Init+0xac>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_TIM1_Init+0xac>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_TIM1_Init+0xac>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001022:	2303      	movs	r3, #3
 8001024:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800103a:	2301      	movs	r3, #1
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	4619      	mov	r1, r3
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_TIM1_Init+0xac>)
 800104e:	f008 ff93 	bl	8009f78 <HAL_TIM_Encoder_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001058:	f000 fd5e 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_TIM1_Init+0xac>)
 800106e:	f00a f839 	bl	800b0e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001078:	f000 fd4e 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3730      	adds	r7, #48	; 0x30
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	24000b80 	.word	0x24000b80
 8001088:	40010000 	.word	0x40010000

0800108c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	2224      	movs	r2, #36	; 0x24
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f00b fc48 	bl	800c930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	463b      	mov	r3, r7
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_TIM2_Init+0xa4>)
 80010ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_TIM2_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_TIM2_Init+0xa4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_TIM2_Init+0xa4>)
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_TIM2_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_TIM2_Init+0xa4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010da:	2301      	movs	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ea:	2301      	movs	r3, #1
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <MX_TIM2_Init+0xa4>)
 80010fe:	f008 ff3b 	bl	8009f78 <HAL_TIM_Encoder_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001108:	f000 fd06 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_TIM2_Init+0xa4>)
 800111a:	f009 ffe3 	bl	800b0e4 <HAL_TIMEx_MasterConfigSynchronization>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001124:	f000 fcf8 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3730      	adds	r7, #48	; 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	24000bd0 	.word	0x24000bd0

08001134 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	2224      	movs	r2, #36	; 0x24
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f00b fbf4 	bl	800c930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <MX_TIM3_Init+0xa4>)
 8001154:	4a21      	ldr	r2, [pc, #132]	; (80011dc <MX_TIM3_Init+0xa8>)
 8001156:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_TIM3_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <MX_TIM3_Init+0xa4>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MX_TIM3_Init+0xa4>)
 8001166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_TIM3_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <MX_TIM3_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001178:	2303      	movs	r3, #3
 800117a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001180:	2301      	movs	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001190:	2301      	movs	r3, #1
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	4619      	mov	r1, r3
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_TIM3_Init+0xa4>)
 80011a4:	f008 fee8 	bl	8009f78 <HAL_TIM_Encoder_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80011ae:	f000 fcb3 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ba:	463b      	mov	r3, r7
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <MX_TIM3_Init+0xa4>)
 80011c0:	f009 ff90 	bl	800b0e4 <HAL_TIMEx_MasterConfigSynchronization>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80011ca:	f000 fca5 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	240008f0 	.word	0x240008f0
 80011dc:	40000400 	.word	0x40000400

080011e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	; 0x30
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2224      	movs	r2, #36	; 0x24
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f00b fb9e 	bl	800c930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <MX_TIM4_Init+0xa4>)
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <MX_TIM4_Init+0xa8>)
 8001202:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_TIM4_Init+0xa4>)
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_TIM4_Init+0xa4>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_TIM4_Init+0xa4>)
 8001212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001216:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_TIM4_Init+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <MX_TIM4_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001224:	2303      	movs	r3, #3
 8001226:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800122c:	2301      	movs	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001234:	230a      	movs	r3, #10
 8001236:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800123c:	2301      	movs	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001244:	230a      	movs	r3, #10
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	4619      	mov	r1, r3
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_TIM4_Init+0xa4>)
 8001250:	f008 fe92 	bl	8009f78 <HAL_TIM_Encoder_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800125a:	f000 fc5d 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_TIM4_Init+0xa4>)
 800126c:	f009 ff3a 	bl	800b0e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001276:	f000 fc4f 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3730      	adds	r7, #48	; 0x30
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2400038c 	.word	0x2400038c
 8001288:	40000800 	.word	0x40000800

0800128c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <MX_TIM5_Init+0x94>)
 80012ac:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <MX_TIM5_Init+0x98>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_TIM5_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <MX_TIM5_Init+0x94>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000;
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_TIM5_Init+0x94>)
 80012be:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <MX_TIM5_Init+0x9c>)
 80012c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_TIM5_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_TIM5_Init+0x94>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012ce:	4814      	ldr	r0, [pc, #80]	; (8001320 <MX_TIM5_Init+0x94>)
 80012d0:	f008 fb8b 	bl	80099ea <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80012da:	f000 fc1d 	bl	8001b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_TIM5_Init+0x94>)
 80012ec:	f009 f9a8 	bl	800a640 <HAL_TIM_ConfigClockSource>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80012f6:	f000 fc0f 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_TIM5_Init+0x94>)
 8001308:	f009 feec 	bl	800b0e4 <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001312:	f000 fc01 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3720      	adds	r7, #32
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	240008a4 	.word	0x240008a4
 8001324:	40000c00 	.word	0x40000c00
 8001328:	000186a0 	.word	0x000186a0

0800132c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	; 0x30
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]
 800134e:	615a      	str	r2, [r3, #20]
 8001350:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <MX_TIM12_Init+0xc0>)
 8001354:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <MX_TIM12_Init+0xc4>)
 8001356:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <MX_TIM12_Init+0xc0>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b23      	ldr	r3, [pc, #140]	; (80013ec <MX_TIM12_Init+0xc0>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_TIM12_Init+0xc0>)
 8001366:	f24f 4224 	movw	r2, #62500	; 0xf424
 800136a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_TIM12_Init+0xc0>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_TIM12_Init+0xc0>)
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001378:	481c      	ldr	r0, [pc, #112]	; (80013ec <MX_TIM12_Init+0xc0>)
 800137a:	f008 fb36 	bl	80099ea <HAL_TIM_Base_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001384:	f000 fbc8 	bl	8001b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	4619      	mov	r1, r3
 8001394:	4815      	ldr	r0, [pc, #84]	; (80013ec <MX_TIM12_Init+0xc0>)
 8001396:	f009 f953 	bl	800a640 <HAL_TIM_ConfigClockSource>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80013a0:	f000 fbba 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80013a4:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_TIM12_Init+0xc0>)
 80013a6:	f008 fbe7 	bl	8009b78 <HAL_TIM_PWM_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80013b0:	f000 fbb2 	bl	8001b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b4:	2360      	movs	r3, #96	; 0x60
 80013b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 80013b8:	f647 2312 	movw	r3, #31250	; 0x7a12
 80013bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2204      	movs	r2, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_TIM12_Init+0xc0>)
 80013ce:	f009 f827 	bl	800a420 <HAL_TIM_PWM_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80013d8:	f000 fb9e 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_TIM12_Init+0xc0>)
 80013de:	f000 ff93 	bl	8002308 <HAL_TIM_MspPostInit>

}
 80013e2:	bf00      	nop
 80013e4:	3730      	adds	r7, #48	; 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	24000c1c 	.word	0x24000c1c
 80013f0:	40001800 	.word	0x40001800

080013f4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]
 800140a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_TIM13_Init+0x94>)
 800140e:	4a1f      	ldr	r2, [pc, #124]	; (800148c <MX_TIM13_Init+0x98>)
 8001410:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_TIM13_Init+0x94>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_TIM13_Init+0x94>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_TIM13_Init+0x94>)
 8001420:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001424:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_TIM13_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_TIM13_Init+0x94>)
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001432:	4815      	ldr	r0, [pc, #84]	; (8001488 <MX_TIM13_Init+0x94>)
 8001434:	f008 fad9 	bl	80099ea <HAL_TIM_Base_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800143e:	f000 fb6b 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001442:	4811      	ldr	r0, [pc, #68]	; (8001488 <MX_TIM13_Init+0x94>)
 8001444:	f008 fb98 	bl	8009b78 <HAL_TIM_PWM_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800144e:	f000 fb63 	bl	8001b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001452:	2360      	movs	r3, #96	; 0x60
 8001454:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8001456:	f647 2312 	movw	r3, #31250	; 0x7a12
 800145a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001460:	2304      	movs	r3, #4
 8001462:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	4619      	mov	r1, r3
 800146a:	4807      	ldr	r0, [pc, #28]	; (8001488 <MX_TIM13_Init+0x94>)
 800146c:	f008 ffd8 	bl	800a420 <HAL_TIM_PWM_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8001476:	f000 fb4f 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800147a:	4803      	ldr	r0, [pc, #12]	; (8001488 <MX_TIM13_Init+0x94>)
 800147c:	f000 ff44 	bl	8002308 <HAL_TIM_MspPostInit>

}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	24000b30 	.word	0x24000b30
 800148c:	40001c00 	.word	0x40001c00

08001490 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b092      	sub	sp, #72	; 0x48
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014aa:	463b      	mov	r3, r7
 80014ac:	222c      	movs	r2, #44	; 0x2c
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f00b fa3d 	bl	800c930 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <MX_TIM16_Init+0xec>)
 80014b8:	4a31      	ldr	r2, [pc, #196]	; (8001580 <MX_TIM16_Init+0xf0>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80014bc:	4b2f      	ldr	r3, [pc, #188]	; (800157c <MX_TIM16_Init+0xec>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <MX_TIM16_Init+0xec>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <MX_TIM16_Init+0xec>)
 80014ca:	f24f 4224 	movw	r2, #62500	; 0xf424
 80014ce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <MX_TIM16_Init+0xec>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014d6:	4b29      	ldr	r3, [pc, #164]	; (800157c <MX_TIM16_Init+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <MX_TIM16_Init+0xec>)
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014e2:	4826      	ldr	r0, [pc, #152]	; (800157c <MX_TIM16_Init+0xec>)
 80014e4:	f008 fa81 	bl	80099ea <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80014ee:	f000 fb13 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80014f2:	4822      	ldr	r0, [pc, #136]	; (800157c <MX_TIM16_Init+0xec>)
 80014f4:	f008 fb40 	bl	8009b78 <HAL_TIM_PWM_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80014fe:	f000 fb0b 	bl	8001b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001502:	2360      	movs	r3, #96	; 0x60
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8001506:	f647 2312 	movw	r3, #31250	; 0x7a12
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150c:	2300      	movs	r3, #0
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001510:	2300      	movs	r3, #0
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001524:	2200      	movs	r2, #0
 8001526:	4619      	mov	r1, r3
 8001528:	4814      	ldr	r0, [pc, #80]	; (800157c <MX_TIM16_Init+0xec>)
 800152a:	f008 ff79 	bl	800a420 <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001534:	f000 faf0 	bl	8001b18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800154c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001550:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800155a:	463b      	mov	r3, r7
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	; (800157c <MX_TIM16_Init+0xec>)
 8001560:	f009 fe48 	bl	800b1f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800156a:	f000 fad5 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <MX_TIM16_Init+0xec>)
 8001570:	f000 feca 	bl	8002308 <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3748      	adds	r7, #72	; 0x48
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	24000d24 	.word	0x24000d24
 8001580:	40014400 	.word	0x40014400

08001584 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b092      	sub	sp, #72	; 0x48
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800158a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]
 800159a:	615a      	str	r2, [r3, #20]
 800159c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800159e:	463b      	mov	r3, r7
 80015a0:	222c      	movs	r2, #44	; 0x2c
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00b f9c3 	bl	800c930 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80015aa:	4b31      	ldr	r3, [pc, #196]	; (8001670 <MX_TIM17_Init+0xec>)
 80015ac:	4a31      	ldr	r2, [pc, #196]	; (8001674 <MX_TIM17_Init+0xf0>)
 80015ae:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80015b0:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <MX_TIM17_Init+0xec>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b6:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <MX_TIM17_Init+0xec>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 80015bc:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <MX_TIM17_Init+0xec>)
 80015be:	f24f 4224 	movw	r2, #62500	; 0xf424
 80015c2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c4:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <MX_TIM17_Init+0xec>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80015ca:	4b29      	ldr	r3, [pc, #164]	; (8001670 <MX_TIM17_Init+0xec>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <MX_TIM17_Init+0xec>)
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80015d6:	4826      	ldr	r0, [pc, #152]	; (8001670 <MX_TIM17_Init+0xec>)
 80015d8:	f008 fa07 	bl	80099ea <HAL_TIM_Base_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80015e2:	f000 fa99 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80015e6:	4822      	ldr	r0, [pc, #136]	; (8001670 <MX_TIM17_Init+0xec>)
 80015e8:	f008 fac6 	bl	8009b78 <HAL_TIM_PWM_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80015f2:	f000 fa91 	bl	8001b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f6:	2360      	movs	r3, #96	; 0x60
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 80015fa:	f647 2312 	movw	r3, #31250	; 0x7a12
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001600:	2300      	movs	r3, #0
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001604:	2300      	movs	r3, #0
 8001606:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001618:	2200      	movs	r2, #0
 800161a:	4619      	mov	r1, r3
 800161c:	4814      	ldr	r0, [pc, #80]	; (8001670 <MX_TIM17_Init+0xec>)
 800161e:	f008 feff 	bl	800a420 <HAL_TIM_PWM_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8001628:	f000 fa76 	bl	8001b18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001644:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800164e:	463b      	mov	r3, r7
 8001650:	4619      	mov	r1, r3
 8001652:	4807      	ldr	r0, [pc, #28]	; (8001670 <MX_TIM17_Init+0xec>)
 8001654:	f009 fdce 	bl	800b1f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 800165e:	f000 fa5b 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001662:	4803      	ldr	r0, [pc, #12]	; (8001670 <MX_TIM17_Init+0xec>)
 8001664:	f000 fe50 	bl	8002308 <HAL_TIM_MspPostInit>

}
 8001668:	bf00      	nop
 800166a:	3748      	adds	r7, #72	; 0x48
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	240007e0 	.word	0x240007e0
 8001674:	40014800 	.word	0x40014800

08001678 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <MX_UART5_Init+0x90>)
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <MX_UART5_Init+0x94>)
 8001680:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <MX_UART5_Init+0x90>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <MX_UART5_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <MX_UART5_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_UART5_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_UART5_Init+0x90>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_UART5_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_UART5_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_UART5_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_UART5_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_UART5_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016c0:	4811      	ldr	r0, [pc, #68]	; (8001708 <MX_UART5_Init+0x90>)
 80016c2:	f009 fe33 	bl	800b32c <HAL_UART_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80016cc:	f000 fa24 	bl	8001b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d0:	2100      	movs	r1, #0
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_UART5_Init+0x90>)
 80016d4:	f00a fd80 	bl	800c1d8 <HAL_UARTEx_SetTxFifoThreshold>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80016de:	f000 fa1b 	bl	8001b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <MX_UART5_Init+0x90>)
 80016e6:	f00a fdb5 	bl	800c254 <HAL_UARTEx_SetRxFifoThreshold>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80016f0:	f000 fa12 	bl	8001b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_UART5_Init+0x90>)
 80016f6:	f00a fd36 	bl	800c166 <HAL_UARTEx_DisableFifoMode>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001700:	f000 fa0a 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	240009c4 	.word	0x240009c4
 800170c:	40005000 	.word	0x40005000

08001710 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <MX_UART7_Init+0x90>)
 8001716:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <MX_UART7_Init+0x94>)
 8001718:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <MX_UART7_Init+0x90>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_UART7_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <MX_UART7_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_UART7_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_UART7_Init+0x90>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_UART7_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_UART7_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <MX_UART7_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_UART7_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <MX_UART7_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001758:	4811      	ldr	r0, [pc, #68]	; (80017a0 <MX_UART7_Init+0x90>)
 800175a:	f009 fde7 	bl	800b32c <HAL_UART_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001764:	f000 f9d8 	bl	8001b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001768:	2100      	movs	r1, #0
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_UART7_Init+0x90>)
 800176c:	f00a fd34 	bl	800c1d8 <HAL_UARTEx_SetTxFifoThreshold>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001776:	f000 f9cf 	bl	8001b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177a:	2100      	movs	r1, #0
 800177c:	4808      	ldr	r0, [pc, #32]	; (80017a0 <MX_UART7_Init+0x90>)
 800177e:	f00a fd69 	bl	800c254 <HAL_UARTEx_SetRxFifoThreshold>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001788:	f000 f9c6 	bl	8001b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_UART7_Init+0x90>)
 800178e:	f00a fcea 	bl	800c166 <HAL_UARTEx_DisableFifoMode>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001798:	f000 f9be 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	240002fc 	.word	0x240002fc
 80017a4:	40007800 	.word	0x40007800

080017a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ae:	4a16      	ldr	r2, [pc, #88]	; (8001808 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80017b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017b4:	2209      	movs	r2, #9
 80017b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ba:	2202      	movs	r2, #2
 80017bc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017c6:	2202      	movs	r2, #2
 80017c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017de:	2201      	movs	r2, #1
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017f0:	f004 fd2a 	bl	8006248 <HAL_PCD_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80017fa:	f000 f98d 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	240003d8 	.word	0x240003d8
 8001808:	40080000 	.word	0x40080000

0800180c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <MX_BDMA_Init+0x3c>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <MX_BDMA_Init+0x3c>)
 800181a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800181e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_BDMA_Init+0x3c>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	2081      	movs	r0, #129	; 0x81
 8001836:	f002 fa0c 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 800183a:	2081      	movs	r0, #129	; 0x81
 800183c:	f002 fa23 	bl	8003c86 <HAL_NVIC_EnableIRQ>

}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	58024400 	.word	0x58024400

0800184c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <MX_DMA_Init+0x3c>)
 8001854:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001858:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <MX_DMA_Init+0x3c>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_DMA_Init+0x3c>)
 8001864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	200c      	movs	r0, #12
 8001876:	f002 f9ec 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800187a:	200c      	movs	r0, #12
 800187c:	f002 fa03 	bl	8003c86 <HAL_NVIC_EnableIRQ>

}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	58024400 	.word	0x58024400

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08e      	sub	sp, #56	; 0x38
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	4b95      	ldr	r3, [pc, #596]	; (8001af8 <MX_GPIO_Init+0x26c>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	4a93      	ldr	r2, [pc, #588]	; (8001af8 <MX_GPIO_Init+0x26c>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b2:	4b91      	ldr	r3, [pc, #580]	; (8001af8 <MX_GPIO_Init+0x26c>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	623b      	str	r3, [r7, #32]
 80018be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c0:	4b8d      	ldr	r3, [pc, #564]	; (8001af8 <MX_GPIO_Init+0x26c>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c6:	4a8c      	ldr	r2, [pc, #560]	; (8001af8 <MX_GPIO_Init+0x26c>)
 80018c8:	f043 0320 	orr.w	r3, r3, #32
 80018cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d0:	4b89      	ldr	r3, [pc, #548]	; (8001af8 <MX_GPIO_Init+0x26c>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018de:	4b86      	ldr	r3, [pc, #536]	; (8001af8 <MX_GPIO_Init+0x26c>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e4:	4a84      	ldr	r2, [pc, #528]	; (8001af8 <MX_GPIO_Init+0x26c>)
 80018e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ee:	4b82      	ldr	r3, [pc, #520]	; (8001af8 <MX_GPIO_Init+0x26c>)
 80018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b7e      	ldr	r3, [pc, #504]	; (8001af8 <MX_GPIO_Init+0x26c>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001902:	4a7d      	ldr	r2, [pc, #500]	; (8001af8 <MX_GPIO_Init+0x26c>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800190c:	4b7a      	ldr	r3, [pc, #488]	; (8001af8 <MX_GPIO_Init+0x26c>)
 800190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	4b77      	ldr	r3, [pc, #476]	; (8001af8 <MX_GPIO_Init+0x26c>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001920:	4a75      	ldr	r2, [pc, #468]	; (8001af8 <MX_GPIO_Init+0x26c>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800192a:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <MX_GPIO_Init+0x26c>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <MX_GPIO_Init+0x26c>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193e:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <MX_GPIO_Init+0x26c>)
 8001940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001948:	4b6b      	ldr	r3, [pc, #428]	; (8001af8 <MX_GPIO_Init+0x26c>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001956:	4b68      	ldr	r3, [pc, #416]	; (8001af8 <MX_GPIO_Init+0x26c>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	4a66      	ldr	r2, [pc, #408]	; (8001af8 <MX_GPIO_Init+0x26c>)
 800195e:	f043 0310 	orr.w	r3, r3, #16
 8001962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001966:	4b64      	ldr	r3, [pc, #400]	; (8001af8 <MX_GPIO_Init+0x26c>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001974:	4b60      	ldr	r3, [pc, #384]	; (8001af8 <MX_GPIO_Init+0x26c>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197a:	4a5f      	ldr	r2, [pc, #380]	; (8001af8 <MX_GPIO_Init+0x26c>)
 800197c:	f043 0308 	orr.w	r3, r3, #8
 8001980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001984:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <MX_GPIO_Init+0x26c>)
 8001986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001998:	4858      	ldr	r0, [pc, #352]	; (8001afc <MX_GPIO_Init+0x270>)
 800199a:	f004 fc17 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	f644 4101 	movw	r1, #19457	; 0x4c01
 80019a4:	4856      	ldr	r0, [pc, #344]	; (8001b00 <MX_GPIO_Init+0x274>)
 80019a6:	f004 fc11 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80019b0:	4854      	ldr	r0, [pc, #336]	; (8001b04 <MX_GPIO_Init+0x278>)
 80019b2:	f004 fc0b 	bl	80061cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 80019bc:	4852      	ldr	r0, [pc, #328]	; (8001b08 <MX_GPIO_Init+0x27c>)
 80019be:	f004 fc05 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c8:	4850      	ldr	r0, [pc, #320]	; (8001b0c <MX_GPIO_Init+0x280>)
 80019ca:	f004 fbff 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e0:	4619      	mov	r1, r3
 80019e2:	484b      	ldr	r0, [pc, #300]	; (8001b10 <MX_GPIO_Init+0x284>)
 80019e4:	f004 fa42 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin PF9 DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin;
 80019e8:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	483e      	ldr	r0, [pc, #248]	; (8001afc <MX_GPIO_Init+0x270>)
 8001a02:	f004 fa33 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB10 PB11 LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin;
 8001a06:	f644 4301 	movw	r3, #19457	; 0x4c01
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4838      	ldr	r0, [pc, #224]	; (8001b00 <MX_GPIO_Init+0x274>)
 8001a20:	f004 fa24 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001a24:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4831      	ldr	r0, [pc, #196]	; (8001b04 <MX_GPIO_Init+0x278>)
 8001a3e:	f004 fa15 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|LD2_Pin;
 8001a42:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a58:	4619      	mov	r1, r3
 8001a5a:	482b      	ldr	r0, [pc, #172]	; (8001b08 <MX_GPIO_Init+0x27c>)
 8001a5c:	f004 fa06 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a72:	2307      	movs	r3, #7
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4823      	ldr	r0, [pc, #140]	; (8001b0c <MX_GPIO_Init+0x280>)
 8001a7e:	f004 f9f5 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a98:	4619      	mov	r1, r3
 8001a9a:	481c      	ldr	r0, [pc, #112]	; (8001b0c <MX_GPIO_Init+0x280>)
 8001a9c:	f004 f9e6 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <MX_GPIO_Init+0x288>)
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4814      	ldr	r0, [pc, #80]	; (8001b04 <MX_GPIO_Init+0x278>)
 8001ab4:	f004 f9da 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin
                           PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin
 8001ab8:	23f8      	movs	r3, #248	; 0xf8
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
                          |PROXIMITY4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <MX_GPIO_Init+0x288>)
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4810      	ldr	r0, [pc, #64]	; (8001b0c <MX_GPIO_Init+0x280>)
 8001acc:	f004 f9ce 	bl	8005e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	200a      	movs	r0, #10
 8001ad6:	f002 f8bc 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ada:	200a      	movs	r0, #10
 8001adc:	f002 f8d3 	bl	8003c86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2017      	movs	r0, #23
 8001ae6:	f002 f8b4 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aea:	2017      	movs	r0, #23
 8001aec:	f002 f8cb 	bl	8003c86 <HAL_NVIC_EnableIRQ>

}
 8001af0:	bf00      	nop
 8001af2:	3738      	adds	r7, #56	; 0x38
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	58024400 	.word	0x58024400
 8001afc:	58021400 	.word	0x58021400
 8001b00:	58020400 	.word	0x58020400
 8001b04:	58021800 	.word	0x58021800
 8001b08:	58021000 	.word	0x58021000
 8001b0c:	58020c00 	.word	0x58020c00
 8001b10:	58020800 	.word	0x58020800
 8001b14:	11110000 	.word	0x11110000

08001b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1c:	b672      	cpsid	i
}
 8001b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <Error_Handler+0x8>
	...

08001b24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_MspInit+0x30>)
 8001b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_MspInit+0x30>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_MspInit+0x30>)
 8001b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	58024400 	.word	0x58024400

08001b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0ba      	sub	sp, #232	; 0xe8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	22bc      	movs	r2, #188	; 0xbc
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00a fed9 	bl	800c930 <memset>
  if(hadc->Instance==ADC3)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a51      	ldr	r2, [pc, #324]	; (8001cc8 <HAL_ADC_MspInit+0x170>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	f040 809a 	bne.w	8001cbe <HAL_ADC_MspInit+0x166>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8001b90:	2304      	movs	r3, #4
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 9;
 8001b94:	2309      	movs	r3, #9
 8001b96:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001ba4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ba8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bae:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 3072;
 8001bb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bb4:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8001bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bbe:	f107 0318 	add.w	r3, r7, #24
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f005 fc6e 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8001bce:	f7ff ffa3 	bl	8001b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_ADC_MspInit+0x174>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd8:	4a3c      	ldr	r2, [pc, #240]	; (8001ccc <HAL_ADC_MspInit+0x174>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be2:	4b3a      	ldr	r3, [pc, #232]	; (8001ccc <HAL_ADC_MspInit+0x174>)
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_ADC_MspInit+0x174>)
 8001bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf6:	4a35      	ldr	r2, [pc, #212]	; (8001ccc <HAL_ADC_MspInit+0x174>)
 8001bf8:	f043 0320 	orr.w	r3, r3, #32
 8001bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_ADC_MspInit+0x174>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <HAL_ADC_MspInit+0x174>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c14:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <HAL_ADC_MspInit+0x174>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_ADC_MspInit+0x174>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = Current_3_Pin;
 8001c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c34:	2303      	movs	r3, #3
 8001c36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(Current_3_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4822      	ldr	r0, [pc, #136]	; (8001cd0 <HAL_ADC_MspInit+0x178>)
 8001c48:	f004 f910 	bl	8005e6c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001c4c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001c50:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001c54:	f000 ff86 	bl	8002b64 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001c58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001c5c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001c60:	f000 ff80 	bl	8002b64 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_ADC_MspInit+0x17c>)
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_ADC_MspInit+0x180>)
 8001c68:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_ADC_MspInit+0x17c>)
 8001c6c:	2211      	movs	r2, #17
 8001c6e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_ADC_MspInit+0x17c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_ADC_MspInit+0x17c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_ADC_MspInit+0x17c>)
 8001c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c82:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_ADC_MspInit+0x17c>)
 8001c86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c8a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_ADC_MspInit+0x17c>)
 8001c8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c92:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_ADC_MspInit+0x17c>)
 8001c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_ADC_MspInit+0x17c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001ca2:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <HAL_ADC_MspInit+0x17c>)
 8001ca4:	f002 f80a 	bl	8003cbc <HAL_DMA_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_ADC_MspInit+0x15a>
    {
      Error_Handler();
 8001cae:	f7ff ff33 	bl	8001b18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_ADC_MspInit+0x17c>)
 8001cb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_ADC_MspInit+0x17c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	37e8      	adds	r7, #232	; 0xe8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	58026000 	.word	0x58026000
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	58021400 	.word	0x58021400
 8001cd4:	2400082c 	.word	0x2400082c
 8001cd8:	58025408 	.word	0x58025408

08001cdc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	; 0x38
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a59      	ldr	r2, [pc, #356]	; (8001e60 <HAL_ETH_MspInit+0x184>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	f040 80ab 	bne.w	8001e56 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001d00:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d06:	4a57      	ldr	r2, [pc, #348]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d10:	4b54      	ldr	r3, [pc, #336]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d1a:	623b      	str	r3, [r7, #32]
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001d1e:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d24:	4a4f      	ldr	r2, [pc, #316]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001d3c:	4b49      	ldr	r3, [pc, #292]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d42:	4a48      	ldr	r2, [pc, #288]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d4c:	4b45      	ldr	r3, [pc, #276]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5a:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d60:	4a40      	ldr	r2, [pc, #256]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7e:	4a39      	ldr	r2, [pc, #228]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9c:	4a31      	ldr	r2, [pc, #196]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da6:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001db4:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dba:	4a2a      	ldr	r2, [pc, #168]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <HAL_ETH_MspInit+0x188>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001dd2:	2332      	movs	r3, #50	; 0x32
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001de2:	230b      	movs	r3, #11
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dea:	4619      	mov	r1, r3
 8001dec:	481e      	ldr	r0, [pc, #120]	; (8001e68 <HAL_ETH_MspInit+0x18c>)
 8001dee:	f004 f83d 	bl	8005e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001df2:	2386      	movs	r3, #134	; 0x86
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e02:	230b      	movs	r3, #11
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4817      	ldr	r0, [pc, #92]	; (8001e6c <HAL_ETH_MspInit+0x190>)
 8001e0e:	f004 f82d 	bl	8005e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e24:	230b      	movs	r3, #11
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4810      	ldr	r0, [pc, #64]	; (8001e70 <HAL_ETH_MspInit+0x194>)
 8001e30:	f004 f81c 	bl	8005e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001e34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e46:	230b      	movs	r3, #11
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4808      	ldr	r0, [pc, #32]	; (8001e74 <HAL_ETH_MspInit+0x198>)
 8001e52:	f004 f80b 	bl	8005e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	3738      	adds	r7, #56	; 0x38
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40028000 	.word	0x40028000
 8001e64:	58024400 	.word	0x58024400
 8001e68:	58020800 	.word	0x58020800
 8001e6c:	58020000 	.word	0x58020000
 8001e70:	58020400 	.word	0x58020400
 8001e74:	58021800 	.word	0x58021800

08001e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0ba      	sub	sp, #232	; 0xe8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e90:	f107 0318 	add.w	r3, r7, #24
 8001e94:	22bc      	movs	r2, #188	; 0xbc
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00a fd49 	bl	800c930 <memset>
  if(hspi->Instance==SPI3)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a37      	ldr	r2, [pc, #220]	; (8001f80 <HAL_SPI_MspInit+0x108>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d166      	bne.n	8001f76 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb2:	f107 0318 	add.w	r3, r7, #24
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f005 faf4 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001ec2:	f7ff fe29 	bl	8001b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_SPI_MspInit+0x10c>)
 8001ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ecc:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <HAL_SPI_MspInit+0x10c>)
 8001ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_SPI_MspInit+0x10c>)
 8001ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_SPI_MspInit+0x10c>)
 8001ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eea:	4a26      	ldr	r2, [pc, #152]	; (8001f84 <HAL_SPI_MspInit+0x10c>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef4:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_SPI_MspInit+0x10c>)
 8001ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_SPI_MspInit+0x10c>)
 8001f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <HAL_SPI_MspInit+0x10c>)
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_SPI_MspInit+0x10c>)
 8001f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f20:	2310      	movs	r3, #16
 8001f22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f38:	2306      	movs	r3, #6
 8001f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f42:	4619      	mov	r1, r3
 8001f44:	4810      	ldr	r0, [pc, #64]	; (8001f88 <HAL_SPI_MspInit+0x110>)
 8001f46:	f003 ff91 	bl	8005e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f4a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f64:	2306      	movs	r3, #6
 8001f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <HAL_SPI_MspInit+0x114>)
 8001f72:	f003 ff7b 	bl	8005e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f76:	bf00      	nop
 8001f78:	37e8      	adds	r7, #232	; 0xe8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40003c00 	.word	0x40003c00
 8001f84:	58024400 	.word	0x58024400
 8001f88:	58020000 	.word	0x58020000
 8001f8c:	58020800 	.word	0x58020800

08001f90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b090      	sub	sp, #64	; 0x40
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a7c      	ldr	r2, [pc, #496]	; (80021a0 <HAL_TIM_Encoder_MspInit+0x210>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d12f      	bne.n	8002012 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fb2:	4b7c      	ldr	r3, [pc, #496]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 8001fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fb8:	4a7a      	ldr	r2, [pc, #488]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fc2:	4b78      	ldr	r3, [pc, #480]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 8001fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd0:	4b74      	ldr	r3, [pc, #464]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 8001fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd6:	4a73      	ldr	r2, [pc, #460]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 8001fd8:	f043 0310 	orr.w	r3, r3, #16
 8001fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe0:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 8001fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 8001fee:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002000:	2301      	movs	r3, #1
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002008:	4619      	mov	r1, r3
 800200a:	4867      	ldr	r0, [pc, #412]	; (80021a8 <HAL_TIM_Encoder_MspInit+0x218>)
 800200c:	f003 ff2e 	bl	8005e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002010:	e0c2      	b.n	8002198 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d14d      	bne.n	80020b8 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800201c:	4b61      	ldr	r3, [pc, #388]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 800201e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002022:	4a60      	ldr	r2, [pc, #384]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800202c:	4b5d      	ldr	r3, [pc, #372]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 800202e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	623b      	str	r3, [r7, #32]
 8002038:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	4b5a      	ldr	r3, [pc, #360]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 800203c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002040:	4a58      	ldr	r2, [pc, #352]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800204a:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 800204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002058:	4b52      	ldr	r3, [pc, #328]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 800205a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205e:	4a51      	ldr	r2, [pc, #324]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002068:	4b4e      	ldr	r3, [pc, #312]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 800206a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 8002076:	2320      	movs	r3, #32
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002086:	2301      	movs	r3, #1
 8002088:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208e:	4619      	mov	r1, r3
 8002090:	4846      	ldr	r0, [pc, #280]	; (80021ac <HAL_TIM_Encoder_MspInit+0x21c>)
 8002092:	f003 feeb 	bl	8005e6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 8002096:	2308      	movs	r3, #8
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020a6:	2301      	movs	r3, #1
 80020a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ae:	4619      	mov	r1, r3
 80020b0:	483f      	ldr	r0, [pc, #252]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x220>)
 80020b2:	f003 fedb 	bl	8005e6c <HAL_GPIO_Init>
}
 80020b6:	e06f      	b.n	8002198 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM3)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a3d      	ldr	r2, [pc, #244]	; (80021b4 <HAL_TIM_Encoder_MspInit+0x224>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d12e      	bne.n	8002120 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020c2:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 80020c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020c8:	4a36      	ldr	r2, [pc, #216]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 80020ca:	f043 0302 	orr.w	r3, r3, #2
 80020ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020d2:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 80020d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e0:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 80020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e6:	4a2f      	ldr	r2, [pc, #188]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f0:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 80020f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 80020fe:	2330      	movs	r3, #48	; 0x30
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800210e:	2302      	movs	r3, #2
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002116:	4619      	mov	r1, r3
 8002118:	4825      	ldr	r0, [pc, #148]	; (80021b0 <HAL_TIM_Encoder_MspInit+0x220>)
 800211a:	f003 fea7 	bl	8005e6c <HAL_GPIO_Init>
}
 800211e:	e03b      	b.n	8002198 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM4)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a24      	ldr	r2, [pc, #144]	; (80021b8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d136      	bne.n	8002198 <HAL_TIM_Encoder_MspInit+0x208>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800212a:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 800212c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002130:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 8002132:	f043 0304 	orr.w	r3, r3, #4
 8002136:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 800213c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 800214a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214e:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_TIM_Encoder_MspInit+0x214>)
 800215a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 8002166:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002170:	2301      	movs	r3, #1
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002178:	2302      	movs	r3, #2
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800217c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002180:	4619      	mov	r1, r3
 8002182:	480e      	ldr	r0, [pc, #56]	; (80021bc <HAL_TIM_Encoder_MspInit+0x22c>)
 8002184:	f003 fe72 	bl	8005e6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	201e      	movs	r0, #30
 800218e:	f001 fd60 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002192:	201e      	movs	r0, #30
 8002194:	f001 fd77 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 8002198:	bf00      	nop
 800219a:	3740      	adds	r7, #64	; 0x40
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40010000 	.word	0x40010000
 80021a4:	58024400 	.word	0x58024400
 80021a8:	58021000 	.word	0x58021000
 80021ac:	58020000 	.word	0x58020000
 80021b0:	58020400 	.word	0x58020400
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40000800 	.word	0x40000800
 80021bc:	58020c00 	.word	0x58020c00

080021c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a48      	ldr	r2, [pc, #288]	; (80022f0 <HAL_TIM_Base_MspInit+0x130>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d117      	bne.n	8002202 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021d2:	4b48      	ldr	r3, [pc, #288]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 80021d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021d8:	4a46      	ldr	r2, [pc, #280]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021e2:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 80021e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	2032      	movs	r0, #50	; 0x32
 80021f6:	f001 fd2c 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80021fa:	2032      	movs	r0, #50	; 0x32
 80021fc:	f001 fd43 	bl	8003c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002200:	e072      	b.n	80022e8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a3c      	ldr	r2, [pc, #240]	; (80022f8 <HAL_TIM_Base_MspInit+0x138>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d117      	bne.n	800223c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 800220e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002212:	4a38      	ldr	r2, [pc, #224]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 8002214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002218:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 800221e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	202b      	movs	r0, #43	; 0x2b
 8002230:	f001 fd0f 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002234:	202b      	movs	r0, #43	; 0x2b
 8002236:	f001 fd26 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 800223a:	e055      	b.n	80022e8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a2e      	ldr	r2, [pc, #184]	; (80022fc <HAL_TIM_Base_MspInit+0x13c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d117      	bne.n	8002276 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 8002248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800224c:	4a29      	ldr	r2, [pc, #164]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 800224e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002252:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 8002258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	202c      	movs	r0, #44	; 0x2c
 800226a:	f001 fcf2 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800226e:	202c      	movs	r0, #44	; 0x2c
 8002270:	f001 fd09 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 8002274:	e038      	b.n	80022e8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a21      	ldr	r2, [pc, #132]	; (8002300 <HAL_TIM_Base_MspInit+0x140>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d117      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 8002282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 8002288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 8002292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	2075      	movs	r0, #117	; 0x75
 80022a4:	f001 fcd5 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80022a8:	2075      	movs	r0, #117	; 0x75
 80022aa:	f001 fcec 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 80022ae:	e01b      	b.n	80022e8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a13      	ldr	r2, [pc, #76]	; (8002304 <HAL_TIM_Base_MspInit+0x144>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d116      	bne.n	80022e8 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 80022bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c0:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 80022c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_TIM_Base_MspInit+0x134>)
 80022cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	2076      	movs	r0, #118	; 0x76
 80022de:	f001 fcb8 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80022e2:	2076      	movs	r0, #118	; 0x76
 80022e4:	f001 fccf 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 80022e8:	bf00      	nop
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40000c00 	.word	0x40000c00
 80022f4:	58024400 	.word	0x58024400
 80022f8:	40001800 	.word	0x40001800
 80022fc:	40001c00 	.word	0x40001c00
 8002300:	40014400 	.word	0x40014400
 8002304:	40014800 	.word	0x40014800

08002308 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	; 0x30
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a4b      	ldr	r2, [pc, #300]	; (8002454 <HAL_TIM_MspPostInit+0x14c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d120      	bne.n	800236c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <HAL_TIM_MspPostInit+0x150>)
 800232c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002330:	4a49      	ldr	r2, [pc, #292]	; (8002458 <HAL_TIM_MspPostInit+0x150>)
 8002332:	f043 0302 	orr.w	r3, r3, #2
 8002336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800233a:	4b47      	ldr	r3, [pc, #284]	; (8002458 <HAL_TIM_MspPostInit+0x150>)
 800233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 8002348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800234c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800235a:	2302      	movs	r3, #2
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4619      	mov	r1, r3
 8002364:	483d      	ldr	r0, [pc, #244]	; (800245c <HAL_TIM_MspPostInit+0x154>)
 8002366:	f003 fd81 	bl	8005e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800236a:	e06f      	b.n	800244c <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3b      	ldr	r2, [pc, #236]	; (8002460 <HAL_TIM_MspPostInit+0x158>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d11f      	bne.n	80023b6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	4b38      	ldr	r3, [pc, #224]	; (8002458 <HAL_TIM_MspPostInit+0x150>)
 8002378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800237c:	4a36      	ldr	r2, [pc, #216]	; (8002458 <HAL_TIM_MspPostInit+0x150>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002386:	4b34      	ldr	r3, [pc, #208]	; (8002458 <HAL_TIM_MspPostInit+0x150>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 8002394:	2340      	movs	r3, #64	; 0x40
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80023a4:	2309      	movs	r3, #9
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	4619      	mov	r1, r3
 80023ae:	482d      	ldr	r0, [pc, #180]	; (8002464 <HAL_TIM_MspPostInit+0x15c>)
 80023b0:	f003 fd5c 	bl	8005e6c <HAL_GPIO_Init>
}
 80023b4:	e04a      	b.n	800244c <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2b      	ldr	r2, [pc, #172]	; (8002468 <HAL_TIM_MspPostInit+0x160>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d120      	bne.n	8002402 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_TIM_MspPostInit+0x150>)
 80023c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c6:	4a24      	ldr	r2, [pc, #144]	; (8002458 <HAL_TIM_MspPostInit+0x150>)
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_TIM_MspPostInit+0x150>)
 80023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 80023de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80023f0:	2301      	movs	r3, #1
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	4619      	mov	r1, r3
 80023fa:	4818      	ldr	r0, [pc, #96]	; (800245c <HAL_TIM_MspPostInit+0x154>)
 80023fc:	f003 fd36 	bl	8005e6c <HAL_GPIO_Init>
}
 8002400:	e024      	b.n	800244c <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a19      	ldr	r2, [pc, #100]	; (800246c <HAL_TIM_MspPostInit+0x164>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d11f      	bne.n	800244c <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_TIM_MspPostInit+0x150>)
 800240e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002412:	4a11      	ldr	r2, [pc, #68]	; (8002458 <HAL_TIM_MspPostInit+0x150>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_TIM_MspPostInit+0x150>)
 800241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 800242a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800242e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800243c:	2301      	movs	r3, #1
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	4619      	mov	r1, r3
 8002446:	4805      	ldr	r0, [pc, #20]	; (800245c <HAL_TIM_MspPostInit+0x154>)
 8002448:	f003 fd10 	bl	8005e6c <HAL_GPIO_Init>
}
 800244c:	bf00      	nop
 800244e:	3730      	adds	r7, #48	; 0x30
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40001800 	.word	0x40001800
 8002458:	58024400 	.word	0x58024400
 800245c:	58020400 	.word	0x58020400
 8002460:	40001c00 	.word	0x40001c00
 8002464:	58020000 	.word	0x58020000
 8002468:	40014400 	.word	0x40014400
 800246c:	40014800 	.word	0x40014800

08002470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b0ba      	sub	sp, #232	; 0xe8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002488:	f107 0318 	add.w	r3, r7, #24
 800248c:	22bc      	movs	r2, #188	; 0xbc
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f00a fa4d 	bl	800c930 <memset>
  if(huart->Instance==UART5)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a60      	ldr	r2, [pc, #384]	; (800261c <HAL_UART_MspInit+0x1ac>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d143      	bne.n	8002528 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80024a0:	2302      	movs	r3, #2
 80024a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024aa:	f107 0318 	add.w	r3, r7, #24
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 fff8 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024ba:	f7ff fb2d 	bl	8001b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80024be:	4b58      	ldr	r3, [pc, #352]	; (8002620 <HAL_UART_MspInit+0x1b0>)
 80024c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024c4:	4a56      	ldr	r2, [pc, #344]	; (8002620 <HAL_UART_MspInit+0x1b0>)
 80024c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024ce:	4b54      	ldr	r3, [pc, #336]	; (8002620 <HAL_UART_MspInit+0x1b0>)
 80024d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	4b50      	ldr	r3, [pc, #320]	; (8002620 <HAL_UART_MspInit+0x1b0>)
 80024de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e2:	4a4f      	ldr	r2, [pc, #316]	; (8002620 <HAL_UART_MspInit+0x1b0>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ec:	4b4c      	ldr	r3, [pc, #304]	; (8002620 <HAL_UART_MspInit+0x1b0>)
 80024ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 80024fa:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80024fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002514:	230e      	movs	r3, #14
 8002516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800251e:	4619      	mov	r1, r3
 8002520:	4840      	ldr	r0, [pc, #256]	; (8002624 <HAL_UART_MspInit+0x1b4>)
 8002522:	f003 fca3 	bl	8005e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8002526:	e074      	b.n	8002612 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==UART7)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a3e      	ldr	r2, [pc, #248]	; (8002628 <HAL_UART_MspInit+0x1b8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d16f      	bne.n	8002612 <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002532:	2302      	movs	r3, #2
 8002534:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800253c:	f107 0318 	add.w	r3, r7, #24
 8002540:	4618      	mov	r0, r3
 8002542:	f004 ffaf 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800254c:	f7ff fae4 	bl	8001b18 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002550:	4b33      	ldr	r3, [pc, #204]	; (8002620 <HAL_UART_MspInit+0x1b0>)
 8002552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002556:	4a32      	ldr	r2, [pc, #200]	; (8002620 <HAL_UART_MspInit+0x1b0>)
 8002558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800255c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_UART_MspInit+0x1b0>)
 8002562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002566:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800256e:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <HAL_UART_MspInit+0x1b0>)
 8002570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002574:	4a2a      	ldr	r2, [pc, #168]	; (8002620 <HAL_UART_MspInit+0x1b0>)
 8002576:	f043 0320 	orr.w	r3, r3, #32
 800257a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800257e:	4b28      	ldr	r3, [pc, #160]	; (8002620 <HAL_UART_MspInit+0x1b0>)
 8002580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 800258c:	23c0      	movs	r3, #192	; 0xc0
 800258e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80025a4:	2307      	movs	r3, #7
 80025a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025ae:	4619      	mov	r1, r3
 80025b0:	481e      	ldr	r0, [pc, #120]	; (800262c <HAL_UART_MspInit+0x1bc>)
 80025b2:	f003 fc5b 	bl	8005e6c <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream1;
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 80025b8:	4a1e      	ldr	r2, [pc, #120]	; (8002634 <HAL_UART_MspInit+0x1c4>)
 80025ba:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80025bc:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 80025be:	224f      	movs	r2, #79	; 0x4f
 80025c0:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 80025d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d4:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d6:	4b16      	ldr	r3, [pc, #88]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 80025d8:	2200      	movs	r2, #0
 80025da:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 80025de:	2200      	movs	r2, #0
 80025e0:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 80025e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e8:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80025f6:	480e      	ldr	r0, [pc, #56]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 80025f8:	f001 fb60 	bl	8003cbc <HAL_DMA_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8002602:	f7ff fa89 	bl	8001b18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a09      	ldr	r2, [pc, #36]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 800260a:	67da      	str	r2, [r3, #124]	; 0x7c
 800260c:	4a08      	ldr	r2, [pc, #32]	; (8002630 <HAL_UART_MspInit+0x1c0>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002612:	bf00      	nop
 8002614:	37e8      	adds	r7, #232	; 0xe8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40005000 	.word	0x40005000
 8002620:	58024400 	.word	0x58024400
 8002624:	58020400 	.word	0x58020400
 8002628:	40007800 	.word	0x40007800
 800262c:	58021400 	.word	0x58021400
 8002630:	24000a54 	.word	0x24000a54
 8002634:	40020028 	.word	0x40020028

08002638 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b0b8      	sub	sp, #224	; 0xe0
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	22bc      	movs	r2, #188	; 0xbc
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f00a f969 	bl	800c930 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <HAL_PCD_MspInit+0xe8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d156      	bne.n	8002716 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002668:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800266c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800266e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8002672:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	4618      	mov	r0, r3
 800267c:	f004 ff12 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8002686:	f7ff fa47 	bl	8001b18 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800268a:	f003 ff5f 	bl	800654c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_PCD_MspInit+0xec>)
 8002690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002694:	4a23      	ldr	r2, [pc, #140]	; (8002724 <HAL_PCD_MspInit+0xec>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800269e:	4b21      	ldr	r3, [pc, #132]	; (8002724 <HAL_PCD_MspInit+0xec>)
 80026a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80026ac:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80026b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80026c6:	230a      	movs	r3, #10
 80026c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026d0:	4619      	mov	r1, r3
 80026d2:	4815      	ldr	r0, [pc, #84]	; (8002728 <HAL_PCD_MspInit+0xf0>)
 80026d4:	f003 fbca 	bl	8005e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026f0:	4619      	mov	r1, r3
 80026f2:	480d      	ldr	r0, [pc, #52]	; (8002728 <HAL_PCD_MspInit+0xf0>)
 80026f4:	f003 fbba 	bl	8005e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_PCD_MspInit+0xec>)
 80026fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <HAL_PCD_MspInit+0xec>)
 8002700:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002704:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_PCD_MspInit+0xec>)
 800270a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800270e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002716:	bf00      	nop
 8002718:	37e0      	adds	r7, #224	; 0xe0
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40080000 	.word	0x40080000
 8002724:	58024400 	.word	0x58024400
 8002728:	58020000 	.word	0x58020000

0800272c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <NMI_Handler+0x4>

08002732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002736:	e7fe      	b.n	8002736 <HardFault_Handler+0x4>

08002738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800273c:	e7fe      	b.n	800273c <MemManage_Handler+0x4>

0800273e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <BusFault_Handler+0x4>

08002744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <UsageFault_Handler+0x4>

0800274a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002778:	f000 f990 	bl	8002a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}

08002780 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002784:	2010      	movs	r0, #16
 8002786:	f003 fd3a 	bl	80061fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <DMA1_Stream1_IRQHandler+0x10>)
 8002796:	f001 fded 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	24000a54 	.word	0x24000a54

080027a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80027a8:	2020      	movs	r0, #32
 80027aa:	f003 fd28 	bl	80061fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80027ae:	2040      	movs	r0, #64	; 0x40
 80027b0:	f003 fd25 	bl	80061fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80027b4:	2080      	movs	r0, #128	; 0x80
 80027b6:	f003 fd22 	bl	80061fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <TIM4_IRQHandler+0x10>)
 80027c6:	f007 fd0b 	bl	800a1e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2400038c 	.word	0x2400038c

080027d4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80027da:	f007 fd01 	bl	800a1e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	24000c1c 	.word	0x24000c1c

080027e8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80027ee:	f007 fcf7 	bl	800a1e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	24000b30 	.word	0x24000b30

080027fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <TIM5_IRQHandler+0x10>)
 8002802:	f007 fced 	bl	800a1e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	240008a4 	.word	0x240008a4

08002810 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <TIM16_IRQHandler+0x10>)
 8002816:	f007 fce3 	bl	800a1e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	24000d24 	.word	0x24000d24

08002824 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <TIM17_IRQHandler+0x10>)
 800282a:	f007 fcd9 	bl	800a1e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	240007e0 	.word	0x240007e0

08002838 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <BDMA_Channel0_IRQHandler+0x10>)
 800283e:	f001 fd99 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2400082c 	.word	0x2400082c

0800284c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002850:	4b39      	ldr	r3, [pc, #228]	; (8002938 <SystemInit+0xec>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	4a38      	ldr	r2, [pc, #224]	; (8002938 <SystemInit+0xec>)
 8002858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800285c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <SystemInit+0xf0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	2b06      	cmp	r3, #6
 800286a:	d807      	bhi.n	800287c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800286c:	4b33      	ldr	r3, [pc, #204]	; (800293c <SystemInit+0xf0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 030f 	bic.w	r3, r3, #15
 8002874:	4a31      	ldr	r2, [pc, #196]	; (800293c <SystemInit+0xf0>)
 8002876:	f043 0307 	orr.w	r3, r3, #7
 800287a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800287c:	4b30      	ldr	r3, [pc, #192]	; (8002940 <SystemInit+0xf4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <SystemInit+0xf4>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002888:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <SystemInit+0xf4>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <SystemInit+0xf4>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	492b      	ldr	r1, [pc, #172]	; (8002940 <SystemInit+0xf4>)
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <SystemInit+0xf8>)
 8002896:	4013      	ands	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800289a:	4b28      	ldr	r3, [pc, #160]	; (800293c <SystemInit+0xf0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028a6:	4b25      	ldr	r3, [pc, #148]	; (800293c <SystemInit+0xf0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 030f 	bic.w	r3, r3, #15
 80028ae:	4a23      	ldr	r2, [pc, #140]	; (800293c <SystemInit+0xf0>)
 80028b0:	f043 0307 	orr.w	r3, r3, #7
 80028b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028b6:	4b22      	ldr	r3, [pc, #136]	; (8002940 <SystemInit+0xf4>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028bc:	4b20      	ldr	r3, [pc, #128]	; (8002940 <SystemInit+0xf4>)
 80028be:	2200      	movs	r2, #0
 80028c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028c2:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <SystemInit+0xf4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <SystemInit+0xf4>)
 80028ca:	4a1f      	ldr	r2, [pc, #124]	; (8002948 <SystemInit+0xfc>)
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <SystemInit+0xf4>)
 80028d0:	4a1e      	ldr	r2, [pc, #120]	; (800294c <SystemInit+0x100>)
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <SystemInit+0xf4>)
 80028d6:	4a1e      	ldr	r2, [pc, #120]	; (8002950 <SystemInit+0x104>)
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028da:	4b19      	ldr	r3, [pc, #100]	; (8002940 <SystemInit+0xf4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028e0:	4b17      	ldr	r3, [pc, #92]	; (8002940 <SystemInit+0xf4>)
 80028e2:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <SystemInit+0x104>)
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028e6:	4b16      	ldr	r3, [pc, #88]	; (8002940 <SystemInit+0xf4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <SystemInit+0xf4>)
 80028ee:	4a18      	ldr	r2, [pc, #96]	; (8002950 <SystemInit+0x104>)
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <SystemInit+0xf4>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <SystemInit+0xf4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a10      	ldr	r2, [pc, #64]	; (8002940 <SystemInit+0xf4>)
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <SystemInit+0xf4>)
 8002906:	2200      	movs	r2, #0
 8002908:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <SystemInit+0x108>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <SystemInit+0x10c>)
 8002910:	4013      	ands	r3, r2
 8002912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002916:	d202      	bcs.n	800291e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <SystemInit+0x110>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <SystemInit+0x114>)
 8002920:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002924:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <SystemInit+0xec>)
 8002928:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800292c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00
 800293c:	52002000 	.word	0x52002000
 8002940:	58024400 	.word	0x58024400
 8002944:	eaf6ed7f 	.word	0xeaf6ed7f
 8002948:	02020200 	.word	0x02020200
 800294c:	01ff0000 	.word	0x01ff0000
 8002950:	01010280 	.word	0x01010280
 8002954:	5c001000 	.word	0x5c001000
 8002958:	ffff0000 	.word	0xffff0000
 800295c:	51008108 	.word	0x51008108
 8002960:	52004000 	.word	0x52004000

08002964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800299c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002968:	f7ff ff70 	bl	800284c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800296c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800296e:	e003      	b.n	8002978 <LoopCopyDataInit>

08002970 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002972:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002974:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002976:	3104      	adds	r1, #4

08002978 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002978:	480a      	ldr	r0, [pc, #40]	; (80029a4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800297c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800297e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002980:	d3f6      	bcc.n	8002970 <CopyDataInit>
  ldr  r2, =_sbss
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002984:	e002      	b.n	800298c <LoopFillZerobss>

08002986 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002986:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002988:	f842 3b04 	str.w	r3, [r2], #4

0800298c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800298e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002990:	d3f9      	bcc.n	8002986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002992:	f009 ffa9 	bl	800c8e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002996:	f7fe f903 	bl	8000ba0 <main>
  bx  lr    
 800299a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800299c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80029a0:	0800c9a8 	.word	0x0800c9a8
  ldr  r0, =_sdata
 80029a4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80029a8:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80029ac:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 80029b0:	24000d74 	.word	0x24000d74

080029b4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b4:	e7fe      	b.n	80029b4 <ADC3_IRQHandler>
	...

080029b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029be:	2003      	movs	r0, #3
 80029c0:	f001 f93c 	bl	8003c3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029c4:	f004 fb98 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_Init+0x68>)
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	4913      	ldr	r1, [pc, #76]	; (8002a24 <HAL_Init+0x6c>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
 80029e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <HAL_Init+0x68>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <HAL_Init+0x6c>)
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
 80029f8:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <HAL_Init+0x70>)
 80029fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029fc:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <HAL_Init+0x74>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a02:	2000      	movs	r0, #0
 8002a04:	f000 f814 	bl	8002a30 <HAL_InitTick>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e002      	b.n	8002a18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a12:	f7ff f887 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	58024400 	.word	0x58024400
 8002a24:	0800c958 	.word	0x0800c958
 8002a28:	24000004 	.word	0x24000004
 8002a2c:	24000000 	.word	0x24000000

08002a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_InitTick+0x60>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e021      	b.n	8002a88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a44:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <HAL_InitTick+0x64>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_InitTick+0x60>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 f921 	bl	8003ca2 <HAL_SYSTICK_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00e      	b.n	8002a88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d80a      	bhi.n	8002a86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a70:	2200      	movs	r2, #0
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	f001 f8eb 	bl	8003c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a7c:	4a06      	ldr	r2, [pc, #24]	; (8002a98 <HAL_InitTick+0x68>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	2400000c 	.word	0x2400000c
 8002a94:	24000000 	.word	0x24000000
 8002a98:	24000008 	.word	0x24000008

08002a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_IncTick+0x20>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_IncTick+0x24>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_IncTick+0x24>)
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	2400000c 	.word	0x2400000c
 8002ac0:	24000d70 	.word	0x24000d70

08002ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_GetTick+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	24000d70 	.word	0x24000d70

08002adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae4:	f7ff ffee 	bl	8002ac4 <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d005      	beq.n	8002b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_Delay+0x44>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b02:	bf00      	nop
 8002b04:	f7ff ffde 	bl	8002ac4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d8f7      	bhi.n	8002b04 <HAL_Delay+0x28>
  {
  }
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	2400000c 	.word	0x2400000c

08002b24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_GetREVID+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0c1b      	lsrs	r3, r3, #16
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	5c001000 	.word	0x5c001000

08002b3c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b4c:	4904      	ldr	r1, [pc, #16]	; (8002b60 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	58000400 	.word	0x58000400

08002b64 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	401a      	ands	r2, r3
 8002b78:	4904      	ldr	r1, [pc, #16]	; (8002b8c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	58000400 	.word	0x58000400

08002b90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	609a      	str	r2, [r3, #8]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	609a      	str	r2, [r3, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3360      	adds	r3, #96	; 0x60
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	431a      	orrs	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	611a      	str	r2, [r3, #16]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b087      	sub	sp, #28
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3360      	adds	r3, #96	; 0x60
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	601a      	str	r2, [r3, #0]
  }
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3330      	adds	r3, #48	; 0x30
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	4413      	add	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	211f      	movs	r1, #31
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	f003 011f 	and.w	r1, r3, #31
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3314      	adds	r3, #20
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	0e5b      	lsrs	r3, r3, #25
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	4413      	add	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	0d1b      	lsrs	r3, r3, #20
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2107      	movs	r1, #7
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	0d1b      	lsrs	r3, r3, #20
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0318 	and.w	r3, r3, #24
 8002d72:	4908      	ldr	r1, [pc, #32]	; (8002d94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d74:	40d9      	lsrs	r1, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	400b      	ands	r3, r1
 8002d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	000fffff 	.word	0x000fffff

08002d98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6093      	str	r3, [r2, #8]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	5fffffc0 	.word	0x5fffffc0

08002dbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd0:	d101      	bne.n	8002dd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <LL_ADC_EnableInternalRegulator+0x24>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	6fffffc0 	.word	0x6fffffc0

08002e0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e20:	d101      	bne.n	8002e26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <LL_ADC_IsEnabled+0x18>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <LL_ADC_IsEnabled+0x1a>
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d101      	bne.n	8002e98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b089      	sub	sp, #36	; 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e18e      	b.n	80031e0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fe fe41 	bl	8001b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff67 	bl	8002dbc <LL_ADC_IsDeepPowerDownEnabled>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff4d 	bl	8002d98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff82 	bl	8002e0c <LL_ADC_IsInternalRegulatorEnabled>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d114      	bne.n	8002f38 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ff66 	bl	8002de4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f18:	4b9a      	ldr	r3, [pc, #616]	; (8003184 <HAL_ADC_Init+0x2dc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	099b      	lsrs	r3, r3, #6
 8002f1e:	4a9a      	ldr	r2, [pc, #616]	; (8003188 <HAL_ADC_Init+0x2e0>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	3301      	adds	r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f2a:	e002      	b.n	8002f32 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f9      	bne.n	8002f2c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff65 	bl	8002e0c <LL_ADC_IsInternalRegulatorEnabled>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10d      	bne.n	8002f64 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	f043 0210 	orr.w	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff76 	bl	8002e5a <LL_ADC_REG_IsConversionOngoing>
 8002f6e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f040 8128 	bne.w	80031ce <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f040 8124 	bne.w	80031ce <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f8e:	f043 0202 	orr.w	r2, r3, #2
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff ff4a 	bl	8002e34 <LL_ADC_IsEnabled>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d136      	bne.n	8003014 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a78      	ldr	r2, [pc, #480]	; (800318c <HAL_ADC_Init+0x2e4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d004      	beq.n	8002fba <HAL_ADC_Init+0x112>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a76      	ldr	r2, [pc, #472]	; (8003190 <HAL_ADC_Init+0x2e8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_ADC_Init+0x130>
 8002fba:	4874      	ldr	r0, [pc, #464]	; (800318c <HAL_ADC_Init+0x2e4>)
 8002fbc:	f7ff ff3a 	bl	8002e34 <LL_ADC_IsEnabled>
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	4873      	ldr	r0, [pc, #460]	; (8003190 <HAL_ADC_Init+0x2e8>)
 8002fc4:	f7ff ff36 	bl	8002e34 <LL_ADC_IsEnabled>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e008      	b.n	8002fea <HAL_ADC_Init+0x142>
 8002fd8:	486e      	ldr	r0, [pc, #440]	; (8003194 <HAL_ADC_Init+0x2ec>)
 8002fda:	f7ff ff2b 	bl	8002e34 <LL_ADC_IsEnabled>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d012      	beq.n	8003014 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a66      	ldr	r2, [pc, #408]	; (800318c <HAL_ADC_Init+0x2e4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_ADC_Init+0x15a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a64      	ldr	r2, [pc, #400]	; (8003190 <HAL_ADC_Init+0x2e8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_ADC_Init+0x15e>
 8003002:	4a65      	ldr	r2, [pc, #404]	; (8003198 <HAL_ADC_Init+0x2f0>)
 8003004:	e000      	b.n	8003008 <HAL_ADC_Init+0x160>
 8003006:	4a65      	ldr	r2, [pc, #404]	; (800319c <HAL_ADC_Init+0x2f4>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4619      	mov	r1, r3
 800300e:	4610      	mov	r0, r2
 8003010:	f7ff fdbe 	bl	8002b90 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003014:	f7ff fd86 	bl	8002b24 <HAL_GetREVID>
 8003018:	4603      	mov	r3, r0
 800301a:	f241 0203 	movw	r2, #4099	; 0x1003
 800301e:	4293      	cmp	r3, r2
 8003020:	d914      	bls.n	800304c <HAL_ADC_Init+0x1a4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b10      	cmp	r3, #16
 8003028:	d110      	bne.n	800304c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	7d5b      	ldrb	r3, [r3, #21]
 800302e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003034:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800303a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7f1b      	ldrb	r3, [r3, #28]
 8003040:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003042:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003044:	f043 030c 	orr.w	r3, r3, #12
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	e00d      	b.n	8003068 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	7d5b      	ldrb	r3, [r3, #21]
 8003050:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003056:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800305c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7f1b      	ldrb	r3, [r3, #28]
 8003062:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	7f1b      	ldrb	r3, [r3, #28]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d106      	bne.n	800307e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	3b01      	subs	r3, #1
 8003076:	045b      	lsls	r3, r3, #17
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <HAL_ADC_Init+0x2f8>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	69b9      	ldr	r1, [r7, #24]
 80030aa:	430b      	orrs	r3, r1
 80030ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fed1 	bl	8002e5a <LL_ADC_REG_IsConversionOngoing>
 80030b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fede 	bl	8002e80 <LL_ADC_INJ_IsConversionOngoing>
 80030c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d14a      	bne.n	8003162 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d147      	bne.n	8003162 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7d1b      	ldrb	r3, [r3, #20]
 80030d6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80030dc:	4313      	orrs	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_ADC_Init+0x2fc>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	430b      	orrs	r3, r1
 80030f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d11b      	bne.n	8003136 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_ADC_Init+0x300>)
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003112:	3a01      	subs	r2, #1
 8003114:	0411      	lsls	r1, r2, #16
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800311a:	4311      	orrs	r1, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003120:	4311      	orrs	r1, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003126:	430a      	orrs	r2, r1
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	611a      	str	r2, [r3, #16]
 8003134:	e007      	b.n	8003146 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fb93 	bl	8003888 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d120      	bne.n	80031ac <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f023 010f 	bic.w	r1, r3, #15
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	1e5a      	subs	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
 8003182:	e01b      	b.n	80031bc <HAL_ADC_Init+0x314>
 8003184:	24000000 	.word	0x24000000
 8003188:	053e2d63 	.word	0x053e2d63
 800318c:	40022000 	.word	0x40022000
 8003190:	40022100 	.word	0x40022100
 8003194:	58026000 	.word	0x58026000
 8003198:	40022300 	.word	0x40022300
 800319c:	58026300 	.word	0x58026300
 80031a0:	fff0c003 	.word	0xfff0c003
 80031a4:	ffffbffc 	.word	0xffffbffc
 80031a8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 020f 	bic.w	r2, r2, #15
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	f023 0303 	bic.w	r3, r3, #3
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
 80031cc:	e007      	b.n	80031de <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	f043 0210 	orr.w	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031de:	7ffb      	ldrb	r3, [r7, #31]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3724      	adds	r7, #36	; 0x24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd90      	pop	{r4, r7, pc}

080031e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b0a1      	sub	sp, #132	; 0x84
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a9d      	ldr	r2, [pc, #628]	; (8003478 <HAL_ADC_ConfigChannel+0x290>)
 8003202:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x2a>
 800320e:	2302      	movs	r3, #2
 8003210:	e321      	b.n	8003856 <HAL_ADC_ConfigChannel+0x66e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fe1b 	bl	8002e5a <LL_ADC_REG_IsConversionOngoing>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 8306 	bne.w	8003838 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003234:	2b00      	cmp	r3, #0
 8003236:	d108      	bne.n	800324a <HAL_ADC_ConfigChannel+0x62>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	0e9b      	lsrs	r3, r3, #26
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	2201      	movs	r2, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	e016      	b.n	8003278 <HAL_ADC_ConfigChannel+0x90>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800325a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800325c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003262:	2320      	movs	r3, #32
 8003264:	e003      	b.n	800326e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	2201      	movs	r2, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	69d1      	ldr	r1, [r2, #28]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	430b      	orrs	r3, r1
 8003284:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	f7ff fd04 	bl	8002ca0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fddc 	bl	8002e5a <LL_ADC_REG_IsConversionOngoing>
 80032a2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fde9 	bl	8002e80 <LL_ADC_INJ_IsConversionOngoing>
 80032ae:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 80b3 	bne.w	800341e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 80af 	bne.w	800341e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6819      	ldr	r1, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	461a      	mov	r2, r3
 80032ce:	f7ff fd13 	bl	8002cf8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032d2:	4b6a      	ldr	r3, [pc, #424]	; (800347c <HAL_ADC_ConfigChannel+0x294>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80032da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032de:	d10b      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x110>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	e01d      	b.n	8003334 <HAL_ADC_ConfigChannel+0x14c>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10b      	bne.n	800331e <HAL_ADC_ConfigChannel+0x136>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	e00a      	b.n	8003334 <HAL_ADC_ConfigChannel+0x14c>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	089b      	lsrs	r3, r3, #2
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b04      	cmp	r3, #4
 800333c:	d027      	beq.n	800338e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6919      	ldr	r1, [r3, #16]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800334c:	f7ff fc54 	bl	8002bf8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6919      	ldr	r1, [r3, #16]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	7e5b      	ldrb	r3, [r3, #25]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d102      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x17e>
 8003360:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003364:	e000      	b.n	8003368 <HAL_ADC_ConfigChannel+0x180>
 8003366:	2300      	movs	r3, #0
 8003368:	461a      	mov	r2, r3
 800336a:	f7ff fc7e 	bl	8002c6a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6919      	ldr	r1, [r3, #16]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	7e1b      	ldrb	r3, [r3, #24]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x19c>
 800337e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003382:	e000      	b.n	8003386 <HAL_ADC_ConfigChannel+0x19e>
 8003384:	2300      	movs	r3, #0
 8003386:	461a      	mov	r2, r3
 8003388:	f7ff fc56 	bl	8002c38 <LL_ADC_SetDataRightShift>
 800338c:	e047      	b.n	800341e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003394:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	069b      	lsls	r3, r3, #26
 800339e:	429a      	cmp	r2, r3
 80033a0:	d107      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033b0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	069b      	lsls	r3, r3, #26
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d107      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033d4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	069b      	lsls	r3, r3, #26
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d107      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033f8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003400:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	069b      	lsls	r3, r3, #26
 800340a:	429a      	cmp	r2, r3
 800340c:	d107      	bne.n	800341e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800341c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fd06 	bl	8002e34 <LL_ADC_IsEnabled>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 820d 	bne.w	800384a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	461a      	mov	r2, r3
 800343e:	f7ff fc87 	bl	8002d50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <HAL_ADC_ConfigChannel+0x290>)
 8003448:	4293      	cmp	r3, r2
 800344a:	f040 8133 	bne.w	80036b4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800345a:	2b00      	cmp	r3, #0
 800345c:	d110      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x298>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	0e9b      	lsrs	r3, r3, #26
 8003464:	3301      	adds	r3, #1
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	2b09      	cmp	r3, #9
 800346c:	bf94      	ite	ls
 800346e:	2301      	movls	r3, #1
 8003470:	2300      	movhi	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	e01e      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x2cc>
 8003476:	bf00      	nop
 8003478:	47ff0000 	.word	0x47ff0000
 800347c:	5c001000 	.word	0x5c001000
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800348e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003490:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003498:	2320      	movs	r3, #32
 800349a:	e003      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800349c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	2b09      	cmp	r3, #9
 80034ac:	bf94      	ite	ls
 80034ae:	2301      	movls	r3, #1
 80034b0:	2300      	movhi	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d079      	beq.n	80035ac <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d107      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x2ec>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0e9b      	lsrs	r3, r3, #26
 80034ca:	3301      	adds	r3, #1
 80034cc:	069b      	lsls	r3, r3, #26
 80034ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034d2:	e015      	b.n	8003500 <HAL_ADC_ConfigChannel+0x318>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80034e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80034e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80034ec:	2320      	movs	r3, #32
 80034ee:	e003      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80034f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	3301      	adds	r3, #1
 80034fa:	069b      	lsls	r3, r3, #26
 80034fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x338>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0e9b      	lsrs	r3, r3, #26
 8003512:	3301      	adds	r3, #1
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	2101      	movs	r1, #1
 800351a:	fa01 f303 	lsl.w	r3, r1, r3
 800351e:	e017      	b.n	8003550 <HAL_ADC_ConfigChannel+0x368>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800352e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003530:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003538:	2320      	movs	r3, #32
 800353a:	e003      	b.n	8003544 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800353c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3301      	adds	r3, #1
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2101      	movs	r1, #1
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	ea42 0103 	orr.w	r1, r2, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x38e>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0e9b      	lsrs	r3, r3, #26
 8003566:	3301      	adds	r3, #1
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	4613      	mov	r3, r2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	4413      	add	r3, r2
 8003572:	051b      	lsls	r3, r3, #20
 8003574:	e018      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x3c0>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800358e:	2320      	movs	r3, #32
 8003590:	e003      	b.n	800359a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	fab3 f383 	clz	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	3301      	adds	r3, #1
 800359c:	f003 021f 	and.w	r2, r3, #31
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a8:	430b      	orrs	r3, r1
 80035aa:	e07e      	b.n	80036aa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d107      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x3e0>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	0e9b      	lsrs	r3, r3, #26
 80035be:	3301      	adds	r3, #1
 80035c0:	069b      	lsls	r3, r3, #26
 80035c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035c6:	e015      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x40c>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80035e0:	2320      	movs	r3, #32
 80035e2:	e003      	b.n	80035ec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3301      	adds	r3, #1
 80035ee:	069b      	lsls	r3, r3, #26
 80035f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x42c>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0e9b      	lsrs	r3, r3, #26
 8003606:	3301      	adds	r3, #1
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	e017      	b.n	8003644 <HAL_ADC_ConfigChannel+0x45c>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	61bb      	str	r3, [r7, #24]
  return result;
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800362c:	2320      	movs	r3, #32
 800362e:	e003      	b.n	8003638 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3301      	adds	r3, #1
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2101      	movs	r1, #1
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	ea42 0103 	orr.w	r1, r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10d      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x488>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	0e9b      	lsrs	r3, r3, #26
 800365a:	3301      	adds	r3, #1
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	3b1e      	subs	r3, #30
 8003668:	051b      	lsls	r3, r3, #20
 800366a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800366e:	e01b      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x4c0>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	60fb      	str	r3, [r7, #12]
  return result;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003688:	2320      	movs	r3, #32
 800368a:	e003      	b.n	8003694 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	3301      	adds	r3, #1
 8003696:	f003 021f 	and.w	r2, r3, #31
 800369a:	4613      	mov	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	3b1e      	subs	r3, #30
 80036a2:	051b      	lsls	r3, r3, #20
 80036a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a8:	430b      	orrs	r3, r1
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	6892      	ldr	r2, [r2, #8]
 80036ae:	4619      	mov	r1, r3
 80036b0:	f7ff fb22 	bl	8002cf8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f280 80c6 	bge.w	800384a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a67      	ldr	r2, [pc, #412]	; (8003860 <HAL_ADC_ConfigChannel+0x678>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_ADC_ConfigChannel+0x4ea>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a65      	ldr	r2, [pc, #404]	; (8003864 <HAL_ADC_ConfigChannel+0x67c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x4ee>
 80036d2:	4b65      	ldr	r3, [pc, #404]	; (8003868 <HAL_ADC_ConfigChannel+0x680>)
 80036d4:	e000      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x4f0>
 80036d6:	4b65      	ldr	r3, [pc, #404]	; (800386c <HAL_ADC_ConfigChannel+0x684>)
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fa7f 	bl	8002bdc <LL_ADC_GetCommonPathInternalCh>
 80036de:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a5e      	ldr	r2, [pc, #376]	; (8003860 <HAL_ADC_ConfigChannel+0x678>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d004      	beq.n	80036f4 <HAL_ADC_ConfigChannel+0x50c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a5d      	ldr	r2, [pc, #372]	; (8003864 <HAL_ADC_ConfigChannel+0x67c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d10e      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x52a>
 80036f4:	485a      	ldr	r0, [pc, #360]	; (8003860 <HAL_ADC_ConfigChannel+0x678>)
 80036f6:	f7ff fb9d 	bl	8002e34 <LL_ADC_IsEnabled>
 80036fa:	4604      	mov	r4, r0
 80036fc:	4859      	ldr	r0, [pc, #356]	; (8003864 <HAL_ADC_ConfigChannel+0x67c>)
 80036fe:	f7ff fb99 	bl	8002e34 <LL_ADC_IsEnabled>
 8003702:	4603      	mov	r3, r0
 8003704:	4323      	orrs	r3, r4
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	e008      	b.n	8003724 <HAL_ADC_ConfigChannel+0x53c>
 8003712:	4857      	ldr	r0, [pc, #348]	; (8003870 <HAL_ADC_ConfigChannel+0x688>)
 8003714:	f7ff fb8e 	bl	8002e34 <LL_ADC_IsEnabled>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d07d      	beq.n	8003824 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a51      	ldr	r2, [pc, #324]	; (8003874 <HAL_ADC_ConfigChannel+0x68c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d130      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x5ac>
 8003732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d12b      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a4b      	ldr	r2, [pc, #300]	; (8003870 <HAL_ADC_ConfigChannel+0x688>)
 8003742:	4293      	cmp	r3, r2
 8003744:	f040 8081 	bne.w	800384a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a44      	ldr	r2, [pc, #272]	; (8003860 <HAL_ADC_ConfigChannel+0x678>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_ADC_ConfigChannel+0x574>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a43      	ldr	r2, [pc, #268]	; (8003864 <HAL_ADC_ConfigChannel+0x67c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x578>
 800375c:	4a42      	ldr	r2, [pc, #264]	; (8003868 <HAL_ADC_ConfigChannel+0x680>)
 800375e:	e000      	b.n	8003762 <HAL_ADC_ConfigChannel+0x57a>
 8003760:	4a42      	ldr	r2, [pc, #264]	; (800386c <HAL_ADC_ConfigChannel+0x684>)
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f7ff fa23 	bl	8002bb6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003770:	4b41      	ldr	r3, [pc, #260]	; (8003878 <HAL_ADC_ConfigChannel+0x690>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	4a41      	ldr	r2, [pc, #260]	; (800387c <HAL_ADC_ConfigChannel+0x694>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	099b      	lsrs	r3, r3, #6
 800377e:	3301      	adds	r3, #1
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003784:	e002      	b.n	800378c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	3b01      	subs	r3, #1
 800378a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f9      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003792:	e05a      	b.n	800384a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a39      	ldr	r2, [pc, #228]	; (8003880 <HAL_ADC_ConfigChannel+0x698>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d11e      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x5f4>
 800379e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d119      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a30      	ldr	r2, [pc, #192]	; (8003870 <HAL_ADC_ConfigChannel+0x688>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d14b      	bne.n	800384a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a2a      	ldr	r2, [pc, #168]	; (8003860 <HAL_ADC_ConfigChannel+0x678>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_ADC_ConfigChannel+0x5de>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a28      	ldr	r2, [pc, #160]	; (8003864 <HAL_ADC_ConfigChannel+0x67c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x5e2>
 80037c6:	4a28      	ldr	r2, [pc, #160]	; (8003868 <HAL_ADC_ConfigChannel+0x680>)
 80037c8:	e000      	b.n	80037cc <HAL_ADC_ConfigChannel+0x5e4>
 80037ca:	4a28      	ldr	r2, [pc, #160]	; (800386c <HAL_ADC_ConfigChannel+0x684>)
 80037cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7ff f9ee 	bl	8002bb6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037da:	e036      	b.n	800384a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a28      	ldr	r2, [pc, #160]	; (8003884 <HAL_ADC_ConfigChannel+0x69c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d131      	bne.n	800384a <HAL_ADC_ConfigChannel+0x662>
 80037e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d12c      	bne.n	800384a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <HAL_ADC_ConfigChannel+0x688>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d127      	bne.n	800384a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a18      	ldr	r2, [pc, #96]	; (8003860 <HAL_ADC_ConfigChannel+0x678>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_ADC_ConfigChannel+0x626>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a16      	ldr	r2, [pc, #88]	; (8003864 <HAL_ADC_ConfigChannel+0x67c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x62a>
 800380e:	4a16      	ldr	r2, [pc, #88]	; (8003868 <HAL_ADC_ConfigChannel+0x680>)
 8003810:	e000      	b.n	8003814 <HAL_ADC_ConfigChannel+0x62c>
 8003812:	4a16      	ldr	r2, [pc, #88]	; (800386c <HAL_ADC_ConfigChannel+0x684>)
 8003814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003816:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f7ff f9ca 	bl	8002bb6 <LL_ADC_SetCommonPathInternalCh>
 8003822:	e012      	b.n	800384a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003836:	e008      	b.n	800384a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003852:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003856:	4618      	mov	r0, r3
 8003858:	3784      	adds	r7, #132	; 0x84
 800385a:	46bd      	mov	sp, r7
 800385c:	bd90      	pop	{r4, r7, pc}
 800385e:	bf00      	nop
 8003860:	40022000 	.word	0x40022000
 8003864:	40022100 	.word	0x40022100
 8003868:	40022300 	.word	0x40022300
 800386c:	58026300 	.word	0x58026300
 8003870:	58026000 	.word	0x58026000
 8003874:	cb840000 	.word	0xcb840000
 8003878:	24000000 	.word	0x24000000
 800387c:	053e2d63 	.word	0x053e2d63
 8003880:	c7520000 	.word	0xc7520000
 8003884:	cfb80000 	.word	0xcfb80000

08003888 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a79      	ldr	r2, [pc, #484]	; (8003a7c <ADC_ConfigureBoostMode+0x1f4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <ADC_ConfigureBoostMode+0x1c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a78      	ldr	r2, [pc, #480]	; (8003a80 <ADC_ConfigureBoostMode+0x1f8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d109      	bne.n	80038b8 <ADC_ConfigureBoostMode+0x30>
 80038a4:	4b77      	ldr	r3, [pc, #476]	; (8003a84 <ADC_ConfigureBoostMode+0x1fc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e008      	b.n	80038ca <ADC_ConfigureBoostMode+0x42>
 80038b8:	4b73      	ldr	r3, [pc, #460]	; (8003a88 <ADC_ConfigureBoostMode+0x200>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01c      	beq.n	8003908 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80038ce:	f003 fd8d 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 80038d2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038dc:	d010      	beq.n	8003900 <ADC_ConfigureBoostMode+0x78>
 80038de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038e2:	d871      	bhi.n	80039c8 <ADC_ConfigureBoostMode+0x140>
 80038e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e8:	d002      	beq.n	80038f0 <ADC_ConfigureBoostMode+0x68>
 80038ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ee:	d16b      	bne.n	80039c8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fc:	60fb      	str	r3, [r7, #12]
        break;
 80038fe:	e066      	b.n	80039ce <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	60fb      	str	r3, [r7, #12]
        break;
 8003906:	e062      	b.n	80039ce <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003908:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800390c:	f004 fd0a 	bl	8008324 <HAL_RCCEx_GetPeriphCLKFreq>
 8003910:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800391a:	d051      	beq.n	80039c0 <ADC_ConfigureBoostMode+0x138>
 800391c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003920:	d854      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x144>
 8003922:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003926:	d047      	beq.n	80039b8 <ADC_ConfigureBoostMode+0x130>
 8003928:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800392c:	d84e      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x144>
 800392e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003932:	d03d      	beq.n	80039b0 <ADC_ConfigureBoostMode+0x128>
 8003934:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003938:	d848      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x144>
 800393a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800393e:	d033      	beq.n	80039a8 <ADC_ConfigureBoostMode+0x120>
 8003940:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003944:	d842      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x144>
 8003946:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800394a:	d029      	beq.n	80039a0 <ADC_ConfigureBoostMode+0x118>
 800394c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003950:	d83c      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x144>
 8003952:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003956:	d01a      	beq.n	800398e <ADC_ConfigureBoostMode+0x106>
 8003958:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800395c:	d836      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x144>
 800395e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003962:	d014      	beq.n	800398e <ADC_ConfigureBoostMode+0x106>
 8003964:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003968:	d830      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x144>
 800396a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800396e:	d00e      	beq.n	800398e <ADC_ConfigureBoostMode+0x106>
 8003970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003974:	d82a      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x144>
 8003976:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800397a:	d008      	beq.n	800398e <ADC_ConfigureBoostMode+0x106>
 800397c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003980:	d824      	bhi.n	80039cc <ADC_ConfigureBoostMode+0x144>
 8003982:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003986:	d002      	beq.n	800398e <ADC_ConfigureBoostMode+0x106>
 8003988:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800398c:	d11e      	bne.n	80039cc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	0c9b      	lsrs	r3, r3, #18
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	60fb      	str	r3, [r7, #12]
        break;
 800399e:	e016      	b.n	80039ce <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	60fb      	str	r3, [r7, #12]
        break;
 80039a6:	e012      	b.n	80039ce <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	60fb      	str	r3, [r7, #12]
        break;
 80039ae:	e00e      	b.n	80039ce <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	60fb      	str	r3, [r7, #12]
        break;
 80039b6:	e00a      	b.n	80039ce <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	09db      	lsrs	r3, r3, #7
 80039bc:	60fb      	str	r3, [r7, #12]
        break;
 80039be:	e006      	b.n	80039ce <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	60fb      	str	r3, [r7, #12]
        break;
 80039c6:	e002      	b.n	80039ce <ADC_ConfigureBoostMode+0x146>
        break;
 80039c8:	bf00      	nop
 80039ca:	e000      	b.n	80039ce <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80039cc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80039ce:	f7ff f8a9 	bl	8002b24 <HAL_GetREVID>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80039d8:	4293      	cmp	r3, r2
 80039da:	d815      	bhi.n	8003a08 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <ADC_ConfigureBoostMode+0x204>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d908      	bls.n	80039f6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80039f4:	e03e      	b.n	8003a74 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a04:	609a      	str	r2, [r3, #8]
}
 8003a06:	e035      	b.n	8003a74 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <ADC_ConfigureBoostMode+0x208>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d808      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a24:	609a      	str	r2, [r3, #8]
}
 8003a26:	e025      	b.n	8003a74 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <ADC_ConfigureBoostMode+0x20c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d80a      	bhi.n	8003a46 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a42:	609a      	str	r2, [r3, #8]
}
 8003a44:	e016      	b.n	8003a74 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <ADC_ConfigureBoostMode+0x210>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d80a      	bhi.n	8003a64 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	e007      	b.n	8003a74 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003a72:	609a      	str	r2, [r3, #8]
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40022000 	.word	0x40022000
 8003a80:	40022100 	.word	0x40022100
 8003a84:	40022300 	.word	0x40022300
 8003a88:	58026300 	.word	0x58026300
 8003a8c:	01312d00 	.word	0x01312d00
 8003a90:	005f5e10 	.word	0x005f5e10
 8003a94:	00bebc20 	.word	0x00bebc20
 8003a98:	017d7840 	.word	0x017d7840

08003a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <__NVIC_SetPriorityGrouping+0x40>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aca:	4a04      	ldr	r2, [pc, #16]	; (8003adc <__NVIC_SetPriorityGrouping+0x40>)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	60d3      	str	r3, [r2, #12]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000ed00 	.word	0xe000ed00
 8003ae0:	05fa0000 	.word	0x05fa0000

08003ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <__NVIC_GetPriorityGrouping+0x18>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	f003 0307 	and.w	r3, r3, #7
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	db0b      	blt.n	8003b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	f003 021f 	and.w	r2, r3, #31
 8003b18:	4907      	ldr	r1, [pc, #28]	; (8003b38 <__NVIC_EnableIRQ+0x38>)
 8003b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	2001      	movs	r0, #1
 8003b22:	fa00 f202 	lsl.w	r2, r0, r2
 8003b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000e100 	.word	0xe000e100

08003b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	6039      	str	r1, [r7, #0]
 8003b46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	db0a      	blt.n	8003b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	490c      	ldr	r1, [pc, #48]	; (8003b88 <__NVIC_SetPriority+0x4c>)
 8003b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b64:	e00a      	b.n	8003b7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4908      	ldr	r1, [pc, #32]	; (8003b8c <__NVIC_SetPriority+0x50>)
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	3b04      	subs	r3, #4
 8003b74:	0112      	lsls	r2, r2, #4
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	440b      	add	r3, r1
 8003b7a:	761a      	strb	r2, [r3, #24]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000e100 	.word	0xe000e100
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	; 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f1c3 0307 	rsb	r3, r3, #7
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	bf28      	it	cs
 8003bae:	2304      	movcs	r3, #4
 8003bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d902      	bls.n	8003bc0 <NVIC_EncodePriority+0x30>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3b03      	subs	r3, #3
 8003bbe:	e000      	b.n	8003bc2 <NVIC_EncodePriority+0x32>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	43d9      	mvns	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be8:	4313      	orrs	r3, r2
         );
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3724      	adds	r7, #36	; 0x24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c08:	d301      	bcc.n	8003c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00f      	b.n	8003c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <SysTick_Config+0x40>)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c16:	210f      	movs	r1, #15
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	f7ff ff8e 	bl	8003b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <SysTick_Config+0x40>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <SysTick_Config+0x40>)
 8003c28:	2207      	movs	r2, #7
 8003c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	e000e010 	.word	0xe000e010

08003c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff29 	bl	8003a9c <__NVIC_SetPriorityGrouping>
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b086      	sub	sp, #24
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c60:	f7ff ff40 	bl	8003ae4 <__NVIC_GetPriorityGrouping>
 8003c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	6978      	ldr	r0, [r7, #20]
 8003c6c:	f7ff ff90 	bl	8003b90 <NVIC_EncodePriority>
 8003c70:	4602      	mov	r2, r0
 8003c72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff5f 	bl	8003b3c <__NVIC_SetPriority>
}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff33 	bl	8003b00 <__NVIC_EnableIRQ>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ffa4 	bl	8003bf8 <SysTick_Config>
 8003cb0:	4603      	mov	r3, r0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003cc4:	f7fe fefe 	bl	8002ac4 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e316      	b.n	8004302 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a66      	ldr	r2, [pc, #408]	; (8003e74 <HAL_DMA_Init+0x1b8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d04a      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a65      	ldr	r2, [pc, #404]	; (8003e78 <HAL_DMA_Init+0x1bc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d045      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a63      	ldr	r2, [pc, #396]	; (8003e7c <HAL_DMA_Init+0x1c0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d040      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a62      	ldr	r2, [pc, #392]	; (8003e80 <HAL_DMA_Init+0x1c4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d03b      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a60      	ldr	r2, [pc, #384]	; (8003e84 <HAL_DMA_Init+0x1c8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d036      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a5f      	ldr	r2, [pc, #380]	; (8003e88 <HAL_DMA_Init+0x1cc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d031      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a5d      	ldr	r2, [pc, #372]	; (8003e8c <HAL_DMA_Init+0x1d0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d02c      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a5c      	ldr	r2, [pc, #368]	; (8003e90 <HAL_DMA_Init+0x1d4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d027      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a5a      	ldr	r2, [pc, #360]	; (8003e94 <HAL_DMA_Init+0x1d8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d022      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a59      	ldr	r2, [pc, #356]	; (8003e98 <HAL_DMA_Init+0x1dc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d01d      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a57      	ldr	r2, [pc, #348]	; (8003e9c <HAL_DMA_Init+0x1e0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d018      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a56      	ldr	r2, [pc, #344]	; (8003ea0 <HAL_DMA_Init+0x1e4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d013      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a54      	ldr	r2, [pc, #336]	; (8003ea4 <HAL_DMA_Init+0x1e8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00e      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a53      	ldr	r2, [pc, #332]	; (8003ea8 <HAL_DMA_Init+0x1ec>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d009      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a51      	ldr	r2, [pc, #324]	; (8003eac <HAL_DMA_Init+0x1f0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d004      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a50      	ldr	r2, [pc, #320]	; (8003eb0 <HAL_DMA_Init+0x1f4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <HAL_DMA_Init+0xbc>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_DMA_Init+0xbe>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 813b 	beq.w	8003ff6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a37      	ldr	r2, [pc, #220]	; (8003e74 <HAL_DMA_Init+0x1b8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d04a      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a36      	ldr	r2, [pc, #216]	; (8003e78 <HAL_DMA_Init+0x1bc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d045      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a34      	ldr	r2, [pc, #208]	; (8003e7c <HAL_DMA_Init+0x1c0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d040      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a33      	ldr	r2, [pc, #204]	; (8003e80 <HAL_DMA_Init+0x1c4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d03b      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a31      	ldr	r2, [pc, #196]	; (8003e84 <HAL_DMA_Init+0x1c8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d036      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a30      	ldr	r2, [pc, #192]	; (8003e88 <HAL_DMA_Init+0x1cc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d031      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2e      	ldr	r2, [pc, #184]	; (8003e8c <HAL_DMA_Init+0x1d0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d02c      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <HAL_DMA_Init+0x1d4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d027      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2b      	ldr	r2, [pc, #172]	; (8003e94 <HAL_DMA_Init+0x1d8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d022      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <HAL_DMA_Init+0x1dc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d01d      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a28      	ldr	r2, [pc, #160]	; (8003e9c <HAL_DMA_Init+0x1e0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d018      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a27      	ldr	r2, [pc, #156]	; (8003ea0 <HAL_DMA_Init+0x1e4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <HAL_DMA_Init+0x1e8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00e      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <HAL_DMA_Init+0x1ec>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d009      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a22      	ldr	r2, [pc, #136]	; (8003eac <HAL_DMA_Init+0x1f0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d004      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a21      	ldr	r2, [pc, #132]	; (8003eb0 <HAL_DMA_Init+0x1f4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d108      	bne.n	8003e42 <HAL_DMA_Init+0x186>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e007      	b.n	8003e52 <HAL_DMA_Init+0x196>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e52:	e02f      	b.n	8003eb4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e54:	f7fe fe36 	bl	8002ac4 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d928      	bls.n	8003eb4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e246      	b.n	8004302 <HAL_DMA_Init+0x646>
 8003e74:	40020010 	.word	0x40020010
 8003e78:	40020028 	.word	0x40020028
 8003e7c:	40020040 	.word	0x40020040
 8003e80:	40020058 	.word	0x40020058
 8003e84:	40020070 	.word	0x40020070
 8003e88:	40020088 	.word	0x40020088
 8003e8c:	400200a0 	.word	0x400200a0
 8003e90:	400200b8 	.word	0x400200b8
 8003e94:	40020410 	.word	0x40020410
 8003e98:	40020428 	.word	0x40020428
 8003e9c:	40020440 	.word	0x40020440
 8003ea0:	40020458 	.word	0x40020458
 8003ea4:	40020470 	.word	0x40020470
 8003ea8:	40020488 	.word	0x40020488
 8003eac:	400204a0 	.word	0x400204a0
 8003eb0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1c8      	bne.n	8003e54 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4b83      	ldr	r3, [pc, #524]	; (80040dc <HAL_DMA_Init+0x420>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003eda:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d107      	bne.n	8003f18 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	4313      	orrs	r3, r2
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f18:	4b71      	ldr	r3, [pc, #452]	; (80040e0 <HAL_DMA_Init+0x424>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b71      	ldr	r3, [pc, #452]	; (80040e4 <HAL_DMA_Init+0x428>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f24:	d328      	bcc.n	8003f78 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b28      	cmp	r3, #40	; 0x28
 8003f2c:	d903      	bls.n	8003f36 <HAL_DMA_Init+0x27a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b2e      	cmp	r3, #46	; 0x2e
 8003f34:	d917      	bls.n	8003f66 <HAL_DMA_Init+0x2aa>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f3c:	d903      	bls.n	8003f46 <HAL_DMA_Init+0x28a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b42      	cmp	r3, #66	; 0x42
 8003f44:	d90f      	bls.n	8003f66 <HAL_DMA_Init+0x2aa>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b46      	cmp	r3, #70	; 0x46
 8003f4c:	d903      	bls.n	8003f56 <HAL_DMA_Init+0x29a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b48      	cmp	r3, #72	; 0x48
 8003f54:	d907      	bls.n	8003f66 <HAL_DMA_Init+0x2aa>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b4e      	cmp	r3, #78	; 0x4e
 8003f5c:	d905      	bls.n	8003f6a <HAL_DMA_Init+0x2ae>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b52      	cmp	r3, #82	; 0x52
 8003f64:	d801      	bhi.n	8003f6a <HAL_DMA_Init+0x2ae>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <HAL_DMA_Init+0x2b0>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f76:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0307 	bic.w	r3, r3, #7
 8003f8e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d117      	bne.n	8003fd2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f001 f9b9 	bl	800532c <DMA_CheckFifoParam>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2240      	movs	r2, #64	; 0x40
 8003fc4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e197      	b.n	8004302 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f001 f8f4 	bl	80051c8 <DMA_CalcBaseAndBitshift>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	223f      	movs	r2, #63	; 0x3f
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	e0cd      	b.n	8004192 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a3b      	ldr	r2, [pc, #236]	; (80040e8 <HAL_DMA_Init+0x42c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_Init+0x38a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a39      	ldr	r2, [pc, #228]	; (80040ec <HAL_DMA_Init+0x430>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <HAL_DMA_Init+0x38a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a38      	ldr	r2, [pc, #224]	; (80040f0 <HAL_DMA_Init+0x434>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_DMA_Init+0x38a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a36      	ldr	r2, [pc, #216]	; (80040f4 <HAL_DMA_Init+0x438>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_DMA_Init+0x38a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a35      	ldr	r2, [pc, #212]	; (80040f8 <HAL_DMA_Init+0x43c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_DMA_Init+0x38a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a33      	ldr	r2, [pc, #204]	; (80040fc <HAL_DMA_Init+0x440>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_DMA_Init+0x38a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a32      	ldr	r2, [pc, #200]	; (8004100 <HAL_DMA_Init+0x444>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_DMA_Init+0x38a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a30      	ldr	r2, [pc, #192]	; (8004104 <HAL_DMA_Init+0x448>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_DMA_Init+0x38e>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_DMA_Init+0x390>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8097 	beq.w	8004180 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a24      	ldr	r2, [pc, #144]	; (80040e8 <HAL_DMA_Init+0x42c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d021      	beq.n	80040a0 <HAL_DMA_Init+0x3e4>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a22      	ldr	r2, [pc, #136]	; (80040ec <HAL_DMA_Init+0x430>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01c      	beq.n	80040a0 <HAL_DMA_Init+0x3e4>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a21      	ldr	r2, [pc, #132]	; (80040f0 <HAL_DMA_Init+0x434>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d017      	beq.n	80040a0 <HAL_DMA_Init+0x3e4>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1f      	ldr	r2, [pc, #124]	; (80040f4 <HAL_DMA_Init+0x438>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d012      	beq.n	80040a0 <HAL_DMA_Init+0x3e4>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <HAL_DMA_Init+0x43c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00d      	beq.n	80040a0 <HAL_DMA_Init+0x3e4>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1c      	ldr	r2, [pc, #112]	; (80040fc <HAL_DMA_Init+0x440>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d008      	beq.n	80040a0 <HAL_DMA_Init+0x3e4>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1b      	ldr	r2, [pc, #108]	; (8004100 <HAL_DMA_Init+0x444>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <HAL_DMA_Init+0x3e4>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a19      	ldr	r2, [pc, #100]	; (8004104 <HAL_DMA_Init+0x448>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <HAL_DMA_Init+0x44c>)
 80040be:	4013      	ands	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	d020      	beq.n	800410c <HAL_DMA_Init+0x450>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b80      	cmp	r3, #128	; 0x80
 80040d0:	d102      	bne.n	80040d8 <HAL_DMA_Init+0x41c>
 80040d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040d6:	e01a      	b.n	800410e <HAL_DMA_Init+0x452>
 80040d8:	2300      	movs	r3, #0
 80040da:	e018      	b.n	800410e <HAL_DMA_Init+0x452>
 80040dc:	fe10803f 	.word	0xfe10803f
 80040e0:	5c001000 	.word	0x5c001000
 80040e4:	ffff0000 	.word	0xffff0000
 80040e8:	58025408 	.word	0x58025408
 80040ec:	5802541c 	.word	0x5802541c
 80040f0:	58025430 	.word	0x58025430
 80040f4:	58025444 	.word	0x58025444
 80040f8:	58025458 	.word	0x58025458
 80040fc:	5802546c 	.word	0x5802546c
 8004100:	58025480 	.word	0x58025480
 8004104:	58025494 	.word	0x58025494
 8004108:	fffe000f 	.word	0xfffe000f
 800410c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68d2      	ldr	r2, [r2, #12]
 8004112:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800411c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004124:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800412c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004134:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800413c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	4b6e      	ldr	r3, [pc, #440]	; (800430c <HAL_DMA_Init+0x650>)
 8004154:	4413      	add	r3, r2
 8004156:	4a6e      	ldr	r2, [pc, #440]	; (8004310 <HAL_DMA_Init+0x654>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	009a      	lsls	r2, r3, #2
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f001 f82f 	bl	80051c8 <DMA_CalcBaseAndBitshift>
 800416a:	4603      	mov	r3, r0
 800416c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2201      	movs	r2, #1
 8004178:	409a      	lsls	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	e008      	b.n	8004192 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2240      	movs	r2, #64	; 0x40
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2203      	movs	r2, #3
 800418a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e0b7      	b.n	8004302 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a5f      	ldr	r2, [pc, #380]	; (8004314 <HAL_DMA_Init+0x658>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d072      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a5d      	ldr	r2, [pc, #372]	; (8004318 <HAL_DMA_Init+0x65c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d06d      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a5c      	ldr	r2, [pc, #368]	; (800431c <HAL_DMA_Init+0x660>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d068      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a5a      	ldr	r2, [pc, #360]	; (8004320 <HAL_DMA_Init+0x664>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d063      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a59      	ldr	r2, [pc, #356]	; (8004324 <HAL_DMA_Init+0x668>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d05e      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a57      	ldr	r2, [pc, #348]	; (8004328 <HAL_DMA_Init+0x66c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d059      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a56      	ldr	r2, [pc, #344]	; (800432c <HAL_DMA_Init+0x670>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d054      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a54      	ldr	r2, [pc, #336]	; (8004330 <HAL_DMA_Init+0x674>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d04f      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a53      	ldr	r2, [pc, #332]	; (8004334 <HAL_DMA_Init+0x678>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d04a      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a51      	ldr	r2, [pc, #324]	; (8004338 <HAL_DMA_Init+0x67c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d045      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a50      	ldr	r2, [pc, #320]	; (800433c <HAL_DMA_Init+0x680>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d040      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a4e      	ldr	r2, [pc, #312]	; (8004340 <HAL_DMA_Init+0x684>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d03b      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a4d      	ldr	r2, [pc, #308]	; (8004344 <HAL_DMA_Init+0x688>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d036      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a4b      	ldr	r2, [pc, #300]	; (8004348 <HAL_DMA_Init+0x68c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d031      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a4a      	ldr	r2, [pc, #296]	; (800434c <HAL_DMA_Init+0x690>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d02c      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a48      	ldr	r2, [pc, #288]	; (8004350 <HAL_DMA_Init+0x694>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d027      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a47      	ldr	r2, [pc, #284]	; (8004354 <HAL_DMA_Init+0x698>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d022      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a45      	ldr	r2, [pc, #276]	; (8004358 <HAL_DMA_Init+0x69c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d01d      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a44      	ldr	r2, [pc, #272]	; (800435c <HAL_DMA_Init+0x6a0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d018      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a42      	ldr	r2, [pc, #264]	; (8004360 <HAL_DMA_Init+0x6a4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d013      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a41      	ldr	r2, [pc, #260]	; (8004364 <HAL_DMA_Init+0x6a8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00e      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a3f      	ldr	r2, [pc, #252]	; (8004368 <HAL_DMA_Init+0x6ac>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d009      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a3e      	ldr	r2, [pc, #248]	; (800436c <HAL_DMA_Init+0x6b0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <HAL_DMA_Init+0x5c6>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a3c      	ldr	r2, [pc, #240]	; (8004370 <HAL_DMA_Init+0x6b4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <HAL_DMA_Init+0x5ca>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <HAL_DMA_Init+0x5cc>
 8004286:	2300      	movs	r3, #0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d032      	beq.n	80042f2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f001 f8c9 	bl	8005424 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d102      	bne.n	80042a0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d010      	beq.n	80042e0 <HAL_DMA_Init+0x624>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d80c      	bhi.n	80042e0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f001 f946 	bl	8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	e008      	b.n	80042f2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	a7fdabf8 	.word	0xa7fdabf8
 8004310:	cccccccd 	.word	0xcccccccd
 8004314:	40020010 	.word	0x40020010
 8004318:	40020028 	.word	0x40020028
 800431c:	40020040 	.word	0x40020040
 8004320:	40020058 	.word	0x40020058
 8004324:	40020070 	.word	0x40020070
 8004328:	40020088 	.word	0x40020088
 800432c:	400200a0 	.word	0x400200a0
 8004330:	400200b8 	.word	0x400200b8
 8004334:	40020410 	.word	0x40020410
 8004338:	40020428 	.word	0x40020428
 800433c:	40020440 	.word	0x40020440
 8004340:	40020458 	.word	0x40020458
 8004344:	40020470 	.word	0x40020470
 8004348:	40020488 	.word	0x40020488
 800434c:	400204a0 	.word	0x400204a0
 8004350:	400204b8 	.word	0x400204b8
 8004354:	58025408 	.word	0x58025408
 8004358:	5802541c 	.word	0x5802541c
 800435c:	58025430 	.word	0x58025430
 8004360:	58025444 	.word	0x58025444
 8004364:	58025458 	.word	0x58025458
 8004368:	5802546c 	.word	0x5802546c
 800436c:	58025480 	.word	0x58025480
 8004370:	58025494 	.word	0x58025494

08004374 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	; 0x28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004380:	4b67      	ldr	r3, [pc, #412]	; (8004520 <HAL_DMA_IRQHandler+0x1ac>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a67      	ldr	r2, [pc, #412]	; (8004524 <HAL_DMA_IRQHandler+0x1b0>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	0a9b      	lsrs	r3, r3, #10
 800438c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004392:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a5f      	ldr	r2, [pc, #380]	; (8004528 <HAL_DMA_IRQHandler+0x1b4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d04a      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a5d      	ldr	r2, [pc, #372]	; (800452c <HAL_DMA_IRQHandler+0x1b8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d045      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a5c      	ldr	r2, [pc, #368]	; (8004530 <HAL_DMA_IRQHandler+0x1bc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d040      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a5a      	ldr	r2, [pc, #360]	; (8004534 <HAL_DMA_IRQHandler+0x1c0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d03b      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a59      	ldr	r2, [pc, #356]	; (8004538 <HAL_DMA_IRQHandler+0x1c4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d036      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a57      	ldr	r2, [pc, #348]	; (800453c <HAL_DMA_IRQHandler+0x1c8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d031      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a56      	ldr	r2, [pc, #344]	; (8004540 <HAL_DMA_IRQHandler+0x1cc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d02c      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a54      	ldr	r2, [pc, #336]	; (8004544 <HAL_DMA_IRQHandler+0x1d0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d027      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a53      	ldr	r2, [pc, #332]	; (8004548 <HAL_DMA_IRQHandler+0x1d4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d022      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a51      	ldr	r2, [pc, #324]	; (800454c <HAL_DMA_IRQHandler+0x1d8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d01d      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a50      	ldr	r2, [pc, #320]	; (8004550 <HAL_DMA_IRQHandler+0x1dc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d018      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a4e      	ldr	r2, [pc, #312]	; (8004554 <HAL_DMA_IRQHandler+0x1e0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a4d      	ldr	r2, [pc, #308]	; (8004558 <HAL_DMA_IRQHandler+0x1e4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00e      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a4b      	ldr	r2, [pc, #300]	; (800455c <HAL_DMA_IRQHandler+0x1e8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d009      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a4a      	ldr	r2, [pc, #296]	; (8004560 <HAL_DMA_IRQHandler+0x1ec>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_DMA_IRQHandler+0xd2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a48      	ldr	r2, [pc, #288]	; (8004564 <HAL_DMA_IRQHandler+0x1f0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <HAL_DMA_IRQHandler+0xd6>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <HAL_DMA_IRQHandler+0xd8>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 842b 	beq.w	8004ca8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	2208      	movs	r2, #8
 800445c:	409a      	lsls	r2, r3
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80a2 	beq.w	80045ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2e      	ldr	r2, [pc, #184]	; (8004528 <HAL_DMA_IRQHandler+0x1b4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d04a      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2d      	ldr	r2, [pc, #180]	; (800452c <HAL_DMA_IRQHandler+0x1b8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d045      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2b      	ldr	r2, [pc, #172]	; (8004530 <HAL_DMA_IRQHandler+0x1bc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d040      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2a      	ldr	r2, [pc, #168]	; (8004534 <HAL_DMA_IRQHandler+0x1c0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d03b      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a28      	ldr	r2, [pc, #160]	; (8004538 <HAL_DMA_IRQHandler+0x1c4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d036      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a27      	ldr	r2, [pc, #156]	; (800453c <HAL_DMA_IRQHandler+0x1c8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d031      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a25      	ldr	r2, [pc, #148]	; (8004540 <HAL_DMA_IRQHandler+0x1cc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d02c      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a24      	ldr	r2, [pc, #144]	; (8004544 <HAL_DMA_IRQHandler+0x1d0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d027      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a22      	ldr	r2, [pc, #136]	; (8004548 <HAL_DMA_IRQHandler+0x1d4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d022      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a21      	ldr	r2, [pc, #132]	; (800454c <HAL_DMA_IRQHandler+0x1d8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d01d      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <HAL_DMA_IRQHandler+0x1dc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d018      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <HAL_DMA_IRQHandler+0x1e0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d013      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1c      	ldr	r2, [pc, #112]	; (8004558 <HAL_DMA_IRQHandler+0x1e4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00e      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1b      	ldr	r2, [pc, #108]	; (800455c <HAL_DMA_IRQHandler+0x1e8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d009      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a19      	ldr	r2, [pc, #100]	; (8004560 <HAL_DMA_IRQHandler+0x1ec>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <HAL_DMA_IRQHandler+0x194>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a18      	ldr	r2, [pc, #96]	; (8004564 <HAL_DMA_IRQHandler+0x1f0>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d12f      	bne.n	8004568 <HAL_DMA_IRQHandler+0x1f4>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e02e      	b.n	800457c <HAL_DMA_IRQHandler+0x208>
 800451e:	bf00      	nop
 8004520:	24000000 	.word	0x24000000
 8004524:	1b4e81b5 	.word	0x1b4e81b5
 8004528:	40020010 	.word	0x40020010
 800452c:	40020028 	.word	0x40020028
 8004530:	40020040 	.word	0x40020040
 8004534:	40020058 	.word	0x40020058
 8004538:	40020070 	.word	0x40020070
 800453c:	40020088 	.word	0x40020088
 8004540:	400200a0 	.word	0x400200a0
 8004544:	400200b8 	.word	0x400200b8
 8004548:	40020410 	.word	0x40020410
 800454c:	40020428 	.word	0x40020428
 8004550:	40020440 	.word	0x40020440
 8004554:	40020458 	.word	0x40020458
 8004558:	40020470 	.word	0x40020470
 800455c:	40020488 	.word	0x40020488
 8004560:	400204a0 	.word	0x400204a0
 8004564:	400204b8 	.word	0x400204b8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	bf14      	ite	ne
 8004576:	2301      	movne	r3, #1
 8004578:	2300      	moveq	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d015      	beq.n	80045ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0204 	bic.w	r2, r2, #4
 800458e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	2208      	movs	r2, #8
 800459a:	409a      	lsls	r2, r3
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	f043 0201 	orr.w	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d06e      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a69      	ldr	r2, [pc, #420]	; (800476c <HAL_DMA_IRQHandler+0x3f8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d04a      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a67      	ldr	r2, [pc, #412]	; (8004770 <HAL_DMA_IRQHandler+0x3fc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d045      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a66      	ldr	r2, [pc, #408]	; (8004774 <HAL_DMA_IRQHandler+0x400>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d040      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a64      	ldr	r2, [pc, #400]	; (8004778 <HAL_DMA_IRQHandler+0x404>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d03b      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a63      	ldr	r2, [pc, #396]	; (800477c <HAL_DMA_IRQHandler+0x408>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d036      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a61      	ldr	r2, [pc, #388]	; (8004780 <HAL_DMA_IRQHandler+0x40c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d031      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a60      	ldr	r2, [pc, #384]	; (8004784 <HAL_DMA_IRQHandler+0x410>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d02c      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a5e      	ldr	r2, [pc, #376]	; (8004788 <HAL_DMA_IRQHandler+0x414>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d027      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5d      	ldr	r2, [pc, #372]	; (800478c <HAL_DMA_IRQHandler+0x418>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d022      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a5b      	ldr	r2, [pc, #364]	; (8004790 <HAL_DMA_IRQHandler+0x41c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01d      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a5a      	ldr	r2, [pc, #360]	; (8004794 <HAL_DMA_IRQHandler+0x420>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d018      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a58      	ldr	r2, [pc, #352]	; (8004798 <HAL_DMA_IRQHandler+0x424>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a57      	ldr	r2, [pc, #348]	; (800479c <HAL_DMA_IRQHandler+0x428>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a55      	ldr	r2, [pc, #340]	; (80047a0 <HAL_DMA_IRQHandler+0x42c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d009      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a54      	ldr	r2, [pc, #336]	; (80047a4 <HAL_DMA_IRQHandler+0x430>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_DMA_IRQHandler+0x2ee>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a52      	ldr	r2, [pc, #328]	; (80047a8 <HAL_DMA_IRQHandler+0x434>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10a      	bne.n	8004678 <HAL_DMA_IRQHandler+0x304>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e003      	b.n	8004680 <HAL_DMA_IRQHandler+0x30c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	2201      	movs	r2, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	f043 0202 	orr.w	r2, r3, #2
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	2204      	movs	r2, #4
 80046aa:	409a      	lsls	r2, r3
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 808f 	beq.w	80047d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a2c      	ldr	r2, [pc, #176]	; (800476c <HAL_DMA_IRQHandler+0x3f8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d04a      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a2a      	ldr	r2, [pc, #168]	; (8004770 <HAL_DMA_IRQHandler+0x3fc>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d045      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a29      	ldr	r2, [pc, #164]	; (8004774 <HAL_DMA_IRQHandler+0x400>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d040      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a27      	ldr	r2, [pc, #156]	; (8004778 <HAL_DMA_IRQHandler+0x404>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d03b      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a26      	ldr	r2, [pc, #152]	; (800477c <HAL_DMA_IRQHandler+0x408>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d036      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a24      	ldr	r2, [pc, #144]	; (8004780 <HAL_DMA_IRQHandler+0x40c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d031      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a23      	ldr	r2, [pc, #140]	; (8004784 <HAL_DMA_IRQHandler+0x410>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d02c      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a21      	ldr	r2, [pc, #132]	; (8004788 <HAL_DMA_IRQHandler+0x414>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d027      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a20      	ldr	r2, [pc, #128]	; (800478c <HAL_DMA_IRQHandler+0x418>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d022      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <HAL_DMA_IRQHandler+0x41c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01d      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <HAL_DMA_IRQHandler+0x420>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d018      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1b      	ldr	r2, [pc, #108]	; (8004798 <HAL_DMA_IRQHandler+0x424>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1a      	ldr	r2, [pc, #104]	; (800479c <HAL_DMA_IRQHandler+0x428>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <HAL_DMA_IRQHandler+0x42c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d009      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <HAL_DMA_IRQHandler+0x430>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_DMA_IRQHandler+0x3e2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <HAL_DMA_IRQHandler+0x434>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d12a      	bne.n	80047ac <HAL_DMA_IRQHandler+0x438>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	e023      	b.n	80047b4 <HAL_DMA_IRQHandler+0x440>
 800476c:	40020010 	.word	0x40020010
 8004770:	40020028 	.word	0x40020028
 8004774:	40020040 	.word	0x40020040
 8004778:	40020058 	.word	0x40020058
 800477c:	40020070 	.word	0x40020070
 8004780:	40020088 	.word	0x40020088
 8004784:	400200a0 	.word	0x400200a0
 8004788:	400200b8 	.word	0x400200b8
 800478c:	40020410 	.word	0x40020410
 8004790:	40020428 	.word	0x40020428
 8004794:	40020440 	.word	0x40020440
 8004798:	40020458 	.word	0x40020458
 800479c:	40020470 	.word	0x40020470
 80047a0:	40020488 	.word	0x40020488
 80047a4:	400204a0 	.word	0x400204a0
 80047a8:	400204b8 	.word	0x400204b8
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2300      	movs	r3, #0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00d      	beq.n	80047d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	2204      	movs	r2, #4
 80047c2:	409a      	lsls	r2, r3
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047cc:	f043 0204 	orr.w	r2, r3, #4
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	2210      	movs	r2, #16
 80047de:	409a      	lsls	r2, r3
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80a6 	beq.w	8004936 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a85      	ldr	r2, [pc, #532]	; (8004a04 <HAL_DMA_IRQHandler+0x690>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d04a      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a83      	ldr	r2, [pc, #524]	; (8004a08 <HAL_DMA_IRQHandler+0x694>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d045      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a82      	ldr	r2, [pc, #520]	; (8004a0c <HAL_DMA_IRQHandler+0x698>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d040      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a80      	ldr	r2, [pc, #512]	; (8004a10 <HAL_DMA_IRQHandler+0x69c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d03b      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a7f      	ldr	r2, [pc, #508]	; (8004a14 <HAL_DMA_IRQHandler+0x6a0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d036      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a7d      	ldr	r2, [pc, #500]	; (8004a18 <HAL_DMA_IRQHandler+0x6a4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d031      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a7c      	ldr	r2, [pc, #496]	; (8004a1c <HAL_DMA_IRQHandler+0x6a8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d02c      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a7a      	ldr	r2, [pc, #488]	; (8004a20 <HAL_DMA_IRQHandler+0x6ac>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d027      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a79      	ldr	r2, [pc, #484]	; (8004a24 <HAL_DMA_IRQHandler+0x6b0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d022      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a77      	ldr	r2, [pc, #476]	; (8004a28 <HAL_DMA_IRQHandler+0x6b4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01d      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a76      	ldr	r2, [pc, #472]	; (8004a2c <HAL_DMA_IRQHandler+0x6b8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d018      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a74      	ldr	r2, [pc, #464]	; (8004a30 <HAL_DMA_IRQHandler+0x6bc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a73      	ldr	r2, [pc, #460]	; (8004a34 <HAL_DMA_IRQHandler+0x6c0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a71      	ldr	r2, [pc, #452]	; (8004a38 <HAL_DMA_IRQHandler+0x6c4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d009      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a70      	ldr	r2, [pc, #448]	; (8004a3c <HAL_DMA_IRQHandler+0x6c8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_DMA_IRQHandler+0x516>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a6e      	ldr	r2, [pc, #440]	; (8004a40 <HAL_DMA_IRQHandler+0x6cc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d10a      	bne.n	80048a0 <HAL_DMA_IRQHandler+0x52c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	e009      	b.n	80048b4 <HAL_DMA_IRQHandler+0x540>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bf14      	ite	ne
 80048ae:	2301      	movne	r3, #1
 80048b0:	2300      	moveq	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d03e      	beq.n	8004936 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	2210      	movs	r2, #16
 80048c2:	409a      	lsls	r2, r3
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d018      	beq.n	8004908 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d108      	bne.n	80048f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d024      	beq.n	8004936 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4798      	blx	r3
 80048f4:	e01f      	b.n	8004936 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01b      	beq.n	8004936 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
 8004906:	e016      	b.n	8004936 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004912:	2b00      	cmp	r3, #0
 8004914:	d107      	bne.n	8004926 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0208 	bic.w	r2, r2, #8
 8004924:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2220      	movs	r2, #32
 8004940:	409a      	lsls	r2, r3
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	4013      	ands	r3, r2
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8110 	beq.w	8004b6c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a2c      	ldr	r2, [pc, #176]	; (8004a04 <HAL_DMA_IRQHandler+0x690>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d04a      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a2b      	ldr	r2, [pc, #172]	; (8004a08 <HAL_DMA_IRQHandler+0x694>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d045      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <HAL_DMA_IRQHandler+0x698>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d040      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a28      	ldr	r2, [pc, #160]	; (8004a10 <HAL_DMA_IRQHandler+0x69c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d03b      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a26      	ldr	r2, [pc, #152]	; (8004a14 <HAL_DMA_IRQHandler+0x6a0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d036      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a25      	ldr	r2, [pc, #148]	; (8004a18 <HAL_DMA_IRQHandler+0x6a4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d031      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a23      	ldr	r2, [pc, #140]	; (8004a1c <HAL_DMA_IRQHandler+0x6a8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d02c      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a22      	ldr	r2, [pc, #136]	; (8004a20 <HAL_DMA_IRQHandler+0x6ac>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d027      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a20      	ldr	r2, [pc, #128]	; (8004a24 <HAL_DMA_IRQHandler+0x6b0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d022      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1f      	ldr	r2, [pc, #124]	; (8004a28 <HAL_DMA_IRQHandler+0x6b4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d01d      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <HAL_DMA_IRQHandler+0x6b8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d018      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1c      	ldr	r2, [pc, #112]	; (8004a30 <HAL_DMA_IRQHandler+0x6bc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d013      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1a      	ldr	r2, [pc, #104]	; (8004a34 <HAL_DMA_IRQHandler+0x6c0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <HAL_DMA_IRQHandler+0x6c4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d009      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <HAL_DMA_IRQHandler+0x6c8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_DMA_IRQHandler+0x678>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <HAL_DMA_IRQHandler+0x6cc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d12b      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x6d0>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0310 	and.w	r3, r3, #16
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	bf14      	ite	ne
 80049fa:	2301      	movne	r3, #1
 80049fc:	2300      	moveq	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	e02a      	b.n	8004a58 <HAL_DMA_IRQHandler+0x6e4>
 8004a02:	bf00      	nop
 8004a04:	40020010 	.word	0x40020010
 8004a08:	40020028 	.word	0x40020028
 8004a0c:	40020040 	.word	0x40020040
 8004a10:	40020058 	.word	0x40020058
 8004a14:	40020070 	.word	0x40020070
 8004a18:	40020088 	.word	0x40020088
 8004a1c:	400200a0 	.word	0x400200a0
 8004a20:	400200b8 	.word	0x400200b8
 8004a24:	40020410 	.word	0x40020410
 8004a28:	40020428 	.word	0x40020428
 8004a2c:	40020440 	.word	0x40020440
 8004a30:	40020458 	.word	0x40020458
 8004a34:	40020470 	.word	0x40020470
 8004a38:	40020488 	.word	0x40020488
 8004a3c:	400204a0 	.word	0x400204a0
 8004a40:	400204b8 	.word	0x400204b8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8087 	beq.w	8004b6c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	2220      	movs	r2, #32
 8004a68:	409a      	lsls	r2, r3
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d139      	bne.n	8004aee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0216 	bic.w	r2, r2, #22
 8004a88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695a      	ldr	r2, [r3, #20]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d103      	bne.n	8004aaa <HAL_DMA_IRQHandler+0x736>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0208 	bic.w	r2, r2, #8
 8004ab8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	223f      	movs	r2, #63	; 0x3f
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 834a 	beq.w	8005178 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	4798      	blx	r3
          }
          return;
 8004aec:	e344      	b.n	8005178 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d018      	beq.n	8004b2e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d02c      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
 8004b1a:	e027      	b.n	8004b6c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d023      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
 8004b2c:	e01e      	b.n	8004b6c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10f      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0210 	bic.w	r2, r2, #16
 8004b4a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8306 	beq.w	8005182 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8088 	beq.w	8004c94 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2204      	movs	r2, #4
 8004b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a7a      	ldr	r2, [pc, #488]	; (8004d7c <HAL_DMA_IRQHandler+0xa08>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d04a      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a79      	ldr	r2, [pc, #484]	; (8004d80 <HAL_DMA_IRQHandler+0xa0c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d045      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a77      	ldr	r2, [pc, #476]	; (8004d84 <HAL_DMA_IRQHandler+0xa10>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d040      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a76      	ldr	r2, [pc, #472]	; (8004d88 <HAL_DMA_IRQHandler+0xa14>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d03b      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a74      	ldr	r2, [pc, #464]	; (8004d8c <HAL_DMA_IRQHandler+0xa18>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d036      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a73      	ldr	r2, [pc, #460]	; (8004d90 <HAL_DMA_IRQHandler+0xa1c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d031      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a71      	ldr	r2, [pc, #452]	; (8004d94 <HAL_DMA_IRQHandler+0xa20>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d02c      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a70      	ldr	r2, [pc, #448]	; (8004d98 <HAL_DMA_IRQHandler+0xa24>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d027      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a6e      	ldr	r2, [pc, #440]	; (8004d9c <HAL_DMA_IRQHandler+0xa28>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d022      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a6d      	ldr	r2, [pc, #436]	; (8004da0 <HAL_DMA_IRQHandler+0xa2c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d01d      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a6b      	ldr	r2, [pc, #428]	; (8004da4 <HAL_DMA_IRQHandler+0xa30>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d018      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6a      	ldr	r2, [pc, #424]	; (8004da8 <HAL_DMA_IRQHandler+0xa34>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a68      	ldr	r2, [pc, #416]	; (8004dac <HAL_DMA_IRQHandler+0xa38>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a67      	ldr	r2, [pc, #412]	; (8004db0 <HAL_DMA_IRQHandler+0xa3c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a65      	ldr	r2, [pc, #404]	; (8004db4 <HAL_DMA_IRQHandler+0xa40>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x8b8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a64      	ldr	r2, [pc, #400]	; (8004db8 <HAL_DMA_IRQHandler+0xa44>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d108      	bne.n	8004c3e <HAL_DMA_IRQHandler+0x8ca>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0201 	bic.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e007      	b.n	8004c4e <HAL_DMA_IRQHandler+0x8da>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0201 	bic.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3301      	adds	r3, #1
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d307      	bcc.n	8004c6a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f2      	bne.n	8004c4e <HAL_DMA_IRQHandler+0x8da>
 8004c68:	e000      	b.n	8004c6c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c6a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2203      	movs	r2, #3
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c8a:	e003      	b.n	8004c94 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8272 	beq.w	8005182 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
 8004ca6:	e26c      	b.n	8005182 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a43      	ldr	r2, [pc, #268]	; (8004dbc <HAL_DMA_IRQHandler+0xa48>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d022      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x984>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a42      	ldr	r2, [pc, #264]	; (8004dc0 <HAL_DMA_IRQHandler+0xa4c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d01d      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x984>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a40      	ldr	r2, [pc, #256]	; (8004dc4 <HAL_DMA_IRQHandler+0xa50>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d018      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x984>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3f      	ldr	r2, [pc, #252]	; (8004dc8 <HAL_DMA_IRQHandler+0xa54>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d013      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x984>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a3d      	ldr	r2, [pc, #244]	; (8004dcc <HAL_DMA_IRQHandler+0xa58>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00e      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x984>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a3c      	ldr	r2, [pc, #240]	; (8004dd0 <HAL_DMA_IRQHandler+0xa5c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d009      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x984>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a3a      	ldr	r2, [pc, #232]	; (8004dd4 <HAL_DMA_IRQHandler+0xa60>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d004      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x984>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a39      	ldr	r2, [pc, #228]	; (8004dd8 <HAL_DMA_IRQHandler+0xa64>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d101      	bne.n	8004cfc <HAL_DMA_IRQHandler+0x988>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <HAL_DMA_IRQHandler+0x98a>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 823f 	beq.w	8005182 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	2204      	movs	r2, #4
 8004d16:	409a      	lsls	r2, r3
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80cd 	beq.w	8004ebc <HAL_DMA_IRQHandler+0xb48>
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80c7 	beq.w	8004ebc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	2204      	movs	r2, #4
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d049      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 8210 	beq.w	800517c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d64:	e20a      	b.n	800517c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8206 	beq.w	800517c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d78:	e200      	b.n	800517c <HAL_DMA_IRQHandler+0xe08>
 8004d7a:	bf00      	nop
 8004d7c:	40020010 	.word	0x40020010
 8004d80:	40020028 	.word	0x40020028
 8004d84:	40020040 	.word	0x40020040
 8004d88:	40020058 	.word	0x40020058
 8004d8c:	40020070 	.word	0x40020070
 8004d90:	40020088 	.word	0x40020088
 8004d94:	400200a0 	.word	0x400200a0
 8004d98:	400200b8 	.word	0x400200b8
 8004d9c:	40020410 	.word	0x40020410
 8004da0:	40020428 	.word	0x40020428
 8004da4:	40020440 	.word	0x40020440
 8004da8:	40020458 	.word	0x40020458
 8004dac:	40020470 	.word	0x40020470
 8004db0:	40020488 	.word	0x40020488
 8004db4:	400204a0 	.word	0x400204a0
 8004db8:	400204b8 	.word	0x400204b8
 8004dbc:	58025408 	.word	0x58025408
 8004dc0:	5802541c 	.word	0x5802541c
 8004dc4:	58025430 	.word	0x58025430
 8004dc8:	58025444 	.word	0x58025444
 8004dcc:	58025458 	.word	0x58025458
 8004dd0:	5802546c 	.word	0x5802546c
 8004dd4:	58025480 	.word	0x58025480
 8004dd8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d160      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a8c      	ldr	r2, [pc, #560]	; (800501c <HAL_DMA_IRQHandler+0xca8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d04a      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a8a      	ldr	r2, [pc, #552]	; (8005020 <HAL_DMA_IRQHandler+0xcac>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d045      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a89      	ldr	r2, [pc, #548]	; (8005024 <HAL_DMA_IRQHandler+0xcb0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d040      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a87      	ldr	r2, [pc, #540]	; (8005028 <HAL_DMA_IRQHandler+0xcb4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d03b      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a86      	ldr	r2, [pc, #536]	; (800502c <HAL_DMA_IRQHandler+0xcb8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d036      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a84      	ldr	r2, [pc, #528]	; (8005030 <HAL_DMA_IRQHandler+0xcbc>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d031      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a83      	ldr	r2, [pc, #524]	; (8005034 <HAL_DMA_IRQHandler+0xcc0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d02c      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a81      	ldr	r2, [pc, #516]	; (8005038 <HAL_DMA_IRQHandler+0xcc4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d027      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a80      	ldr	r2, [pc, #512]	; (800503c <HAL_DMA_IRQHandler+0xcc8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d022      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a7e      	ldr	r2, [pc, #504]	; (8005040 <HAL_DMA_IRQHandler+0xccc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01d      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a7d      	ldr	r2, [pc, #500]	; (8005044 <HAL_DMA_IRQHandler+0xcd0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a7b      	ldr	r2, [pc, #492]	; (8005048 <HAL_DMA_IRQHandler+0xcd4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a7a      	ldr	r2, [pc, #488]	; (800504c <HAL_DMA_IRQHandler+0xcd8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a78      	ldr	r2, [pc, #480]	; (8005050 <HAL_DMA_IRQHandler+0xcdc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a77      	ldr	r2, [pc, #476]	; (8005054 <HAL_DMA_IRQHandler+0xce0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_DMA_IRQHandler+0xb12>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a75      	ldr	r2, [pc, #468]	; (8005058 <HAL_DMA_IRQHandler+0xce4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d108      	bne.n	8004e98 <HAL_DMA_IRQHandler+0xb24>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0208 	bic.w	r2, r2, #8
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e007      	b.n	8004ea8 <HAL_DMA_IRQHandler+0xb34>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0204 	bic.w	r2, r2, #4
 8004ea6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8165 	beq.w	800517c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eba:	e15f      	b.n	800517c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80c5 	beq.w	800505c <HAL_DMA_IRQHandler+0xce8>
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80bf 	beq.w	800505c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d018      	beq.n	8004f2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 813a 	beq.w	8005180 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f14:	e134      	b.n	8005180 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8130 	beq.w	8005180 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f28:	e12a      	b.n	8005180 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d168      	bne.n	8005006 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a38      	ldr	r2, [pc, #224]	; (800501c <HAL_DMA_IRQHandler+0xca8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d04a      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a37      	ldr	r2, [pc, #220]	; (8005020 <HAL_DMA_IRQHandler+0xcac>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d045      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a35      	ldr	r2, [pc, #212]	; (8005024 <HAL_DMA_IRQHandler+0xcb0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d040      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a34      	ldr	r2, [pc, #208]	; (8005028 <HAL_DMA_IRQHandler+0xcb4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d03b      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a32      	ldr	r2, [pc, #200]	; (800502c <HAL_DMA_IRQHandler+0xcb8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d036      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a31      	ldr	r2, [pc, #196]	; (8005030 <HAL_DMA_IRQHandler+0xcbc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d031      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a2f      	ldr	r2, [pc, #188]	; (8005034 <HAL_DMA_IRQHandler+0xcc0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d02c      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a2e      	ldr	r2, [pc, #184]	; (8005038 <HAL_DMA_IRQHandler+0xcc4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d027      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2c      	ldr	r2, [pc, #176]	; (800503c <HAL_DMA_IRQHandler+0xcc8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d022      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2b      	ldr	r2, [pc, #172]	; (8005040 <HAL_DMA_IRQHandler+0xccc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d01d      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a29      	ldr	r2, [pc, #164]	; (8005044 <HAL_DMA_IRQHandler+0xcd0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d018      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a28      	ldr	r2, [pc, #160]	; (8005048 <HAL_DMA_IRQHandler+0xcd4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d013      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a26      	ldr	r2, [pc, #152]	; (800504c <HAL_DMA_IRQHandler+0xcd8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00e      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a25      	ldr	r2, [pc, #148]	; (8005050 <HAL_DMA_IRQHandler+0xcdc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d009      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a23      	ldr	r2, [pc, #140]	; (8005054 <HAL_DMA_IRQHandler+0xce0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d004      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0xc60>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a22      	ldr	r2, [pc, #136]	; (8005058 <HAL_DMA_IRQHandler+0xce4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d108      	bne.n	8004fe6 <HAL_DMA_IRQHandler+0xc72>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0214 	bic.w	r2, r2, #20
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e007      	b.n	8004ff6 <HAL_DMA_IRQHandler+0xc82>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 020a 	bic.w	r2, r2, #10
 8004ff4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80b8 	beq.w	8005180 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005018:	e0b2      	b.n	8005180 <HAL_DMA_IRQHandler+0xe0c>
 800501a:	bf00      	nop
 800501c:	40020010 	.word	0x40020010
 8005020:	40020028 	.word	0x40020028
 8005024:	40020040 	.word	0x40020040
 8005028:	40020058 	.word	0x40020058
 800502c:	40020070 	.word	0x40020070
 8005030:	40020088 	.word	0x40020088
 8005034:	400200a0 	.word	0x400200a0
 8005038:	400200b8 	.word	0x400200b8
 800503c:	40020410 	.word	0x40020410
 8005040:	40020428 	.word	0x40020428
 8005044:	40020440 	.word	0x40020440
 8005048:	40020458 	.word	0x40020458
 800504c:	40020470 	.word	0x40020470
 8005050:	40020488 	.word	0x40020488
 8005054:	400204a0 	.word	0x400204a0
 8005058:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	2208      	movs	r2, #8
 8005066:	409a      	lsls	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8088 	beq.w	8005182 <HAL_DMA_IRQHandler+0xe0e>
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8082 	beq.w	8005182 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a41      	ldr	r2, [pc, #260]	; (8005188 <HAL_DMA_IRQHandler+0xe14>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d04a      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a3f      	ldr	r2, [pc, #252]	; (800518c <HAL_DMA_IRQHandler+0xe18>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d045      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a3e      	ldr	r2, [pc, #248]	; (8005190 <HAL_DMA_IRQHandler+0xe1c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d040      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a3c      	ldr	r2, [pc, #240]	; (8005194 <HAL_DMA_IRQHandler+0xe20>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d03b      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a3b      	ldr	r2, [pc, #236]	; (8005198 <HAL_DMA_IRQHandler+0xe24>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d036      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a39      	ldr	r2, [pc, #228]	; (800519c <HAL_DMA_IRQHandler+0xe28>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d031      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a38      	ldr	r2, [pc, #224]	; (80051a0 <HAL_DMA_IRQHandler+0xe2c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d02c      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a36      	ldr	r2, [pc, #216]	; (80051a4 <HAL_DMA_IRQHandler+0xe30>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d027      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a35      	ldr	r2, [pc, #212]	; (80051a8 <HAL_DMA_IRQHandler+0xe34>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d022      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a33      	ldr	r2, [pc, #204]	; (80051ac <HAL_DMA_IRQHandler+0xe38>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d01d      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a32      	ldr	r2, [pc, #200]	; (80051b0 <HAL_DMA_IRQHandler+0xe3c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d018      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a30      	ldr	r2, [pc, #192]	; (80051b4 <HAL_DMA_IRQHandler+0xe40>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a2f      	ldr	r2, [pc, #188]	; (80051b8 <HAL_DMA_IRQHandler+0xe44>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00e      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2d      	ldr	r2, [pc, #180]	; (80051bc <HAL_DMA_IRQHandler+0xe48>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d009      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2c      	ldr	r2, [pc, #176]	; (80051c0 <HAL_DMA_IRQHandler+0xe4c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d004      	beq.n	800511e <HAL_DMA_IRQHandler+0xdaa>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2a      	ldr	r2, [pc, #168]	; (80051c4 <HAL_DMA_IRQHandler+0xe50>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d108      	bne.n	8005130 <HAL_DMA_IRQHandler+0xdbc>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 021c 	bic.w	r2, r2, #28
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e007      	b.n	8005140 <HAL_DMA_IRQHandler+0xdcc>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 020e 	bic.w	r2, r2, #14
 800513e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	2201      	movs	r2, #1
 800514a:	409a      	lsls	r2, r3
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
 8005176:	e004      	b.n	8005182 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005178:	bf00      	nop
 800517a:	e002      	b.n	8005182 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800517c:	bf00      	nop
 800517e:	e000      	b.n	8005182 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005180:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005182:	3728      	adds	r7, #40	; 0x28
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40020010 	.word	0x40020010
 800518c:	40020028 	.word	0x40020028
 8005190:	40020040 	.word	0x40020040
 8005194:	40020058 	.word	0x40020058
 8005198:	40020070 	.word	0x40020070
 800519c:	40020088 	.word	0x40020088
 80051a0:	400200a0 	.word	0x400200a0
 80051a4:	400200b8 	.word	0x400200b8
 80051a8:	40020410 	.word	0x40020410
 80051ac:	40020428 	.word	0x40020428
 80051b0:	40020440 	.word	0x40020440
 80051b4:	40020458 	.word	0x40020458
 80051b8:	40020470 	.word	0x40020470
 80051bc:	40020488 	.word	0x40020488
 80051c0:	400204a0 	.word	0x400204a0
 80051c4:	400204b8 	.word	0x400204b8

080051c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a42      	ldr	r2, [pc, #264]	; (80052e0 <DMA_CalcBaseAndBitshift+0x118>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d04a      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a41      	ldr	r2, [pc, #260]	; (80052e4 <DMA_CalcBaseAndBitshift+0x11c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d045      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a3f      	ldr	r2, [pc, #252]	; (80052e8 <DMA_CalcBaseAndBitshift+0x120>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d040      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a3e      	ldr	r2, [pc, #248]	; (80052ec <DMA_CalcBaseAndBitshift+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d03b      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a3c      	ldr	r2, [pc, #240]	; (80052f0 <DMA_CalcBaseAndBitshift+0x128>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d036      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a3b      	ldr	r2, [pc, #236]	; (80052f4 <DMA_CalcBaseAndBitshift+0x12c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d031      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a39      	ldr	r2, [pc, #228]	; (80052f8 <DMA_CalcBaseAndBitshift+0x130>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d02c      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a38      	ldr	r2, [pc, #224]	; (80052fc <DMA_CalcBaseAndBitshift+0x134>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d027      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a36      	ldr	r2, [pc, #216]	; (8005300 <DMA_CalcBaseAndBitshift+0x138>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d022      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a35      	ldr	r2, [pc, #212]	; (8005304 <DMA_CalcBaseAndBitshift+0x13c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d01d      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a33      	ldr	r2, [pc, #204]	; (8005308 <DMA_CalcBaseAndBitshift+0x140>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d018      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a32      	ldr	r2, [pc, #200]	; (800530c <DMA_CalcBaseAndBitshift+0x144>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d013      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a30      	ldr	r2, [pc, #192]	; (8005310 <DMA_CalcBaseAndBitshift+0x148>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00e      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2f      	ldr	r2, [pc, #188]	; (8005314 <DMA_CalcBaseAndBitshift+0x14c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d009      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2d      	ldr	r2, [pc, #180]	; (8005318 <DMA_CalcBaseAndBitshift+0x150>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <DMA_CalcBaseAndBitshift+0xa8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a2c      	ldr	r2, [pc, #176]	; (800531c <DMA_CalcBaseAndBitshift+0x154>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d101      	bne.n	8005274 <DMA_CalcBaseAndBitshift+0xac>
 8005270:	2301      	movs	r3, #1
 8005272:	e000      	b.n	8005276 <DMA_CalcBaseAndBitshift+0xae>
 8005274:	2300      	movs	r3, #0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d024      	beq.n	80052c4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	3b10      	subs	r3, #16
 8005282:	4a27      	ldr	r2, [pc, #156]	; (8005320 <DMA_CalcBaseAndBitshift+0x158>)
 8005284:	fba2 2303 	umull	r2, r3, r2, r3
 8005288:	091b      	lsrs	r3, r3, #4
 800528a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	4a24      	ldr	r2, [pc, #144]	; (8005324 <DMA_CalcBaseAndBitshift+0x15c>)
 8005294:	5cd3      	ldrb	r3, [r2, r3]
 8005296:	461a      	mov	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d908      	bls.n	80052b4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b1f      	ldr	r3, [pc, #124]	; (8005328 <DMA_CalcBaseAndBitshift+0x160>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	1d1a      	adds	r2, r3, #4
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	659a      	str	r2, [r3, #88]	; 0x58
 80052b2:	e00d      	b.n	80052d0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	4b1b      	ldr	r3, [pc, #108]	; (8005328 <DMA_CalcBaseAndBitshift+0x160>)
 80052bc:	4013      	ands	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6593      	str	r3, [r2, #88]	; 0x58
 80052c2:	e005      	b.n	80052d0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	40020010 	.word	0x40020010
 80052e4:	40020028 	.word	0x40020028
 80052e8:	40020040 	.word	0x40020040
 80052ec:	40020058 	.word	0x40020058
 80052f0:	40020070 	.word	0x40020070
 80052f4:	40020088 	.word	0x40020088
 80052f8:	400200a0 	.word	0x400200a0
 80052fc:	400200b8 	.word	0x400200b8
 8005300:	40020410 	.word	0x40020410
 8005304:	40020428 	.word	0x40020428
 8005308:	40020440 	.word	0x40020440
 800530c:	40020458 	.word	0x40020458
 8005310:	40020470 	.word	0x40020470
 8005314:	40020488 	.word	0x40020488
 8005318:	400204a0 	.word	0x400204a0
 800531c:	400204b8 	.word	0x400204b8
 8005320:	aaaaaaab 	.word	0xaaaaaaab
 8005324:	0800c968 	.word	0x0800c968
 8005328:	fffffc00 	.word	0xfffffc00

0800532c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d120      	bne.n	8005382 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	2b03      	cmp	r3, #3
 8005346:	d858      	bhi.n	80053fa <DMA_CheckFifoParam+0xce>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <DMA_CheckFifoParam+0x24>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005361 	.word	0x08005361
 8005354:	08005373 	.word	0x08005373
 8005358:	08005361 	.word	0x08005361
 800535c:	080053fb 	.word	0x080053fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d048      	beq.n	80053fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005370:	e045      	b.n	80053fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800537a:	d142      	bne.n	8005402 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005380:	e03f      	b.n	8005402 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538a:	d123      	bne.n	80053d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	2b03      	cmp	r3, #3
 8005392:	d838      	bhi.n	8005406 <DMA_CheckFifoParam+0xda>
 8005394:	a201      	add	r2, pc, #4	; (adr r2, 800539c <DMA_CheckFifoParam+0x70>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053ad 	.word	0x080053ad
 80053a0:	080053b3 	.word	0x080053b3
 80053a4:	080053ad 	.word	0x080053ad
 80053a8:	080053c5 	.word	0x080053c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
        break;
 80053b0:	e030      	b.n	8005414 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d025      	beq.n	800540a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053c2:	e022      	b.n	800540a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053cc:	d11f      	bne.n	800540e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053d2:	e01c      	b.n	800540e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d902      	bls.n	80053e2 <DMA_CheckFifoParam+0xb6>
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d003      	beq.n	80053e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80053e0:	e018      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	73fb      	strb	r3, [r7, #15]
        break;
 80053e6:	e015      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	73fb      	strb	r3, [r7, #15]
    break;
 80053f8:	e00b      	b.n	8005412 <DMA_CheckFifoParam+0xe6>
        break;
 80053fa:	bf00      	nop
 80053fc:	e00a      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        break;
 80053fe:	bf00      	nop
 8005400:	e008      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        break;
 8005402:	bf00      	nop
 8005404:	e006      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        break;
 8005406:	bf00      	nop
 8005408:	e004      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        break;
 800540a:	bf00      	nop
 800540c:	e002      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
        break;
 800540e:	bf00      	nop
 8005410:	e000      	b.n	8005414 <DMA_CheckFifoParam+0xe8>
    break;
 8005412:	bf00      	nop
    }
  }

  return status;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop

08005424 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a38      	ldr	r2, [pc, #224]	; (8005518 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d022      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a36      	ldr	r2, [pc, #216]	; (800551c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01d      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a35      	ldr	r2, [pc, #212]	; (8005520 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d018      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a33      	ldr	r2, [pc, #204]	; (8005524 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a32      	ldr	r2, [pc, #200]	; (8005528 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00e      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a30      	ldr	r2, [pc, #192]	; (800552c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d009      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2f      	ldr	r2, [pc, #188]	; (8005530 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a2d      	ldr	r2, [pc, #180]	; (8005534 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d101      	bne.n	8005486 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005486:	2300      	movs	r3, #0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01a      	beq.n	80054c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	3b08      	subs	r3, #8
 8005494:	4a28      	ldr	r2, [pc, #160]	; (8005538 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	091b      	lsrs	r3, r3, #4
 800549c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4b26      	ldr	r3, [pc, #152]	; (800553c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	461a      	mov	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a24      	ldr	r2, [pc, #144]	; (8005540 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80054b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	2201      	movs	r2, #1
 80054ba:	409a      	lsls	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80054c0:	e024      	b.n	800550c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	3b10      	subs	r3, #16
 80054ca:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4a1c      	ldr	r2, [pc, #112]	; (8005548 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d806      	bhi.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4a1b      	ldr	r2, [pc, #108]	; (800554c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d902      	bls.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3308      	adds	r3, #8
 80054e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4b18      	ldr	r3, [pc, #96]	; (8005550 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	461a      	mov	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a16      	ldr	r2, [pc, #88]	; (8005554 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80054fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	2201      	movs	r2, #1
 8005506:	409a      	lsls	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	58025408 	.word	0x58025408
 800551c:	5802541c 	.word	0x5802541c
 8005520:	58025430 	.word	0x58025430
 8005524:	58025444 	.word	0x58025444
 8005528:	58025458 	.word	0x58025458
 800552c:	5802546c 	.word	0x5802546c
 8005530:	58025480 	.word	0x58025480
 8005534:	58025494 	.word	0x58025494
 8005538:	cccccccd 	.word	0xcccccccd
 800553c:	16009600 	.word	0x16009600
 8005540:	58025880 	.word	0x58025880
 8005544:	aaaaaaab 	.word	0xaaaaaaab
 8005548:	400204b8 	.word	0x400204b8
 800554c:	4002040f 	.word	0x4002040f
 8005550:	10008200 	.word	0x10008200
 8005554:	40020880 	.word	0x40020880

08005558 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d04a      	beq.n	8005604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b08      	cmp	r3, #8
 8005572:	d847      	bhi.n	8005604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a25      	ldr	r2, [pc, #148]	; (8005610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d022      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a24      	ldr	r2, [pc, #144]	; (8005614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d01d      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a22      	ldr	r2, [pc, #136]	; (8005618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d018      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a21      	ldr	r2, [pc, #132]	; (800561c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d013      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00e      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1e      	ldr	r2, [pc, #120]	; (8005624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d009      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1c      	ldr	r2, [pc, #112]	; (8005628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d004      	beq.n	80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1b      	ldr	r2, [pc, #108]	; (800562c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d101      	bne.n	80055c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80055c8:	2300      	movs	r3, #0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4b17      	ldr	r3, [pc, #92]	; (8005630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	461a      	mov	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a15      	ldr	r2, [pc, #84]	; (8005634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80055e0:	671a      	str	r2, [r3, #112]	; 0x70
 80055e2:	e009      	b.n	80055f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80055e8:	4413      	add	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	461a      	mov	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a11      	ldr	r2, [pc, #68]	; (800563c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80055f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	2201      	movs	r2, #1
 80055fe:	409a      	lsls	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	58025408 	.word	0x58025408
 8005614:	5802541c 	.word	0x5802541c
 8005618:	58025430 	.word	0x58025430
 800561c:	58025444 	.word	0x58025444
 8005620:	58025458 	.word	0x58025458
 8005624:	5802546c 	.word	0x5802546c
 8005628:	58025480 	.word	0x58025480
 800562c:	58025494 	.word	0x58025494
 8005630:	1600963f 	.word	0x1600963f
 8005634:	58025940 	.word	0x58025940
 8005638:	1000823f 	.word	0x1000823f
 800563c:	40020940 	.word	0x40020940

08005640 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e0c6      	b.n	80057e0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fc fb3e 	bl	8001cdc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2223      	movs	r2, #35	; 0x23
 8005664:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005666:	4b60      	ldr	r3, [pc, #384]	; (80057e8 <HAL_ETH_Init+0x1a8>)
 8005668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800566c:	4a5e      	ldr	r2, [pc, #376]	; (80057e8 <HAL_ETH_Init+0x1a8>)
 800566e:	f043 0302 	orr.w	r3, r3, #2
 8005672:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005676:	4b5c      	ldr	r3, [pc, #368]	; (80057e8 <HAL_ETH_Init+0x1a8>)
 8005678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	7a1b      	ldrb	r3, [r3, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d103      	bne.n	8005694 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800568c:	2000      	movs	r0, #0
 800568e:	f7fd fa55 	bl	8002b3c <HAL_SYSCFG_ETHInterfaceSelect>
 8005692:	e003      	b.n	800569c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005694:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005698:	f7fd fa50 	bl	8002b3c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056b4:	f7fd fa06 	bl	8002ac4 <HAL_GetTick>
 80056b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80056ba:	e00f      	b.n	80056dc <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80056bc:	f7fd fa02 	bl	8002ac4 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80056ca:	d907      	bls.n	80056dc <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2204      	movs	r2, #4
 80056d0:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	22e0      	movs	r2, #224	; 0xe0
 80056d6:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e081      	b.n	80057e0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e6      	bne.n	80056bc <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fac0 	bl	8005c74 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80056f4:	f001 fe7a 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 80056f8:	4603      	mov	r3, r0
 80056fa:	4a3c      	ldr	r2, [pc, #240]	; (80057ec <HAL_ETH_Init+0x1ac>)
 80056fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005700:	0c9a      	lsrs	r2, r3, #18
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3a01      	subs	r2, #1
 8005708:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fa13 	bl	8005b38 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005728:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800572c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	22e0      	movs	r2, #224	; 0xe0
 8005744:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e04a      	b.n	80057e0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	f241 1308 	movw	r3, #4360	; 0x1108
 8005752:	4413      	add	r3, r2
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4b26      	ldr	r3, [pc, #152]	; (80057f0 <HAL_ETH_Init+0x1b0>)
 8005758:	4013      	ands	r3, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6952      	ldr	r2, [r2, #20]
 800575e:	0052      	lsls	r2, r2, #1
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	6809      	ldr	r1, [r1, #0]
 8005764:	431a      	orrs	r2, r3
 8005766:	f241 1308 	movw	r3, #4360	; 0x1108
 800576a:	440b      	add	r3, r1
 800576c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fad8 	bl	8005d24 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fb1c 	bl	8005db2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	3305      	adds	r3, #5
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	3304      	adds	r3, #4
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	4619      	mov	r1, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	3303      	adds	r3, #3
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	061a      	lsls	r2, r3, #24
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	3302      	adds	r3, #2
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	041b      	lsls	r3, r3, #16
 80057ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	3301      	adds	r3, #1
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80057b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80057c6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80057c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2210      	movs	r2, #16
 80057d6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2210      	movs	r2, #16
 80057dc:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	58024400 	.word	0x58024400
 80057ec:	431bde83 	.word	0x431bde83
 80057f0:	ffff8001 	.word	0xffff8001

080057f4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005806:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	791b      	ldrb	r3, [r3, #4]
 800580c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800580e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	7b1b      	ldrb	r3, [r3, #12]
 8005814:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005816:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	7b5b      	ldrb	r3, [r3, #13]
 800581c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800581e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	7b9b      	ldrb	r3, [r3, #14]
 8005824:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005826:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	7bdb      	ldrb	r3, [r3, #15]
 800582c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800582e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	7c12      	ldrb	r2, [r2, #16]
 8005834:	2a00      	cmp	r2, #0
 8005836:	d102      	bne.n	800583e <ETH_SetMACConfig+0x4a>
 8005838:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800583c:	e000      	b.n	8005840 <ETH_SetMACConfig+0x4c>
 800583e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005840:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	7c52      	ldrb	r2, [r2, #17]
 8005846:	2a00      	cmp	r2, #0
 8005848:	d102      	bne.n	8005850 <ETH_SetMACConfig+0x5c>
 800584a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800584e:	e000      	b.n	8005852 <ETH_SetMACConfig+0x5e>
 8005850:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005852:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	7c9b      	ldrb	r3, [r3, #18]
 8005858:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800585a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005860:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005866:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	7f1b      	ldrb	r3, [r3, #28]
 800586c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800586e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	7f5b      	ldrb	r3, [r3, #29]
 8005874:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005876:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	7f92      	ldrb	r2, [r2, #30]
 800587c:	2a00      	cmp	r2, #0
 800587e:	d102      	bne.n	8005886 <ETH_SetMACConfig+0x92>
 8005880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005884:	e000      	b.n	8005888 <ETH_SetMACConfig+0x94>
 8005886:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005888:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	7fdb      	ldrb	r3, [r3, #31]
 800588e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005890:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005898:	2a00      	cmp	r2, #0
 800589a:	d102      	bne.n	80058a2 <ETH_SetMACConfig+0xae>
 800589c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058a0:	e000      	b.n	80058a4 <ETH_SetMACConfig+0xb0>
 80058a2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80058a4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80058aa:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058b2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80058b4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	4b56      	ldr	r3, [pc, #344]	; (8005a20 <ETH_SetMACConfig+0x22c>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	430b      	orrs	r3, r1
 80058d0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058de:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80058e0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058e8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80058ea:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058f2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80058f4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80058fc:	2a00      	cmp	r2, #0
 80058fe:	d102      	bne.n	8005906 <ETH_SetMACConfig+0x112>
 8005900:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005904:	e000      	b.n	8005908 <ETH_SetMACConfig+0x114>
 8005906:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005908:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	4b42      	ldr	r3, [pc, #264]	; (8005a24 <ETH_SetMACConfig+0x230>)
 800591a:	4013      	ands	r3, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	68f9      	ldr	r1, [r7, #12]
 8005922:	430b      	orrs	r3, r1
 8005924:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800592c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	4b3a      	ldr	r3, [pc, #232]	; (8005a28 <ETH_SetMACConfig+0x234>)
 800593e:	4013      	ands	r3, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	68f9      	ldr	r1, [r7, #12]
 8005946:	430b      	orrs	r3, r1
 8005948:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005950:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005956:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800595e:	2a00      	cmp	r2, #0
 8005960:	d101      	bne.n	8005966 <ETH_SetMACConfig+0x172>
 8005962:	2280      	movs	r2, #128	; 0x80
 8005964:	e000      	b.n	8005968 <ETH_SetMACConfig+0x174>
 8005966:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005968:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800597a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800597e:	4013      	ands	r3, r2
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	68f9      	ldr	r1, [r7, #12]
 8005986:	430b      	orrs	r3, r1
 8005988:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005990:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005998:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a6:	f023 0103 	bic.w	r1, r3, #3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80059be:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80059da:	2a00      	cmp	r2, #0
 80059dc:	d101      	bne.n	80059e2 <ETH_SetMACConfig+0x1ee>
 80059de:	2240      	movs	r2, #64	; 0x40
 80059e0:	e000      	b.n	80059e4 <ETH_SetMACConfig+0x1f0>
 80059e2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80059e4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80059ec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80059ee:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80059f6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005a04:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005a14:	bf00      	nop
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	00048083 	.word	0x00048083
 8005a24:	c0f88000 	.word	0xc0f88000
 8005a28:	fffffef0 	.word	0xfffffef0

08005a2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b38      	ldr	r3, [pc, #224]	; (8005b24 <ETH_SetDMAConfig+0xf8>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	6812      	ldr	r2, [r2, #0]
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	6809      	ldr	r1, [r1, #0]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005a52:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	791b      	ldrb	r3, [r3, #4]
 8005a58:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005a5e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	7b1b      	ldrb	r3, [r3, #12]
 8005a64:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005a72:	4413      	add	r3, r2
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b2c      	ldr	r3, [pc, #176]	; (8005b28 <ETH_SetDMAConfig+0xfc>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6811      	ldr	r1, [r2, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	431a      	orrs	r2, r3
 8005a82:	f241 0304 	movw	r3, #4100	; 0x1004
 8005a86:	440b      	add	r3, r1
 8005a88:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	7b5b      	ldrb	r3, [r3, #13]
 8005a8e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b22      	ldr	r3, [pc, #136]	; (8005b2c <ETH_SetDMAConfig+0x100>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6811      	ldr	r1, [r2, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005ab2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	7d1b      	ldrb	r3, [r3, #20]
 8005abc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005abe:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	7f5b      	ldrb	r3, [r3, #29]
 8005ac4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	f241 1304 	movw	r3, #4356	; 0x1104
 8005ad2:	4413      	add	r3, r2
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b16      	ldr	r3, [pc, #88]	; (8005b30 <ETH_SetDMAConfig+0x104>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6811      	ldr	r1, [r2, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	f241 1304 	movw	r3, #4356	; 0x1104
 8005ae6:	440b      	add	r3, r1
 8005ae8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	7f1b      	ldrb	r3, [r3, #28]
 8005aee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f241 1308 	movw	r3, #4360	; 0x1108
 8005b00:	4413      	add	r3, r2
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <ETH_SetDMAConfig+0x108>)
 8005b06:	4013      	ands	r3, r2
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6811      	ldr	r1, [r2, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	f241 1308 	movw	r3, #4360	; 0x1108
 8005b14:	440b      	add	r3, r1
 8005b16:	601a      	str	r2, [r3, #0]
}
 8005b18:	bf00      	nop
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	ffff87fd 	.word	0xffff87fd
 8005b28:	ffff2ffe 	.word	0xffff2ffe
 8005b2c:	fffec000 	.word	0xfffec000
 8005b30:	ffc0efef 	.word	0xffc0efef
 8005b34:	7fc0ffff 	.word	0x7fc0ffff

08005b38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b0a4      	sub	sp, #144	; 0x90
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005b46:	2300      	movs	r3, #0
 8005b48:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b78:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005b90:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005b94:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005bd0:	2320      	movs	r3, #32
 8005bd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005be2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005be8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bec:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005c12:	2300      	movs	r3, #0
 8005c14:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fde6 	bl	80057f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005c42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c46:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005c4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005c58:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005c5e:	f107 0308 	add.w	r3, r7, #8
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fee1 	bl	8005a2c <ETH_SetDMAConfig>
}
 8005c6a:	bf00      	nop
 8005c6c:	3790      	adds	r7, #144	; 0x90
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005c8e:	f001 fbad 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8005c92:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d908      	bls.n	8005cae <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d804      	bhi.n	8005cae <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e027      	b.n	8005cfe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	4a18      	ldr	r2, [pc, #96]	; (8005d14 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d908      	bls.n	8005cc8 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d204      	bcs.n	8005cc8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e01a      	b.n	8005cfe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4a13      	ldr	r2, [pc, #76]	; (8005d18 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d303      	bcc.n	8005cd8 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4a12      	ldr	r2, [pc, #72]	; (8005d1c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d911      	bls.n	8005cfc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	4a10      	ldr	r2, [pc, #64]	; (8005d1c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d908      	bls.n	8005cf2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4a0f      	ldr	r2, [pc, #60]	; (8005d20 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d804      	bhi.n	8005cf2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e005      	b.n	8005cfe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	e000      	b.n	8005cfe <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005cfc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	01312cff 	.word	0x01312cff
 8005d14:	02160ebf 	.word	0x02160ebf
 8005d18:	03938700 	.word	0x03938700
 8005d1c:	05f5e0ff 	.word	0x05f5e0ff
 8005d20:	08f0d17f 	.word	0x08f0d17f

08005d24 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e01d      	b.n	8005d6e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68d9      	ldr	r1, [r3, #12]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	440b      	add	r3, r1
 8005d42:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2200      	movs	r2, #0
 8005d54:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005d5c:	68b9      	ldr	r1, [r7, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	3206      	adds	r2, #6
 8005d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d9de      	bls.n	8005d32 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	f241 132c 	movw	r3, #4396	; 0x112c
 8005d82:	4413      	add	r3, r2
 8005d84:	2203      	movs	r2, #3
 8005d86:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68d9      	ldr	r1, [r3, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	f241 1314 	movw	r3, #4372	; 0x1114
 8005d94:	4413      	add	r3, r2
 8005d96:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005da4:	601a      	str	r2, [r3, #0]
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e024      	b.n	8005e0a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6919      	ldr	r1, [r3, #16]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	4413      	add	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	440b      	add	r3, r1
 8005dd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2200      	movs	r2, #0
 8005de2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2200      	movs	r2, #0
 8005de8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2200      	movs	r2, #0
 8005dee:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2200      	movs	r2, #0
 8005df4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3310      	adds	r3, #16
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d9d7      	bls.n	8005dc0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	f241 1330 	movw	r3, #4400	; 0x1130
 8005e36:	4413      	add	r3, r2
 8005e38:	2203      	movs	r2, #3
 8005e3a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6919      	ldr	r1, [r3, #16]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	f241 131c 	movw	r3, #4380	; 0x111c
 8005e48:	4413      	add	r3, r2
 8005e4a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	f241 1328 	movw	r3, #4392	; 0x1128
 8005e5c:	4413      	add	r3, r2
 8005e5e:	6019      	str	r1, [r3, #0]
}
 8005e60:	bf00      	nop
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b089      	sub	sp, #36	; 0x24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e7a:	4b89      	ldr	r3, [pc, #548]	; (80060a0 <HAL_GPIO_Init+0x234>)
 8005e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e7e:	e194      	b.n	80061aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	2101      	movs	r1, #1
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 8186 	beq.w	80061a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d00b      	beq.n	8005eb8 <HAL_GPIO_Init+0x4c>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d007      	beq.n	8005eb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005eac:	2b11      	cmp	r3, #17
 8005eae:	d003      	beq.n	8005eb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2b12      	cmp	r3, #18
 8005eb6:	d130      	bne.n	8005f1a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	2203      	movs	r2, #3
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005eee:	2201      	movs	r2, #1
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	4013      	ands	r3, r2
 8005efc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	f003 0201 	and.w	r2, r3, #1
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	2203      	movs	r2, #3
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	43db      	mvns	r3, r3
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d003      	beq.n	8005f5a <HAL_GPIO_Init+0xee>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b12      	cmp	r3, #18
 8005f58:	d123      	bne.n	8005fa2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	08da      	lsrs	r2, r3, #3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3208      	adds	r2, #8
 8005f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	220f      	movs	r2, #15
 8005f72:	fa02 f303 	lsl.w	r3, r2, r3
 8005f76:	43db      	mvns	r3, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	08da      	lsrs	r2, r3, #3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3208      	adds	r2, #8
 8005f9c:	69b9      	ldr	r1, [r7, #24]
 8005f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	2203      	movs	r2, #3
 8005fae:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f003 0203 	and.w	r2, r3, #3
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 80e0 	beq.w	80061a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fe4:	4b2f      	ldr	r3, [pc, #188]	; (80060a4 <HAL_GPIO_Init+0x238>)
 8005fe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fea:	4a2e      	ldr	r2, [pc, #184]	; (80060a4 <HAL_GPIO_Init+0x238>)
 8005fec:	f043 0302 	orr.w	r3, r3, #2
 8005ff0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005ff4:	4b2b      	ldr	r3, [pc, #172]	; (80060a4 <HAL_GPIO_Init+0x238>)
 8005ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006002:	4a29      	ldr	r2, [pc, #164]	; (80060a8 <HAL_GPIO_Init+0x23c>)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	089b      	lsrs	r3, r3, #2
 8006008:	3302      	adds	r3, #2
 800600a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	220f      	movs	r2, #15
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	43db      	mvns	r3, r3
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	4013      	ands	r3, r2
 8006024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a20      	ldr	r2, [pc, #128]	; (80060ac <HAL_GPIO_Init+0x240>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d052      	beq.n	80060d4 <HAL_GPIO_Init+0x268>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <HAL_GPIO_Init+0x244>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d031      	beq.n	800609a <HAL_GPIO_Init+0x22e>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <HAL_GPIO_Init+0x248>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d02b      	beq.n	8006096 <HAL_GPIO_Init+0x22a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a1d      	ldr	r2, [pc, #116]	; (80060b8 <HAL_GPIO_Init+0x24c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d025      	beq.n	8006092 <HAL_GPIO_Init+0x226>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <HAL_GPIO_Init+0x250>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d01f      	beq.n	800608e <HAL_GPIO_Init+0x222>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <HAL_GPIO_Init+0x254>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d019      	beq.n	800608a <HAL_GPIO_Init+0x21e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a1a      	ldr	r2, [pc, #104]	; (80060c4 <HAL_GPIO_Init+0x258>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <HAL_GPIO_Init+0x21a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <HAL_GPIO_Init+0x25c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00d      	beq.n	8006082 <HAL_GPIO_Init+0x216>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a18      	ldr	r2, [pc, #96]	; (80060cc <HAL_GPIO_Init+0x260>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d007      	beq.n	800607e <HAL_GPIO_Init+0x212>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a17      	ldr	r2, [pc, #92]	; (80060d0 <HAL_GPIO_Init+0x264>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d101      	bne.n	800607a <HAL_GPIO_Init+0x20e>
 8006076:	2309      	movs	r3, #9
 8006078:	e02d      	b.n	80060d6 <HAL_GPIO_Init+0x26a>
 800607a:	230a      	movs	r3, #10
 800607c:	e02b      	b.n	80060d6 <HAL_GPIO_Init+0x26a>
 800607e:	2308      	movs	r3, #8
 8006080:	e029      	b.n	80060d6 <HAL_GPIO_Init+0x26a>
 8006082:	2307      	movs	r3, #7
 8006084:	e027      	b.n	80060d6 <HAL_GPIO_Init+0x26a>
 8006086:	2306      	movs	r3, #6
 8006088:	e025      	b.n	80060d6 <HAL_GPIO_Init+0x26a>
 800608a:	2305      	movs	r3, #5
 800608c:	e023      	b.n	80060d6 <HAL_GPIO_Init+0x26a>
 800608e:	2304      	movs	r3, #4
 8006090:	e021      	b.n	80060d6 <HAL_GPIO_Init+0x26a>
 8006092:	2303      	movs	r3, #3
 8006094:	e01f      	b.n	80060d6 <HAL_GPIO_Init+0x26a>
 8006096:	2302      	movs	r3, #2
 8006098:	e01d      	b.n	80060d6 <HAL_GPIO_Init+0x26a>
 800609a:	2301      	movs	r3, #1
 800609c:	e01b      	b.n	80060d6 <HAL_GPIO_Init+0x26a>
 800609e:	bf00      	nop
 80060a0:	58000080 	.word	0x58000080
 80060a4:	58024400 	.word	0x58024400
 80060a8:	58000400 	.word	0x58000400
 80060ac:	58020000 	.word	0x58020000
 80060b0:	58020400 	.word	0x58020400
 80060b4:	58020800 	.word	0x58020800
 80060b8:	58020c00 	.word	0x58020c00
 80060bc:	58021000 	.word	0x58021000
 80060c0:	58021400 	.word	0x58021400
 80060c4:	58021800 	.word	0x58021800
 80060c8:	58021c00 	.word	0x58021c00
 80060cc:	58022000 	.word	0x58022000
 80060d0:	58022400 	.word	0x58022400
 80060d4:	2300      	movs	r3, #0
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	f002 0203 	and.w	r2, r2, #3
 80060dc:	0092      	lsls	r2, r2, #2
 80060de:	4093      	lsls	r3, r2
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060e6:	4938      	ldr	r1, [pc, #224]	; (80061c8 <HAL_GPIO_Init+0x35c>)
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	089b      	lsrs	r3, r3, #2
 80060ec:	3302      	adds	r3, #2
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	43db      	mvns	r3, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4013      	ands	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	43db      	mvns	r3, r3
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	4013      	ands	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800616e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	43db      	mvns	r3, r3
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	4013      	ands	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800619c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f47f ae63 	bne.w	8005e80 <HAL_GPIO_Init+0x14>
  }
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	3724      	adds	r7, #36	; 0x24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	58000400 	.word	0x58000400

080061cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	807b      	strh	r3, [r7, #2]
 80061d8:	4613      	mov	r3, r2
 80061da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061dc:	787b      	ldrb	r3, [r7, #1]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061e2:	887a      	ldrh	r2, [r7, #2]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061e8:	e003      	b.n	80061f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061ea:	887b      	ldrh	r3, [r7, #2]
 80061ec:	041a      	lsls	r2, r3, #16
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	619a      	str	r2, [r3, #24]
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	4603      	mov	r3, r0
 8006206:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	4013      	ands	r3, r2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	4618      	mov	r0, r3
 8006226:	f000 f804 	bl	8006232 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	4603      	mov	r3, r0
 800623a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800624a:	b08f      	sub	sp, #60	; 0x3c
 800624c:	af0a      	add	r7, sp, #40	; 0x28
 800624e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e116      	b.n	8006488 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d106      	bne.n	800627a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7fc f9df 	bl	8002638 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2203      	movs	r2, #3
 800627e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f006 f8d5 	bl	800c448 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	687e      	ldr	r6, [r7, #4]
 80062a6:	466d      	mov	r5, sp
 80062a8:	f106 0410 	add.w	r4, r6, #16
 80062ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80062bc:	1d33      	adds	r3, r6, #4
 80062be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062c0:	6838      	ldr	r0, [r7, #0]
 80062c2:	f006 f853 	bl	800c36c <USB_CoreInit>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0d7      	b.n	8006488 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f006 f8c3 	bl	800c46a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062e4:	2300      	movs	r3, #0
 80062e6:	73fb      	strb	r3, [r7, #15]
 80062e8:	e04a      	b.n	8006380 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062ea:	7bfa      	ldrb	r2, [r7, #15]
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	440b      	add	r3, r1
 80062f8:	333d      	adds	r3, #61	; 0x3d
 80062fa:	2201      	movs	r2, #1
 80062fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062fe:	7bfa      	ldrb	r2, [r7, #15]
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	1a9b      	subs	r3, r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	333c      	adds	r3, #60	; 0x3c
 800630e:	7bfa      	ldrb	r2, [r7, #15]
 8006310:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006312:	7bfa      	ldrb	r2, [r7, #15]
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	b298      	uxth	r0, r3
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	1a9b      	subs	r3, r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	3342      	adds	r3, #66	; 0x42
 8006326:	4602      	mov	r2, r0
 8006328:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800632a:	7bfa      	ldrb	r2, [r7, #15]
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	333f      	adds	r3, #63	; 0x3f
 800633a:	2200      	movs	r2, #0
 800633c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800633e:	7bfa      	ldrb	r2, [r7, #15]
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	4613      	mov	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	3344      	adds	r3, #68	; 0x44
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006352:	7bfa      	ldrb	r2, [r7, #15]
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	1a9b      	subs	r3, r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	3348      	adds	r3, #72	; 0x48
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006366:	7bfa      	ldrb	r2, [r7, #15]
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	1a9b      	subs	r3, r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	440b      	add	r3, r1
 8006374:	3350      	adds	r3, #80	; 0x50
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	3301      	adds	r3, #1
 800637e:	73fb      	strb	r3, [r7, #15]
 8006380:	7bfa      	ldrb	r2, [r7, #15]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	429a      	cmp	r2, r3
 8006388:	d3af      	bcc.n	80062ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800638a:	2300      	movs	r3, #0
 800638c:	73fb      	strb	r3, [r7, #15]
 800638e:	e044      	b.n	800641a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006390:	7bfa      	ldrb	r2, [r7, #15]
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	4613      	mov	r3, r2
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80063a2:	2200      	movs	r2, #0
 80063a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80063a6:	7bfa      	ldrb	r2, [r7, #15]
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	4613      	mov	r3, r2
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	1a9b      	subs	r3, r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80063b8:	7bfa      	ldrb	r2, [r7, #15]
 80063ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063bc:	7bfa      	ldrb	r2, [r7, #15]
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063d2:	7bfa      	ldrb	r2, [r7, #15]
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063e8:	7bfa      	ldrb	r2, [r7, #15]
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	4613      	mov	r3, r2
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063fe:	7bfa      	ldrb	r2, [r7, #15]
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	4613      	mov	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	1a9b      	subs	r3, r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	440b      	add	r3, r1
 800640c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	3301      	adds	r3, #1
 8006418:	73fb      	strb	r3, [r7, #15]
 800641a:	7bfa      	ldrb	r2, [r7, #15]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d3b5      	bcc.n	8006390 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	603b      	str	r3, [r7, #0]
 800642a:	687e      	ldr	r6, [r7, #4]
 800642c:	466d      	mov	r5, sp
 800642e:	f106 0410 	add.w	r4, r6, #16
 8006432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800643a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800643e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006442:	1d33      	adds	r3, r6, #4
 8006444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006446:	6838      	ldr	r0, [r7, #0]
 8006448:	f006 f83a 	bl	800c4c0 <USB_DevInit>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d005      	beq.n	800645e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2202      	movs	r2, #2
 8006456:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e014      	b.n	8006488 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2b01      	cmp	r3, #1
 8006474:	d102      	bne.n	800647c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f80a 	bl	8006490 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f006 f9dc 	bl	800c83e <USB_DevDisconnect>

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006490 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064be:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	10000003 	.word	0x10000003

080064d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80064e0:	4b19      	ldr	r3, [pc, #100]	; (8006548 <HAL_PWREx_ConfigSupply+0x70>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d00a      	beq.n	8006502 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80064ec:	4b16      	ldr	r3, [pc, #88]	; (8006548 <HAL_PWREx_ConfigSupply+0x70>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d001      	beq.n	80064fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e01f      	b.n	800653e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	e01d      	b.n	800653e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006502:	4b11      	ldr	r3, [pc, #68]	; (8006548 <HAL_PWREx_ConfigSupply+0x70>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f023 0207 	bic.w	r2, r3, #7
 800650a:	490f      	ldr	r1, [pc, #60]	; (8006548 <HAL_PWREx_ConfigSupply+0x70>)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4313      	orrs	r3, r2
 8006510:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006512:	f7fc fad7 	bl	8002ac4 <HAL_GetTick>
 8006516:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006518:	e009      	b.n	800652e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800651a:	f7fc fad3 	bl	8002ac4 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006528:	d901      	bls.n	800652e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e007      	b.n	800653e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <HAL_PWREx_ConfigSupply+0x70>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653a:	d1ee      	bne.n	800651a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	58024800 	.word	0x58024800

0800654c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006550:	4b05      	ldr	r3, [pc, #20]	; (8006568 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	4a04      	ldr	r2, [pc, #16]	; (8006568 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800655a:	60d3      	str	r3, [r2, #12]
}
 800655c:	bf00      	nop
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	58024800 	.word	0x58024800

0800656c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08c      	sub	sp, #48	; 0x30
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e3ff      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 8087 	beq.w	800669a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800658c:	4b99      	ldr	r3, [pc, #612]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006596:	4b97      	ldr	r3, [pc, #604]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	2b10      	cmp	r3, #16
 80065a0:	d007      	beq.n	80065b2 <HAL_RCC_OscConfig+0x46>
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	2b18      	cmp	r3, #24
 80065a6:	d110      	bne.n	80065ca <HAL_RCC_OscConfig+0x5e>
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d10b      	bne.n	80065ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b2:	4b90      	ldr	r3, [pc, #576]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d06c      	beq.n	8006698 <HAL_RCC_OscConfig+0x12c>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d168      	bne.n	8006698 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e3d9      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d2:	d106      	bne.n	80065e2 <HAL_RCC_OscConfig+0x76>
 80065d4:	4b87      	ldr	r3, [pc, #540]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a86      	ldr	r2, [pc, #536]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80065da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	e02e      	b.n	8006640 <HAL_RCC_OscConfig+0xd4>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10c      	bne.n	8006604 <HAL_RCC_OscConfig+0x98>
 80065ea:	4b82      	ldr	r3, [pc, #520]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a81      	ldr	r2, [pc, #516]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80065f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4b7f      	ldr	r3, [pc, #508]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a7e      	ldr	r2, [pc, #504]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80065fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e01d      	b.n	8006640 <HAL_RCC_OscConfig+0xd4>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800660c:	d10c      	bne.n	8006628 <HAL_RCC_OscConfig+0xbc>
 800660e:	4b79      	ldr	r3, [pc, #484]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a78      	ldr	r2, [pc, #480]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	4b76      	ldr	r3, [pc, #472]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a75      	ldr	r2, [pc, #468]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	e00b      	b.n	8006640 <HAL_RCC_OscConfig+0xd4>
 8006628:	4b72      	ldr	r3, [pc, #456]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a71      	ldr	r2, [pc, #452]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 800662e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	4b6f      	ldr	r3, [pc, #444]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a6e      	ldr	r2, [pc, #440]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 800663a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800663e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d013      	beq.n	8006670 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006648:	f7fc fa3c 	bl	8002ac4 <HAL_GetTick>
 800664c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006650:	f7fc fa38 	bl	8002ac4 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b64      	cmp	r3, #100	; 0x64
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e38d      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006662:	4b64      	ldr	r3, [pc, #400]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0f0      	beq.n	8006650 <HAL_RCC_OscConfig+0xe4>
 800666e:	e014      	b.n	800669a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006670:	f7fc fa28 	bl	8002ac4 <HAL_GetTick>
 8006674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006678:	f7fc fa24 	bl	8002ac4 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b64      	cmp	r3, #100	; 0x64
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e379      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800668a:	4b5a      	ldr	r3, [pc, #360]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f0      	bne.n	8006678 <HAL_RCC_OscConfig+0x10c>
 8006696:	e000      	b.n	800669a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 80ae 	beq.w	8006804 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066a8:	4b52      	ldr	r3, [pc, #328]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066b2:	4b50      	ldr	r3, [pc, #320]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_RCC_OscConfig+0x162>
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	2b18      	cmp	r3, #24
 80066c2:	d13a      	bne.n	800673a <HAL_RCC_OscConfig+0x1ce>
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	f003 0303 	and.w	r3, r3, #3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d135      	bne.n	800673a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066ce:	4b49      	ldr	r3, [pc, #292]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <HAL_RCC_OscConfig+0x17a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e34b      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e6:	f7fc fa1d 	bl	8002b24 <HAL_GetREVID>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d817      	bhi.n	8006724 <HAL_RCC_OscConfig+0x1b8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2b40      	cmp	r3, #64	; 0x40
 80066fa:	d108      	bne.n	800670e <HAL_RCC_OscConfig+0x1a2>
 80066fc:	4b3d      	ldr	r3, [pc, #244]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006704:	4a3b      	ldr	r2, [pc, #236]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800670a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800670c:	e07a      	b.n	8006804 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800670e:	4b39      	ldr	r3, [pc, #228]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	031b      	lsls	r3, r3, #12
 800671c:	4935      	ldr	r1, [pc, #212]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 800671e:	4313      	orrs	r3, r2
 8006720:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006722:	e06f      	b.n	8006804 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006724:	4b33      	ldr	r3, [pc, #204]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	061b      	lsls	r3, r3, #24
 8006732:	4930      	ldr	r1, [pc, #192]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006734:	4313      	orrs	r3, r2
 8006736:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006738:	e064      	b.n	8006804 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d045      	beq.n	80067ce <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006742:	4b2c      	ldr	r3, [pc, #176]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f023 0219 	bic.w	r2, r3, #25
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	4929      	ldr	r1, [pc, #164]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006750:	4313      	orrs	r3, r2
 8006752:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006754:	f7fc f9b6 	bl	8002ac4 <HAL_GetTick>
 8006758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800675c:	f7fc f9b2 	bl	8002ac4 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e307      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800676e:	4b21      	ldr	r3, [pc, #132]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f0      	beq.n	800675c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800677a:	f7fc f9d3 	bl	8002b24 <HAL_GetREVID>
 800677e:	4603      	mov	r3, r0
 8006780:	f241 0203 	movw	r2, #4099	; 0x1003
 8006784:	4293      	cmp	r3, r2
 8006786:	d817      	bhi.n	80067b8 <HAL_RCC_OscConfig+0x24c>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b40      	cmp	r3, #64	; 0x40
 800678e:	d108      	bne.n	80067a2 <HAL_RCC_OscConfig+0x236>
 8006790:	4b18      	ldr	r3, [pc, #96]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006798:	4a16      	ldr	r2, [pc, #88]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 800679a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800679e:	6053      	str	r3, [r2, #4]
 80067a0:	e030      	b.n	8006804 <HAL_RCC_OscConfig+0x298>
 80067a2:	4b14      	ldr	r3, [pc, #80]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	031b      	lsls	r3, r3, #12
 80067b0:	4910      	ldr	r1, [pc, #64]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	604b      	str	r3, [r1, #4]
 80067b6:	e025      	b.n	8006804 <HAL_RCC_OscConfig+0x298>
 80067b8:	4b0e      	ldr	r3, [pc, #56]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	061b      	lsls	r3, r3, #24
 80067c6:	490b      	ldr	r1, [pc, #44]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	604b      	str	r3, [r1, #4]
 80067cc:	e01a      	b.n	8006804 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ce:	4b09      	ldr	r3, [pc, #36]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a08      	ldr	r2, [pc, #32]	; (80067f4 <HAL_RCC_OscConfig+0x288>)
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067da:	f7fc f973 	bl	8002ac4 <HAL_GetTick>
 80067de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067e0:	e00a      	b.n	80067f8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067e2:	f7fc f96f 	bl	8002ac4 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d903      	bls.n	80067f8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e2c4      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
 80067f4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067f8:	4ba4      	ldr	r3, [pc, #656]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1ee      	bne.n	80067e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 80a9 	beq.w	8006964 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006812:	4b9e      	ldr	r3, [pc, #632]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800681a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800681c:	4b9b      	ldr	r3, [pc, #620]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b08      	cmp	r3, #8
 8006826:	d007      	beq.n	8006838 <HAL_RCC_OscConfig+0x2cc>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b18      	cmp	r3, #24
 800682c:	d13a      	bne.n	80068a4 <HAL_RCC_OscConfig+0x338>
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	2b01      	cmp	r3, #1
 8006836:	d135      	bne.n	80068a4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006838:	4b94      	ldr	r3, [pc, #592]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_OscConfig+0x2e4>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	2b80      	cmp	r3, #128	; 0x80
 800684a:	d001      	beq.n	8006850 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e296      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006850:	f7fc f968 	bl	8002b24 <HAL_GetREVID>
 8006854:	4603      	mov	r3, r0
 8006856:	f241 0203 	movw	r2, #4099	; 0x1003
 800685a:	4293      	cmp	r3, r2
 800685c:	d817      	bhi.n	800688e <HAL_RCC_OscConfig+0x322>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	2b20      	cmp	r3, #32
 8006864:	d108      	bne.n	8006878 <HAL_RCC_OscConfig+0x30c>
 8006866:	4b89      	ldr	r3, [pc, #548]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800686e:	4a87      	ldr	r2, [pc, #540]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006874:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006876:	e075      	b.n	8006964 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006878:	4b84      	ldr	r3, [pc, #528]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	069b      	lsls	r3, r3, #26
 8006886:	4981      	ldr	r1, [pc, #516]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006888:	4313      	orrs	r3, r2
 800688a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800688c:	e06a      	b.n	8006964 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800688e:	4b7f      	ldr	r3, [pc, #508]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	061b      	lsls	r3, r3, #24
 800689c:	497b      	ldr	r1, [pc, #492]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068a2:	e05f      	b.n	8006964 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d042      	beq.n	8006932 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80068ac:	4b77      	ldr	r3, [pc, #476]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a76      	ldr	r2, [pc, #472]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 80068b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b8:	f7fc f904 	bl	8002ac4 <HAL_GetTick>
 80068bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80068c0:	f7fc f900 	bl	8002ac4 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e255      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068d2:	4b6e      	ldr	r3, [pc, #440]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068de:	f7fc f921 	bl	8002b24 <HAL_GetREVID>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d817      	bhi.n	800691c <HAL_RCC_OscConfig+0x3b0>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d108      	bne.n	8006906 <HAL_RCC_OscConfig+0x39a>
 80068f4:	4b65      	ldr	r3, [pc, #404]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80068fc:	4a63      	ldr	r2, [pc, #396]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 80068fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006902:	6053      	str	r3, [r2, #4]
 8006904:	e02e      	b.n	8006964 <HAL_RCC_OscConfig+0x3f8>
 8006906:	4b61      	ldr	r3, [pc, #388]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	069b      	lsls	r3, r3, #26
 8006914:	495d      	ldr	r1, [pc, #372]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006916:	4313      	orrs	r3, r2
 8006918:	604b      	str	r3, [r1, #4]
 800691a:	e023      	b.n	8006964 <HAL_RCC_OscConfig+0x3f8>
 800691c:	4b5b      	ldr	r3, [pc, #364]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	061b      	lsls	r3, r3, #24
 800692a:	4958      	ldr	r1, [pc, #352]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 800692c:	4313      	orrs	r3, r2
 800692e:	60cb      	str	r3, [r1, #12]
 8006930:	e018      	b.n	8006964 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006932:	4b56      	ldr	r3, [pc, #344]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a55      	ldr	r2, [pc, #340]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800693c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693e:	f7fc f8c1 	bl	8002ac4 <HAL_GetTick>
 8006942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006944:	e008      	b.n	8006958 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006946:	f7fc f8bd 	bl	8002ac4 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d901      	bls.n	8006958 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e212      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006958:	4b4c      	ldr	r3, [pc, #304]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1f0      	bne.n	8006946 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b00      	cmp	r3, #0
 800696e:	d036      	beq.n	80069de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d019      	beq.n	80069ac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006978:	4b44      	ldr	r3, [pc, #272]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 800697a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800697c:	4a43      	ldr	r2, [pc, #268]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 800697e:	f043 0301 	orr.w	r3, r3, #1
 8006982:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006984:	f7fc f89e 	bl	8002ac4 <HAL_GetTick>
 8006988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800698c:	f7fc f89a 	bl	8002ac4 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e1ef      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800699e:	4b3b      	ldr	r3, [pc, #236]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 80069a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0f0      	beq.n	800698c <HAL_RCC_OscConfig+0x420>
 80069aa:	e018      	b.n	80069de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069ac:	4b37      	ldr	r3, [pc, #220]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 80069ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b0:	4a36      	ldr	r2, [pc, #216]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b8:	f7fc f884 	bl	8002ac4 <HAL_GetTick>
 80069bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069c0:	f7fc f880 	bl	8002ac4 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e1d5      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069d2:	4b2e      	ldr	r3, [pc, #184]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 80069d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d036      	beq.n	8006a58 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d019      	beq.n	8006a26 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069f2:	4b26      	ldr	r3, [pc, #152]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a25      	ldr	r2, [pc, #148]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 80069f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069fe:	f7fc f861 	bl	8002ac4 <HAL_GetTick>
 8006a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a06:	f7fc f85d 	bl	8002ac4 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e1b2      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a18:	4b1c      	ldr	r3, [pc, #112]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0f0      	beq.n	8006a06 <HAL_RCC_OscConfig+0x49a>
 8006a24:	e018      	b.n	8006a58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a26:	4b19      	ldr	r3, [pc, #100]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a18      	ldr	r2, [pc, #96]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a32:	f7fc f847 	bl	8002ac4 <HAL_GetTick>
 8006a36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a3a:	f7fc f843 	bl	8002ac4 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e198      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a4c:	4b0f      	ldr	r3, [pc, #60]	; (8006a8c <HAL_RCC_OscConfig+0x520>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1f0      	bne.n	8006a3a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8085 	beq.w	8006b70 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <HAL_RCC_OscConfig+0x524>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a09      	ldr	r2, [pc, #36]	; (8006a90 <HAL_RCC_OscConfig+0x524>)
 8006a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a72:	f7fc f827 	bl	8002ac4 <HAL_GetTick>
 8006a76:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a78:	e00c      	b.n	8006a94 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a7a:	f7fc f823 	bl	8002ac4 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b64      	cmp	r3, #100	; 0x64
 8006a86:	d905      	bls.n	8006a94 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e178      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
 8006a8c:	58024400 	.word	0x58024400
 8006a90:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a94:	4b96      	ldr	r3, [pc, #600]	; (8006cf0 <HAL_RCC_OscConfig+0x784>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0ec      	beq.n	8006a7a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d106      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x54a>
 8006aa8:	4b92      	ldr	r3, [pc, #584]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aac:	4a91      	ldr	r2, [pc, #580]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006aae:	f043 0301 	orr.w	r3, r3, #1
 8006ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab4:	e02d      	b.n	8006b12 <HAL_RCC_OscConfig+0x5a6>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10c      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x56c>
 8006abe:	4b8d      	ldr	r3, [pc, #564]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac2:	4a8c      	ldr	r2, [pc, #560]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006ac4:	f023 0301 	bic.w	r3, r3, #1
 8006ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aca:	4b8a      	ldr	r3, [pc, #552]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	4a89      	ldr	r2, [pc, #548]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006ad0:	f023 0304 	bic.w	r3, r3, #4
 8006ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ad6:	e01c      	b.n	8006b12 <HAL_RCC_OscConfig+0x5a6>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b05      	cmp	r3, #5
 8006ade:	d10c      	bne.n	8006afa <HAL_RCC_OscConfig+0x58e>
 8006ae0:	4b84      	ldr	r3, [pc, #528]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae4:	4a83      	ldr	r2, [pc, #524]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006ae6:	f043 0304 	orr.w	r3, r3, #4
 8006aea:	6713      	str	r3, [r2, #112]	; 0x70
 8006aec:	4b81      	ldr	r3, [pc, #516]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af0:	4a80      	ldr	r2, [pc, #512]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	6713      	str	r3, [r2, #112]	; 0x70
 8006af8:	e00b      	b.n	8006b12 <HAL_RCC_OscConfig+0x5a6>
 8006afa:	4b7e      	ldr	r3, [pc, #504]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afe:	4a7d      	ldr	r2, [pc, #500]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006b00:	f023 0301 	bic.w	r3, r3, #1
 8006b04:	6713      	str	r3, [r2, #112]	; 0x70
 8006b06:	4b7b      	ldr	r3, [pc, #492]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0a:	4a7a      	ldr	r2, [pc, #488]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006b0c:	f023 0304 	bic.w	r3, r3, #4
 8006b10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d015      	beq.n	8006b46 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1a:	f7fb ffd3 	bl	8002ac4 <HAL_GetTick>
 8006b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b20:	e00a      	b.n	8006b38 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b22:	f7fb ffcf 	bl	8002ac4 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e122      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b38:	4b6e      	ldr	r3, [pc, #440]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0ee      	beq.n	8006b22 <HAL_RCC_OscConfig+0x5b6>
 8006b44:	e014      	b.n	8006b70 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b46:	f7fb ffbd 	bl	8002ac4 <HAL_GetTick>
 8006b4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b4c:	e00a      	b.n	8006b64 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b4e:	f7fb ffb9 	bl	8002ac4 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e10c      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b64:	4b63      	ldr	r3, [pc, #396]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1ee      	bne.n	8006b4e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8101 	beq.w	8006d7c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b7a:	4b5e      	ldr	r3, [pc, #376]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b82:	2b18      	cmp	r3, #24
 8006b84:	f000 80bc 	beq.w	8006d00 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	f040 8095 	bne.w	8006cbc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b92:	4b58      	ldr	r3, [pc, #352]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a57      	ldr	r2, [pc, #348]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006b98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9e:	f7fb ff91 	bl	8002ac4 <HAL_GetTick>
 8006ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ba6:	f7fb ff8d 	bl	8002ac4 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e0e2      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bb8:	4b4e      	ldr	r3, [pc, #312]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1f0      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bc4:	4b4b      	ldr	r3, [pc, #300]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bc8:	4b4b      	ldr	r3, [pc, #300]	; (8006cf8 <HAL_RCC_OscConfig+0x78c>)
 8006bca:	4013      	ands	r3, r2
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006bd4:	0112      	lsls	r2, r2, #4
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	4946      	ldr	r1, [pc, #280]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	628b      	str	r3, [r1, #40]	; 0x28
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be2:	3b01      	subs	r3, #1
 8006be4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bec:	3b01      	subs	r3, #1
 8006bee:	025b      	lsls	r3, r3, #9
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	041b      	lsls	r3, r3, #16
 8006bfc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c00:	431a      	orrs	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c06:	3b01      	subs	r3, #1
 8006c08:	061b      	lsls	r3, r3, #24
 8006c0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c0e:	4939      	ldr	r1, [pc, #228]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006c14:	4b37      	ldr	r3, [pc, #220]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	4a36      	ldr	r2, [pc, #216]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c1a:	f023 0301 	bic.w	r3, r3, #1
 8006c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c20:	4b34      	ldr	r3, [pc, #208]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c24:	4b35      	ldr	r3, [pc, #212]	; (8006cfc <HAL_RCC_OscConfig+0x790>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c2c:	00d2      	lsls	r2, r2, #3
 8006c2e:	4931      	ldr	r1, [pc, #196]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c34:	4b2f      	ldr	r3, [pc, #188]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	f023 020c 	bic.w	r2, r3, #12
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c40:	492c      	ldr	r1, [pc, #176]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c46:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	f023 0202 	bic.w	r2, r3, #2
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c52:	4928      	ldr	r1, [pc, #160]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c58:	4b26      	ldr	r3, [pc, #152]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	4a25      	ldr	r2, [pc, #148]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c64:	4b23      	ldr	r3, [pc, #140]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	4a22      	ldr	r2, [pc, #136]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c70:	4b20      	ldr	r3, [pc, #128]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	4a1f      	ldr	r2, [pc, #124]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006c7c:	4b1d      	ldr	r3, [pc, #116]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	4a1c      	ldr	r2, [pc, #112]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c88:	4b1a      	ldr	r3, [pc, #104]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a19      	ldr	r2, [pc, #100]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c94:	f7fb ff16 	bl	8002ac4 <HAL_GetTick>
 8006c98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c9c:	f7fb ff12 	bl	8002ac4 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e067      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cae:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f0      	beq.n	8006c9c <HAL_RCC_OscConfig+0x730>
 8006cba:	e05f      	b.n	8006d7c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cbc:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a0c      	ldr	r2, [pc, #48]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc8:	f7fb fefc 	bl	8002ac4 <HAL_GetTick>
 8006ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd0:	f7fb fef8 	bl	8002ac4 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e04d      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ce2:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <HAL_RCC_OscConfig+0x788>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f0      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x764>
 8006cee:	e045      	b.n	8006d7c <HAL_RCC_OscConfig+0x810>
 8006cf0:	58024800 	.word	0x58024800
 8006cf4:	58024400 	.word	0x58024400
 8006cf8:	fffffc0c 	.word	0xfffffc0c
 8006cfc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d00:	4b21      	ldr	r3, [pc, #132]	; (8006d88 <HAL_RCC_OscConfig+0x81c>)
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d06:	4b20      	ldr	r3, [pc, #128]	; (8006d88 <HAL_RCC_OscConfig+0x81c>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d031      	beq.n	8006d78 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f003 0203 	and.w	r2, r3, #3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d12a      	bne.n	8006d78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d122      	bne.n	8006d78 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d11a      	bne.n	8006d78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	0a5b      	lsrs	r3, r3, #9
 8006d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d111      	bne.n	8006d78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d108      	bne.n	8006d78 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	0e1b      	lsrs	r3, r3, #24
 8006d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d001      	beq.n	8006d7c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3730      	adds	r7, #48	; 0x30
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	58024400 	.word	0x58024400

08006d8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e19c      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006da0:	4b8a      	ldr	r3, [pc, #552]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d910      	bls.n	8006dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dae:	4b87      	ldr	r3, [pc, #540]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f023 020f 	bic.w	r2, r3, #15
 8006db6:	4985      	ldr	r1, [pc, #532]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dbe:	4b83      	ldr	r3, [pc, #524]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e184      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d010      	beq.n	8006dfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	4b7b      	ldr	r3, [pc, #492]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d908      	bls.n	8006dfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dec:	4b78      	ldr	r3, [pc, #480]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	4975      	ldr	r1, [pc, #468]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d010      	beq.n	8006e2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	695a      	ldr	r2, [r3, #20]
 8006e0e:	4b70      	ldr	r3, [pc, #448]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d908      	bls.n	8006e2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e1a:	4b6d      	ldr	r3, [pc, #436]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	496a      	ldr	r1, [pc, #424]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d010      	beq.n	8006e5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	699a      	ldr	r2, [r3, #24]
 8006e3c:	4b64      	ldr	r3, [pc, #400]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d908      	bls.n	8006e5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e48:	4b61      	ldr	r3, [pc, #388]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	495e      	ldr	r1, [pc, #376]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d010      	beq.n	8006e88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69da      	ldr	r2, [r3, #28]
 8006e6a:	4b59      	ldr	r3, [pc, #356]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d908      	bls.n	8006e88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e76:	4b56      	ldr	r3, [pc, #344]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	4953      	ldr	r1, [pc, #332]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d010      	beq.n	8006eb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	4b4d      	ldr	r3, [pc, #308]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d908      	bls.n	8006eb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ea4:	4b4a      	ldr	r3, [pc, #296]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f023 020f 	bic.w	r2, r3, #15
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	4947      	ldr	r1, [pc, #284]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d055      	beq.n	8006f6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ec2:	4b43      	ldr	r3, [pc, #268]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	4940      	ldr	r1, [pc, #256]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d107      	bne.n	8006eec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006edc:	4b3c      	ldr	r3, [pc, #240]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d121      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0f6      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d107      	bne.n	8006f04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ef4:	4b36      	ldr	r3, [pc, #216]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d115      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e0ea      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d107      	bne.n	8006f1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f0c:	4b30      	ldr	r3, [pc, #192]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d109      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e0de      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f1c:	4b2c      	ldr	r3, [pc, #176]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e0d6      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f2c:	4b28      	ldr	r3, [pc, #160]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f023 0207 	bic.w	r2, r3, #7
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	4925      	ldr	r1, [pc, #148]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f3e:	f7fb fdc1 	bl	8002ac4 <HAL_GetTick>
 8006f42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f44:	e00a      	b.n	8006f5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f46:	f7fb fdbd 	bl	8002ac4 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e0be      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f5c:	4b1c      	ldr	r3, [pc, #112]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d1eb      	bne.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d010      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f003 030f 	and.w	r3, r3, #15
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d208      	bcs.n	8006f9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f8a:	4b11      	ldr	r3, [pc, #68]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f023 020f 	bic.w	r2, r3, #15
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	490e      	ldr	r1, [pc, #56]	; (8006fd0 <HAL_RCC_ClockConfig+0x244>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 030f 	and.w	r3, r3, #15
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d214      	bcs.n	8006fd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006faa:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f023 020f 	bic.w	r2, r3, #15
 8006fb2:	4906      	ldr	r1, [pc, #24]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fba:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <HAL_RCC_ClockConfig+0x240>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d005      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e086      	b.n	80070da <HAL_RCC_ClockConfig+0x34e>
 8006fcc:	52002000 	.word	0x52002000
 8006fd0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d010      	beq.n	8007002 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	4b3f      	ldr	r3, [pc, #252]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d208      	bcs.n	8007002 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ff0:	4b3c      	ldr	r3, [pc, #240]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	4939      	ldr	r1, [pc, #228]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d010      	beq.n	8007030 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	695a      	ldr	r2, [r3, #20]
 8007012:	4b34      	ldr	r3, [pc, #208]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800701a:	429a      	cmp	r2, r3
 800701c:	d208      	bcs.n	8007030 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800701e:	4b31      	ldr	r3, [pc, #196]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	492e      	ldr	r1, [pc, #184]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 800702c:	4313      	orrs	r3, r2
 800702e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b00      	cmp	r3, #0
 800703a:	d010      	beq.n	800705e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699a      	ldr	r2, [r3, #24]
 8007040:	4b28      	ldr	r3, [pc, #160]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007048:	429a      	cmp	r2, r3
 800704a:	d208      	bcs.n	800705e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800704c:	4b25      	ldr	r3, [pc, #148]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	4922      	ldr	r1, [pc, #136]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 800705a:	4313      	orrs	r3, r2
 800705c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d010      	beq.n	800708c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	69da      	ldr	r2, [r3, #28]
 800706e:	4b1d      	ldr	r3, [pc, #116]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007076:	429a      	cmp	r2, r3
 8007078:	d208      	bcs.n	800708c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800707a:	4b1a      	ldr	r3, [pc, #104]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	4917      	ldr	r1, [pc, #92]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007088:	4313      	orrs	r3, r2
 800708a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800708c:	f000 f834 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 8007090:	4602      	mov	r2, r0
 8007092:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	0a1b      	lsrs	r3, r3, #8
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	4912      	ldr	r1, [pc, #72]	; (80070e8 <HAL_RCC_ClockConfig+0x35c>)
 800709e:	5ccb      	ldrb	r3, [r1, r3]
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
 80070a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070aa:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <HAL_RCC_ClockConfig+0x358>)
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	4a0d      	ldr	r2, [pc, #52]	; (80070e8 <HAL_RCC_ClockConfig+0x35c>)
 80070b4:	5cd3      	ldrb	r3, [r2, r3]
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	fa22 f303 	lsr.w	r3, r2, r3
 80070c0:	4a0a      	ldr	r2, [pc, #40]	; (80070ec <HAL_RCC_ClockConfig+0x360>)
 80070c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070c4:	4a0a      	ldr	r2, [pc, #40]	; (80070f0 <HAL_RCC_ClockConfig+0x364>)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80070ca:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <HAL_RCC_ClockConfig+0x368>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fb fcae 	bl	8002a30 <HAL_InitTick>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	58024400 	.word	0x58024400
 80070e8:	0800c958 	.word	0x0800c958
 80070ec:	24000004 	.word	0x24000004
 80070f0:	24000000 	.word	0x24000000
 80070f4:	24000008 	.word	0x24000008

080070f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070fe:	4bb3      	ldr	r3, [pc, #716]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007106:	2b18      	cmp	r3, #24
 8007108:	f200 8155 	bhi.w	80073b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <HAL_RCC_GetSysClockFreq+0x1c>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007179 	.word	0x08007179
 8007118:	080073b7 	.word	0x080073b7
 800711c:	080073b7 	.word	0x080073b7
 8007120:	080073b7 	.word	0x080073b7
 8007124:	080073b7 	.word	0x080073b7
 8007128:	080073b7 	.word	0x080073b7
 800712c:	080073b7 	.word	0x080073b7
 8007130:	080073b7 	.word	0x080073b7
 8007134:	0800719f 	.word	0x0800719f
 8007138:	080073b7 	.word	0x080073b7
 800713c:	080073b7 	.word	0x080073b7
 8007140:	080073b7 	.word	0x080073b7
 8007144:	080073b7 	.word	0x080073b7
 8007148:	080073b7 	.word	0x080073b7
 800714c:	080073b7 	.word	0x080073b7
 8007150:	080073b7 	.word	0x080073b7
 8007154:	080071a5 	.word	0x080071a5
 8007158:	080073b7 	.word	0x080073b7
 800715c:	080073b7 	.word	0x080073b7
 8007160:	080073b7 	.word	0x080073b7
 8007164:	080073b7 	.word	0x080073b7
 8007168:	080073b7 	.word	0x080073b7
 800716c:	080073b7 	.word	0x080073b7
 8007170:	080073b7 	.word	0x080073b7
 8007174:	080071ab 	.word	0x080071ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007178:	4b94      	ldr	r3, [pc, #592]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007184:	4b91      	ldr	r3, [pc, #580]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	08db      	lsrs	r3, r3, #3
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	4a90      	ldr	r2, [pc, #576]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007190:	fa22 f303 	lsr.w	r3, r2, r3
 8007194:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007196:	e111      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007198:	4b8d      	ldr	r3, [pc, #564]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800719a:	61bb      	str	r3, [r7, #24]
    break;
 800719c:	e10e      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800719e:	4b8d      	ldr	r3, [pc, #564]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071a0:	61bb      	str	r3, [r7, #24]
    break;
 80071a2:	e10b      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80071a4:	4b8c      	ldr	r3, [pc, #560]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80071a6:	61bb      	str	r3, [r7, #24]
    break;
 80071a8:	e108      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071aa:	4b88      	ldr	r3, [pc, #544]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80071b4:	4b85      	ldr	r3, [pc, #532]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071c0:	4b82      	ldr	r3, [pc, #520]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071ca:	4b80      	ldr	r3, [pc, #512]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ce:	08db      	lsrs	r3, r3, #3
 80071d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	fb02 f303 	mul.w	r3, r2, r3
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80e1 	beq.w	80073b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	f000 8083 	beq.w	80072fc <HAL_RCC_GetSysClockFreq+0x204>
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	f200 80a1 	bhi.w	8007340 <HAL_RCC_GetSysClockFreq+0x248>
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <HAL_RCC_GetSysClockFreq+0x114>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d056      	beq.n	80072b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800720a:	e099      	b.n	8007340 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800720c:	4b6f      	ldr	r3, [pc, #444]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d02d      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007218:	4b6c      	ldr	r3, [pc, #432]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	08db      	lsrs	r3, r3, #3
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	4a6b      	ldr	r2, [pc, #428]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007242:	4b62      	ldr	r3, [pc, #392]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007252:	ed97 6a02 	vldr	s12, [r7, #8]
 8007256:	eddf 5a61 	vldr	s11, [pc, #388]	; 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800725a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007272:	e087      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80073e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007286:	4b51      	ldr	r3, [pc, #324]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007296:	ed97 6a02 	vldr	s12, [r7, #8]
 800729a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800729e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b6:	e065      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80073e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ca:	4b40      	ldr	r3, [pc, #256]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072da:	ed97 6a02 	vldr	s12, [r7, #8]
 80072de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80072e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072fa:	e043      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	eddf 6a38 	vldr	s13, [pc, #224]	; 80073e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800730a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730e:	4b2f      	ldr	r3, [pc, #188]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007322:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800733e:	e021      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80073e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800734e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007352:	4b1e      	ldr	r3, [pc, #120]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007362:	ed97 6a02 	vldr	s12, [r7, #8]
 8007366:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800736a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800737a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007382:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007384:	4b11      	ldr	r3, [pc, #68]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	0a5b      	lsrs	r3, r3, #9
 800738a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738e:	3301      	adds	r3, #1
 8007390:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800739c:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a8:	ee17 3a90 	vmov	r3, s15
 80073ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80073ae:	e005      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]
    break;
 80073b4:	e002      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80073b6:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073b8:	61bb      	str	r3, [r7, #24]
    break;
 80073ba:	bf00      	nop
  }

  return sysclockfreq;
 80073bc:	69bb      	ldr	r3, [r7, #24]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3724      	adds	r7, #36	; 0x24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	58024400 	.word	0x58024400
 80073d0:	03d09000 	.word	0x03d09000
 80073d4:	003d0900 	.word	0x003d0900
 80073d8:	02dc6c00 	.word	0x02dc6c00
 80073dc:	46000000 	.word	0x46000000
 80073e0:	4c742400 	.word	0x4c742400
 80073e4:	4a742400 	.word	0x4a742400
 80073e8:	4c371b00 	.word	0x4c371b00

080073ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80073f2:	f7ff fe81 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 80073f6:	4602      	mov	r2, r0
 80073f8:	4b10      	ldr	r3, [pc, #64]	; (800743c <HAL_RCC_GetHCLKFreq+0x50>)
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	490f      	ldr	r1, [pc, #60]	; (8007440 <HAL_RCC_GetHCLKFreq+0x54>)
 8007404:	5ccb      	ldrb	r3, [r1, r3]
 8007406:	f003 031f 	and.w	r3, r3, #31
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007410:	4b0a      	ldr	r3, [pc, #40]	; (800743c <HAL_RCC_GetHCLKFreq+0x50>)
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	4a09      	ldr	r2, [pc, #36]	; (8007440 <HAL_RCC_GetHCLKFreq+0x54>)
 800741a:	5cd3      	ldrb	r3, [r2, r3]
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	fa22 f303 	lsr.w	r3, r2, r3
 8007426:	4a07      	ldr	r2, [pc, #28]	; (8007444 <HAL_RCC_GetHCLKFreq+0x58>)
 8007428:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800742a:	4a07      	ldr	r2, [pc, #28]	; (8007448 <HAL_RCC_GetHCLKFreq+0x5c>)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007430:	4b04      	ldr	r3, [pc, #16]	; (8007444 <HAL_RCC_GetHCLKFreq+0x58>)
 8007432:	681b      	ldr	r3, [r3, #0]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	58024400 	.word	0x58024400
 8007440:	0800c958 	.word	0x0800c958
 8007444:	24000004 	.word	0x24000004
 8007448:	24000000 	.word	0x24000000

0800744c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007450:	f7ff ffcc 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8007454:	4602      	mov	r2, r0
 8007456:	4b06      	ldr	r3, [pc, #24]	; (8007470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	091b      	lsrs	r3, r3, #4
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	4904      	ldr	r1, [pc, #16]	; (8007474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007462:	5ccb      	ldrb	r3, [r1, r3]
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800746c:	4618      	mov	r0, r3
 800746e:	bd80      	pop	{r7, pc}
 8007470:	58024400 	.word	0x58024400
 8007474:	0800c958 	.word	0x0800c958

08007478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800747c:	f7ff ffb6 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8007480:	4602      	mov	r2, r0
 8007482:	4b06      	ldr	r3, [pc, #24]	; (800749c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	4904      	ldr	r1, [pc, #16]	; (80074a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800748e:	5ccb      	ldrb	r3, [r1, r3]
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007498:	4618      	mov	r0, r3
 800749a:	bd80      	pop	{r7, pc}
 800749c:	58024400 	.word	0x58024400
 80074a0:	0800c958 	.word	0x0800c958

080074a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074ac:	2300      	movs	r3, #0
 80074ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074b0:	2300      	movs	r3, #0
 80074b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d03f      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074c8:	d02a      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80074ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074ce:	d824      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074d4:	d018      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074da:	d81e      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80074e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074e4:	d007      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80074e6:	e018      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e8:	4bab      	ldr	r3, [pc, #684]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	4aaa      	ldr	r2, [pc, #680]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80074f4:	e015      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3304      	adds	r3, #4
 80074fa:	2102      	movs	r1, #2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 fff3 	bl	80094e8 <RCCEx_PLL2_Config>
 8007502:	4603      	mov	r3, r0
 8007504:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007506:	e00c      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3324      	adds	r3, #36	; 0x24
 800750c:	2102      	movs	r1, #2
 800750e:	4618      	mov	r0, r3
 8007510:	f002 f89c 	bl	800964c <RCCEx_PLL3_Config>
 8007514:	4603      	mov	r3, r0
 8007516:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007518:	e003      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	75fb      	strb	r3, [r7, #23]
      break;
 800751e:	e000      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d109      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007528:	4b9b      	ldr	r3, [pc, #620]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800752a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007534:	4998      	ldr	r1, [pc, #608]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007536:	4313      	orrs	r3, r2
 8007538:	650b      	str	r3, [r1, #80]	; 0x50
 800753a:	e001      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007548:	2b00      	cmp	r3, #0
 800754a:	d03d      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007550:	2b04      	cmp	r3, #4
 8007552:	d826      	bhi.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	08007571 	.word	0x08007571
 8007560:	0800757f 	.word	0x0800757f
 8007564:	08007591 	.word	0x08007591
 8007568:	080075a9 	.word	0x080075a9
 800756c:	080075a9 	.word	0x080075a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007570:	4b89      	ldr	r3, [pc, #548]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007574:	4a88      	ldr	r2, [pc, #544]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800757a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800757c:	e015      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3304      	adds	r3, #4
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f001 ffaf 	bl	80094e8 <RCCEx_PLL2_Config>
 800758a:	4603      	mov	r3, r0
 800758c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800758e:	e00c      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3324      	adds	r3, #36	; 0x24
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f002 f858 	bl	800964c <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075a0:	e003      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	75fb      	strb	r3, [r7, #23]
      break;
 80075a6:	e000      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80075a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d109      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075b0:	4b79      	ldr	r3, [pc, #484]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b4:	f023 0207 	bic.w	r2, r3, #7
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075bc:	4976      	ldr	r1, [pc, #472]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	650b      	str	r3, [r1, #80]	; 0x50
 80075c2:	e001      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
 80075c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d042      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075dc:	d02b      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80075de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e2:	d825      	bhi.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80075e4:	2bc0      	cmp	r3, #192	; 0xc0
 80075e6:	d028      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80075e8:	2bc0      	cmp	r3, #192	; 0xc0
 80075ea:	d821      	bhi.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d016      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80075f0:	2b80      	cmp	r3, #128	; 0x80
 80075f2:	d81d      	bhi.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80075f8:	2b40      	cmp	r3, #64	; 0x40
 80075fa:	d007      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x168>
 80075fc:	e018      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075fe:	4b66      	ldr	r3, [pc, #408]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	4a65      	ldr	r2, [pc, #404]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007608:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800760a:	e017      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3304      	adds	r3, #4
 8007610:	2100      	movs	r1, #0
 8007612:	4618      	mov	r0, r3
 8007614:	f001 ff68 	bl	80094e8 <RCCEx_PLL2_Config>
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800761c:	e00e      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3324      	adds	r3, #36	; 0x24
 8007622:	2100      	movs	r1, #0
 8007624:	4618      	mov	r0, r3
 8007626:	f002 f811 	bl	800964c <RCCEx_PLL3_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800762e:	e005      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	75fb      	strb	r3, [r7, #23]
      break;
 8007634:	e002      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007636:	bf00      	nop
 8007638:	e000      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800763a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007642:	4b55      	ldr	r3, [pc, #340]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007646:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764e:	4952      	ldr	r1, [pc, #328]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007650:	4313      	orrs	r3, r2
 8007652:	650b      	str	r3, [r1, #80]	; 0x50
 8007654:	e001      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007662:	2b00      	cmp	r3, #0
 8007664:	d049      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800766c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007670:	d030      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007676:	d82a      	bhi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007678:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800767c:	d02c      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800767e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007682:	d824      	bhi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007688:	d018      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800768a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800768e:	d81e      	bhi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007694:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007698:	d007      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800769a:	e018      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800769c:	4b3e      	ldr	r3, [pc, #248]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	4a3d      	ldr	r2, [pc, #244]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076a8:	e017      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3304      	adds	r3, #4
 80076ae:	2100      	movs	r1, #0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 ff19 	bl	80094e8 <RCCEx_PLL2_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80076ba:	e00e      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3324      	adds	r3, #36	; 0x24
 80076c0:	2100      	movs	r1, #0
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 ffc2 	bl	800964c <RCCEx_PLL3_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076cc:	e005      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	75fb      	strb	r3, [r7, #23]
      break;
 80076d2:	e002      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80076d4:	bf00      	nop
 80076d6:	e000      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80076d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80076e0:	4b2d      	ldr	r3, [pc, #180]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076ee:	492a      	ldr	r1, [pc, #168]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	658b      	str	r3, [r1, #88]	; 0x58
 80076f4:	e001      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007702:	2b00      	cmp	r3, #0
 8007704:	d04c      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800770c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007710:	d030      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007712:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007716:	d82a      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007718:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800771c:	d02c      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800771e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007722:	d824      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007724:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007728:	d018      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800772a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800772e:	d81e      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007738:	d007      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800773a:	e018      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800773c:	4b16      	ldr	r3, [pc, #88]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	4a15      	ldr	r2, [pc, #84]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007748:	e017      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3304      	adds	r3, #4
 800774e:	2100      	movs	r1, #0
 8007750:	4618      	mov	r0, r3
 8007752:	f001 fec9 	bl	80094e8 <RCCEx_PLL2_Config>
 8007756:	4603      	mov	r3, r0
 8007758:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800775a:	e00e      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3324      	adds	r3, #36	; 0x24
 8007760:	2100      	movs	r1, #0
 8007762:	4618      	mov	r0, r3
 8007764:	f001 ff72 	bl	800964c <RCCEx_PLL3_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800776c:	e005      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	75fb      	strb	r3, [r7, #23]
      break;
 8007772:	e002      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007774:	bf00      	nop
 8007776:	e000      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10d      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007780:	4b05      	ldr	r3, [pc, #20]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007784:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800778e:	4902      	ldr	r1, [pc, #8]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007790:	4313      	orrs	r3, r2
 8007792:	658b      	str	r3, [r1, #88]	; 0x58
 8007794:	e004      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007796:	bf00      	nop
 8007798:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d032      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b0:	2b30      	cmp	r3, #48	; 0x30
 80077b2:	d01c      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80077b4:	2b30      	cmp	r3, #48	; 0x30
 80077b6:	d817      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d00c      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d813      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d016      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80077c4:	2b10      	cmp	r3, #16
 80077c6:	d10f      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077c8:	4baf      	ldr	r3, [pc, #700]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	4aae      	ldr	r2, [pc, #696]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80077d4:	e00e      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3304      	adds	r3, #4
 80077da:	2102      	movs	r1, #2
 80077dc:	4618      	mov	r0, r3
 80077de:	f001 fe83 	bl	80094e8 <RCCEx_PLL2_Config>
 80077e2:	4603      	mov	r3, r0
 80077e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80077e6:	e005      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	75fb      	strb	r3, [r7, #23]
      break;
 80077ec:	e002      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80077ee:	bf00      	nop
 80077f0:	e000      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80077f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80077fa:	4ba3      	ldr	r3, [pc, #652]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007806:	49a0      	ldr	r1, [pc, #640]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007808:	4313      	orrs	r3, r2
 800780a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800780c:	e001      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d047      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007826:	d030      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800782c:	d82a      	bhi.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800782e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007832:	d02c      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007838:	d824      	bhi.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800783a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800783e:	d018      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007844:	d81e      	bhi.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800784a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800784e:	d007      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007850:	e018      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007852:	4b8d      	ldr	r3, [pc, #564]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	4a8c      	ldr	r2, [pc, #560]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800785c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800785e:	e017      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	3304      	adds	r3, #4
 8007864:	2100      	movs	r1, #0
 8007866:	4618      	mov	r0, r3
 8007868:	f001 fe3e 	bl	80094e8 <RCCEx_PLL2_Config>
 800786c:	4603      	mov	r3, r0
 800786e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007870:	e00e      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3324      	adds	r3, #36	; 0x24
 8007876:	2100      	movs	r1, #0
 8007878:	4618      	mov	r0, r3
 800787a:	f001 fee7 	bl	800964c <RCCEx_PLL3_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007882:	e005      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	75fb      	strb	r3, [r7, #23]
      break;
 8007888:	e002      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800788a:	bf00      	nop
 800788c:	e000      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800788e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007896:	4b7c      	ldr	r3, [pc, #496]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800789a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a2:	4979      	ldr	r1, [pc, #484]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	650b      	str	r3, [r1, #80]	; 0x50
 80078a8:	e001      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078aa:	7dfb      	ldrb	r3, [r7, #23]
 80078ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d049      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078c2:	d02e      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80078c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078c8:	d828      	bhi.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80078ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078ce:	d02a      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80078d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078d4:	d822      	bhi.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80078d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078da:	d026      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80078dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078e0:	d81c      	bhi.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80078e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078e6:	d010      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x466>
 80078e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ec:	d816      	bhi.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d01d      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80078f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f6:	d111      	bne.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3304      	adds	r3, #4
 80078fc:	2101      	movs	r1, #1
 80078fe:	4618      	mov	r0, r3
 8007900:	f001 fdf2 	bl	80094e8 <RCCEx_PLL2_Config>
 8007904:	4603      	mov	r3, r0
 8007906:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007908:	e012      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3324      	adds	r3, #36	; 0x24
 800790e:	2101      	movs	r1, #1
 8007910:	4618      	mov	r0, r3
 8007912:	f001 fe9b 	bl	800964c <RCCEx_PLL3_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800791a:	e009      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	75fb      	strb	r3, [r7, #23]
      break;
 8007920:	e006      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007922:	bf00      	nop
 8007924:	e004      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007926:	bf00      	nop
 8007928:	e002      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800792a:	bf00      	nop
 800792c:	e000      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800792e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d109      	bne.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007936:	4b54      	ldr	r3, [pc, #336]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800793a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007942:	4951      	ldr	r1, [pc, #324]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007944:	4313      	orrs	r3, r2
 8007946:	650b      	str	r3, [r1, #80]	; 0x50
 8007948:	e001      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794a:	7dfb      	ldrb	r3, [r7, #23]
 800794c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d04b      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007964:	d02e      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800796a:	d828      	bhi.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800796c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007970:	d02a      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007976:	d822      	bhi.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007978:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800797c:	d026      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800797e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007982:	d81c      	bhi.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007988:	d010      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x508>
 800798a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800798e:	d816      	bhi.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01d      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007998:	d111      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3304      	adds	r3, #4
 800799e:	2101      	movs	r1, #1
 80079a0:	4618      	mov	r0, r3
 80079a2:	f001 fda1 	bl	80094e8 <RCCEx_PLL2_Config>
 80079a6:	4603      	mov	r3, r0
 80079a8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80079aa:	e012      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	3324      	adds	r3, #36	; 0x24
 80079b0:	2101      	movs	r1, #1
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fe4a 	bl	800964c <RCCEx_PLL3_Config>
 80079b8:	4603      	mov	r3, r0
 80079ba:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80079bc:	e009      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	75fb      	strb	r3, [r7, #23]
      break;
 80079c2:	e006      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80079c4:	bf00      	nop
 80079c6:	e004      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80079c8:	bf00      	nop
 80079ca:	e002      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80079cc:	bf00      	nop
 80079ce:	e000      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80079d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10a      	bne.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079d8:	4b2b      	ldr	r3, [pc, #172]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079dc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079e6:	4928      	ldr	r1, [pc, #160]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	658b      	str	r3, [r1, #88]	; 0x58
 80079ec:	e001      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d02f      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a06:	d00e      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a0c:	d814      	bhi.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d015      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a16:	d10f      	bne.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a18:	4b1b      	ldr	r3, [pc, #108]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1c:	4a1a      	ldr	r2, [pc, #104]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a24:	e00c      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f001 fd5b 	bl	80094e8 <RCCEx_PLL2_Config>
 8007a32:	4603      	mov	r3, r0
 8007a34:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a36:	e003      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a3c:	e000      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d109      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a46:	4b10      	ldr	r3, [pc, #64]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a52:	490d      	ldr	r1, [pc, #52]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	650b      	str	r3, [r1, #80]	; 0x50
 8007a58:	e001      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d033      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d81c      	bhi.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007ab3 	.word	0x08007ab3
 8007a7c:	08007a8d 	.word	0x08007a8d
 8007a80:	08007a9b 	.word	0x08007a9b
 8007a84:	08007ab3 	.word	0x08007ab3
 8007a88:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a8c:	4bb8      	ldr	r3, [pc, #736]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	4ab7      	ldr	r2, [pc, #732]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a98:	e00c      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	2102      	movs	r1, #2
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 fd21 	bl	80094e8 <RCCEx_PLL2_Config>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007aaa:	e003      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab0:	e000      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007aba:	4bad      	ldr	r3, [pc, #692]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007abe:	f023 0203 	bic.w	r2, r3, #3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac6:	49aa      	ldr	r1, [pc, #680]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007acc:	e001      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
 8007ad0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 8086 	beq.w	8007bec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ae0:	4ba4      	ldr	r3, [pc, #656]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4aa3      	ldr	r2, [pc, #652]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007aec:	f7fa ffea 	bl	8002ac4 <HAL_GetTick>
 8007af0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007af2:	e009      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007af4:	f7fa ffe6 	bl	8002ac4 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b64      	cmp	r3, #100	; 0x64
 8007b00:	d902      	bls.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	75fb      	strb	r3, [r7, #23]
        break;
 8007b06:	e005      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b08:	4b9a      	ldr	r3, [pc, #616]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0ef      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d166      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b1a:	4b95      	ldr	r3, [pc, #596]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b24:	4053      	eors	r3, r2
 8007b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d013      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b2e:	4b90      	ldr	r3, [pc, #576]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b36:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b38:	4b8d      	ldr	r3, [pc, #564]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3c:	4a8c      	ldr	r2, [pc, #560]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b42:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b44:	4b8a      	ldr	r3, [pc, #552]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b48:	4a89      	ldr	r2, [pc, #548]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b4e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b50:	4a87      	ldr	r2, [pc, #540]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b60:	d115      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b62:	f7fa ffaf 	bl	8002ac4 <HAL_GetTick>
 8007b66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b68:	e00b      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b6a:	f7fa ffab 	bl	8002ac4 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d902      	bls.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	75fb      	strb	r3, [r7, #23]
            break;
 8007b80:	e005      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b82:	4b7b      	ldr	r3, [pc, #492]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0ed      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d126      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ba2:	d10d      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007ba4:	4b72      	ldr	r3, [pc, #456]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bb2:	0919      	lsrs	r1, r3, #4
 8007bb4:	4b70      	ldr	r3, [pc, #448]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007bb6:	400b      	ands	r3, r1
 8007bb8:	496d      	ldr	r1, [pc, #436]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	610b      	str	r3, [r1, #16]
 8007bbe:	e005      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007bc0:	4b6b      	ldr	r3, [pc, #428]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	4a6a      	ldr	r2, [pc, #424]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007bc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007bca:	6113      	str	r3, [r2, #16]
 8007bcc:	4b68      	ldr	r3, [pc, #416]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007bce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bda:	4965      	ldr	r1, [pc, #404]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	670b      	str	r3, [r1, #112]	; 0x70
 8007be0:	e004      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	75bb      	strb	r3, [r7, #22]
 8007be6:	e001      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d07e      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bfc:	2b28      	cmp	r3, #40	; 0x28
 8007bfe:	d867      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007cd7 	.word	0x08007cd7
 8007c0c:	08007cd1 	.word	0x08007cd1
 8007c10:	08007cd1 	.word	0x08007cd1
 8007c14:	08007cd1 	.word	0x08007cd1
 8007c18:	08007cd1 	.word	0x08007cd1
 8007c1c:	08007cd1 	.word	0x08007cd1
 8007c20:	08007cd1 	.word	0x08007cd1
 8007c24:	08007cd1 	.word	0x08007cd1
 8007c28:	08007cad 	.word	0x08007cad
 8007c2c:	08007cd1 	.word	0x08007cd1
 8007c30:	08007cd1 	.word	0x08007cd1
 8007c34:	08007cd1 	.word	0x08007cd1
 8007c38:	08007cd1 	.word	0x08007cd1
 8007c3c:	08007cd1 	.word	0x08007cd1
 8007c40:	08007cd1 	.word	0x08007cd1
 8007c44:	08007cd1 	.word	0x08007cd1
 8007c48:	08007cbf 	.word	0x08007cbf
 8007c4c:	08007cd1 	.word	0x08007cd1
 8007c50:	08007cd1 	.word	0x08007cd1
 8007c54:	08007cd1 	.word	0x08007cd1
 8007c58:	08007cd1 	.word	0x08007cd1
 8007c5c:	08007cd1 	.word	0x08007cd1
 8007c60:	08007cd1 	.word	0x08007cd1
 8007c64:	08007cd1 	.word	0x08007cd1
 8007c68:	08007cd7 	.word	0x08007cd7
 8007c6c:	08007cd1 	.word	0x08007cd1
 8007c70:	08007cd1 	.word	0x08007cd1
 8007c74:	08007cd1 	.word	0x08007cd1
 8007c78:	08007cd1 	.word	0x08007cd1
 8007c7c:	08007cd1 	.word	0x08007cd1
 8007c80:	08007cd1 	.word	0x08007cd1
 8007c84:	08007cd1 	.word	0x08007cd1
 8007c88:	08007cd7 	.word	0x08007cd7
 8007c8c:	08007cd1 	.word	0x08007cd1
 8007c90:	08007cd1 	.word	0x08007cd1
 8007c94:	08007cd1 	.word	0x08007cd1
 8007c98:	08007cd1 	.word	0x08007cd1
 8007c9c:	08007cd1 	.word	0x08007cd1
 8007ca0:	08007cd1 	.word	0x08007cd1
 8007ca4:	08007cd1 	.word	0x08007cd1
 8007ca8:	08007cd7 	.word	0x08007cd7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 fc18 	bl	80094e8 <RCCEx_PLL2_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007cbc:	e00c      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3324      	adds	r3, #36	; 0x24
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f001 fcc1 	bl	800964c <RCCEx_PLL3_Config>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007cce:	e003      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd4:	e000      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d109      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007cde:	4b24      	ldr	r3, [pc, #144]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cea:	4921      	ldr	r1, [pc, #132]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	654b      	str	r3, [r1, #84]	; 0x54
 8007cf0:	e001      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d03e      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d06:	2b05      	cmp	r3, #5
 8007d08:	d820      	bhi.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007d0a:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d53 	.word	0x08007d53
 8007d14:	08007d29 	.word	0x08007d29
 8007d18:	08007d3b 	.word	0x08007d3b
 8007d1c:	08007d53 	.word	0x08007d53
 8007d20:	08007d53 	.word	0x08007d53
 8007d24:	08007d53 	.word	0x08007d53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f001 fbda 	bl	80094e8 <RCCEx_PLL2_Config>
 8007d34:	4603      	mov	r3, r0
 8007d36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d38:	e00c      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3324      	adds	r3, #36	; 0x24
 8007d3e:	2101      	movs	r1, #1
 8007d40:	4618      	mov	r0, r3
 8007d42:	f001 fc83 	bl	800964c <RCCEx_PLL3_Config>
 8007d46:	4603      	mov	r3, r0
 8007d48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d4a:	e003      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d50:	e000      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d110      	bne.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d5a:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5e:	f023 0207 	bic.w	r2, r3, #7
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d66:	4902      	ldr	r1, [pc, #8]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	654b      	str	r3, [r1, #84]	; 0x54
 8007d6c:	e008      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007d6e:	bf00      	nop
 8007d70:	58024400 	.word	0x58024400
 8007d74:	58024800 	.word	0x58024800
 8007d78:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d039      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	d820      	bhi.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007d96:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007ddf 	.word	0x08007ddf
 8007da0:	08007db5 	.word	0x08007db5
 8007da4:	08007dc7 	.word	0x08007dc7
 8007da8:	08007ddf 	.word	0x08007ddf
 8007dac:	08007ddf 	.word	0x08007ddf
 8007db0:	08007ddf 	.word	0x08007ddf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3304      	adds	r3, #4
 8007db8:	2101      	movs	r1, #1
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 fb94 	bl	80094e8 <RCCEx_PLL2_Config>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007dc4:	e00c      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3324      	adds	r3, #36	; 0x24
 8007dca:	2101      	movs	r1, #1
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 fc3d 	bl	800964c <RCCEx_PLL3_Config>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007dd6:	e003      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	75fb      	strb	r3, [r7, #23]
      break;
 8007ddc:	e000      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10a      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007de6:	4bb7      	ldr	r3, [pc, #732]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dea:	f023 0207 	bic.w	r2, r3, #7
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df4:	49b3      	ldr	r1, [pc, #716]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	658b      	str	r3, [r1, #88]	; 0x58
 8007dfa:	e001      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfc:	7dfb      	ldrb	r3, [r7, #23]
 8007dfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0320 	and.w	r3, r3, #32
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d04b      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e16:	d02e      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e1c:	d828      	bhi.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e22:	d02a      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e28:	d822      	bhi.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007e2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e2e:	d026      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007e30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e34:	d81c      	bhi.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007e36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e3a:	d010      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e40:	d816      	bhi.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d01d      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007e46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e4a:	d111      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	2100      	movs	r1, #0
 8007e52:	4618      	mov	r0, r3
 8007e54:	f001 fb48 	bl	80094e8 <RCCEx_PLL2_Config>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e5c:	e012      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3324      	adds	r3, #36	; 0x24
 8007e62:	2102      	movs	r1, #2
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 fbf1 	bl	800964c <RCCEx_PLL3_Config>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e6e:	e009      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	75fb      	strb	r3, [r7, #23]
      break;
 8007e74:	e006      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007e76:	bf00      	nop
 8007e78:	e004      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007e7a:	bf00      	nop
 8007e7c:	e002      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007e7e:	bf00      	nop
 8007e80:	e000      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10a      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e8a:	4b8e      	ldr	r3, [pc, #568]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e98:	498a      	ldr	r1, [pc, #552]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	654b      	str	r3, [r1, #84]	; 0x54
 8007e9e:	e001      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
 8007ea2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d04b      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007eb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007eba:	d02e      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007ebc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007ec0:	d828      	bhi.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec6:	d02a      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ecc:	d822      	bhi.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007ece:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ed2:	d026      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ed8:	d81c      	bhi.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ede:	d010      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee4:	d816      	bhi.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d01d      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eee:	d111      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f001 faf6 	bl	80094e8 <RCCEx_PLL2_Config>
 8007efc:	4603      	mov	r3, r0
 8007efe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f00:	e012      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	3324      	adds	r3, #36	; 0x24
 8007f06:	2102      	movs	r1, #2
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 fb9f 	bl	800964c <RCCEx_PLL3_Config>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f12:	e009      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	75fb      	strb	r3, [r7, #23]
      break;
 8007f18:	e006      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007f1a:	bf00      	nop
 8007f1c:	e004      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007f1e:	bf00      	nop
 8007f20:	e002      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007f22:	bf00      	nop
 8007f24:	e000      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10a      	bne.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f2e:	4b65      	ldr	r3, [pc, #404]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f3c:	4961      	ldr	r1, [pc, #388]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	658b      	str	r3, [r1, #88]	; 0x58
 8007f42:	e001      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
 8007f46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d04b      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f5e:	d02e      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007f60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f64:	d828      	bhi.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f6a:	d02a      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f70:	d822      	bhi.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007f72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f76:	d026      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007f78:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f7c:	d81c      	bhi.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f82:	d010      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f88:	d816      	bhi.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d01d      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f92:	d111      	bne.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3304      	adds	r3, #4
 8007f98:	2100      	movs	r1, #0
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 faa4 	bl	80094e8 <RCCEx_PLL2_Config>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007fa4:	e012      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3324      	adds	r3, #36	; 0x24
 8007faa:	2102      	movs	r1, #2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 fb4d 	bl	800964c <RCCEx_PLL3_Config>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007fb6:	e009      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	75fb      	strb	r3, [r7, #23]
      break;
 8007fbc:	e006      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007fbe:	bf00      	nop
 8007fc0:	e004      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007fc2:	bf00      	nop
 8007fc4:	e002      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007fc6:	bf00      	nop
 8007fc8:	e000      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10a      	bne.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007fd2:	4b3c      	ldr	r3, [pc, #240]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fe0:	4938      	ldr	r1, [pc, #224]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	658b      	str	r3, [r1, #88]	; 0x58
 8007fe6:	e001      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01a      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008002:	d10a      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3324      	adds	r3, #36	; 0x24
 8008008:	2102      	movs	r1, #2
 800800a:	4618      	mov	r0, r3
 800800c:	f001 fb1e 	bl	800964c <RCCEx_PLL3_Config>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800801a:	4b2a      	ldr	r3, [pc, #168]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800801c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008028:	4926      	ldr	r1, [pc, #152]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800802a:	4313      	orrs	r3, r2
 800802c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0310 	and.w	r3, r3, #16
 8008036:	2b00      	cmp	r3, #0
 8008038:	d01a      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008044:	d10a      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3324      	adds	r3, #36	; 0x24
 800804a:	2102      	movs	r1, #2
 800804c:	4618      	mov	r0, r3
 800804e:	f001 fafd 	bl	800964c <RCCEx_PLL3_Config>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800805c:	4b19      	ldr	r3, [pc, #100]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800805e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800806a:	4916      	ldr	r1, [pc, #88]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800806c:	4313      	orrs	r3, r2
 800806e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d036      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008086:	d01f      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800808c:	d817      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008096:	d009      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008098:	e011      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	3304      	adds	r3, #4
 800809e:	2100      	movs	r1, #0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 fa21 	bl	80094e8 <RCCEx_PLL2_Config>
 80080a6:	4603      	mov	r3, r0
 80080a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80080aa:	e00e      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3324      	adds	r3, #36	; 0x24
 80080b0:	2102      	movs	r1, #2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f001 faca 	bl	800964c <RCCEx_PLL3_Config>
 80080b8:	4603      	mov	r3, r0
 80080ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80080bc:	e005      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	75fb      	strb	r3, [r7, #23]
      break;
 80080c2:	e002      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80080c4:	58024400 	.word	0x58024400
      break;
 80080c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10a      	bne.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080d0:	4b93      	ldr	r3, [pc, #588]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080de:	4990      	ldr	r1, [pc, #576]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	658b      	str	r3, [r1, #88]	; 0x58
 80080e4:	e001      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d033      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008100:	d01c      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008102:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008106:	d816      	bhi.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800810c:	d003      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800810e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008112:	d007      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008114:	e00f      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008116:	4b82      	ldr	r3, [pc, #520]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811a:	4a81      	ldr	r2, [pc, #516]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800811c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008120:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008122:	e00c      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3324      	adds	r3, #36	; 0x24
 8008128:	2101      	movs	r1, #1
 800812a:	4618      	mov	r0, r3
 800812c:	f001 fa8e 	bl	800964c <RCCEx_PLL3_Config>
 8008130:	4603      	mov	r3, r0
 8008132:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008134:	e003      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	75fb      	strb	r3, [r7, #23]
      break;
 800813a:	e000      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800813c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10a      	bne.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008144:	4b76      	ldr	r3, [pc, #472]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008152:	4973      	ldr	r1, [pc, #460]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008154:	4313      	orrs	r3, r2
 8008156:	654b      	str	r3, [r1, #84]	; 0x54
 8008158:	e001      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d029      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008176:	d007      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008178:	e00f      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800817a:	4b69      	ldr	r3, [pc, #420]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817e:	4a68      	ldr	r2, [pc, #416]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008184:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008186:	e00b      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3304      	adds	r3, #4
 800818c:	2102      	movs	r1, #2
 800818e:	4618      	mov	r0, r3
 8008190:	f001 f9aa 	bl	80094e8 <RCCEx_PLL2_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008198:	e002      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	75fb      	strb	r3, [r7, #23]
      break;
 800819e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d109      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80081a6:	4b5e      	ldr	r3, [pc, #376]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b2:	495b      	ldr	r1, [pc, #364]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80081b8:	e001      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3324      	adds	r3, #36	; 0x24
 80081ce:	2102      	movs	r1, #2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 fa3b 	bl	800964c <RCCEx_PLL3_Config>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d030      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081f4:	d017      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80081f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081fa:	d811      	bhi.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80081fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008200:	d013      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008206:	d80b      	bhi.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008208:	2b00      	cmp	r3, #0
 800820a:	d010      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800820c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008210:	d106      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008212:	4b43      	ldr	r3, [pc, #268]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	4a42      	ldr	r2, [pc, #264]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800821c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800821e:	e007      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	75fb      	strb	r3, [r7, #23]
      break;
 8008224:	e004      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008226:	bf00      	nop
 8008228:	e002      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800822a:	bf00      	nop
 800822c:	e000      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800822e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008236:	4b3a      	ldr	r3, [pc, #232]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008242:	4937      	ldr	r1, [pc, #220]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008244:	4313      	orrs	r3, r2
 8008246:	654b      	str	r3, [r1, #84]	; 0x54
 8008248:	e001      	b.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824a:	7dfb      	ldrb	r3, [r7, #23]
 800824c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d008      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800825a:	4b31      	ldr	r3, [pc, #196]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800825c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008266:	492e      	ldr	r1, [pc, #184]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008268:	4313      	orrs	r3, r2
 800826a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d009      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008278:	4b29      	ldr	r3, [pc, #164]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008286:	4926      	ldr	r1, [pc, #152]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008288:	4313      	orrs	r3, r2
 800828a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008298:	4b21      	ldr	r3, [pc, #132]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800829a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082a4:	491e      	ldr	r1, [pc, #120]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00d      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082b6:	4b1a      	ldr	r3, [pc, #104]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	4a19      	ldr	r2, [pc, #100]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082c0:	6113      	str	r3, [r2, #16]
 80082c2:	4b17      	ldr	r3, [pc, #92]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082c4:	691a      	ldr	r2, [r3, #16]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80082cc:	4914      	ldr	r1, [pc, #80]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da08      	bge.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082da:	4b11      	ldr	r3, [pc, #68]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e6:	490e      	ldr	r1, [pc, #56]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d009      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082f8:	4b09      	ldr	r3, [pc, #36]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008306:	4906      	ldr	r1, [pc, #24]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008308:	4313      	orrs	r3, r2
 800830a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800830c:	7dbb      	ldrb	r3, [r7, #22]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	e000      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	58024400 	.word	0x58024400

08008324 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b090      	sub	sp, #64	; 0x40
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008332:	f040 8095 	bne.w	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008336:	4bae      	ldr	r3, [pc, #696]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833a:	f003 0307 	and.w	r3, r3, #7
 800833e:	633b      	str	r3, [r7, #48]	; 0x30
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	2b04      	cmp	r3, #4
 8008344:	f200 8088 	bhi.w	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008348:	a201      	add	r2, pc, #4	; (adr r2, 8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800834a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834e:	bf00      	nop
 8008350:	08008365 	.word	0x08008365
 8008354:	0800838d 	.word	0x0800838d
 8008358:	080083b5 	.word	0x080083b5
 800835c:	08008451 	.word	0x08008451
 8008360:	080083dd 	.word	0x080083dd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008364:	4ba2      	ldr	r3, [pc, #648]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008370:	d108      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008376:	4618      	mov	r0, r3
 8008378:	f000 ff64 	bl	8009244 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008380:	f000 bc95 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008388:	f000 bc91 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800838c:	4b98      	ldr	r3, [pc, #608]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008398:	d108      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800839a:	f107 0318 	add.w	r3, r7, #24
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fca8 	bl	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083a8:	f000 bc81 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083b0:	f000 bc7d 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083b4:	4b8e      	ldr	r3, [pc, #568]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083c0:	d108      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083c2:	f107 030c 	add.w	r3, r7, #12
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fde8 	bl	8008f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083d0:	f000 bc6d 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d8:	f000 bc69 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80083dc:	4b84      	ldr	r3, [pc, #528]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083e6:	4b82      	ldr	r3, [pc, #520]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0304 	and.w	r3, r3, #4
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	d10c      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80083f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d109      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083f8:	4b7d      	ldr	r3, [pc, #500]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	08db      	lsrs	r3, r3, #3
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	4a7c      	ldr	r2, [pc, #496]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008404:	fa22 f303 	lsr.w	r3, r2, r3
 8008408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800840a:	e01f      	b.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800840c:	4b78      	ldr	r3, [pc, #480]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008418:	d106      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800841a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008420:	d102      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008422:	4b75      	ldr	r3, [pc, #468]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008426:	e011      	b.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008428:	4b71      	ldr	r3, [pc, #452]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008434:	d106      	bne.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800843c:	d102      	bne.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800843e:	4b6f      	ldr	r3, [pc, #444]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008442:	e003      	b.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008448:	f000 bc31 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800844c:	f000 bc2f 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008450:	4b6b      	ldr	r3, [pc, #428]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008454:	f000 bc2b 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800845c:	f000 bc27 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008466:	f040 8095 	bne.w	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800846a:	4b61      	ldr	r3, [pc, #388]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800846c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800846e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008472:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847a:	d04d      	beq.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008482:	f200 8084 	bhi.w	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	2bc0      	cmp	r3, #192	; 0xc0
 800848a:	d07d      	beq.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	2bc0      	cmp	r3, #192	; 0xc0
 8008490:	d87d      	bhi.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	2b80      	cmp	r3, #128	; 0x80
 8008496:	d02d      	beq.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	2b80      	cmp	r3, #128	; 0x80
 800849c:	d877      	bhi.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80084a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a6:	2b40      	cmp	r3, #64	; 0x40
 80084a8:	d012      	beq.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80084aa:	e070      	b.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084ac:	4b50      	ldr	r3, [pc, #320]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084b8:	d107      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fec0 	bl	8009244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084c8:	e3f1      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ce:	e3ee      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084d0:	4b47      	ldr	r3, [pc, #284]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084dc:	d107      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084de:	f107 0318 	add.w	r3, r7, #24
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fc06 	bl	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084ec:	e3df      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084f2:	e3dc      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084f4:	4b3e      	ldr	r3, [pc, #248]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008500:	d107      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008502:	f107 030c 	add.w	r3, r7, #12
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fd48 	bl	8008f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008510:	e3cd      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008516:	e3ca      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008518:	4b35      	ldr	r3, [pc, #212]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800851a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800851c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008520:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008522:	4b33      	ldr	r3, [pc, #204]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	2b04      	cmp	r3, #4
 800852c:	d10c      	bne.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800852e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008530:	2b00      	cmp	r3, #0
 8008532:	d109      	bne.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008534:	4b2e      	ldr	r3, [pc, #184]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	08db      	lsrs	r3, r3, #3
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	4a2d      	ldr	r2, [pc, #180]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008540:	fa22 f303 	lsr.w	r3, r2, r3
 8008544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008546:	e01e      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008548:	4b29      	ldr	r3, [pc, #164]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008554:	d106      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800855c:	d102      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800855e:	4b26      	ldr	r3, [pc, #152]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008562:	e010      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008564:	4b22      	ldr	r3, [pc, #136]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800856c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008570:	d106      	bne.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008578:	d102      	bne.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800857a:	4b20      	ldr	r3, [pc, #128]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800857c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800857e:	e002      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008580:	2300      	movs	r3, #0
 8008582:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008584:	e393      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008586:	e392      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008588:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800858c:	e38f      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008592:	e38c      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800859a:	f040 80a7 	bne.w	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800859e:	4b14      	ldr	r3, [pc, #80]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80085a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80085a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085ae:	d05f      	beq.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085b6:	f200 8096 	bhi.w	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085c0:	f000 808e 	beq.w	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085ca:	f200 808c 	bhi.w	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085d4:	d03a      	beq.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085dc:	f200 8083 	bhi.w	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00e      	beq.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085ec:	d01c      	beq.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80085ee:	e07a      	b.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80085f0:	58024400 	.word	0x58024400
 80085f4:	03d09000 	.word	0x03d09000
 80085f8:	003d0900 	.word	0x003d0900
 80085fc:	02dc6c00 	.word	0x02dc6c00
 8008600:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008604:	4baa      	ldr	r3, [pc, #680]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800860c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008610:	d107      	bne.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fe14 	bl	8009244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008620:	e345      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008626:	e342      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008628:	4ba1      	ldr	r3, [pc, #644]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008634:	d107      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008636:	f107 0318 	add.w	r3, r7, #24
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fb5a 	bl	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008644:	e333      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800864a:	e330      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800864c:	4b98      	ldr	r3, [pc, #608]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008658:	d107      	bne.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800865a:	f107 030c 	add.w	r3, r7, #12
 800865e:	4618      	mov	r0, r3
 8008660:	f000 fc9c 	bl	8008f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008668:	e321      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800866e:	e31e      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008670:	4b8f      	ldr	r3, [pc, #572]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008678:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800867a:	4b8d      	ldr	r3, [pc, #564]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0304 	and.w	r3, r3, #4
 8008682:	2b04      	cmp	r3, #4
 8008684:	d10c      	bne.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008688:	2b00      	cmp	r3, #0
 800868a:	d109      	bne.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800868c:	4b88      	ldr	r3, [pc, #544]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	08db      	lsrs	r3, r3, #3
 8008692:	f003 0303 	and.w	r3, r3, #3
 8008696:	4a87      	ldr	r2, [pc, #540]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008698:	fa22 f303 	lsr.w	r3, r2, r3
 800869c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800869e:	e01e      	b.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086a0:	4b83      	ldr	r3, [pc, #524]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ac:	d106      	bne.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80086ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086b4:	d102      	bne.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80086b6:	4b80      	ldr	r3, [pc, #512]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80086b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086ba:	e010      	b.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086bc:	4b7c      	ldr	r3, [pc, #496]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086c8:	d106      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80086ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086d0:	d102      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80086d2:	4b7a      	ldr	r3, [pc, #488]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d6:	e002      	b.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80086dc:	e2e7      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086de:	e2e6      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80086e0:	4b77      	ldr	r3, [pc, #476]	; (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80086e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086e4:	e2e3      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80086e6:	2300      	movs	r3, #0
 80086e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086ea:	e2e0      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086f2:	f040 809c 	bne.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80086f6:	4b6e      	ldr	r3, [pc, #440]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80086f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80086fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008702:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008706:	d054      	beq.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800870e:	f200 808b 	bhi.w	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008714:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008718:	f000 8083 	beq.w	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008722:	f200 8081 	bhi.w	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800872c:	d02f      	beq.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008734:	d878      	bhi.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	2b00      	cmp	r3, #0
 800873a:	d004      	beq.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008742:	d012      	beq.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008744:	e070      	b.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008746:	4b5a      	ldr	r3, [pc, #360]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800874e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008752:	d107      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008758:	4618      	mov	r0, r3
 800875a:	f000 fd73 	bl	8009244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008762:	e2a4      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008764:	2300      	movs	r3, #0
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008768:	e2a1      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800876a:	4b51      	ldr	r3, [pc, #324]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008776:	d107      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008778:	f107 0318 	add.w	r3, r7, #24
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fab9 	bl	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008786:	e292      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800878c:	e28f      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800878e:	4b48      	ldr	r3, [pc, #288]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800879a:	d107      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800879c:	f107 030c 	add.w	r3, r7, #12
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fbfb 	bl	8008f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087aa:	e280      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087b0:	e27d      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80087b2:	4b3f      	ldr	r3, [pc, #252]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087bc:	4b3c      	ldr	r3, [pc, #240]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d10c      	bne.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80087c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d109      	bne.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087ce:	4b38      	ldr	r3, [pc, #224]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	08db      	lsrs	r3, r3, #3
 80087d4:	f003 0303 	and.w	r3, r3, #3
 80087d8:	4a36      	ldr	r2, [pc, #216]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80087da:	fa22 f303 	lsr.w	r3, r2, r3
 80087de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087e0:	e01e      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087e2:	4b33      	ldr	r3, [pc, #204]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ee:	d106      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80087f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087f6:	d102      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80087f8:	4b2f      	ldr	r3, [pc, #188]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80087fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087fc:	e010      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087fe:	4b2c      	ldr	r3, [pc, #176]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800880a:	d106      	bne.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800880c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008812:	d102      	bne.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008814:	4b29      	ldr	r3, [pc, #164]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008818:	e002      	b.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800881e:	e246      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008820:	e245      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008822:	4b27      	ldr	r3, [pc, #156]	; (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008826:	e242      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800882c:	e23f      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008834:	f040 80a8 	bne.w	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008838:	4b1d      	ldr	r3, [pc, #116]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800883a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008840:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008848:	d060      	beq.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008850:	f200 8097 	bhi.w	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008856:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800885a:	f000 808f 	beq.w	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008864:	f200 808d 	bhi.w	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800886e:	d03b      	beq.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008876:	f200 8084 	bhi.w	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800887a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d004      	beq.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008886:	d01d      	beq.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008888:	e07b      	b.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800888a:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008892:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008896:	d107      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800889c:	4618      	mov	r0, r3
 800889e:	f000 fcd1 	bl	8009244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088a6:	e202      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088ac:	e1ff      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088ae:	bf00      	nop
 80088b0:	58024400 	.word	0x58024400
 80088b4:	03d09000 	.word	0x03d09000
 80088b8:	003d0900 	.word	0x003d0900
 80088bc:	02dc6c00 	.word	0x02dc6c00
 80088c0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088c4:	4ba3      	ldr	r3, [pc, #652]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088d0:	d107      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088d2:	f107 0318 	add.w	r3, r7, #24
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fa0c 	bl	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088e0:	e1e5      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088e6:	e1e2      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088e8:	4b9a      	ldr	r3, [pc, #616]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088f4:	d107      	bne.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088f6:	f107 030c 	add.w	r3, r7, #12
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fb4e 	bl	8008f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008904:	e1d3      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800890a:	e1d0      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800890c:	4b91      	ldr	r3, [pc, #580]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800890e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008910:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008914:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008916:	4b8f      	ldr	r3, [pc, #572]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b04      	cmp	r3, #4
 8008920:	d10c      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	2b00      	cmp	r3, #0
 8008926:	d109      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008928:	4b8a      	ldr	r3, [pc, #552]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	08db      	lsrs	r3, r3, #3
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	4a89      	ldr	r2, [pc, #548]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008934:	fa22 f303 	lsr.w	r3, r2, r3
 8008938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800893a:	e01e      	b.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800893c:	4b85      	ldr	r3, [pc, #532]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008948:	d106      	bne.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008950:	d102      	bne.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008952:	4b82      	ldr	r3, [pc, #520]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008956:	e010      	b.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008958:	4b7e      	ldr	r3, [pc, #504]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008964:	d106      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800896c:	d102      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800896e:	4b7c      	ldr	r3, [pc, #496]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008970:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008972:	e002      	b.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008978:	e199      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800897a:	e198      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800897c:	4b79      	ldr	r3, [pc, #484]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008980:	e195      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008986:	e192      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800898e:	d173      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008990:	4b70      	ldr	r3, [pc, #448]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008998:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089a0:	d02f      	beq.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80089a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089a8:	d863      	bhi.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80089aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d004      	beq.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089b6:	d012      	beq.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80089b8:	e05b      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089ba:	4b66      	ldr	r3, [pc, #408]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089c6:	d107      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089c8:	f107 0318 	add.w	r3, r7, #24
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 f991 	bl	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089d6:	e16a      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089dc:	e167      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089de:	4b5d      	ldr	r3, [pc, #372]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089ea:	d107      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ec:	f107 030c 	add.w	r3, r7, #12
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 fad3 	bl	8008f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089fa:	e158      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a00:	e155      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a02:	4b54      	ldr	r3, [pc, #336]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a0a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a0c:	4b51      	ldr	r3, [pc, #324]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0304 	and.w	r3, r3, #4
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	d10c      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8008a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d109      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a1e:	4b4d      	ldr	r3, [pc, #308]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	08db      	lsrs	r3, r3, #3
 8008a24:	f003 0303 	and.w	r3, r3, #3
 8008a28:	4a4b      	ldr	r2, [pc, #300]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a30:	e01e      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a32:	4b48      	ldr	r3, [pc, #288]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a3e:	d106      	bne.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a46:	d102      	bne.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a48:	4b44      	ldr	r3, [pc, #272]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a4c:	e010      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a4e:	4b41      	ldr	r3, [pc, #260]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a5a:	d106      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a62:	d102      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a64:	4b3e      	ldr	r3, [pc, #248]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a68:	e002      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a6e:	e11e      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a70:	e11d      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a76:	e11a      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a7e:	d133      	bne.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008a80:	4b34      	ldr	r3, [pc, #208]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a88:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d004      	beq.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a96:	d012      	beq.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008a98:	e023      	b.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a9a:	4b2e      	ldr	r3, [pc, #184]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008aa6:	d107      	bne.n	8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 fbc9 	bl	8009244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ab6:	e0fa      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008abc:	e0f7      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008abe:	4b25      	ldr	r3, [pc, #148]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008aca:	d107      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008acc:	f107 0318 	add.w	r3, r7, #24
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 f90f 	bl	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ada:	e0e8      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ae0:	e0e5      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ae6:	e0e2      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008aee:	f040 808f 	bne.w	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008af2:	4b18      	ldr	r3, [pc, #96]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008afa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b02:	d075      	beq.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b0a:	d87e      	bhi.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b12:	d060      	beq.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b1a:	d876      	bhi.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b22:	d045      	beq.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b2a:	d86e      	bhi.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b32:	d02b      	beq.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b3a:	d866      	bhi.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d004      	beq.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b48:	d00e      	beq.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008b4a:	e05e      	b.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b4c:	f000 f8bc 	bl	8008cc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b50:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008b52:	e0ac      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b54:	58024400 	.word	0x58024400
 8008b58:	03d09000 	.word	0x03d09000
 8008b5c:	003d0900 	.word	0x003d0900
 8008b60:	02dc6c00 	.word	0x02dc6c00
 8008b64:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b68:	4b53      	ldr	r3, [pc, #332]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b74:	d107      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b76:	f107 0318 	add.w	r3, r7, #24
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 f8ba 	bl	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b84:	e093      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b8a:	e090      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b8c:	4b4a      	ldr	r3, [pc, #296]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b98:	d107      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b9a:	f107 030c 	add.w	r3, r7, #12
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 f9fc 	bl	8008f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ba8:	e081      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bae:	e07e      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bb0:	4b41      	ldr	r3, [pc, #260]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0304 	and.w	r3, r3, #4
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d109      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bbc:	4b3e      	ldr	r3, [pc, #248]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	08db      	lsrs	r3, r3, #3
 8008bc2:	f003 0303 	and.w	r3, r3, #3
 8008bc6:	4a3d      	ldr	r2, [pc, #244]	; (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bce:	e06e      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bd4:	e06b      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008bd6:	4b38      	ldr	r3, [pc, #224]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be2:	d102      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8008be4:	4b36      	ldr	r3, [pc, #216]	; (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008be8:	e061      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bee:	e05e      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bf0:	4b31      	ldr	r3, [pc, #196]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bfc:	d102      	bne.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8008bfe:	4b31      	ldr	r3, [pc, #196]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008c00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c02:	e054      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c08:	e051      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c0e:	e04e      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c16:	d148      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008c18:	4b27      	ldr	r3, [pc, #156]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c28:	d02a      	beq.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c30:	d838      	bhi.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d004      	beq.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c3e:	d00d      	beq.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008c40:	e030      	b.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c42:	4b1d      	ldr	r3, [pc, #116]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c4e:	d102      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8008c50:	4b1c      	ldr	r3, [pc, #112]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008c52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c54:	e02b      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c5a:	e028      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c5c:	4b16      	ldr	r3, [pc, #88]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c68:	d107      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fae8 	bl	8009244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c78:	e019      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c7e:	e016      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c80:	4b0d      	ldr	r3, [pc, #52]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c8c:	d107      	bne.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c8e:	f107 0318 	add.w	r3, r7, #24
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 f82e 	bl	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c9c:	e007      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca2:	e004      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca8:	e001      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3740      	adds	r7, #64	; 0x40
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	58024400 	.word	0x58024400
 8008cbc:	03d09000 	.word	0x03d09000
 8008cc0:	003d0900 	.word	0x003d0900
 8008cc4:	02dc6c00 	.word	0x02dc6c00

08008cc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008ccc:	f7fe fb8e 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	4b06      	ldr	r3, [pc, #24]	; (8008cec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	091b      	lsrs	r3, r3, #4
 8008cd8:	f003 0307 	and.w	r3, r3, #7
 8008cdc:	4904      	ldr	r1, [pc, #16]	; (8008cf0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008cde:	5ccb      	ldrb	r3, [r1, r3]
 8008ce0:	f003 031f 	and.w	r3, r3, #31
 8008ce4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	58024400 	.word	0x58024400
 8008cf0:	0800c958 	.word	0x0800c958

08008cf4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b089      	sub	sp, #36	; 0x24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cfc:	4ba1      	ldr	r3, [pc, #644]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d00:	f003 0303 	and.w	r3, r3, #3
 8008d04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008d06:	4b9f      	ldr	r3, [pc, #636]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0a:	0b1b      	lsrs	r3, r3, #12
 8008d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d12:	4b9c      	ldr	r3, [pc, #624]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	091b      	lsrs	r3, r3, #4
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008d1e:	4b99      	ldr	r3, [pc, #612]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d22:	08db      	lsrs	r3, r3, #3
 8008d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	fb02 f303 	mul.w	r3, r2, r3
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 8111 	beq.w	8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	f000 8083 	beq.w	8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	f200 80a1 	bhi.w	8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d003      	beq.n	8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d056      	beq.n	8008e0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d5e:	e099      	b.n	8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d60:	4b88      	ldr	r3, [pc, #544]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0320 	and.w	r3, r3, #32
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d02d      	beq.n	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d6c:	4b85      	ldr	r3, [pc, #532]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	08db      	lsrs	r3, r3, #3
 8008d72:	f003 0303 	and.w	r3, r3, #3
 8008d76:	4a84      	ldr	r2, [pc, #528]	; (8008f88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d78:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	ee07 3a90 	vmov	s15, r3
 8008d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	ee07 3a90 	vmov	s15, r3
 8008d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d96:	4b7b      	ldr	r3, [pc, #492]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008daa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008dc6:	e087      	b.n	8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dda:	4b6a      	ldr	r3, [pc, #424]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e0a:	e065      	b.n	8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e1e:	4b59      	ldr	r3, [pc, #356]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e4e:	e043      	b.n	8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e62:	4b48      	ldr	r3, [pc, #288]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e92:	e021      	b.n	8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea6:	4b37      	ldr	r3, [pc, #220]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eae:	ee07 3a90 	vmov	s15, r3
 8008eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ed6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008ed8:	4b2a      	ldr	r3, [pc, #168]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	0a5b      	lsrs	r3, r3, #9
 8008ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008efe:	ee17 2a90 	vmov	r2, s15
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008f06:	4b1f      	ldr	r3, [pc, #124]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	0c1b      	lsrs	r3, r3, #16
 8008f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f10:	ee07 3a90 	vmov	s15, r3
 8008f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f2c:	ee17 2a90 	vmov	r2, s15
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008f34:	4b13      	ldr	r3, [pc, #76]	; (8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	0e1b      	lsrs	r3, r3, #24
 8008f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f5a:	ee17 2a90 	vmov	r2, s15
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f62:	e008      	b.n	8008f76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	609a      	str	r2, [r3, #8]
}
 8008f76:	bf00      	nop
 8008f78:	3724      	adds	r7, #36	; 0x24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	58024400 	.word	0x58024400
 8008f88:	03d09000 	.word	0x03d09000
 8008f8c:	46000000 	.word	0x46000000
 8008f90:	4c742400 	.word	0x4c742400
 8008f94:	4a742400 	.word	0x4a742400
 8008f98:	4c371b00 	.word	0x4c371b00

08008f9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b089      	sub	sp, #36	; 0x24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fa4:	4ba1      	ldr	r3, [pc, #644]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa8:	f003 0303 	and.w	r3, r3, #3
 8008fac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008fae:	4b9f      	ldr	r3, [pc, #636]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	0d1b      	lsrs	r3, r3, #20
 8008fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008fba:	4b9c      	ldr	r3, [pc, #624]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbe:	0a1b      	lsrs	r3, r3, #8
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008fc6:	4b99      	ldr	r3, [pc, #612]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fca:	08db      	lsrs	r3, r3, #3
 8008fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	fb02 f303 	mul.w	r3, r2, r3
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 8111 	beq.w	800920c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	f000 8083 	beq.w	80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	f200 80a1 	bhi.w	800913c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d056      	beq.n	80090b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009006:	e099      	b.n	800913c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009008:	4b88      	ldr	r3, [pc, #544]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0320 	and.w	r3, r3, #32
 8009010:	2b00      	cmp	r3, #0
 8009012:	d02d      	beq.n	8009070 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009014:	4b85      	ldr	r3, [pc, #532]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	08db      	lsrs	r3, r3, #3
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	4a84      	ldr	r2, [pc, #528]	; (8009230 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009020:	fa22 f303 	lsr.w	r3, r2, r3
 8009024:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	ee07 3a90 	vmov	s15, r3
 800902c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	ee07 3a90 	vmov	s15, r3
 8009036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800903a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903e:	4b7b      	ldr	r3, [pc, #492]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009052:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800905a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800905e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800906a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800906e:	e087      	b.n	8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009238 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800907e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009082:	4b6a      	ldr	r3, [pc, #424]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009092:	ed97 6a03 	vldr	s12, [r7, #12]
 8009096:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800909a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090b2:	e065      	b.n	8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c6:	4b59      	ldr	r3, [pc, #356]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090f6:	e043      	b.n	8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009102:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009240 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910a:	4b48      	ldr	r3, [pc, #288]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911a:	ed97 6a03 	vldr	s12, [r7, #12]
 800911e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800912e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800913a:	e021      	b.n	8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009146:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800914a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914e:	4b37      	ldr	r3, [pc, #220]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009162:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800917e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009180:	4b2a      	ldr	r3, [pc, #168]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009184:	0a5b      	lsrs	r3, r3, #9
 8009186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009196:	ee37 7a87 	vadd.f32	s14, s15, s14
 800919a:	edd7 6a07 	vldr	s13, [r7, #28]
 800919e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091a6:	ee17 2a90 	vmov	r2, s15
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80091ae:	4b1f      	ldr	r3, [pc, #124]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	0c1b      	lsrs	r3, r3, #16
 80091b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b8:	ee07 3a90 	vmov	s15, r3
 80091bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80091cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d4:	ee17 2a90 	vmov	r2, s15
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80091dc:	4b13      	ldr	r3, [pc, #76]	; (800922c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e0:	0e1b      	lsrs	r3, r3, #24
 80091e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80091fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009202:	ee17 2a90 	vmov	r2, s15
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800920a:	e008      	b.n	800921e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	609a      	str	r2, [r3, #8]
}
 800921e:	bf00      	nop
 8009220:	3724      	adds	r7, #36	; 0x24
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	58024400 	.word	0x58024400
 8009230:	03d09000 	.word	0x03d09000
 8009234:	46000000 	.word	0x46000000
 8009238:	4c742400 	.word	0x4c742400
 800923c:	4a742400 	.word	0x4a742400
 8009240:	4c371b00 	.word	0x4c371b00

08009244 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009244:	b480      	push	{r7}
 8009246:	b089      	sub	sp, #36	; 0x24
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800924c:	4ba0      	ldr	r3, [pc, #640]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	f003 0303 	and.w	r3, r3, #3
 8009254:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009256:	4b9e      	ldr	r3, [pc, #632]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925a:	091b      	lsrs	r3, r3, #4
 800925c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009260:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009262:	4b9b      	ldr	r3, [pc, #620]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800926c:	4b98      	ldr	r3, [pc, #608]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800926e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009270:	08db      	lsrs	r3, r3, #3
 8009272:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	fb02 f303 	mul.w	r3, r2, r3
 800927c:	ee07 3a90 	vmov	s15, r3
 8009280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009284:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 8111 	beq.w	80094b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	2b02      	cmp	r3, #2
 8009294:	f000 8083 	beq.w	800939e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	2b02      	cmp	r3, #2
 800929c:	f200 80a1 	bhi.w	80093e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d056      	beq.n	800935a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80092ac:	e099      	b.n	80093e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ae:	4b88      	ldr	r3, [pc, #544]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0320 	and.w	r3, r3, #32
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d02d      	beq.n	8009316 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092ba:	4b85      	ldr	r3, [pc, #532]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	08db      	lsrs	r3, r3, #3
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	4a83      	ldr	r2, [pc, #524]	; (80094d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80092c6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ca:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	ee07 3a90 	vmov	s15, r3
 80092d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	ee07 3a90 	vmov	s15, r3
 80092dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e4:	4b7a      	ldr	r3, [pc, #488]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ec:	ee07 3a90 	vmov	s15, r3
 80092f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80092f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80094d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800930c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009310:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009314:	e087      	b.n	8009426 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	ee07 3a90 	vmov	s15, r3
 800931c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009320:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80094dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009328:	4b69      	ldr	r3, [pc, #420]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800932a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009330:	ee07 3a90 	vmov	s15, r3
 8009334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009338:	ed97 6a03 	vldr	s12, [r7, #12]
 800933c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80094d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009340:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009348:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800934c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009354:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009358:	e065      	b.n	8009426 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	ee07 3a90 	vmov	s15, r3
 8009360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009364:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80094e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800936c:	4b58      	ldr	r3, [pc, #352]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800936e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009374:	ee07 3a90 	vmov	s15, r3
 8009378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800937c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009380:	eddf 5a55 	vldr	s11, [pc, #340]	; 80094d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009384:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800938c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009390:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009398:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800939c:	e043      	b.n	8009426 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80094e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80093ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b0:	4b47      	ldr	r3, [pc, #284]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b8:	ee07 3a90 	vmov	s15, r3
 80093bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80094d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093e0:	e021      	b.n	8009426 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	ee07 3a90 	vmov	s15, r3
 80093e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80094dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80093f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f4:	4b36      	ldr	r3, [pc, #216]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009404:	ed97 6a03 	vldr	s12, [r7, #12]
 8009408:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800940c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009420:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009424:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009426:	4b2a      	ldr	r3, [pc, #168]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942a:	0a5b      	lsrs	r3, r3, #9
 800942c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009430:	ee07 3a90 	vmov	s15, r3
 8009434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800943c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009440:	edd7 6a07 	vldr	s13, [r7, #28]
 8009444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800944c:	ee17 2a90 	vmov	r2, s15
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009454:	4b1e      	ldr	r3, [pc, #120]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009458:	0c1b      	lsrs	r3, r3, #16
 800945a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800945e:	ee07 3a90 	vmov	s15, r3
 8009462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800946a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800946e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800947a:	ee17 2a90 	vmov	r2, s15
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009482:	4b13      	ldr	r3, [pc, #76]	; (80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009486:	0e1b      	lsrs	r3, r3, #24
 8009488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800948c:	ee07 3a90 	vmov	s15, r3
 8009490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009498:	ee37 7a87 	vadd.f32	s14, s15, s14
 800949c:	edd7 6a07 	vldr	s13, [r7, #28]
 80094a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a8:	ee17 2a90 	vmov	r2, s15
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80094b0:	e008      	b.n	80094c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	609a      	str	r2, [r3, #8]
}
 80094c4:	bf00      	nop
 80094c6:	3724      	adds	r7, #36	; 0x24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	58024400 	.word	0x58024400
 80094d4:	03d09000 	.word	0x03d09000
 80094d8:	46000000 	.word	0x46000000
 80094dc:	4c742400 	.word	0x4c742400
 80094e0:	4a742400 	.word	0x4a742400
 80094e4:	4c371b00 	.word	0x4c371b00

080094e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094f6:	4b53      	ldr	r3, [pc, #332]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80094f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fa:	f003 0303 	and.w	r3, r3, #3
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d101      	bne.n	8009506 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e099      	b.n	800963a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009506:	4b4f      	ldr	r3, [pc, #316]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a4e      	ldr	r2, [pc, #312]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 800950c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009512:	f7f9 fad7 	bl	8002ac4 <HAL_GetTick>
 8009516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009518:	e008      	b.n	800952c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800951a:	f7f9 fad3 	bl	8002ac4 <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	2b02      	cmp	r3, #2
 8009526:	d901      	bls.n	800952c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e086      	b.n	800963a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800952c:	4b45      	ldr	r3, [pc, #276]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1f0      	bne.n	800951a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009538:	4b42      	ldr	r3, [pc, #264]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 800953a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	031b      	lsls	r3, r3, #12
 8009546:	493f      	ldr	r1, [pc, #252]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 8009548:	4313      	orrs	r3, r2
 800954a:	628b      	str	r3, [r1, #40]	; 0x28
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	3b01      	subs	r3, #1
 8009552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	3b01      	subs	r3, #1
 800955c:	025b      	lsls	r3, r3, #9
 800955e:	b29b      	uxth	r3, r3
 8009560:	431a      	orrs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	3b01      	subs	r3, #1
 8009568:	041b      	lsls	r3, r3, #16
 800956a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800956e:	431a      	orrs	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	3b01      	subs	r3, #1
 8009576:	061b      	lsls	r3, r3, #24
 8009578:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800957c:	4931      	ldr	r1, [pc, #196]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 800957e:	4313      	orrs	r3, r2
 8009580:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009582:	4b30      	ldr	r3, [pc, #192]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 8009584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009586:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	492d      	ldr	r1, [pc, #180]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 8009590:	4313      	orrs	r3, r2
 8009592:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009594:	4b2b      	ldr	r3, [pc, #172]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	f023 0220 	bic.w	r2, r3, #32
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	4928      	ldr	r1, [pc, #160]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095a6:	4b27      	ldr	r3, [pc, #156]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80095a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095aa:	4a26      	ldr	r2, [pc, #152]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80095ac:	f023 0310 	bic.w	r3, r3, #16
 80095b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095b2:	4b24      	ldr	r3, [pc, #144]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80095b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095b6:	4b24      	ldr	r3, [pc, #144]	; (8009648 <RCCEx_PLL2_Config+0x160>)
 80095b8:	4013      	ands	r3, r2
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	69d2      	ldr	r2, [r2, #28]
 80095be:	00d2      	lsls	r2, r2, #3
 80095c0:	4920      	ldr	r1, [pc, #128]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80095c6:	4b1f      	ldr	r3, [pc, #124]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80095c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ca:	4a1e      	ldr	r2, [pc, #120]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80095cc:	f043 0310 	orr.w	r3, r3, #16
 80095d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d106      	bne.n	80095e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80095d8:	4b1a      	ldr	r3, [pc, #104]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	4a19      	ldr	r2, [pc, #100]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80095de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095e4:	e00f      	b.n	8009606 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d106      	bne.n	80095fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80095ec:	4b15      	ldr	r3, [pc, #84]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80095ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f0:	4a14      	ldr	r2, [pc, #80]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80095f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095f8:	e005      	b.n	8009606 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80095fa:	4b12      	ldr	r3, [pc, #72]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 80095fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fe:	4a11      	ldr	r2, [pc, #68]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 8009600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009604:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009606:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a0e      	ldr	r2, [pc, #56]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 800960c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009612:	f7f9 fa57 	bl	8002ac4 <HAL_GetTick>
 8009616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009618:	e008      	b.n	800962c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800961a:	f7f9 fa53 	bl	8002ac4 <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b02      	cmp	r3, #2
 8009626:	d901      	bls.n	800962c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e006      	b.n	800963a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800962c:	4b05      	ldr	r3, [pc, #20]	; (8009644 <RCCEx_PLL2_Config+0x15c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d0f0      	beq.n	800961a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009638:	7bfb      	ldrb	r3, [r7, #15]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	58024400 	.word	0x58024400
 8009648:	ffff0007 	.word	0xffff0007

0800964c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800965a:	4b53      	ldr	r3, [pc, #332]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 800965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965e:	f003 0303 	and.w	r3, r3, #3
 8009662:	2b03      	cmp	r3, #3
 8009664:	d101      	bne.n	800966a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e099      	b.n	800979e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800966a:	4b4f      	ldr	r3, [pc, #316]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a4e      	ldr	r2, [pc, #312]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009676:	f7f9 fa25 	bl	8002ac4 <HAL_GetTick>
 800967a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800967c:	e008      	b.n	8009690 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800967e:	f7f9 fa21 	bl	8002ac4 <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	2b02      	cmp	r3, #2
 800968a:	d901      	bls.n	8009690 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	e086      	b.n	800979e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009690:	4b45      	ldr	r3, [pc, #276]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1f0      	bne.n	800967e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800969c:	4b42      	ldr	r3, [pc, #264]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 800969e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	051b      	lsls	r3, r3, #20
 80096aa:	493f      	ldr	r1, [pc, #252]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	628b      	str	r3, [r1, #40]	; 0x28
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	3b01      	subs	r3, #1
 80096b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	3b01      	subs	r3, #1
 80096c0:	025b      	lsls	r3, r3, #9
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	431a      	orrs	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	041b      	lsls	r3, r3, #16
 80096ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80096d2:	431a      	orrs	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	3b01      	subs	r3, #1
 80096da:	061b      	lsls	r3, r3, #24
 80096dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80096e0:	4931      	ldr	r1, [pc, #196]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80096e6:	4b30      	ldr	r3, [pc, #192]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 80096e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	492d      	ldr	r1, [pc, #180]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80096f8:	4b2b      	ldr	r3, [pc, #172]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 80096fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	4928      	ldr	r1, [pc, #160]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009706:	4313      	orrs	r3, r2
 8009708:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800970a:	4b27      	ldr	r3, [pc, #156]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 800970c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970e:	4a26      	ldr	r2, [pc, #152]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009714:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009716:	4b24      	ldr	r3, [pc, #144]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800971a:	4b24      	ldr	r3, [pc, #144]	; (80097ac <RCCEx_PLL3_Config+0x160>)
 800971c:	4013      	ands	r3, r2
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	69d2      	ldr	r2, [r2, #28]
 8009722:	00d2      	lsls	r2, r2, #3
 8009724:	4920      	ldr	r1, [pc, #128]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009726:	4313      	orrs	r3, r2
 8009728:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800972a:	4b1f      	ldr	r3, [pc, #124]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 800972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972e:	4a1e      	ldr	r2, [pc, #120]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d106      	bne.n	800974a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800973c:	4b1a      	ldr	r3, [pc, #104]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 800973e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009740:	4a19      	ldr	r2, [pc, #100]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009742:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009746:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009748:	e00f      	b.n	800976a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d106      	bne.n	800975e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009750:	4b15      	ldr	r3, [pc, #84]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009754:	4a14      	ldr	r2, [pc, #80]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009756:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800975a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800975c:	e005      	b.n	800976a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800975e:	4b12      	ldr	r3, [pc, #72]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009762:	4a11      	ldr	r2, [pc, #68]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009768:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800976a:	4b0f      	ldr	r3, [pc, #60]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a0e      	ldr	r2, [pc, #56]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009776:	f7f9 f9a5 	bl	8002ac4 <HAL_GetTick>
 800977a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800977c:	e008      	b.n	8009790 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800977e:	f7f9 f9a1 	bl	8002ac4 <HAL_GetTick>
 8009782:	4602      	mov	r2, r0
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	2b02      	cmp	r3, #2
 800978a:	d901      	bls.n	8009790 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e006      	b.n	800979e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009790:	4b05      	ldr	r3, [pc, #20]	; (80097a8 <RCCEx_PLL3_Config+0x15c>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0f0      	beq.n	800977e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	58024400 	.word	0x58024400
 80097ac:	ffff0007 	.word	0xffff0007

080097b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80097b8:	2300      	movs	r3, #0
 80097ba:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e0eb      	b.n	800999e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a75      	ldr	r2, [pc, #468]	; (80099a8 <HAL_SPI_Init+0x1f8>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d00f      	beq.n	80097f6 <HAL_SPI_Init+0x46>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a74      	ldr	r2, [pc, #464]	; (80099ac <HAL_SPI_Init+0x1fc>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00a      	beq.n	80097f6 <HAL_SPI_Init+0x46>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a72      	ldr	r2, [pc, #456]	; (80099b0 <HAL_SPI_Init+0x200>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d005      	beq.n	80097f6 <HAL_SPI_Init+0x46>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	2b0f      	cmp	r3, #15
 80097f0:	d901      	bls.n	80097f6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e0d3      	b.n	800999e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f8dc 	bl	80099b4 <SPI_GetPacketSize>
 80097fc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a69      	ldr	r2, [pc, #420]	; (80099a8 <HAL_SPI_Init+0x1f8>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d00c      	beq.n	8009822 <HAL_SPI_Init+0x72>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a67      	ldr	r2, [pc, #412]	; (80099ac <HAL_SPI_Init+0x1fc>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d007      	beq.n	8009822 <HAL_SPI_Init+0x72>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a66      	ldr	r2, [pc, #408]	; (80099b0 <HAL_SPI_Init+0x200>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d002      	beq.n	8009822 <HAL_SPI_Init+0x72>
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2b08      	cmp	r3, #8
 8009820:	d811      	bhi.n	8009846 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009826:	4a60      	ldr	r2, [pc, #384]	; (80099a8 <HAL_SPI_Init+0x1f8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d009      	beq.n	8009840 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a5e      	ldr	r2, [pc, #376]	; (80099ac <HAL_SPI_Init+0x1fc>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d004      	beq.n	8009840 <HAL_SPI_Init+0x90>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a5d      	ldr	r2, [pc, #372]	; (80099b0 <HAL_SPI_Init+0x200>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d104      	bne.n	800984a <HAL_SPI_Init+0x9a>
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2b10      	cmp	r3, #16
 8009844:	d901      	bls.n	800984a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e0a9      	b.n	800999e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7f8 fb0a 	bl	8001e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2202      	movs	r2, #2
 8009868:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0201 	bic.w	r2, r2, #1
 800987a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009884:	d119      	bne.n	80098ba <HAL_SPI_Init+0x10a>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800988e:	d103      	bne.n	8009898 <HAL_SPI_Init+0xe8>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009894:	2b00      	cmp	r3, #0
 8009896:	d008      	beq.n	80098aa <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10c      	bne.n	80098ba <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098a8:	d107      	bne.n	80098ba <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	69da      	ldr	r2, [r3, #28]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c2:	431a      	orrs	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	431a      	orrs	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098cc:	ea42 0103 	orr.w	r1, r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	431a      	orrs	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ea:	431a      	orrs	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	431a      	orrs	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	431a      	orrs	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	431a      	orrs	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	431a      	orrs	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	431a      	orrs	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800990e:	431a      	orrs	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	431a      	orrs	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800991a:	ea42 0103 	orr.w	r1, r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d113      	bne.n	800995a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009944:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009958:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f022 0201 	bic.w	r2, r2, #1
 8009968:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00a      	beq.n	800998c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	40013000 	.word	0x40013000
 80099ac:	40003800 	.word	0x40003800
 80099b0:	40003c00 	.word	0x40003c00

080099b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c0:	095b      	lsrs	r3, r3, #5
 80099c2:	3301      	adds	r3, #1
 80099c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	3301      	adds	r3, #1
 80099cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	3307      	adds	r3, #7
 80099d2:	08db      	lsrs	r3, r3, #3
 80099d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	fb02 f303 	mul.w	r3, r2, r3
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e049      	b.n	8009a90 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d106      	bne.n	8009a16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7f8 fbd5 	bl	80021c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2202      	movs	r2, #2
 8009a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3304      	adds	r3, #4
 8009a26:	4619      	mov	r1, r3
 8009a28:	4610      	mov	r0, r2
 8009a2a:	f000 ff2f 	bl	800a88c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d001      	beq.n	8009ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e04f      	b.n	8009b50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68da      	ldr	r2, [r3, #12]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a23      	ldr	r2, [pc, #140]	; (8009b5c <HAL_TIM_Base_Start_IT+0xc4>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d01d      	beq.n	8009b0e <HAL_TIM_Base_Start_IT+0x76>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ada:	d018      	beq.n	8009b0e <HAL_TIM_Base_Start_IT+0x76>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a1f      	ldr	r2, [pc, #124]	; (8009b60 <HAL_TIM_Base_Start_IT+0xc8>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d013      	beq.n	8009b0e <HAL_TIM_Base_Start_IT+0x76>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a1e      	ldr	r2, [pc, #120]	; (8009b64 <HAL_TIM_Base_Start_IT+0xcc>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d00e      	beq.n	8009b0e <HAL_TIM_Base_Start_IT+0x76>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a1c      	ldr	r2, [pc, #112]	; (8009b68 <HAL_TIM_Base_Start_IT+0xd0>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d009      	beq.n	8009b0e <HAL_TIM_Base_Start_IT+0x76>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a1b      	ldr	r2, [pc, #108]	; (8009b6c <HAL_TIM_Base_Start_IT+0xd4>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d004      	beq.n	8009b0e <HAL_TIM_Base_Start_IT+0x76>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a19      	ldr	r2, [pc, #100]	; (8009b70 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d115      	bne.n	8009b3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	689a      	ldr	r2, [r3, #8]
 8009b14:	4b17      	ldr	r3, [pc, #92]	; (8009b74 <HAL_TIM_Base_Start_IT+0xdc>)
 8009b16:	4013      	ands	r3, r2
 8009b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b06      	cmp	r3, #6
 8009b1e:	d015      	beq.n	8009b4c <HAL_TIM_Base_Start_IT+0xb4>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b26:	d011      	beq.n	8009b4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f042 0201 	orr.w	r2, r2, #1
 8009b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b38:	e008      	b.n	8009b4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f042 0201 	orr.w	r2, r2, #1
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	e000      	b.n	8009b4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	40010000 	.word	0x40010000
 8009b60:	40000400 	.word	0x40000400
 8009b64:	40000800 	.word	0x40000800
 8009b68:	40000c00 	.word	0x40000c00
 8009b6c:	40010400 	.word	0x40010400
 8009b70:	40001800 	.word	0x40001800
 8009b74:	00010007 	.word	0x00010007

08009b78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e049      	b.n	8009c1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d106      	bne.n	8009ba4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f841 	bl	8009c26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	f000 fe68 	bl	800a88c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b083      	sub	sp, #12
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009c2e:	bf00      	nop
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
	...

08009c3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d109      	bne.n	8009c60 <HAL_TIM_PWM_Start+0x24>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	bf14      	ite	ne
 8009c58:	2301      	movne	r3, #1
 8009c5a:	2300      	moveq	r3, #0
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	e03c      	b.n	8009cda <HAL_TIM_PWM_Start+0x9e>
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b04      	cmp	r3, #4
 8009c64:	d109      	bne.n	8009c7a <HAL_TIM_PWM_Start+0x3e>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	bf14      	ite	ne
 8009c72:	2301      	movne	r3, #1
 8009c74:	2300      	moveq	r3, #0
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	e02f      	b.n	8009cda <HAL_TIM_PWM_Start+0x9e>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2b08      	cmp	r3, #8
 8009c7e:	d109      	bne.n	8009c94 <HAL_TIM_PWM_Start+0x58>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	bf14      	ite	ne
 8009c8c:	2301      	movne	r3, #1
 8009c8e:	2300      	moveq	r3, #0
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	e022      	b.n	8009cda <HAL_TIM_PWM_Start+0x9e>
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b0c      	cmp	r3, #12
 8009c98:	d109      	bne.n	8009cae <HAL_TIM_PWM_Start+0x72>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	bf14      	ite	ne
 8009ca6:	2301      	movne	r3, #1
 8009ca8:	2300      	moveq	r3, #0
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	e015      	b.n	8009cda <HAL_TIM_PWM_Start+0x9e>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b10      	cmp	r3, #16
 8009cb2:	d109      	bne.n	8009cc8 <HAL_TIM_PWM_Start+0x8c>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	bf14      	ite	ne
 8009cc0:	2301      	movne	r3, #1
 8009cc2:	2300      	moveq	r3, #0
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	e008      	b.n	8009cda <HAL_TIM_PWM_Start+0x9e>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	bf14      	ite	ne
 8009cd4:	2301      	movne	r3, #1
 8009cd6:	2300      	moveq	r3, #0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e09c      	b.n	8009e1c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d104      	bne.n	8009cf2 <HAL_TIM_PWM_Start+0xb6>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2202      	movs	r2, #2
 8009cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cf0:	e023      	b.n	8009d3a <HAL_TIM_PWM_Start+0xfe>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d104      	bne.n	8009d02 <HAL_TIM_PWM_Start+0xc6>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d00:	e01b      	b.n	8009d3a <HAL_TIM_PWM_Start+0xfe>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d104      	bne.n	8009d12 <HAL_TIM_PWM_Start+0xd6>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d10:	e013      	b.n	8009d3a <HAL_TIM_PWM_Start+0xfe>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b0c      	cmp	r3, #12
 8009d16:	d104      	bne.n	8009d22 <HAL_TIM_PWM_Start+0xe6>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d20:	e00b      	b.n	8009d3a <HAL_TIM_PWM_Start+0xfe>
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b10      	cmp	r3, #16
 8009d26:	d104      	bne.n	8009d32 <HAL_TIM_PWM_Start+0xf6>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d30:	e003      	b.n	8009d3a <HAL_TIM_PWM_Start+0xfe>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2202      	movs	r2, #2
 8009d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f001 f9a8 	bl	800b098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a35      	ldr	r2, [pc, #212]	; (8009e24 <HAL_TIM_PWM_Start+0x1e8>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d013      	beq.n	8009d7a <HAL_TIM_PWM_Start+0x13e>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a34      	ldr	r2, [pc, #208]	; (8009e28 <HAL_TIM_PWM_Start+0x1ec>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d00e      	beq.n	8009d7a <HAL_TIM_PWM_Start+0x13e>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a32      	ldr	r2, [pc, #200]	; (8009e2c <HAL_TIM_PWM_Start+0x1f0>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d009      	beq.n	8009d7a <HAL_TIM_PWM_Start+0x13e>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a31      	ldr	r2, [pc, #196]	; (8009e30 <HAL_TIM_PWM_Start+0x1f4>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d004      	beq.n	8009d7a <HAL_TIM_PWM_Start+0x13e>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a2f      	ldr	r2, [pc, #188]	; (8009e34 <HAL_TIM_PWM_Start+0x1f8>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d101      	bne.n	8009d7e <HAL_TIM_PWM_Start+0x142>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e000      	b.n	8009d80 <HAL_TIM_PWM_Start+0x144>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d007      	beq.n	8009d94 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a22      	ldr	r2, [pc, #136]	; (8009e24 <HAL_TIM_PWM_Start+0x1e8>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d01d      	beq.n	8009dda <HAL_TIM_PWM_Start+0x19e>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da6:	d018      	beq.n	8009dda <HAL_TIM_PWM_Start+0x19e>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a22      	ldr	r2, [pc, #136]	; (8009e38 <HAL_TIM_PWM_Start+0x1fc>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d013      	beq.n	8009dda <HAL_TIM_PWM_Start+0x19e>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a21      	ldr	r2, [pc, #132]	; (8009e3c <HAL_TIM_PWM_Start+0x200>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d00e      	beq.n	8009dda <HAL_TIM_PWM_Start+0x19e>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a1f      	ldr	r2, [pc, #124]	; (8009e40 <HAL_TIM_PWM_Start+0x204>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d009      	beq.n	8009dda <HAL_TIM_PWM_Start+0x19e>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a17      	ldr	r2, [pc, #92]	; (8009e28 <HAL_TIM_PWM_Start+0x1ec>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d004      	beq.n	8009dda <HAL_TIM_PWM_Start+0x19e>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a1b      	ldr	r2, [pc, #108]	; (8009e44 <HAL_TIM_PWM_Start+0x208>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d115      	bne.n	8009e06 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	4b19      	ldr	r3, [pc, #100]	; (8009e48 <HAL_TIM_PWM_Start+0x20c>)
 8009de2:	4013      	ands	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b06      	cmp	r3, #6
 8009dea:	d015      	beq.n	8009e18 <HAL_TIM_PWM_Start+0x1dc>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df2:	d011      	beq.n	8009e18 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f042 0201 	orr.w	r2, r2, #1
 8009e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e04:	e008      	b.n	8009e18 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f042 0201 	orr.w	r2, r2, #1
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	e000      	b.n	8009e1a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	40010000 	.word	0x40010000
 8009e28:	40010400 	.word	0x40010400
 8009e2c:	40014000 	.word	0x40014000
 8009e30:	40014400 	.word	0x40014400
 8009e34:	40014800 	.word	0x40014800
 8009e38:	40000400 	.word	0x40000400
 8009e3c:	40000800 	.word	0x40000800
 8009e40:	40000c00 	.word	0x40000c00
 8009e44:	40001800 	.word	0x40001800
 8009e48:	00010007 	.word	0x00010007

08009e4c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f001 f91a 	bl	800b098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a3e      	ldr	r2, [pc, #248]	; (8009f64 <HAL_TIM_PWM_Stop+0x118>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d013      	beq.n	8009e96 <HAL_TIM_PWM_Stop+0x4a>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a3d      	ldr	r2, [pc, #244]	; (8009f68 <HAL_TIM_PWM_Stop+0x11c>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d00e      	beq.n	8009e96 <HAL_TIM_PWM_Stop+0x4a>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a3b      	ldr	r2, [pc, #236]	; (8009f6c <HAL_TIM_PWM_Stop+0x120>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d009      	beq.n	8009e96 <HAL_TIM_PWM_Stop+0x4a>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a3a      	ldr	r2, [pc, #232]	; (8009f70 <HAL_TIM_PWM_Stop+0x124>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d004      	beq.n	8009e96 <HAL_TIM_PWM_Stop+0x4a>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a38      	ldr	r2, [pc, #224]	; (8009f74 <HAL_TIM_PWM_Stop+0x128>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d101      	bne.n	8009e9a <HAL_TIM_PWM_Stop+0x4e>
 8009e96:	2301      	movs	r3, #1
 8009e98:	e000      	b.n	8009e9c <HAL_TIM_PWM_Stop+0x50>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d017      	beq.n	8009ed0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6a1a      	ldr	r2, [r3, #32]
 8009ea6:	f241 1311 	movw	r3, #4369	; 0x1111
 8009eaa:	4013      	ands	r3, r2
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10f      	bne.n	8009ed0 <HAL_TIM_PWM_Stop+0x84>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6a1a      	ldr	r2, [r3, #32]
 8009eb6:	f240 4344 	movw	r3, #1092	; 0x444
 8009eba:	4013      	ands	r3, r2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d107      	bne.n	8009ed0 <HAL_TIM_PWM_Stop+0x84>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ece:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6a1a      	ldr	r2, [r3, #32]
 8009ed6:	f241 1311 	movw	r3, #4369	; 0x1111
 8009eda:	4013      	ands	r3, r2
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10f      	bne.n	8009f00 <HAL_TIM_PWM_Stop+0xb4>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6a1a      	ldr	r2, [r3, #32]
 8009ee6:	f240 4344 	movw	r3, #1092	; 0x444
 8009eea:	4013      	ands	r3, r2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d107      	bne.n	8009f00 <HAL_TIM_PWM_Stop+0xb4>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 0201 	bic.w	r2, r2, #1
 8009efe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d104      	bne.n	8009f10 <HAL_TIM_PWM_Stop+0xc4>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f0e:	e023      	b.n	8009f58 <HAL_TIM_PWM_Stop+0x10c>
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	d104      	bne.n	8009f20 <HAL_TIM_PWM_Stop+0xd4>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f1e:	e01b      	b.n	8009f58 <HAL_TIM_PWM_Stop+0x10c>
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b08      	cmp	r3, #8
 8009f24:	d104      	bne.n	8009f30 <HAL_TIM_PWM_Stop+0xe4>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f2e:	e013      	b.n	8009f58 <HAL_TIM_PWM_Stop+0x10c>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b0c      	cmp	r3, #12
 8009f34:	d104      	bne.n	8009f40 <HAL_TIM_PWM_Stop+0xf4>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f3e:	e00b      	b.n	8009f58 <HAL_TIM_PWM_Stop+0x10c>
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2b10      	cmp	r3, #16
 8009f44:	d104      	bne.n	8009f50 <HAL_TIM_PWM_Stop+0x104>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f4e:	e003      	b.n	8009f58 <HAL_TIM_PWM_Stop+0x10c>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	40010000 	.word	0x40010000
 8009f68:	40010400 	.word	0x40010400
 8009f6c:	40014000 	.word	0x40014000
 8009f70:	40014400 	.word	0x40014400
 8009f74:	40014800 	.word	0x40014800

08009f78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d101      	bne.n	8009f8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e08f      	b.n	800a0ac <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d106      	bne.n	8009fa6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7f7 fff5 	bl	8001f90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2202      	movs	r2, #2
 8009faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6899      	ldr	r1, [r3, #8]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	4b3e      	ldr	r3, [pc, #248]	; (800a0b4 <HAL_TIM_Encoder_Init+0x13c>)
 8009fba:	400b      	ands	r3, r1
 8009fbc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4610      	mov	r0, r2
 8009fca:	f000 fc5f 	bl	800a88c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	697a      	ldr	r2, [r7, #20]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	4b31      	ldr	r3, [pc, #196]	; (800a0b8 <HAL_TIM_Encoder_Init+0x140>)
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	689a      	ldr	r2, [r3, #8]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	021b      	lsls	r3, r3, #8
 800a002:	4313      	orrs	r3, r2
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	4313      	orrs	r3, r2
 800a008:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	4b2b      	ldr	r3, [pc, #172]	; (800a0bc <HAL_TIM_Encoder_Init+0x144>)
 800a00e:	4013      	ands	r3, r2
 800a010:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	4b2a      	ldr	r3, [pc, #168]	; (800a0c0 <HAL_TIM_Encoder_Init+0x148>)
 800a016:	4013      	ands	r3, r2
 800a018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	69db      	ldr	r3, [r3, #28]
 800a022:	021b      	lsls	r3, r3, #8
 800a024:	4313      	orrs	r3, r2
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	4313      	orrs	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	011a      	lsls	r2, r3, #4
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	031b      	lsls	r3, r3, #12
 800a038:	4313      	orrs	r3, r2
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a046:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a04e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685a      	ldr	r2, [r3, #4]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	011b      	lsls	r3, r3, #4
 800a05a:	4313      	orrs	r3, r2
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	4313      	orrs	r3, r2
 800a060:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	fffebff8 	.word	0xfffebff8
 800a0b8:	fffffcfc 	.word	0xfffffcfc
 800a0bc:	fffff3f3 	.word	0xfffff3f3
 800a0c0:	ffff0f0f 	.word	0xffff0f0f

0800a0c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a0dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d110      	bne.n	800a116 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d102      	bne.n	800a100 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a0fa:	7b7b      	ldrb	r3, [r7, #13]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d001      	beq.n	800a104 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e069      	b.n	800a1d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2202      	movs	r2, #2
 800a108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2202      	movs	r2, #2
 800a110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a114:	e031      	b.n	800a17a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b04      	cmp	r3, #4
 800a11a:	d110      	bne.n	800a13e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d102      	bne.n	800a128 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a122:	7b3b      	ldrb	r3, [r7, #12]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d001      	beq.n	800a12c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e055      	b.n	800a1d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a13c:	e01d      	b.n	800a17a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d108      	bne.n	800a156 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a144:	7bbb      	ldrb	r3, [r7, #14]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d105      	bne.n	800a156 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a14a:	7b7b      	ldrb	r3, [r7, #13]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d102      	bne.n	800a156 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a150:	7b3b      	ldrb	r3, [r7, #12]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d001      	beq.n	800a15a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e03e      	b.n	800a1d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2202      	movs	r2, #2
 800a15e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2202      	movs	r2, #2
 800a166:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2202      	movs	r2, #2
 800a16e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2202      	movs	r2, #2
 800a176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d003      	beq.n	800a188 <HAL_TIM_Encoder_Start+0xc4>
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b04      	cmp	r3, #4
 800a184:	d008      	beq.n	800a198 <HAL_TIM_Encoder_Start+0xd4>
 800a186:	e00f      	b.n	800a1a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2201      	movs	r2, #1
 800a18e:	2100      	movs	r1, #0
 800a190:	4618      	mov	r0, r3
 800a192:	f000 ff81 	bl	800b098 <TIM_CCxChannelCmd>
      break;
 800a196:	e016      	b.n	800a1c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2201      	movs	r2, #1
 800a19e:	2104      	movs	r1, #4
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 ff79 	bl	800b098 <TIM_CCxChannelCmd>
      break;
 800a1a6:	e00e      	b.n	800a1c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 ff71 	bl	800b098 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	2104      	movs	r1, #4
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 ff6a 	bl	800b098 <TIM_CCxChannelCmd>
      break;
 800a1c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f042 0201 	orr.w	r2, r2, #1
 800a1d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d122      	bne.n	800a23c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	f003 0302 	and.w	r3, r3, #2
 800a200:	2b02      	cmp	r3, #2
 800a202:	d11b      	bne.n	800a23c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f06f 0202 	mvn.w	r2, #2
 800a20c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d003      	beq.n	800a22a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fb14 	bl	800a850 <HAL_TIM_IC_CaptureCallback>
 800a228:	e005      	b.n	800a236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fb06 	bl	800a83c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fb17 	bl	800a864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	f003 0304 	and.w	r3, r3, #4
 800a246:	2b04      	cmp	r3, #4
 800a248:	d122      	bne.n	800a290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	f003 0304 	and.w	r3, r3, #4
 800a254:	2b04      	cmp	r3, #4
 800a256:	d11b      	bne.n	800a290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f06f 0204 	mvn.w	r2, #4
 800a260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2202      	movs	r2, #2
 800a266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a272:	2b00      	cmp	r3, #0
 800a274:	d003      	beq.n	800a27e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 faea 	bl	800a850 <HAL_TIM_IC_CaptureCallback>
 800a27c:	e005      	b.n	800a28a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fadc 	bl	800a83c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 faed 	bl	800a864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	f003 0308 	and.w	r3, r3, #8
 800a29a:	2b08      	cmp	r3, #8
 800a29c:	d122      	bne.n	800a2e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	f003 0308 	and.w	r3, r3, #8
 800a2a8:	2b08      	cmp	r3, #8
 800a2aa:	d11b      	bne.n	800a2e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f06f 0208 	mvn.w	r2, #8
 800a2b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2204      	movs	r2, #4
 800a2ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	69db      	ldr	r3, [r3, #28]
 800a2c2:	f003 0303 	and.w	r3, r3, #3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fac0 	bl	800a850 <HAL_TIM_IC_CaptureCallback>
 800a2d0:	e005      	b.n	800a2de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fab2 	bl	800a83c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 fac3 	bl	800a864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f003 0310 	and.w	r3, r3, #16
 800a2ee:	2b10      	cmp	r3, #16
 800a2f0:	d122      	bne.n	800a338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f003 0310 	and.w	r3, r3, #16
 800a2fc:	2b10      	cmp	r3, #16
 800a2fe:	d11b      	bne.n	800a338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f06f 0210 	mvn.w	r2, #16
 800a308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2208      	movs	r2, #8
 800a30e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fa96 	bl	800a850 <HAL_TIM_IC_CaptureCallback>
 800a324:	e005      	b.n	800a332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fa88 	bl	800a83c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fa99 	bl	800a864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	2b01      	cmp	r3, #1
 800a344:	d10e      	bne.n	800a364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f003 0301 	and.w	r3, r3, #1
 800a350:	2b01      	cmp	r3, #1
 800a352:	d107      	bne.n	800a364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f06f 0201 	mvn.w	r2, #1
 800a35c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fa62 	bl	800a828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a36e:	2b80      	cmp	r3, #128	; 0x80
 800a370:	d10e      	bne.n	800a390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a37c:	2b80      	cmp	r3, #128	; 0x80
 800a37e:	d107      	bne.n	800a390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 ffba 	bl	800b304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a39a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a39e:	d10e      	bne.n	800a3be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3aa:	2b80      	cmp	r3, #128	; 0x80
 800a3ac:	d107      	bne.n	800a3be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a3b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 ffad 	bl	800b318 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c8:	2b40      	cmp	r3, #64	; 0x40
 800a3ca:	d10e      	bne.n	800a3ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d6:	2b40      	cmp	r3, #64	; 0x40
 800a3d8:	d107      	bne.n	800a3ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fa47 	bl	800a878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	f003 0320 	and.w	r3, r3, #32
 800a3f4:	2b20      	cmp	r3, #32
 800a3f6:	d10e      	bne.n	800a416 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	f003 0320 	and.w	r3, r3, #32
 800a402:	2b20      	cmp	r3, #32
 800a404:	d107      	bne.n	800a416 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f06f 0220 	mvn.w	r2, #32
 800a40e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 ff6d 	bl	800b2f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a416:	bf00      	nop
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
	...

0800a420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a432:	2b01      	cmp	r3, #1
 800a434:	d101      	bne.n	800a43a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a436:	2302      	movs	r3, #2
 800a438:	e0fd      	b.n	800a636 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b14      	cmp	r3, #20
 800a446:	f200 80f0 	bhi.w	800a62a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a44a:	a201      	add	r2, pc, #4	; (adr r2, 800a450 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a450:	0800a4a5 	.word	0x0800a4a5
 800a454:	0800a62b 	.word	0x0800a62b
 800a458:	0800a62b 	.word	0x0800a62b
 800a45c:	0800a62b 	.word	0x0800a62b
 800a460:	0800a4e5 	.word	0x0800a4e5
 800a464:	0800a62b 	.word	0x0800a62b
 800a468:	0800a62b 	.word	0x0800a62b
 800a46c:	0800a62b 	.word	0x0800a62b
 800a470:	0800a527 	.word	0x0800a527
 800a474:	0800a62b 	.word	0x0800a62b
 800a478:	0800a62b 	.word	0x0800a62b
 800a47c:	0800a62b 	.word	0x0800a62b
 800a480:	0800a567 	.word	0x0800a567
 800a484:	0800a62b 	.word	0x0800a62b
 800a488:	0800a62b 	.word	0x0800a62b
 800a48c:	0800a62b 	.word	0x0800a62b
 800a490:	0800a5a9 	.word	0x0800a5a9
 800a494:	0800a62b 	.word	0x0800a62b
 800a498:	0800a62b 	.word	0x0800a62b
 800a49c:	0800a62b 	.word	0x0800a62b
 800a4a0:	0800a5e9 	.word	0x0800a5e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68b9      	ldr	r1, [r7, #8]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 fa88 	bl	800a9c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	699a      	ldr	r2, [r3, #24]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f042 0208 	orr.w	r2, r2, #8
 800a4be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	699a      	ldr	r2, [r3, #24]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f022 0204 	bic.w	r2, r2, #4
 800a4ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6999      	ldr	r1, [r3, #24]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	691a      	ldr	r2, [r3, #16]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	619a      	str	r2, [r3, #24]
      break;
 800a4e2:	e0a3      	b.n	800a62c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68b9      	ldr	r1, [r7, #8]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 faf8 	bl	800aae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	699a      	ldr	r2, [r3, #24]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	699a      	ldr	r2, [r3, #24]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a50e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6999      	ldr	r1, [r3, #24]
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	021a      	lsls	r2, r3, #8
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	430a      	orrs	r2, r1
 800a522:	619a      	str	r2, [r3, #24]
      break;
 800a524:	e082      	b.n	800a62c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68b9      	ldr	r1, [r7, #8]
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 fb61 	bl	800abf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	69da      	ldr	r2, [r3, #28]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f042 0208 	orr.w	r2, r2, #8
 800a540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69da      	ldr	r2, [r3, #28]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f022 0204 	bic.w	r2, r2, #4
 800a550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69d9      	ldr	r1, [r3, #28]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	691a      	ldr	r2, [r3, #16]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	430a      	orrs	r2, r1
 800a562:	61da      	str	r2, [r3, #28]
      break;
 800a564:	e062      	b.n	800a62c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68b9      	ldr	r1, [r7, #8]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 fbc7 	bl	800ad00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	69da      	ldr	r2, [r3, #28]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	69da      	ldr	r2, [r3, #28]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	69d9      	ldr	r1, [r3, #28]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	021a      	lsls	r2, r3, #8
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	61da      	str	r2, [r3, #28]
      break;
 800a5a6:	e041      	b.n	800a62c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68b9      	ldr	r1, [r7, #8]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 fc0e 	bl	800add0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f042 0208 	orr.w	r2, r2, #8
 800a5c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f022 0204 	bic.w	r2, r2, #4
 800a5d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	691a      	ldr	r2, [r3, #16]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a5e6:	e021      	b.n	800a62c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68b9      	ldr	r1, [r7, #8]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 fc50 	bl	800ae94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	021a      	lsls	r2, r3, #8
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a628:	e000      	b.n	800a62c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a62a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop

0800a640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a650:	2b01      	cmp	r3, #1
 800a652:	d101      	bne.n	800a658 <HAL_TIM_ConfigClockSource+0x18>
 800a654:	2302      	movs	r3, #2
 800a656:	e0db      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x1d0>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2202      	movs	r2, #2
 800a664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	4b69      	ldr	r3, [pc, #420]	; (800a818 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a674:	4013      	ands	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a67e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a63      	ldr	r2, [pc, #396]	; (800a81c <HAL_TIM_ConfigClockSource+0x1dc>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	f000 80a9 	beq.w	800a7e6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a694:	4a61      	ldr	r2, [pc, #388]	; (800a81c <HAL_TIM_ConfigClockSource+0x1dc>)
 800a696:	4293      	cmp	r3, r2
 800a698:	f200 80ae 	bhi.w	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a69c:	4a60      	ldr	r2, [pc, #384]	; (800a820 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	f000 80a1 	beq.w	800a7e6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a6a4:	4a5e      	ldr	r2, [pc, #376]	; (800a820 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	f200 80a6 	bhi.w	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6ac:	4a5d      	ldr	r2, [pc, #372]	; (800a824 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	f000 8099 	beq.w	800a7e6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a6b4:	4a5b      	ldr	r2, [pc, #364]	; (800a824 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	f200 809e 	bhi.w	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a6c0:	f000 8091 	beq.w	800a7e6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a6c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a6c8:	f200 8096 	bhi.w	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6d0:	f000 8089 	beq.w	800a7e6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a6d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6d8:	f200 808e 	bhi.w	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6e0:	d03e      	beq.n	800a760 <HAL_TIM_ConfigClockSource+0x120>
 800a6e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6e6:	f200 8087 	bhi.w	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6ee:	f000 8085 	beq.w	800a7fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a6f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6f6:	d87f      	bhi.n	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a6f8:	2b70      	cmp	r3, #112	; 0x70
 800a6fa:	d01a      	beq.n	800a732 <HAL_TIM_ConfigClockSource+0xf2>
 800a6fc:	2b70      	cmp	r3, #112	; 0x70
 800a6fe:	d87b      	bhi.n	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a700:	2b60      	cmp	r3, #96	; 0x60
 800a702:	d050      	beq.n	800a7a6 <HAL_TIM_ConfigClockSource+0x166>
 800a704:	2b60      	cmp	r3, #96	; 0x60
 800a706:	d877      	bhi.n	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a708:	2b50      	cmp	r3, #80	; 0x50
 800a70a:	d03c      	beq.n	800a786 <HAL_TIM_ConfigClockSource+0x146>
 800a70c:	2b50      	cmp	r3, #80	; 0x50
 800a70e:	d873      	bhi.n	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a710:	2b40      	cmp	r3, #64	; 0x40
 800a712:	d058      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x186>
 800a714:	2b40      	cmp	r3, #64	; 0x40
 800a716:	d86f      	bhi.n	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a718:	2b30      	cmp	r3, #48	; 0x30
 800a71a:	d064      	beq.n	800a7e6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a71c:	2b30      	cmp	r3, #48	; 0x30
 800a71e:	d86b      	bhi.n	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a720:	2b20      	cmp	r3, #32
 800a722:	d060      	beq.n	800a7e6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a724:	2b20      	cmp	r3, #32
 800a726:	d867      	bhi.n	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d05c      	beq.n	800a7e6 <HAL_TIM_ConfigClockSource+0x1a6>
 800a72c:	2b10      	cmp	r3, #16
 800a72e:	d05a      	beq.n	800a7e6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a730:	e062      	b.n	800a7f8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6818      	ldr	r0, [r3, #0]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	6899      	ldr	r1, [r3, #8]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	f000 fc89 	bl	800b058 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a754:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	609a      	str	r2, [r3, #8]
      break;
 800a75e:	e04e      	b.n	800a7fe <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6818      	ldr	r0, [r3, #0]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	6899      	ldr	r1, [r3, #8]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	685a      	ldr	r2, [r3, #4]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	f000 fc72 	bl	800b058 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	689a      	ldr	r2, [r3, #8]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a782:	609a      	str	r2, [r3, #8]
      break;
 800a784:	e03b      	b.n	800a7fe <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	6859      	ldr	r1, [r3, #4]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	461a      	mov	r2, r3
 800a794:	f000 fbe2 	bl	800af5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2150      	movs	r1, #80	; 0x50
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 fc3c 	bl	800b01c <TIM_ITRx_SetConfig>
      break;
 800a7a4:	e02b      	b.n	800a7fe <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6818      	ldr	r0, [r3, #0]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	6859      	ldr	r1, [r3, #4]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	f000 fc01 	bl	800afba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2160      	movs	r1, #96	; 0x60
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 fc2c 	bl	800b01c <TIM_ITRx_SetConfig>
      break;
 800a7c4:	e01b      	b.n	800a7fe <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	6859      	ldr	r1, [r3, #4]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	f000 fbc2 	bl	800af5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2140      	movs	r1, #64	; 0x40
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fc1c 	bl	800b01c <TIM_ITRx_SetConfig>
      break;
 800a7e4:	e00b      	b.n	800a7fe <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f000 fc13 	bl	800b01c <TIM_ITRx_SetConfig>
        break;
 800a7f6:	e002      	b.n	800a7fe <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a7f8:	bf00      	nop
 800a7fa:	e000      	b.n	800a7fe <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a7fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	ffceff88 	.word	0xffceff88
 800a81c:	00100040 	.word	0x00100040
 800a820:	00100030 	.word	0x00100030
 800a824:	00100020 	.word	0x00100020

0800a828 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a40      	ldr	r2, [pc, #256]	; (800a9a0 <TIM_Base_SetConfig+0x114>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d013      	beq.n	800a8cc <TIM_Base_SetConfig+0x40>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8aa:	d00f      	beq.n	800a8cc <TIM_Base_SetConfig+0x40>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a3d      	ldr	r2, [pc, #244]	; (800a9a4 <TIM_Base_SetConfig+0x118>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d00b      	beq.n	800a8cc <TIM_Base_SetConfig+0x40>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a3c      	ldr	r2, [pc, #240]	; (800a9a8 <TIM_Base_SetConfig+0x11c>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d007      	beq.n	800a8cc <TIM_Base_SetConfig+0x40>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a3b      	ldr	r2, [pc, #236]	; (800a9ac <TIM_Base_SetConfig+0x120>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d003      	beq.n	800a8cc <TIM_Base_SetConfig+0x40>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a3a      	ldr	r2, [pc, #232]	; (800a9b0 <TIM_Base_SetConfig+0x124>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d108      	bne.n	800a8de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a2f      	ldr	r2, [pc, #188]	; (800a9a0 <TIM_Base_SetConfig+0x114>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d01f      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ec:	d01b      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a2c      	ldr	r2, [pc, #176]	; (800a9a4 <TIM_Base_SetConfig+0x118>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d017      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a2b      	ldr	r2, [pc, #172]	; (800a9a8 <TIM_Base_SetConfig+0x11c>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d013      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a2a      	ldr	r2, [pc, #168]	; (800a9ac <TIM_Base_SetConfig+0x120>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d00f      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a29      	ldr	r2, [pc, #164]	; (800a9b0 <TIM_Base_SetConfig+0x124>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d00b      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a28      	ldr	r2, [pc, #160]	; (800a9b4 <TIM_Base_SetConfig+0x128>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d007      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a27      	ldr	r2, [pc, #156]	; (800a9b8 <TIM_Base_SetConfig+0x12c>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d003      	beq.n	800a926 <TIM_Base_SetConfig+0x9a>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a26      	ldr	r2, [pc, #152]	; (800a9bc <TIM_Base_SetConfig+0x130>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d108      	bne.n	800a938 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a92c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	4313      	orrs	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	4313      	orrs	r3, r2
 800a944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	689a      	ldr	r2, [r3, #8]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a10      	ldr	r2, [pc, #64]	; (800a9a0 <TIM_Base_SetConfig+0x114>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d00f      	beq.n	800a984 <TIM_Base_SetConfig+0xf8>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a12      	ldr	r2, [pc, #72]	; (800a9b0 <TIM_Base_SetConfig+0x124>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d00b      	beq.n	800a984 <TIM_Base_SetConfig+0xf8>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a11      	ldr	r2, [pc, #68]	; (800a9b4 <TIM_Base_SetConfig+0x128>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d007      	beq.n	800a984 <TIM_Base_SetConfig+0xf8>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a10      	ldr	r2, [pc, #64]	; (800a9b8 <TIM_Base_SetConfig+0x12c>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d003      	beq.n	800a984 <TIM_Base_SetConfig+0xf8>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a0f      	ldr	r2, [pc, #60]	; (800a9bc <TIM_Base_SetConfig+0x130>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d103      	bne.n	800a98c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	691a      	ldr	r2, [r3, #16]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	615a      	str	r2, [r3, #20]
}
 800a992:	bf00      	nop
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	40010000 	.word	0x40010000
 800a9a4:	40000400 	.word	0x40000400
 800a9a8:	40000800 	.word	0x40000800
 800a9ac:	40000c00 	.word	0x40000c00
 800a9b0:	40010400 	.word	0x40010400
 800a9b4:	40014000 	.word	0x40014000
 800a9b8:	40014400 	.word	0x40014400
 800a9bc:	40014800 	.word	0x40014800

0800a9c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	f023 0201 	bic.w	r2, r3, #1
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4b37      	ldr	r3, [pc, #220]	; (800aac8 <TIM_OC1_SetConfig+0x108>)
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f023 0303 	bic.w	r3, r3, #3
 800a9f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f023 0302 	bic.w	r3, r3, #2
 800aa08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a2d      	ldr	r2, [pc, #180]	; (800aacc <TIM_OC1_SetConfig+0x10c>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d00f      	beq.n	800aa3c <TIM_OC1_SetConfig+0x7c>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a2c      	ldr	r2, [pc, #176]	; (800aad0 <TIM_OC1_SetConfig+0x110>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d00b      	beq.n	800aa3c <TIM_OC1_SetConfig+0x7c>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a2b      	ldr	r2, [pc, #172]	; (800aad4 <TIM_OC1_SetConfig+0x114>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d007      	beq.n	800aa3c <TIM_OC1_SetConfig+0x7c>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a2a      	ldr	r2, [pc, #168]	; (800aad8 <TIM_OC1_SetConfig+0x118>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d003      	beq.n	800aa3c <TIM_OC1_SetConfig+0x7c>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4a29      	ldr	r2, [pc, #164]	; (800aadc <TIM_OC1_SetConfig+0x11c>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d10c      	bne.n	800aa56 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f023 0308 	bic.w	r3, r3, #8
 800aa42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f023 0304 	bic.w	r3, r3, #4
 800aa54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a1c      	ldr	r2, [pc, #112]	; (800aacc <TIM_OC1_SetConfig+0x10c>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d00f      	beq.n	800aa7e <TIM_OC1_SetConfig+0xbe>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a1b      	ldr	r2, [pc, #108]	; (800aad0 <TIM_OC1_SetConfig+0x110>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d00b      	beq.n	800aa7e <TIM_OC1_SetConfig+0xbe>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a1a      	ldr	r2, [pc, #104]	; (800aad4 <TIM_OC1_SetConfig+0x114>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d007      	beq.n	800aa7e <TIM_OC1_SetConfig+0xbe>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a19      	ldr	r2, [pc, #100]	; (800aad8 <TIM_OC1_SetConfig+0x118>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d003      	beq.n	800aa7e <TIM_OC1_SetConfig+0xbe>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a18      	ldr	r2, [pc, #96]	; (800aadc <TIM_OC1_SetConfig+0x11c>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d111      	bne.n	800aaa2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	621a      	str	r2, [r3, #32]
}
 800aabc:	bf00      	nop
 800aabe:	371c      	adds	r7, #28
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	fffeff8f 	.word	0xfffeff8f
 800aacc:	40010000 	.word	0x40010000
 800aad0:	40010400 	.word	0x40010400
 800aad4:	40014000 	.word	0x40014000
 800aad8:	40014400 	.word	0x40014400
 800aadc:	40014800 	.word	0x40014800

0800aae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b087      	sub	sp, #28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	f023 0210 	bic.w	r2, r3, #16
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	4b34      	ldr	r3, [pc, #208]	; (800abdc <TIM_OC2_SetConfig+0xfc>)
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	021b      	lsls	r3, r3, #8
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f023 0320 	bic.w	r3, r3, #32
 800ab2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	011b      	lsls	r3, r3, #4
 800ab32:	697a      	ldr	r2, [r7, #20]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a29      	ldr	r2, [pc, #164]	; (800abe0 <TIM_OC2_SetConfig+0x100>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d003      	beq.n	800ab48 <TIM_OC2_SetConfig+0x68>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a28      	ldr	r2, [pc, #160]	; (800abe4 <TIM_OC2_SetConfig+0x104>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d10d      	bne.n	800ab64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	011b      	lsls	r3, r3, #4
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a1e      	ldr	r2, [pc, #120]	; (800abe0 <TIM_OC2_SetConfig+0x100>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d00f      	beq.n	800ab8c <TIM_OC2_SetConfig+0xac>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a1d      	ldr	r2, [pc, #116]	; (800abe4 <TIM_OC2_SetConfig+0x104>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d00b      	beq.n	800ab8c <TIM_OC2_SetConfig+0xac>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a1c      	ldr	r2, [pc, #112]	; (800abe8 <TIM_OC2_SetConfig+0x108>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d007      	beq.n	800ab8c <TIM_OC2_SetConfig+0xac>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a1b      	ldr	r2, [pc, #108]	; (800abec <TIM_OC2_SetConfig+0x10c>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d003      	beq.n	800ab8c <TIM_OC2_SetConfig+0xac>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a1a      	ldr	r2, [pc, #104]	; (800abf0 <TIM_OC2_SetConfig+0x110>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d113      	bne.n	800abb4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	697a      	ldr	r2, [r7, #20]
 800abcc:	621a      	str	r2, [r3, #32]
}
 800abce:	bf00      	nop
 800abd0:	371c      	adds	r7, #28
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	feff8fff 	.word	0xfeff8fff
 800abe0:	40010000 	.word	0x40010000
 800abe4:	40010400 	.word	0x40010400
 800abe8:	40014000 	.word	0x40014000
 800abec:	40014400 	.word	0x40014400
 800abf0:	40014800 	.word	0x40014800

0800abf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b087      	sub	sp, #28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f023 0303 	bic.w	r3, r3, #3
 800ac2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a27      	ldr	r2, [pc, #156]	; (800acec <TIM_OC3_SetConfig+0xf8>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d003      	beq.n	800ac5a <TIM_OC3_SetConfig+0x66>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a26      	ldr	r2, [pc, #152]	; (800acf0 <TIM_OC3_SetConfig+0xfc>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d10d      	bne.n	800ac76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	021b      	lsls	r3, r3, #8
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a1c      	ldr	r2, [pc, #112]	; (800acec <TIM_OC3_SetConfig+0xf8>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d00f      	beq.n	800ac9e <TIM_OC3_SetConfig+0xaa>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a1b      	ldr	r2, [pc, #108]	; (800acf0 <TIM_OC3_SetConfig+0xfc>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d00b      	beq.n	800ac9e <TIM_OC3_SetConfig+0xaa>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a1a      	ldr	r2, [pc, #104]	; (800acf4 <TIM_OC3_SetConfig+0x100>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d007      	beq.n	800ac9e <TIM_OC3_SetConfig+0xaa>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a19      	ldr	r2, [pc, #100]	; (800acf8 <TIM_OC3_SetConfig+0x104>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d003      	beq.n	800ac9e <TIM_OC3_SetConfig+0xaa>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a18      	ldr	r2, [pc, #96]	; (800acfc <TIM_OC3_SetConfig+0x108>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d113      	bne.n	800acc6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	011b      	lsls	r3, r3, #4
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	693a      	ldr	r2, [r7, #16]
 800acca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	685a      	ldr	r2, [r3, #4]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	697a      	ldr	r2, [r7, #20]
 800acde:	621a      	str	r2, [r3, #32]
}
 800ace0:	bf00      	nop
 800ace2:	371c      	adds	r7, #28
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	40010000 	.word	0x40010000
 800acf0:	40010400 	.word	0x40010400
 800acf4:	40014000 	.word	0x40014000
 800acf8:	40014400 	.word	0x40014400
 800acfc:	40014800 	.word	0x40014800

0800ad00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b087      	sub	sp, #28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	69db      	ldr	r3, [r3, #28]
 800ad26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	021b      	lsls	r3, r3, #8
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	031b      	lsls	r3, r3, #12
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a18      	ldr	r2, [pc, #96]	; (800adbc <TIM_OC4_SetConfig+0xbc>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d00f      	beq.n	800ad80 <TIM_OC4_SetConfig+0x80>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a17      	ldr	r2, [pc, #92]	; (800adc0 <TIM_OC4_SetConfig+0xc0>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d00b      	beq.n	800ad80 <TIM_OC4_SetConfig+0x80>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a16      	ldr	r2, [pc, #88]	; (800adc4 <TIM_OC4_SetConfig+0xc4>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d007      	beq.n	800ad80 <TIM_OC4_SetConfig+0x80>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a15      	ldr	r2, [pc, #84]	; (800adc8 <TIM_OC4_SetConfig+0xc8>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d003      	beq.n	800ad80 <TIM_OC4_SetConfig+0x80>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a14      	ldr	r2, [pc, #80]	; (800adcc <TIM_OC4_SetConfig+0xcc>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d109      	bne.n	800ad94 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	019b      	lsls	r3, r3, #6
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	693a      	ldr	r2, [r7, #16]
 800adac:	621a      	str	r2, [r3, #32]
}
 800adae:	bf00      	nop
 800adb0:	371c      	adds	r7, #28
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	40010000 	.word	0x40010000
 800adc0:	40010400 	.word	0x40010400
 800adc4:	40014000 	.word	0x40014000
 800adc8:	40014400 	.word	0x40014400
 800adcc:	40014800 	.word	0x40014800

0800add0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ae10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	041b      	lsls	r3, r3, #16
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a17      	ldr	r2, [pc, #92]	; (800ae80 <TIM_OC5_SetConfig+0xb0>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d00f      	beq.n	800ae46 <TIM_OC5_SetConfig+0x76>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a16      	ldr	r2, [pc, #88]	; (800ae84 <TIM_OC5_SetConfig+0xb4>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d00b      	beq.n	800ae46 <TIM_OC5_SetConfig+0x76>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a15      	ldr	r2, [pc, #84]	; (800ae88 <TIM_OC5_SetConfig+0xb8>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d007      	beq.n	800ae46 <TIM_OC5_SetConfig+0x76>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a14      	ldr	r2, [pc, #80]	; (800ae8c <TIM_OC5_SetConfig+0xbc>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d003      	beq.n	800ae46 <TIM_OC5_SetConfig+0x76>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a13      	ldr	r2, [pc, #76]	; (800ae90 <TIM_OC5_SetConfig+0xc0>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d109      	bne.n	800ae5a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	021b      	lsls	r3, r3, #8
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	693a      	ldr	r2, [r7, #16]
 800ae72:	621a      	str	r2, [r3, #32]
}
 800ae74:	bf00      	nop
 800ae76:	371c      	adds	r7, #28
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	40010000 	.word	0x40010000
 800ae84:	40010400 	.word	0x40010400
 800ae88:	40014000 	.word	0x40014000
 800ae8c:	40014400 	.word	0x40014400
 800ae90:	40014800 	.word	0x40014800

0800ae94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b087      	sub	sp, #28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	021b      	lsls	r3, r3, #8
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	4313      	orrs	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	051b      	lsls	r3, r3, #20
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	4313      	orrs	r3, r2
 800aee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a18      	ldr	r2, [pc, #96]	; (800af48 <TIM_OC6_SetConfig+0xb4>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d00f      	beq.n	800af0c <TIM_OC6_SetConfig+0x78>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a17      	ldr	r2, [pc, #92]	; (800af4c <TIM_OC6_SetConfig+0xb8>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d00b      	beq.n	800af0c <TIM_OC6_SetConfig+0x78>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a16      	ldr	r2, [pc, #88]	; (800af50 <TIM_OC6_SetConfig+0xbc>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d007      	beq.n	800af0c <TIM_OC6_SetConfig+0x78>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a15      	ldr	r2, [pc, #84]	; (800af54 <TIM_OC6_SetConfig+0xc0>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d003      	beq.n	800af0c <TIM_OC6_SetConfig+0x78>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a14      	ldr	r2, [pc, #80]	; (800af58 <TIM_OC6_SetConfig+0xc4>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d109      	bne.n	800af20 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800af12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	029b      	lsls	r3, r3, #10
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	685a      	ldr	r2, [r3, #4]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	621a      	str	r2, [r3, #32]
}
 800af3a:	bf00      	nop
 800af3c:	371c      	adds	r7, #28
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	40010000 	.word	0x40010000
 800af4c:	40010400 	.word	0x40010400
 800af50:	40014000 	.word	0x40014000
 800af54:	40014400 	.word	0x40014400
 800af58:	40014800 	.word	0x40014800

0800af5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b087      	sub	sp, #28
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6a1b      	ldr	r3, [r3, #32]
 800af6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	f023 0201 	bic.w	r2, r3, #1
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	011b      	lsls	r3, r3, #4
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	4313      	orrs	r3, r2
 800af90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f023 030a 	bic.w	r3, r3, #10
 800af98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	621a      	str	r2, [r3, #32]
}
 800afae:	bf00      	nop
 800afb0:	371c      	adds	r7, #28
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afba:	b480      	push	{r7}
 800afbc:	b087      	sub	sp, #28
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	60f8      	str	r0, [r7, #12]
 800afc2:	60b9      	str	r1, [r7, #8]
 800afc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	f023 0210 	bic.w	r2, r3, #16
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6a1b      	ldr	r3, [r3, #32]
 800afdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afe4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	031b      	lsls	r3, r3, #12
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	4313      	orrs	r3, r2
 800afee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aff6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	011b      	lsls	r3, r3, #4
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	4313      	orrs	r3, r2
 800b000:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	621a      	str	r2, [r3, #32]
}
 800b00e:	bf00      	nop
 800b010:	371c      	adds	r7, #28
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
	...

0800b01c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b085      	sub	sp, #20
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	4b09      	ldr	r3, [pc, #36]	; (800b054 <TIM_ITRx_SetConfig+0x38>)
 800b030:	4013      	ands	r3, r2
 800b032:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	4313      	orrs	r3, r2
 800b03a:	f043 0307 	orr.w	r3, r3, #7
 800b03e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	609a      	str	r2, [r3, #8]
}
 800b046:	bf00      	nop
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	ffcfff8f 	.word	0xffcfff8f

0800b058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b058:	b480      	push	{r7}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	021a      	lsls	r2, r3, #8
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	431a      	orrs	r2, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	4313      	orrs	r3, r2
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	4313      	orrs	r3, r2
 800b084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	609a      	str	r2, [r3, #8]
}
 800b08c:	bf00      	nop
 800b08e:	371c      	adds	r7, #28
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b098:	b480      	push	{r7}
 800b09a:	b087      	sub	sp, #28
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	f003 031f 	and.w	r3, r3, #31
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6a1a      	ldr	r2, [r3, #32]
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	43db      	mvns	r3, r3
 800b0ba:	401a      	ands	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6a1a      	ldr	r2, [r3, #32]
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	f003 031f 	and.w	r3, r3, #31
 800b0ca:	6879      	ldr	r1, [r7, #4]
 800b0cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b0d0:	431a      	orrs	r2, r3
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	621a      	str	r2, [r3, #32]
}
 800b0d6:	bf00      	nop
 800b0d8:	371c      	adds	r7, #28
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
	...

0800b0e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d101      	bne.n	800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e068      	b.n	800b1ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2202      	movs	r2, #2
 800b108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a2e      	ldr	r2, [pc, #184]	; (800b1dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d004      	beq.n	800b130 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a2d      	ldr	r2, [pc, #180]	; (800b1e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d108      	bne.n	800b142 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b136:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b148:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	4313      	orrs	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a1e      	ldr	r2, [pc, #120]	; (800b1dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d01d      	beq.n	800b1a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b16e:	d018      	beq.n	800b1a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a1b      	ldr	r2, [pc, #108]	; (800b1e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d013      	beq.n	800b1a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a1a      	ldr	r2, [pc, #104]	; (800b1e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d00e      	beq.n	800b1a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a18      	ldr	r2, [pc, #96]	; (800b1ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d009      	beq.n	800b1a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a13      	ldr	r2, [pc, #76]	; (800b1e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d004      	beq.n	800b1a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a14      	ldr	r2, [pc, #80]	; (800b1f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d10c      	bne.n	800b1bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3714      	adds	r7, #20
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	40010000 	.word	0x40010000
 800b1e0:	40010400 	.word	0x40010400
 800b1e4:	40000400 	.word	0x40000400
 800b1e8:	40000800 	.word	0x40000800
 800b1ec:	40000c00 	.word	0x40000c00
 800b1f0:	40001800 	.word	0x40001800

0800b1f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b1fe:	2300      	movs	r3, #0
 800b200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d101      	bne.n	800b210 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b20c:	2302      	movs	r3, #2
 800b20e:	e065      	b.n	800b2dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	4313      	orrs	r3, r2
 800b224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	4313      	orrs	r3, r2
 800b232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	4313      	orrs	r3, r2
 800b240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	695b      	ldr	r3, [r3, #20]
 800b268:	4313      	orrs	r3, r2
 800b26a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b276:	4313      	orrs	r3, r2
 800b278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	041b      	lsls	r3, r3, #16
 800b286:	4313      	orrs	r3, r2
 800b288:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a16      	ldr	r2, [pc, #88]	; (800b2e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d004      	beq.n	800b29e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a14      	ldr	r2, [pc, #80]	; (800b2ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d115      	bne.n	800b2ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	051b      	lsls	r3, r3, #20
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	69db      	ldr	r3, [r3, #28]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	40010000 	.word	0x40010000
 800b2ec:	40010400 	.word	0x40010400

0800b2f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d101      	bne.n	800b33e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e042      	b.n	800b3c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b344:	2b00      	cmp	r3, #0
 800b346:	d106      	bne.n	800b356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7f7 f88d 	bl	8002470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2224      	movs	r2, #36	; 0x24
 800b35a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f022 0201 	bic.w	r2, r2, #1
 800b36c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f82c 	bl	800b3cc <UART_SetConfig>
 800b374:	4603      	mov	r3, r0
 800b376:	2b01      	cmp	r3, #1
 800b378:	d101      	bne.n	800b37e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e022      	b.n	800b3c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b382:	2b00      	cmp	r3, #0
 800b384:	d002      	beq.n	800b38c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fd80 	bl	800be8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b39a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	689a      	ldr	r2, [r3, #8]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f042 0201 	orr.w	r2, r2, #1
 800b3ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fe07 	bl	800bfd0 <UART_CheckIdleState>
 800b3c2:	4603      	mov	r3, r0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3cc:	b5b0      	push	{r4, r5, r7, lr}
 800b3ce:	b08e      	sub	sp, #56	; 0x38
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	689a      	ldr	r2, [r3, #8]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	431a      	orrs	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	695b      	ldr	r3, [r3, #20]
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	69db      	ldr	r3, [r3, #28]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	4bbf      	ldr	r3, [pc, #764]	; (800b6f8 <UART_SetConfig+0x32c>)
 800b3fa:	4013      	ands	r3, r2
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	6812      	ldr	r2, [r2, #0]
 800b400:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b402:	430b      	orrs	r3, r1
 800b404:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	68da      	ldr	r2, [r3, #12]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	430a      	orrs	r2, r1
 800b41a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4ab5      	ldr	r2, [pc, #724]	; (800b6fc <UART_SetConfig+0x330>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d004      	beq.n	800b436 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6a1b      	ldr	r3, [r3, #32]
 800b430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b432:	4313      	orrs	r3, r2
 800b434:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	4bb0      	ldr	r3, [pc, #704]	; (800b700 <UART_SetConfig+0x334>)
 800b43e:	4013      	ands	r3, r2
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	6812      	ldr	r2, [r2, #0]
 800b444:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b446:	430b      	orrs	r3, r1
 800b448:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b450:	f023 010f 	bic.w	r1, r3, #15
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	430a      	orrs	r2, r1
 800b45e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4aa7      	ldr	r2, [pc, #668]	; (800b704 <UART_SetConfig+0x338>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d176      	bne.n	800b558 <UART_SetConfig+0x18c>
 800b46a:	4ba7      	ldr	r3, [pc, #668]	; (800b708 <UART_SetConfig+0x33c>)
 800b46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b46e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b472:	2b28      	cmp	r3, #40	; 0x28
 800b474:	d86c      	bhi.n	800b550 <UART_SetConfig+0x184>
 800b476:	a201      	add	r2, pc, #4	; (adr r2, 800b47c <UART_SetConfig+0xb0>)
 800b478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47c:	0800b521 	.word	0x0800b521
 800b480:	0800b551 	.word	0x0800b551
 800b484:	0800b551 	.word	0x0800b551
 800b488:	0800b551 	.word	0x0800b551
 800b48c:	0800b551 	.word	0x0800b551
 800b490:	0800b551 	.word	0x0800b551
 800b494:	0800b551 	.word	0x0800b551
 800b498:	0800b551 	.word	0x0800b551
 800b49c:	0800b529 	.word	0x0800b529
 800b4a0:	0800b551 	.word	0x0800b551
 800b4a4:	0800b551 	.word	0x0800b551
 800b4a8:	0800b551 	.word	0x0800b551
 800b4ac:	0800b551 	.word	0x0800b551
 800b4b0:	0800b551 	.word	0x0800b551
 800b4b4:	0800b551 	.word	0x0800b551
 800b4b8:	0800b551 	.word	0x0800b551
 800b4bc:	0800b531 	.word	0x0800b531
 800b4c0:	0800b551 	.word	0x0800b551
 800b4c4:	0800b551 	.word	0x0800b551
 800b4c8:	0800b551 	.word	0x0800b551
 800b4cc:	0800b551 	.word	0x0800b551
 800b4d0:	0800b551 	.word	0x0800b551
 800b4d4:	0800b551 	.word	0x0800b551
 800b4d8:	0800b551 	.word	0x0800b551
 800b4dc:	0800b539 	.word	0x0800b539
 800b4e0:	0800b551 	.word	0x0800b551
 800b4e4:	0800b551 	.word	0x0800b551
 800b4e8:	0800b551 	.word	0x0800b551
 800b4ec:	0800b551 	.word	0x0800b551
 800b4f0:	0800b551 	.word	0x0800b551
 800b4f4:	0800b551 	.word	0x0800b551
 800b4f8:	0800b551 	.word	0x0800b551
 800b4fc:	0800b541 	.word	0x0800b541
 800b500:	0800b551 	.word	0x0800b551
 800b504:	0800b551 	.word	0x0800b551
 800b508:	0800b551 	.word	0x0800b551
 800b50c:	0800b551 	.word	0x0800b551
 800b510:	0800b551 	.word	0x0800b551
 800b514:	0800b551 	.word	0x0800b551
 800b518:	0800b551 	.word	0x0800b551
 800b51c:	0800b549 	.word	0x0800b549
 800b520:	2301      	movs	r3, #1
 800b522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b526:	e222      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b528:	2304      	movs	r3, #4
 800b52a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b52e:	e21e      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b530:	2308      	movs	r3, #8
 800b532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b536:	e21a      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b538:	2310      	movs	r3, #16
 800b53a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b53e:	e216      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b540:	2320      	movs	r3, #32
 800b542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b546:	e212      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b548:	2340      	movs	r3, #64	; 0x40
 800b54a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b54e:	e20e      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b550:	2380      	movs	r3, #128	; 0x80
 800b552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b556:	e20a      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a6b      	ldr	r2, [pc, #428]	; (800b70c <UART_SetConfig+0x340>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d130      	bne.n	800b5c4 <UART_SetConfig+0x1f8>
 800b562:	4b69      	ldr	r3, [pc, #420]	; (800b708 <UART_SetConfig+0x33c>)
 800b564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b566:	f003 0307 	and.w	r3, r3, #7
 800b56a:	2b05      	cmp	r3, #5
 800b56c:	d826      	bhi.n	800b5bc <UART_SetConfig+0x1f0>
 800b56e:	a201      	add	r2, pc, #4	; (adr r2, 800b574 <UART_SetConfig+0x1a8>)
 800b570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b574:	0800b58d 	.word	0x0800b58d
 800b578:	0800b595 	.word	0x0800b595
 800b57c:	0800b59d 	.word	0x0800b59d
 800b580:	0800b5a5 	.word	0x0800b5a5
 800b584:	0800b5ad 	.word	0x0800b5ad
 800b588:	0800b5b5 	.word	0x0800b5b5
 800b58c:	2300      	movs	r3, #0
 800b58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b592:	e1ec      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b594:	2304      	movs	r3, #4
 800b596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b59a:	e1e8      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b59c:	2308      	movs	r3, #8
 800b59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5a2:	e1e4      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b5a4:	2310      	movs	r3, #16
 800b5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5aa:	e1e0      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b5ac:	2320      	movs	r3, #32
 800b5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5b2:	e1dc      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b5b4:	2340      	movs	r3, #64	; 0x40
 800b5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ba:	e1d8      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b5bc:	2380      	movs	r3, #128	; 0x80
 800b5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5c2:	e1d4      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a51      	ldr	r2, [pc, #324]	; (800b710 <UART_SetConfig+0x344>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d130      	bne.n	800b630 <UART_SetConfig+0x264>
 800b5ce:	4b4e      	ldr	r3, [pc, #312]	; (800b708 <UART_SetConfig+0x33c>)
 800b5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5d2:	f003 0307 	and.w	r3, r3, #7
 800b5d6:	2b05      	cmp	r3, #5
 800b5d8:	d826      	bhi.n	800b628 <UART_SetConfig+0x25c>
 800b5da:	a201      	add	r2, pc, #4	; (adr r2, 800b5e0 <UART_SetConfig+0x214>)
 800b5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e0:	0800b5f9 	.word	0x0800b5f9
 800b5e4:	0800b601 	.word	0x0800b601
 800b5e8:	0800b609 	.word	0x0800b609
 800b5ec:	0800b611 	.word	0x0800b611
 800b5f0:	0800b619 	.word	0x0800b619
 800b5f4:	0800b621 	.word	0x0800b621
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5fe:	e1b6      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b600:	2304      	movs	r3, #4
 800b602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b606:	e1b2      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b608:	2308      	movs	r3, #8
 800b60a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b60e:	e1ae      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b610:	2310      	movs	r3, #16
 800b612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b616:	e1aa      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b618:	2320      	movs	r3, #32
 800b61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b61e:	e1a6      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b620:	2340      	movs	r3, #64	; 0x40
 800b622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b626:	e1a2      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b628:	2380      	movs	r3, #128	; 0x80
 800b62a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b62e:	e19e      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a37      	ldr	r2, [pc, #220]	; (800b714 <UART_SetConfig+0x348>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d130      	bne.n	800b69c <UART_SetConfig+0x2d0>
 800b63a:	4b33      	ldr	r3, [pc, #204]	; (800b708 <UART_SetConfig+0x33c>)
 800b63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b63e:	f003 0307 	and.w	r3, r3, #7
 800b642:	2b05      	cmp	r3, #5
 800b644:	d826      	bhi.n	800b694 <UART_SetConfig+0x2c8>
 800b646:	a201      	add	r2, pc, #4	; (adr r2, 800b64c <UART_SetConfig+0x280>)
 800b648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64c:	0800b665 	.word	0x0800b665
 800b650:	0800b66d 	.word	0x0800b66d
 800b654:	0800b675 	.word	0x0800b675
 800b658:	0800b67d 	.word	0x0800b67d
 800b65c:	0800b685 	.word	0x0800b685
 800b660:	0800b68d 	.word	0x0800b68d
 800b664:	2300      	movs	r3, #0
 800b666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b66a:	e180      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b66c:	2304      	movs	r3, #4
 800b66e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b672:	e17c      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b674:	2308      	movs	r3, #8
 800b676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b67a:	e178      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b67c:	2310      	movs	r3, #16
 800b67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b682:	e174      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b684:	2320      	movs	r3, #32
 800b686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b68a:	e170      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b68c:	2340      	movs	r3, #64	; 0x40
 800b68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b692:	e16c      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b694:	2380      	movs	r3, #128	; 0x80
 800b696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b69a:	e168      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a1d      	ldr	r2, [pc, #116]	; (800b718 <UART_SetConfig+0x34c>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d142      	bne.n	800b72c <UART_SetConfig+0x360>
 800b6a6:	4b18      	ldr	r3, [pc, #96]	; (800b708 <UART_SetConfig+0x33c>)
 800b6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6aa:	f003 0307 	and.w	r3, r3, #7
 800b6ae:	2b05      	cmp	r3, #5
 800b6b0:	d838      	bhi.n	800b724 <UART_SetConfig+0x358>
 800b6b2:	a201      	add	r2, pc, #4	; (adr r2, 800b6b8 <UART_SetConfig+0x2ec>)
 800b6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b8:	0800b6d1 	.word	0x0800b6d1
 800b6bc:	0800b6d9 	.word	0x0800b6d9
 800b6c0:	0800b6e1 	.word	0x0800b6e1
 800b6c4:	0800b6e9 	.word	0x0800b6e9
 800b6c8:	0800b6f1 	.word	0x0800b6f1
 800b6cc:	0800b71d 	.word	0x0800b71d
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6d6:	e14a      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b6d8:	2304      	movs	r3, #4
 800b6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6de:	e146      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b6e0:	2308      	movs	r3, #8
 800b6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6e6:	e142      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b6e8:	2310      	movs	r3, #16
 800b6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6ee:	e13e      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b6f0:	2320      	movs	r3, #32
 800b6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6f6:	e13a      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b6f8:	cfff69f3 	.word	0xcfff69f3
 800b6fc:	58000c00 	.word	0x58000c00
 800b700:	11fff4ff 	.word	0x11fff4ff
 800b704:	40011000 	.word	0x40011000
 800b708:	58024400 	.word	0x58024400
 800b70c:	40004400 	.word	0x40004400
 800b710:	40004800 	.word	0x40004800
 800b714:	40004c00 	.word	0x40004c00
 800b718:	40005000 	.word	0x40005000
 800b71c:	2340      	movs	r3, #64	; 0x40
 800b71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b722:	e124      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b724:	2380      	movs	r3, #128	; 0x80
 800b726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b72a:	e120      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4acc      	ldr	r2, [pc, #816]	; (800ba64 <UART_SetConfig+0x698>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d176      	bne.n	800b824 <UART_SetConfig+0x458>
 800b736:	4bcc      	ldr	r3, [pc, #816]	; (800ba68 <UART_SetConfig+0x69c>)
 800b738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b73a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b73e:	2b28      	cmp	r3, #40	; 0x28
 800b740:	d86c      	bhi.n	800b81c <UART_SetConfig+0x450>
 800b742:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <UART_SetConfig+0x37c>)
 800b744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b748:	0800b7ed 	.word	0x0800b7ed
 800b74c:	0800b81d 	.word	0x0800b81d
 800b750:	0800b81d 	.word	0x0800b81d
 800b754:	0800b81d 	.word	0x0800b81d
 800b758:	0800b81d 	.word	0x0800b81d
 800b75c:	0800b81d 	.word	0x0800b81d
 800b760:	0800b81d 	.word	0x0800b81d
 800b764:	0800b81d 	.word	0x0800b81d
 800b768:	0800b7f5 	.word	0x0800b7f5
 800b76c:	0800b81d 	.word	0x0800b81d
 800b770:	0800b81d 	.word	0x0800b81d
 800b774:	0800b81d 	.word	0x0800b81d
 800b778:	0800b81d 	.word	0x0800b81d
 800b77c:	0800b81d 	.word	0x0800b81d
 800b780:	0800b81d 	.word	0x0800b81d
 800b784:	0800b81d 	.word	0x0800b81d
 800b788:	0800b7fd 	.word	0x0800b7fd
 800b78c:	0800b81d 	.word	0x0800b81d
 800b790:	0800b81d 	.word	0x0800b81d
 800b794:	0800b81d 	.word	0x0800b81d
 800b798:	0800b81d 	.word	0x0800b81d
 800b79c:	0800b81d 	.word	0x0800b81d
 800b7a0:	0800b81d 	.word	0x0800b81d
 800b7a4:	0800b81d 	.word	0x0800b81d
 800b7a8:	0800b805 	.word	0x0800b805
 800b7ac:	0800b81d 	.word	0x0800b81d
 800b7b0:	0800b81d 	.word	0x0800b81d
 800b7b4:	0800b81d 	.word	0x0800b81d
 800b7b8:	0800b81d 	.word	0x0800b81d
 800b7bc:	0800b81d 	.word	0x0800b81d
 800b7c0:	0800b81d 	.word	0x0800b81d
 800b7c4:	0800b81d 	.word	0x0800b81d
 800b7c8:	0800b80d 	.word	0x0800b80d
 800b7cc:	0800b81d 	.word	0x0800b81d
 800b7d0:	0800b81d 	.word	0x0800b81d
 800b7d4:	0800b81d 	.word	0x0800b81d
 800b7d8:	0800b81d 	.word	0x0800b81d
 800b7dc:	0800b81d 	.word	0x0800b81d
 800b7e0:	0800b81d 	.word	0x0800b81d
 800b7e4:	0800b81d 	.word	0x0800b81d
 800b7e8:	0800b815 	.word	0x0800b815
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7f2:	e0bc      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b7f4:	2304      	movs	r3, #4
 800b7f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7fa:	e0b8      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b7fc:	2308      	movs	r3, #8
 800b7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b802:	e0b4      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b804:	2310      	movs	r3, #16
 800b806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b80a:	e0b0      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b80c:	2320      	movs	r3, #32
 800b80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b812:	e0ac      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b814:	2340      	movs	r3, #64	; 0x40
 800b816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b81a:	e0a8      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b81c:	2380      	movs	r3, #128	; 0x80
 800b81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b822:	e0a4      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a90      	ldr	r2, [pc, #576]	; (800ba6c <UART_SetConfig+0x6a0>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d130      	bne.n	800b890 <UART_SetConfig+0x4c4>
 800b82e:	4b8e      	ldr	r3, [pc, #568]	; (800ba68 <UART_SetConfig+0x69c>)
 800b830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b832:	f003 0307 	and.w	r3, r3, #7
 800b836:	2b05      	cmp	r3, #5
 800b838:	d826      	bhi.n	800b888 <UART_SetConfig+0x4bc>
 800b83a:	a201      	add	r2, pc, #4	; (adr r2, 800b840 <UART_SetConfig+0x474>)
 800b83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b840:	0800b859 	.word	0x0800b859
 800b844:	0800b861 	.word	0x0800b861
 800b848:	0800b869 	.word	0x0800b869
 800b84c:	0800b871 	.word	0x0800b871
 800b850:	0800b879 	.word	0x0800b879
 800b854:	0800b881 	.word	0x0800b881
 800b858:	2300      	movs	r3, #0
 800b85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b85e:	e086      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b860:	2304      	movs	r3, #4
 800b862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b866:	e082      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b868:	2308      	movs	r3, #8
 800b86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b86e:	e07e      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b870:	2310      	movs	r3, #16
 800b872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b876:	e07a      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b878:	2320      	movs	r3, #32
 800b87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b87e:	e076      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b880:	2340      	movs	r3, #64	; 0x40
 800b882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b886:	e072      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b888:	2380      	movs	r3, #128	; 0x80
 800b88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b88e:	e06e      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a76      	ldr	r2, [pc, #472]	; (800ba70 <UART_SetConfig+0x6a4>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d130      	bne.n	800b8fc <UART_SetConfig+0x530>
 800b89a:	4b73      	ldr	r3, [pc, #460]	; (800ba68 <UART_SetConfig+0x69c>)
 800b89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b89e:	f003 0307 	and.w	r3, r3, #7
 800b8a2:	2b05      	cmp	r3, #5
 800b8a4:	d826      	bhi.n	800b8f4 <UART_SetConfig+0x528>
 800b8a6:	a201      	add	r2, pc, #4	; (adr r2, 800b8ac <UART_SetConfig+0x4e0>)
 800b8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ac:	0800b8c5 	.word	0x0800b8c5
 800b8b0:	0800b8cd 	.word	0x0800b8cd
 800b8b4:	0800b8d5 	.word	0x0800b8d5
 800b8b8:	0800b8dd 	.word	0x0800b8dd
 800b8bc:	0800b8e5 	.word	0x0800b8e5
 800b8c0:	0800b8ed 	.word	0x0800b8ed
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8ca:	e050      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b8cc:	2304      	movs	r3, #4
 800b8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8d2:	e04c      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b8d4:	2308      	movs	r3, #8
 800b8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8da:	e048      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b8dc:	2310      	movs	r3, #16
 800b8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8e2:	e044      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b8e4:	2320      	movs	r3, #32
 800b8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8ea:	e040      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b8ec:	2340      	movs	r3, #64	; 0x40
 800b8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8f2:	e03c      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b8f4:	2380      	movs	r3, #128	; 0x80
 800b8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8fa:	e038      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a5c      	ldr	r2, [pc, #368]	; (800ba74 <UART_SetConfig+0x6a8>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d130      	bne.n	800b968 <UART_SetConfig+0x59c>
 800b906:	4b58      	ldr	r3, [pc, #352]	; (800ba68 <UART_SetConfig+0x69c>)
 800b908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b90a:	f003 0307 	and.w	r3, r3, #7
 800b90e:	2b05      	cmp	r3, #5
 800b910:	d826      	bhi.n	800b960 <UART_SetConfig+0x594>
 800b912:	a201      	add	r2, pc, #4	; (adr r2, 800b918 <UART_SetConfig+0x54c>)
 800b914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b918:	0800b931 	.word	0x0800b931
 800b91c:	0800b939 	.word	0x0800b939
 800b920:	0800b941 	.word	0x0800b941
 800b924:	0800b949 	.word	0x0800b949
 800b928:	0800b951 	.word	0x0800b951
 800b92c:	0800b959 	.word	0x0800b959
 800b930:	2302      	movs	r3, #2
 800b932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b936:	e01a      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b938:	2304      	movs	r3, #4
 800b93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b93e:	e016      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b940:	2308      	movs	r3, #8
 800b942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b946:	e012      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b948:	2310      	movs	r3, #16
 800b94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b94e:	e00e      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b950:	2320      	movs	r3, #32
 800b952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b956:	e00a      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b958:	2340      	movs	r3, #64	; 0x40
 800b95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b95e:	e006      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b960:	2380      	movs	r3, #128	; 0x80
 800b962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b966:	e002      	b.n	800b96e <UART_SetConfig+0x5a2>
 800b968:	2380      	movs	r3, #128	; 0x80
 800b96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a40      	ldr	r2, [pc, #256]	; (800ba74 <UART_SetConfig+0x6a8>)
 800b974:	4293      	cmp	r3, r2
 800b976:	f040 80ef 	bne.w	800bb58 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b97a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b97e:	2b20      	cmp	r3, #32
 800b980:	dc46      	bgt.n	800ba10 <UART_SetConfig+0x644>
 800b982:	2b02      	cmp	r3, #2
 800b984:	f2c0 8081 	blt.w	800ba8a <UART_SetConfig+0x6be>
 800b988:	3b02      	subs	r3, #2
 800b98a:	2b1e      	cmp	r3, #30
 800b98c:	d87d      	bhi.n	800ba8a <UART_SetConfig+0x6be>
 800b98e:	a201      	add	r2, pc, #4	; (adr r2, 800b994 <UART_SetConfig+0x5c8>)
 800b990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b994:	0800ba17 	.word	0x0800ba17
 800b998:	0800ba8b 	.word	0x0800ba8b
 800b99c:	0800ba1f 	.word	0x0800ba1f
 800b9a0:	0800ba8b 	.word	0x0800ba8b
 800b9a4:	0800ba8b 	.word	0x0800ba8b
 800b9a8:	0800ba8b 	.word	0x0800ba8b
 800b9ac:	0800ba2f 	.word	0x0800ba2f
 800b9b0:	0800ba8b 	.word	0x0800ba8b
 800b9b4:	0800ba8b 	.word	0x0800ba8b
 800b9b8:	0800ba8b 	.word	0x0800ba8b
 800b9bc:	0800ba8b 	.word	0x0800ba8b
 800b9c0:	0800ba8b 	.word	0x0800ba8b
 800b9c4:	0800ba8b 	.word	0x0800ba8b
 800b9c8:	0800ba8b 	.word	0x0800ba8b
 800b9cc:	0800ba3f 	.word	0x0800ba3f
 800b9d0:	0800ba8b 	.word	0x0800ba8b
 800b9d4:	0800ba8b 	.word	0x0800ba8b
 800b9d8:	0800ba8b 	.word	0x0800ba8b
 800b9dc:	0800ba8b 	.word	0x0800ba8b
 800b9e0:	0800ba8b 	.word	0x0800ba8b
 800b9e4:	0800ba8b 	.word	0x0800ba8b
 800b9e8:	0800ba8b 	.word	0x0800ba8b
 800b9ec:	0800ba8b 	.word	0x0800ba8b
 800b9f0:	0800ba8b 	.word	0x0800ba8b
 800b9f4:	0800ba8b 	.word	0x0800ba8b
 800b9f8:	0800ba8b 	.word	0x0800ba8b
 800b9fc:	0800ba8b 	.word	0x0800ba8b
 800ba00:	0800ba8b 	.word	0x0800ba8b
 800ba04:	0800ba8b 	.word	0x0800ba8b
 800ba08:	0800ba8b 	.word	0x0800ba8b
 800ba0c:	0800ba7d 	.word	0x0800ba7d
 800ba10:	2b40      	cmp	r3, #64	; 0x40
 800ba12:	d036      	beq.n	800ba82 <UART_SetConfig+0x6b6>
 800ba14:	e039      	b.n	800ba8a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ba16:	f7fd f957 	bl	8008cc8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba1c:	e03b      	b.n	800ba96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba1e:	f107 0314 	add.w	r3, r7, #20
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fd f966 	bl	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba2c:	e033      	b.n	800ba96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba2e:	f107 0308 	add.w	r3, r7, #8
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fd fab2 	bl	8008f9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba3c:	e02b      	b.n	800ba96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba3e:	4b0a      	ldr	r3, [pc, #40]	; (800ba68 <UART_SetConfig+0x69c>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f003 0320 	and.w	r3, r3, #32
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d009      	beq.n	800ba5e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba4a:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <UART_SetConfig+0x69c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	08db      	lsrs	r3, r3, #3
 800ba50:	f003 0303 	and.w	r3, r3, #3
 800ba54:	4a08      	ldr	r2, [pc, #32]	; (800ba78 <UART_SetConfig+0x6ac>)
 800ba56:	fa22 f303 	lsr.w	r3, r2, r3
 800ba5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba5c:	e01b      	b.n	800ba96 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ba5e:	4b06      	ldr	r3, [pc, #24]	; (800ba78 <UART_SetConfig+0x6ac>)
 800ba60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba62:	e018      	b.n	800ba96 <UART_SetConfig+0x6ca>
 800ba64:	40011400 	.word	0x40011400
 800ba68:	58024400 	.word	0x58024400
 800ba6c:	40007800 	.word	0x40007800
 800ba70:	40007c00 	.word	0x40007c00
 800ba74:	58000c00 	.word	0x58000c00
 800ba78:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba7c:	4bc4      	ldr	r3, [pc, #784]	; (800bd90 <UART_SetConfig+0x9c4>)
 800ba7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba80:	e009      	b.n	800ba96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba88:	e005      	b.n	800ba96 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ba94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f000 81da 	beq.w	800be52 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa2:	4abc      	ldr	r2, [pc, #752]	; (800bd94 <UART_SetConfig+0x9c8>)
 800baa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baa8:	461a      	mov	r2, r3
 800baaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baac:	fbb3 f3f2 	udiv	r3, r3, r2
 800bab0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	685a      	ldr	r2, [r3, #4]
 800bab6:	4613      	mov	r3, r2
 800bab8:	005b      	lsls	r3, r3, #1
 800baba:	4413      	add	r3, r2
 800babc:	6a3a      	ldr	r2, [r7, #32]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d305      	bcc.n	800bace <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bac8:	6a3a      	ldr	r2, [r7, #32]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d903      	bls.n	800bad6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bad4:	e1bd      	b.n	800be52 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad8:	4618      	mov	r0, r3
 800bada:	f04f 0100 	mov.w	r1, #0
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae2:	4aac      	ldr	r2, [pc, #688]	; (800bd94 <UART_SetConfig+0x9c8>)
 800bae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bae8:	b29a      	uxth	r2, r3
 800baea:	f04f 0300 	mov.w	r3, #0
 800baee:	f7f4 fbf3 	bl	80002d8 <__aeabi_uldivmod>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	4610      	mov	r0, r2
 800baf8:	4619      	mov	r1, r3
 800bafa:	f04f 0200 	mov.w	r2, #0
 800bafe:	f04f 0300 	mov.w	r3, #0
 800bb02:	020b      	lsls	r3, r1, #8
 800bb04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb08:	0202      	lsls	r2, r0, #8
 800bb0a:	6879      	ldr	r1, [r7, #4]
 800bb0c:	6849      	ldr	r1, [r1, #4]
 800bb0e:	0849      	lsrs	r1, r1, #1
 800bb10:	4608      	mov	r0, r1
 800bb12:	f04f 0100 	mov.w	r1, #0
 800bb16:	1814      	adds	r4, r2, r0
 800bb18:	eb43 0501 	adc.w	r5, r3, r1
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	461a      	mov	r2, r3
 800bb22:	f04f 0300 	mov.w	r3, #0
 800bb26:	4620      	mov	r0, r4
 800bb28:	4629      	mov	r1, r5
 800bb2a:	f7f4 fbd5 	bl	80002d8 <__aeabi_uldivmod>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
 800bb32:	4613      	mov	r3, r2
 800bb34:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb3c:	d308      	bcc.n	800bb50 <UART_SetConfig+0x784>
 800bb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb44:	d204      	bcs.n	800bb50 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb4c:	60da      	str	r2, [r3, #12]
 800bb4e:	e180      	b.n	800be52 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bb56:	e17c      	b.n	800be52 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	69db      	ldr	r3, [r3, #28]
 800bb5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb60:	f040 80bf 	bne.w	800bce2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800bb64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bb68:	2b20      	cmp	r3, #32
 800bb6a:	dc49      	bgt.n	800bc00 <UART_SetConfig+0x834>
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	db7c      	blt.n	800bc6a <UART_SetConfig+0x89e>
 800bb70:	2b20      	cmp	r3, #32
 800bb72:	d87a      	bhi.n	800bc6a <UART_SetConfig+0x89e>
 800bb74:	a201      	add	r2, pc, #4	; (adr r2, 800bb7c <UART_SetConfig+0x7b0>)
 800bb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7a:	bf00      	nop
 800bb7c:	0800bc07 	.word	0x0800bc07
 800bb80:	0800bc0f 	.word	0x0800bc0f
 800bb84:	0800bc6b 	.word	0x0800bc6b
 800bb88:	0800bc6b 	.word	0x0800bc6b
 800bb8c:	0800bc17 	.word	0x0800bc17
 800bb90:	0800bc6b 	.word	0x0800bc6b
 800bb94:	0800bc6b 	.word	0x0800bc6b
 800bb98:	0800bc6b 	.word	0x0800bc6b
 800bb9c:	0800bc27 	.word	0x0800bc27
 800bba0:	0800bc6b 	.word	0x0800bc6b
 800bba4:	0800bc6b 	.word	0x0800bc6b
 800bba8:	0800bc6b 	.word	0x0800bc6b
 800bbac:	0800bc6b 	.word	0x0800bc6b
 800bbb0:	0800bc6b 	.word	0x0800bc6b
 800bbb4:	0800bc6b 	.word	0x0800bc6b
 800bbb8:	0800bc6b 	.word	0x0800bc6b
 800bbbc:	0800bc37 	.word	0x0800bc37
 800bbc0:	0800bc6b 	.word	0x0800bc6b
 800bbc4:	0800bc6b 	.word	0x0800bc6b
 800bbc8:	0800bc6b 	.word	0x0800bc6b
 800bbcc:	0800bc6b 	.word	0x0800bc6b
 800bbd0:	0800bc6b 	.word	0x0800bc6b
 800bbd4:	0800bc6b 	.word	0x0800bc6b
 800bbd8:	0800bc6b 	.word	0x0800bc6b
 800bbdc:	0800bc6b 	.word	0x0800bc6b
 800bbe0:	0800bc6b 	.word	0x0800bc6b
 800bbe4:	0800bc6b 	.word	0x0800bc6b
 800bbe8:	0800bc6b 	.word	0x0800bc6b
 800bbec:	0800bc6b 	.word	0x0800bc6b
 800bbf0:	0800bc6b 	.word	0x0800bc6b
 800bbf4:	0800bc6b 	.word	0x0800bc6b
 800bbf8:	0800bc6b 	.word	0x0800bc6b
 800bbfc:	0800bc5d 	.word	0x0800bc5d
 800bc00:	2b40      	cmp	r3, #64	; 0x40
 800bc02:	d02e      	beq.n	800bc62 <UART_SetConfig+0x896>
 800bc04:	e031      	b.n	800bc6a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc06:	f7fb fc21 	bl	800744c <HAL_RCC_GetPCLK1Freq>
 800bc0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bc0c:	e033      	b.n	800bc76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc0e:	f7fb fc33 	bl	8007478 <HAL_RCC_GetPCLK2Freq>
 800bc12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bc14:	e02f      	b.n	800bc76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc16:	f107 0314 	add.w	r3, r7, #20
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fd f86a 	bl	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bc24:	e027      	b.n	800bc76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc26:	f107 0308 	add.w	r3, r7, #8
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fd f9b6 	bl	8008f9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bc34:	e01f      	b.n	800bc76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc36:	4b58      	ldr	r3, [pc, #352]	; (800bd98 <UART_SetConfig+0x9cc>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 0320 	and.w	r3, r3, #32
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d009      	beq.n	800bc56 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc42:	4b55      	ldr	r3, [pc, #340]	; (800bd98 <UART_SetConfig+0x9cc>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	08db      	lsrs	r3, r3, #3
 800bc48:	f003 0303 	and.w	r3, r3, #3
 800bc4c:	4a53      	ldr	r2, [pc, #332]	; (800bd9c <UART_SetConfig+0x9d0>)
 800bc4e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc54:	e00f      	b.n	800bc76 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800bc56:	4b51      	ldr	r3, [pc, #324]	; (800bd9c <UART_SetConfig+0x9d0>)
 800bc58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bc5a:	e00c      	b.n	800bc76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc5c:	4b4c      	ldr	r3, [pc, #304]	; (800bd90 <UART_SetConfig+0x9c4>)
 800bc5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bc60:	e009      	b.n	800bc76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bc68:	e005      	b.n	800bc76 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bc74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f000 80ea 	beq.w	800be52 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc82:	4a44      	ldr	r2, [pc, #272]	; (800bd94 <UART_SetConfig+0x9c8>)
 800bc84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc88:	461a      	mov	r2, r3
 800bc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc90:	005a      	lsls	r2, r3, #1
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	085b      	lsrs	r3, r3, #1
 800bc98:	441a      	add	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	2b0f      	cmp	r3, #15
 800bcaa:	d916      	bls.n	800bcda <UART_SetConfig+0x90e>
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcb2:	d212      	bcs.n	800bcda <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	f023 030f 	bic.w	r3, r3, #15
 800bcbc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	085b      	lsrs	r3, r3, #1
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	f003 0307 	and.w	r3, r3, #7
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bccc:	4313      	orrs	r3, r2
 800bcce:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bcd6:	60da      	str	r2, [r3, #12]
 800bcd8:	e0bb      	b.n	800be52 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bce0:	e0b7      	b.n	800be52 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bce2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bce6:	2b20      	cmp	r3, #32
 800bce8:	dc4a      	bgt.n	800bd80 <UART_SetConfig+0x9b4>
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f2c0 8086 	blt.w	800bdfc <UART_SetConfig+0xa30>
 800bcf0:	2b20      	cmp	r3, #32
 800bcf2:	f200 8083 	bhi.w	800bdfc <UART_SetConfig+0xa30>
 800bcf6:	a201      	add	r2, pc, #4	; (adr r2, 800bcfc <UART_SetConfig+0x930>)
 800bcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcfc:	0800bd87 	.word	0x0800bd87
 800bd00:	0800bda1 	.word	0x0800bda1
 800bd04:	0800bdfd 	.word	0x0800bdfd
 800bd08:	0800bdfd 	.word	0x0800bdfd
 800bd0c:	0800bda9 	.word	0x0800bda9
 800bd10:	0800bdfd 	.word	0x0800bdfd
 800bd14:	0800bdfd 	.word	0x0800bdfd
 800bd18:	0800bdfd 	.word	0x0800bdfd
 800bd1c:	0800bdb9 	.word	0x0800bdb9
 800bd20:	0800bdfd 	.word	0x0800bdfd
 800bd24:	0800bdfd 	.word	0x0800bdfd
 800bd28:	0800bdfd 	.word	0x0800bdfd
 800bd2c:	0800bdfd 	.word	0x0800bdfd
 800bd30:	0800bdfd 	.word	0x0800bdfd
 800bd34:	0800bdfd 	.word	0x0800bdfd
 800bd38:	0800bdfd 	.word	0x0800bdfd
 800bd3c:	0800bdc9 	.word	0x0800bdc9
 800bd40:	0800bdfd 	.word	0x0800bdfd
 800bd44:	0800bdfd 	.word	0x0800bdfd
 800bd48:	0800bdfd 	.word	0x0800bdfd
 800bd4c:	0800bdfd 	.word	0x0800bdfd
 800bd50:	0800bdfd 	.word	0x0800bdfd
 800bd54:	0800bdfd 	.word	0x0800bdfd
 800bd58:	0800bdfd 	.word	0x0800bdfd
 800bd5c:	0800bdfd 	.word	0x0800bdfd
 800bd60:	0800bdfd 	.word	0x0800bdfd
 800bd64:	0800bdfd 	.word	0x0800bdfd
 800bd68:	0800bdfd 	.word	0x0800bdfd
 800bd6c:	0800bdfd 	.word	0x0800bdfd
 800bd70:	0800bdfd 	.word	0x0800bdfd
 800bd74:	0800bdfd 	.word	0x0800bdfd
 800bd78:	0800bdfd 	.word	0x0800bdfd
 800bd7c:	0800bdef 	.word	0x0800bdef
 800bd80:	2b40      	cmp	r3, #64	; 0x40
 800bd82:	d037      	beq.n	800bdf4 <UART_SetConfig+0xa28>
 800bd84:	e03a      	b.n	800bdfc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd86:	f7fb fb61 	bl	800744c <HAL_RCC_GetPCLK1Freq>
 800bd8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bd8c:	e03c      	b.n	800be08 <UART_SetConfig+0xa3c>
 800bd8e:	bf00      	nop
 800bd90:	003d0900 	.word	0x003d0900
 800bd94:	0800c970 	.word	0x0800c970
 800bd98:	58024400 	.word	0x58024400
 800bd9c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bda0:	f7fb fb6a 	bl	8007478 <HAL_RCC_GetPCLK2Freq>
 800bda4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bda6:	e02f      	b.n	800be08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bda8:	f107 0314 	add.w	r3, r7, #20
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7fc ffa1 	bl	8008cf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bdb6:	e027      	b.n	800be08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdb8:	f107 0308 	add.w	r3, r7, #8
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7fd f8ed 	bl	8008f9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bdc6:	e01f      	b.n	800be08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdc8:	4b2c      	ldr	r3, [pc, #176]	; (800be7c <UART_SetConfig+0xab0>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f003 0320 	and.w	r3, r3, #32
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d009      	beq.n	800bde8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bdd4:	4b29      	ldr	r3, [pc, #164]	; (800be7c <UART_SetConfig+0xab0>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	08db      	lsrs	r3, r3, #3
 800bdda:	f003 0303 	and.w	r3, r3, #3
 800bdde:	4a28      	ldr	r2, [pc, #160]	; (800be80 <UART_SetConfig+0xab4>)
 800bde0:	fa22 f303 	lsr.w	r3, r2, r3
 800bde4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bde6:	e00f      	b.n	800be08 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800bde8:	4b25      	ldr	r3, [pc, #148]	; (800be80 <UART_SetConfig+0xab4>)
 800bdea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bdec:	e00c      	b.n	800be08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bdee:	4b25      	ldr	r3, [pc, #148]	; (800be84 <UART_SetConfig+0xab8>)
 800bdf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bdf2:	e009      	b.n	800be08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bdfa:	e005      	b.n	800be08 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800be06:	bf00      	nop
    }

    if (pclk != 0U)
 800be08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d021      	beq.n	800be52 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be12:	4a1d      	ldr	r2, [pc, #116]	; (800be88 <UART_SetConfig+0xabc>)
 800be14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be18:	461a      	mov	r2, r3
 800be1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1c:	fbb3 f2f2 	udiv	r2, r3, r2
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	085b      	lsrs	r3, r3, #1
 800be26:	441a      	add	r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be30:	b29b      	uxth	r3, r3
 800be32:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be36:	2b0f      	cmp	r3, #15
 800be38:	d908      	bls.n	800be4c <UART_SetConfig+0xa80>
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be40:	d204      	bcs.n	800be4c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be48:	60da      	str	r2, [r3, #12]
 800be4a:	e002      	b.n	800be52 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2201      	movs	r2, #1
 800be5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800be6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800be72:	4618      	mov	r0, r3
 800be74:	3738      	adds	r7, #56	; 0x38
 800be76:	46bd      	mov	sp, r7
 800be78:	bdb0      	pop	{r4, r5, r7, pc}
 800be7a:	bf00      	nop
 800be7c:	58024400 	.word	0x58024400
 800be80:	03d09000 	.word	0x03d09000
 800be84:	003d0900 	.word	0x003d0900
 800be88:	0800c970 	.word	0x0800c970

0800be8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be98:	f003 0301 	and.w	r3, r3, #1
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00a      	beq.n	800beb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	430a      	orrs	r2, r1
 800beb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beba:	f003 0302 	and.w	r3, r3, #2
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00a      	beq.n	800bed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	430a      	orrs	r2, r1
 800bed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bedc:	f003 0304 	and.w	r3, r3, #4
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00a      	beq.n	800befa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	430a      	orrs	r2, r1
 800bef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befe:	f003 0308 	and.w	r3, r3, #8
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	430a      	orrs	r2, r1
 800bf1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf20:	f003 0310 	and.w	r3, r3, #16
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00a      	beq.n	800bf3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	430a      	orrs	r2, r1
 800bf3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf42:	f003 0320 	and.w	r3, r3, #32
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00a      	beq.n	800bf60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	430a      	orrs	r2, r1
 800bf5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d01a      	beq.n	800bfa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	430a      	orrs	r2, r1
 800bf80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf8a:	d10a      	bne.n	800bfa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	430a      	orrs	r2, r1
 800bfa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00a      	beq.n	800bfc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	430a      	orrs	r2, r1
 800bfc2:	605a      	str	r2, [r3, #4]
  }
}
 800bfc4:	bf00      	nop
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af02      	add	r7, sp, #8
 800bfd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfe0:	f7f6 fd70 	bl	8002ac4 <HAL_GetTick>
 800bfe4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f003 0308 	and.w	r3, r3, #8
 800bff0:	2b08      	cmp	r3, #8
 800bff2:	d10e      	bne.n	800c012 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bff4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 f82f 	bl	800c066 <UART_WaitOnFlagUntilTimeout>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d001      	beq.n	800c012 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c00e:	2303      	movs	r3, #3
 800c010:	e025      	b.n	800c05e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 0304 	and.w	r3, r3, #4
 800c01c:	2b04      	cmp	r3, #4
 800c01e:	d10e      	bne.n	800c03e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f819 	bl	800c066 <UART_WaitOnFlagUntilTimeout>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c03a:	2303      	movs	r3, #3
 800c03c:	e00f      	b.n	800c05e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2220      	movs	r2, #32
 800c042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2220      	movs	r2, #32
 800c04a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b084      	sub	sp, #16
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	60b9      	str	r1, [r7, #8]
 800c070:	603b      	str	r3, [r7, #0]
 800c072:	4613      	mov	r3, r2
 800c074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c076:	e062      	b.n	800c13e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c07e:	d05e      	beq.n	800c13e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c080:	f7f6 fd20 	bl	8002ac4 <HAL_GetTick>
 800c084:	4602      	mov	r2, r0
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	1ad3      	subs	r3, r2, r3
 800c08a:	69ba      	ldr	r2, [r7, #24]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d302      	bcc.n	800c096 <UART_WaitOnFlagUntilTimeout+0x30>
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d11d      	bne.n	800c0d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c0a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	689a      	ldr	r2, [r3, #8]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f022 0201 	bic.w	r2, r2, #1
 800c0b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2220      	movs	r2, #32
 800c0ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2220      	movs	r2, #32
 800c0c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	e045      	b.n	800c15e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 0304 	and.w	r3, r3, #4
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d02e      	beq.n	800c13e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	69db      	ldr	r3, [r3, #28]
 800c0e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0ee:	d126      	bne.n	800c13e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c108:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	689a      	ldr	r2, [r3, #8]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f022 0201 	bic.w	r2, r2, #1
 800c118:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2220      	movs	r2, #32
 800c11e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2220      	movs	r2, #32
 800c126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2220      	movs	r2, #32
 800c12e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2200      	movs	r2, #0
 800c136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c13a:	2303      	movs	r3, #3
 800c13c:	e00f      	b.n	800c15e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	69da      	ldr	r2, [r3, #28]
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	4013      	ands	r3, r2
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	bf0c      	ite	eq
 800c14e:	2301      	moveq	r3, #1
 800c150:	2300      	movne	r3, #0
 800c152:	b2db      	uxtb	r3, r3
 800c154:	461a      	mov	r2, r3
 800c156:	79fb      	ldrb	r3, [r7, #7]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d08d      	beq.n	800c078 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c166:	b480      	push	{r7}
 800c168:	b085      	sub	sp, #20
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c174:	2b01      	cmp	r3, #1
 800c176:	d101      	bne.n	800c17c <HAL_UARTEx_DisableFifoMode+0x16>
 800c178:	2302      	movs	r3, #2
 800c17a:	e027      	b.n	800c1cc <HAL_UARTEx_DisableFifoMode+0x66>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2224      	movs	r2, #36	; 0x24
 800c188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f022 0201 	bic.w	r2, r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c1aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2220      	movs	r2, #32
 800c1be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3714      	adds	r7, #20
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d101      	bne.n	800c1f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	e02d      	b.n	800c24c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2224      	movs	r2, #36	; 0x24
 800c1fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f022 0201 	bic.w	r2, r2, #1
 800c216:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	683a      	ldr	r2, [r7, #0]
 800c228:	430a      	orrs	r2, r1
 800c22a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f84f 	bl	800c2d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2220      	movs	r2, #32
 800c23e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c264:	2b01      	cmp	r3, #1
 800c266:	d101      	bne.n	800c26c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c268:	2302      	movs	r3, #2
 800c26a:	e02d      	b.n	800c2c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2224      	movs	r2, #36	; 0x24
 800c278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f022 0201 	bic.w	r2, r2, #1
 800c292:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f811 	bl	800c2d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2220      	movs	r2, #32
 800c2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d108      	bne.n	800c2f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c2f0:	e031      	b.n	800c356 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c2f2:	2310      	movs	r3, #16
 800c2f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c2f6:	2310      	movs	r3, #16
 800c2f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	0e5b      	lsrs	r3, r3, #25
 800c302:	b2db      	uxtb	r3, r3
 800c304:	f003 0307 	and.w	r3, r3, #7
 800c308:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	0f5b      	lsrs	r3, r3, #29
 800c312:	b2db      	uxtb	r3, r3
 800c314:	f003 0307 	and.w	r3, r3, #7
 800c318:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c31a:	7bbb      	ldrb	r3, [r7, #14]
 800c31c:	7b3a      	ldrb	r2, [r7, #12]
 800c31e:	4911      	ldr	r1, [pc, #68]	; (800c364 <UARTEx_SetNbDataToProcess+0x94>)
 800c320:	5c8a      	ldrb	r2, [r1, r2]
 800c322:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c326:	7b3a      	ldrb	r2, [r7, #12]
 800c328:	490f      	ldr	r1, [pc, #60]	; (800c368 <UARTEx_SetNbDataToProcess+0x98>)
 800c32a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c32c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c330:	b29a      	uxth	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c338:	7bfb      	ldrb	r3, [r7, #15]
 800c33a:	7b7a      	ldrb	r2, [r7, #13]
 800c33c:	4909      	ldr	r1, [pc, #36]	; (800c364 <UARTEx_SetNbDataToProcess+0x94>)
 800c33e:	5c8a      	ldrb	r2, [r1, r2]
 800c340:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c344:	7b7a      	ldrb	r2, [r7, #13]
 800c346:	4908      	ldr	r1, [pc, #32]	; (800c368 <UARTEx_SetNbDataToProcess+0x98>)
 800c348:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c34a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c34e:	b29a      	uxth	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c356:	bf00      	nop
 800c358:	3714      	adds	r7, #20
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	0800c988 	.word	0x0800c988
 800c368:	0800c990 	.word	0x0800c990

0800c36c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c36c:	b084      	sub	sp, #16
 800c36e:	b580      	push	{r7, lr}
 800c370:	b084      	sub	sp, #16
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
 800c376:	f107 001c 	add.w	r0, r7, #28
 800c37a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	2b01      	cmp	r3, #1
 800c382:	d120      	bne.n	800c3c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c388:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	68da      	ldr	r2, [r3, #12]
 800c394:	4b2a      	ldr	r3, [pc, #168]	; (800c440 <USB_CoreInit+0xd4>)
 800c396:	4013      	ands	r3, r2
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d105      	bne.n	800c3ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 fa60 	bl	800c880 <USB_CoreReset>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	73fb      	strb	r3, [r7, #15]
 800c3c4:	e01a      	b.n	800c3fc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 fa54 	bl	800c880 <USB_CoreReset>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c3dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d106      	bne.n	800c3f0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	639a      	str	r2, [r3, #56]	; 0x38
 800c3ee:	e005      	b.n	800c3fc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d116      	bne.n	800c430 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c406:	b29a      	uxth	r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c410:	4b0c      	ldr	r3, [pc, #48]	; (800c444 <USB_CoreInit+0xd8>)
 800c412:	4313      	orrs	r3, r2
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	f043 0206 	orr.w	r2, r3, #6
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	f043 0220 	orr.w	r2, r3, #32
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c430:	7bfb      	ldrb	r3, [r7, #15]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c43c:	b004      	add	sp, #16
 800c43e:	4770      	bx	lr
 800c440:	ffbdffbf 	.word	0xffbdffbf
 800c444:	03ee0000 	.word	0x03ee0000

0800c448 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	f023 0201 	bic.w	r2, r3, #1
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	370c      	adds	r7, #12
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr

0800c46a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b082      	sub	sp, #8
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
 800c472:	460b      	mov	r3, r1
 800c474:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c482:	78fb      	ldrb	r3, [r7, #3]
 800c484:	2b01      	cmp	r3, #1
 800c486:	d106      	bne.n	800c496 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	60da      	str	r2, [r3, #12]
 800c494:	e00b      	b.n	800c4ae <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c496:	78fb      	ldrb	r3, [r7, #3]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d106      	bne.n	800c4aa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	60da      	str	r2, [r3, #12]
 800c4a8:	e001      	b.n	800c4ae <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	e003      	b.n	800c4b6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c4ae:	2032      	movs	r0, #50	; 0x32
 800c4b0:	f7f6 fb14 	bl	8002adc <HAL_Delay>

  return HAL_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
	...

0800c4c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c4c0:	b084      	sub	sp, #16
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b086      	sub	sp, #24
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
 800c4ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c4ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c4da:	2300      	movs	r3, #0
 800c4dc:	613b      	str	r3, [r7, #16]
 800c4de:	e009      	b.n	800c4f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	3340      	adds	r3, #64	; 0x40
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	4413      	add	r3, r2
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	613b      	str	r3, [r7, #16]
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	2b0e      	cmp	r3, #14
 800c4f8:	d9f2      	bls.n	800c4e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c4fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d11c      	bne.n	800c53a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c50e:	f043 0302 	orr.w	r3, r3, #2
 800c512:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c518:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	601a      	str	r2, [r3, #0]
 800c538:	e005      	b.n	800c546 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c54c:	461a      	mov	r2, r3
 800c54e:	2300      	movs	r3, #0
 800c550:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c558:	4619      	mov	r1, r3
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c560:	461a      	mov	r2, r3
 800c562:	680b      	ldr	r3, [r1, #0]
 800c564:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d10c      	bne.n	800c586 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d104      	bne.n	800c57c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c572:	2100      	movs	r1, #0
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f949 	bl	800c80c <USB_SetDevSpeed>
 800c57a:	e008      	b.n	800c58e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c57c:	2101      	movs	r1, #1
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 f944 	bl	800c80c <USB_SetDevSpeed>
 800c584:	e003      	b.n	800c58e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c586:	2103      	movs	r1, #3
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 f93f 	bl	800c80c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c58e:	2110      	movs	r1, #16
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 f8f3 	bl	800c77c <USB_FlushTxFifo>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d001      	beq.n	800c5a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c59c:	2301      	movs	r3, #1
 800c59e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f911 	bl	800c7c8 <USB_FlushRxFifo>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d001      	beq.n	800c5b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	613b      	str	r3, [r7, #16]
 800c5d8:	e043      	b.n	800c662 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	015a      	lsls	r2, r3, #5
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5f0:	d118      	bne.n	800c624 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10a      	bne.n	800c60e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	015a      	lsls	r2, r3, #5
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4413      	add	r3, r2
 800c600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c604:	461a      	mov	r2, r3
 800c606:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c60a:	6013      	str	r3, [r2, #0]
 800c60c:	e013      	b.n	800c636 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	015a      	lsls	r2, r3, #5
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	4413      	add	r3, r2
 800c616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c61a:	461a      	mov	r2, r3
 800c61c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c620:	6013      	str	r3, [r2, #0]
 800c622:	e008      	b.n	800c636 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	015a      	lsls	r2, r3, #5
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	4413      	add	r3, r2
 800c62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c630:	461a      	mov	r2, r3
 800c632:	2300      	movs	r3, #0
 800c634:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	015a      	lsls	r2, r3, #5
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	4413      	add	r3, r2
 800c63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c642:	461a      	mov	r2, r3
 800c644:	2300      	movs	r3, #0
 800c646:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	015a      	lsls	r2, r3, #5
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	4413      	add	r3, r2
 800c650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c654:	461a      	mov	r2, r3
 800c656:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c65a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	3301      	adds	r3, #1
 800c660:	613b      	str	r3, [r7, #16]
 800c662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	429a      	cmp	r2, r3
 800c668:	d3b7      	bcc.n	800c5da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c66a:	2300      	movs	r3, #0
 800c66c:	613b      	str	r3, [r7, #16]
 800c66e:	e043      	b.n	800c6f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	015a      	lsls	r2, r3, #5
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	4413      	add	r3, r2
 800c678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c686:	d118      	bne.n	800c6ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10a      	bne.n	800c6a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	015a      	lsls	r2, r3, #5
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	4413      	add	r3, r2
 800c696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c69a:	461a      	mov	r2, r3
 800c69c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c6a0:	6013      	str	r3, [r2, #0]
 800c6a2:	e013      	b.n	800c6cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	015a      	lsls	r2, r3, #5
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c6b6:	6013      	str	r3, [r2, #0]
 800c6b8:	e008      	b.n	800c6cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	015a      	lsls	r2, r3, #5
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	015a      	lsls	r2, r3, #5
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6d8:	461a      	mov	r2, r3
 800c6da:	2300      	movs	r3, #0
 800c6dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	015a      	lsls	r2, r3, #5
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c6f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	613b      	str	r3, [r7, #16]
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fa:	693a      	ldr	r2, [r7, #16]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d3b7      	bcc.n	800c670 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c706:	691b      	ldr	r3, [r3, #16]
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c70e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c712:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c720:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	2b00      	cmp	r3, #0
 800c726:	d105      	bne.n	800c734 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	699b      	ldr	r3, [r3, #24]
 800c72c:	f043 0210 	orr.w	r2, r3, #16
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	699a      	ldr	r2, [r3, #24]
 800c738:	4b0e      	ldr	r3, [pc, #56]	; (800c774 <USB_DevInit+0x2b4>)
 800c73a:	4313      	orrs	r3, r2
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c742:	2b00      	cmp	r3, #0
 800c744:	d005      	beq.n	800c752 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	f043 0208 	orr.w	r2, r3, #8
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c754:	2b01      	cmp	r3, #1
 800c756:	d105      	bne.n	800c764 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	699a      	ldr	r2, [r3, #24]
 800c75c:	4b06      	ldr	r3, [pc, #24]	; (800c778 <USB_DevInit+0x2b8>)
 800c75e:	4313      	orrs	r3, r2
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c764:	7dfb      	ldrb	r3, [r7, #23]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3718      	adds	r7, #24
 800c76a:	46bd      	mov	sp, r7
 800c76c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c770:	b004      	add	sp, #16
 800c772:	4770      	bx	lr
 800c774:	803c3800 	.word	0x803c3800
 800c778:	40000004 	.word	0x40000004

0800c77c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c786:	2300      	movs	r3, #0
 800c788:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	019b      	lsls	r3, r3, #6
 800c78e:	f043 0220 	orr.w	r2, r3, #32
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3301      	adds	r3, #1
 800c79a:	60fb      	str	r3, [r7, #12]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	4a09      	ldr	r2, [pc, #36]	; (800c7c4 <USB_FlushTxFifo+0x48>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d901      	bls.n	800c7a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	e006      	b.n	800c7b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	f003 0320 	and.w	r3, r3, #32
 800c7b0:	2b20      	cmp	r3, #32
 800c7b2:	d0f0      	beq.n	800c796 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	00030d40 	.word	0x00030d40

0800c7c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2210      	movs	r2, #16
 800c7d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	60fb      	str	r3, [r7, #12]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	4a09      	ldr	r2, [pc, #36]	; (800c808 <USB_FlushRxFifo+0x40>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d901      	bls.n	800c7ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c7e8:	2303      	movs	r3, #3
 800c7ea:	e006      	b.n	800c7fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	691b      	ldr	r3, [r3, #16]
 800c7f0:	f003 0310 	and.w	r3, r3, #16
 800c7f4:	2b10      	cmp	r3, #16
 800c7f6:	d0f0      	beq.n	800c7da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3714      	adds	r7, #20
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	00030d40 	.word	0x00030d40

0800c80c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	460b      	mov	r3, r1
 800c816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	78fb      	ldrb	r3, [r7, #3]
 800c826:	68f9      	ldr	r1, [r7, #12]
 800c828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c82c:	4313      	orrs	r3, r2
 800c82e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3714      	adds	r7, #20
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr

0800c83e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c83e:	b480      	push	{r7}
 800c840:	b085      	sub	sp, #20
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c858:	f023 0303 	bic.w	r3, r3, #3
 800c85c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c86c:	f043 0302 	orr.w	r3, r3, #2
 800c870:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3714      	adds	r7, #20
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c888:	2300      	movs	r3, #0
 800c88a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	3301      	adds	r3, #1
 800c890:	60fb      	str	r3, [r7, #12]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	4a13      	ldr	r2, [pc, #76]	; (800c8e4 <USB_CoreReset+0x64>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d901      	bls.n	800c89e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	e01b      	b.n	800c8d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	691b      	ldr	r3, [r3, #16]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	daf2      	bge.n	800c88c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	691b      	ldr	r3, [r3, #16]
 800c8ae:	f043 0201 	orr.w	r2, r3, #1
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	60fb      	str	r3, [r7, #12]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	4a09      	ldr	r2, [pc, #36]	; (800c8e4 <USB_CoreReset+0x64>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d901      	bls.n	800c8c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c8c4:	2303      	movs	r3, #3
 800c8c6:	e006      	b.n	800c8d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	f003 0301 	and.w	r3, r3, #1
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d0f0      	beq.n	800c8b6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3714      	adds	r7, #20
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	00030d40 	.word	0x00030d40

0800c8e8 <__libc_init_array>:
 800c8e8:	b570      	push	{r4, r5, r6, lr}
 800c8ea:	4d0d      	ldr	r5, [pc, #52]	; (800c920 <__libc_init_array+0x38>)
 800c8ec:	4c0d      	ldr	r4, [pc, #52]	; (800c924 <__libc_init_array+0x3c>)
 800c8ee:	1b64      	subs	r4, r4, r5
 800c8f0:	10a4      	asrs	r4, r4, #2
 800c8f2:	2600      	movs	r6, #0
 800c8f4:	42a6      	cmp	r6, r4
 800c8f6:	d109      	bne.n	800c90c <__libc_init_array+0x24>
 800c8f8:	4d0b      	ldr	r5, [pc, #44]	; (800c928 <__libc_init_array+0x40>)
 800c8fa:	4c0c      	ldr	r4, [pc, #48]	; (800c92c <__libc_init_array+0x44>)
 800c8fc:	f000 f820 	bl	800c940 <_init>
 800c900:	1b64      	subs	r4, r4, r5
 800c902:	10a4      	asrs	r4, r4, #2
 800c904:	2600      	movs	r6, #0
 800c906:	42a6      	cmp	r6, r4
 800c908:	d105      	bne.n	800c916 <__libc_init_array+0x2e>
 800c90a:	bd70      	pop	{r4, r5, r6, pc}
 800c90c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c910:	4798      	blx	r3
 800c912:	3601      	adds	r6, #1
 800c914:	e7ee      	b.n	800c8f4 <__libc_init_array+0xc>
 800c916:	f855 3b04 	ldr.w	r3, [r5], #4
 800c91a:	4798      	blx	r3
 800c91c:	3601      	adds	r6, #1
 800c91e:	e7f2      	b.n	800c906 <__libc_init_array+0x1e>
 800c920:	0800c9a0 	.word	0x0800c9a0
 800c924:	0800c9a0 	.word	0x0800c9a0
 800c928:	0800c9a0 	.word	0x0800c9a0
 800c92c:	0800c9a4 	.word	0x0800c9a4

0800c930 <memset>:
 800c930:	4402      	add	r2, r0
 800c932:	4603      	mov	r3, r0
 800c934:	4293      	cmp	r3, r2
 800c936:	d100      	bne.n	800c93a <memset+0xa>
 800c938:	4770      	bx	lr
 800c93a:	f803 1b01 	strb.w	r1, [r3], #1
 800c93e:	e7f9      	b.n	800c934 <memset+0x4>

0800c940 <_init>:
 800c940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c942:	bf00      	nop
 800c944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c946:	bc08      	pop	{r3}
 800c948:	469e      	mov	lr, r3
 800c94a:	4770      	bx	lr

0800c94c <_fini>:
 800c94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94e:	bf00      	nop
 800c950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c952:	bc08      	pop	{r3}
 800c954:	469e      	mov	lr, r3
 800c956:	4770      	bx	lr
