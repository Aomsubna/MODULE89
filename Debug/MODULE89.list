
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca7c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800cd14  0800cd14  0001cd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd54  0800cd54  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd54  0800cd54  0001cd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd5c  0800cd5c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd5c  0800cd5c  0001cd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd60  0800cd60  0001cd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800cd64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800cd74  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800cdd4  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b88  240000d0  0800ce34  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000c58  0800ce34  00020c58  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f806  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000042d1  00000000  00000000  0004f904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ab8  00000000  00000000  00053bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019b0  00000000  00000000  00055690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000498d  00000000  00000000  00057040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020b20  00000000  00000000  0005b9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00181859  00000000  00000000  0007c4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001fdd46  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007534  00000000  00000000  001fdd9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ccfc 	.word	0x0800ccfc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800ccfc 	.word	0x0800ccfc

080002d8 <__aeabi_frsub>:
 80002d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__addsf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_fsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002e4 <__addsf3>:
 80002e4:	0042      	lsls	r2, r0, #1
 80002e6:	bf1f      	itttt	ne
 80002e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002ec:	ea92 0f03 	teqne	r2, r3
 80002f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f8:	d06a      	beq.n	80003d0 <__addsf3+0xec>
 80002fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000302:	bfc1      	itttt	gt
 8000304:	18d2      	addgt	r2, r2, r3
 8000306:	4041      	eorgt	r1, r0
 8000308:	4048      	eorgt	r0, r1
 800030a:	4041      	eorgt	r1, r0
 800030c:	bfb8      	it	lt
 800030e:	425b      	neglt	r3, r3
 8000310:	2b19      	cmp	r3, #25
 8000312:	bf88      	it	hi
 8000314:	4770      	bxhi	lr
 8000316:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000322:	bf18      	it	ne
 8000324:	4240      	negne	r0, r0
 8000326:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800032a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800032e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000332:	bf18      	it	ne
 8000334:	4249      	negne	r1, r1
 8000336:	ea92 0f03 	teq	r2, r3
 800033a:	d03f      	beq.n	80003bc <__addsf3+0xd8>
 800033c:	f1a2 0201 	sub.w	r2, r2, #1
 8000340:	fa41 fc03 	asr.w	ip, r1, r3
 8000344:	eb10 000c 	adds.w	r0, r0, ip
 8000348:	f1c3 0320 	rsb	r3, r3, #32
 800034c:	fa01 f103 	lsl.w	r1, r1, r3
 8000350:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000354:	d502      	bpl.n	800035c <__addsf3+0x78>
 8000356:	4249      	negs	r1, r1
 8000358:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800035c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000360:	d313      	bcc.n	800038a <__addsf3+0xa6>
 8000362:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000366:	d306      	bcc.n	8000376 <__addsf3+0x92>
 8000368:	0840      	lsrs	r0, r0, #1
 800036a:	ea4f 0131 	mov.w	r1, r1, rrx
 800036e:	f102 0201 	add.w	r2, r2, #1
 8000372:	2afe      	cmp	r2, #254	; 0xfe
 8000374:	d251      	bcs.n	800041a <__addsf3+0x136>
 8000376:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800037a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800037e:	bf08      	it	eq
 8000380:	f020 0001 	biceq.w	r0, r0, #1
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	4770      	bx	lr
 800038a:	0049      	lsls	r1, r1, #1
 800038c:	eb40 0000 	adc.w	r0, r0, r0
 8000390:	3a01      	subs	r2, #1
 8000392:	bf28      	it	cs
 8000394:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000398:	d2ed      	bcs.n	8000376 <__addsf3+0x92>
 800039a:	fab0 fc80 	clz	ip, r0
 800039e:	f1ac 0c08 	sub.w	ip, ip, #8
 80003a2:	ebb2 020c 	subs.w	r2, r2, ip
 80003a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80003aa:	bfaa      	itet	ge
 80003ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b0:	4252      	neglt	r2, r2
 80003b2:	4318      	orrge	r0, r3
 80003b4:	bfbc      	itt	lt
 80003b6:	40d0      	lsrlt	r0, r2
 80003b8:	4318      	orrlt	r0, r3
 80003ba:	4770      	bx	lr
 80003bc:	f092 0f00 	teq	r2, #0
 80003c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003c4:	bf06      	itte	eq
 80003c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003ca:	3201      	addeq	r2, #1
 80003cc:	3b01      	subne	r3, #1
 80003ce:	e7b5      	b.n	800033c <__addsf3+0x58>
 80003d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003d8:	bf18      	it	ne
 80003da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003de:	d021      	beq.n	8000424 <__addsf3+0x140>
 80003e0:	ea92 0f03 	teq	r2, r3
 80003e4:	d004      	beq.n	80003f0 <__addsf3+0x10c>
 80003e6:	f092 0f00 	teq	r2, #0
 80003ea:	bf08      	it	eq
 80003ec:	4608      	moveq	r0, r1
 80003ee:	4770      	bx	lr
 80003f0:	ea90 0f01 	teq	r0, r1
 80003f4:	bf1c      	itt	ne
 80003f6:	2000      	movne	r0, #0
 80003f8:	4770      	bxne	lr
 80003fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003fe:	d104      	bne.n	800040a <__addsf3+0x126>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	bf28      	it	cs
 8000404:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000408:	4770      	bx	lr
 800040a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800040e:	bf3c      	itt	cc
 8000410:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000414:	4770      	bxcc	lr
 8000416:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800041a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800041e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000422:	4770      	bx	lr
 8000424:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000428:	bf16      	itet	ne
 800042a:	4608      	movne	r0, r1
 800042c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000430:	4601      	movne	r1, r0
 8000432:	0242      	lsls	r2, r0, #9
 8000434:	bf06      	itte	eq
 8000436:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800043a:	ea90 0f01 	teqeq	r0, r1
 800043e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000442:	4770      	bx	lr

08000444 <__aeabi_ui2f>:
 8000444:	f04f 0300 	mov.w	r3, #0
 8000448:	e004      	b.n	8000454 <__aeabi_i2f+0x8>
 800044a:	bf00      	nop

0800044c <__aeabi_i2f>:
 800044c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	ea5f 0c00 	movs.w	ip, r0
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000460:	4601      	mov	r1, r0
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	e01c      	b.n	80004a2 <__aeabi_l2f+0x2a>

08000468 <__aeabi_ul2f>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	e00a      	b.n	800048c <__aeabi_l2f+0x14>
 8000476:	bf00      	nop

08000478 <__aeabi_l2f>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000484:	d502      	bpl.n	800048c <__aeabi_l2f+0x14>
 8000486:	4240      	negs	r0, r0
 8000488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048c:	ea5f 0c01 	movs.w	ip, r1
 8000490:	bf02      	ittt	eq
 8000492:	4684      	moveq	ip, r0
 8000494:	4601      	moveq	r1, r0
 8000496:	2000      	moveq	r0, #0
 8000498:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800049c:	bf08      	it	eq
 800049e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004a6:	fabc f28c 	clz	r2, ip
 80004aa:	3a08      	subs	r2, #8
 80004ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b0:	db10      	blt.n	80004d4 <__aeabi_l2f+0x5c>
 80004b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b6:	4463      	add	r3, ip
 80004b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c4:	fa20 f202 	lsr.w	r2, r0, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	f020 0001 	biceq.w	r0, r0, #1
 80004d2:	4770      	bx	lr
 80004d4:	f102 0220 	add.w	r2, r2, #32
 80004d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004dc:	f1c2 0220 	rsb	r2, r2, #32
 80004e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004e4:	fa21 f202 	lsr.w	r2, r1, r2
 80004e8:	eb43 0002 	adc.w	r0, r3, r2
 80004ec:	bf08      	it	eq
 80004ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_uldivmod>:
 80004f4:	b953      	cbnz	r3, 800050c <__aeabi_uldivmod+0x18>
 80004f6:	b94a      	cbnz	r2, 800050c <__aeabi_uldivmod+0x18>
 80004f8:	2900      	cmp	r1, #0
 80004fa:	bf08      	it	eq
 80004fc:	2800      	cmpeq	r0, #0
 80004fe:	bf1c      	itt	ne
 8000500:	f04f 31ff 	movne.w	r1, #4294967295
 8000504:	f04f 30ff 	movne.w	r0, #4294967295
 8000508:	f000 b96e 	b.w	80007e8 <__aeabi_idiv0>
 800050c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000510:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000514:	f000 f806 	bl	8000524 <__udivmoddi4>
 8000518:	f8dd e004 	ldr.w	lr, [sp, #4]
 800051c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000520:	b004      	add	sp, #16
 8000522:	4770      	bx	lr

08000524 <__udivmoddi4>:
 8000524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000528:	9d08      	ldr	r5, [sp, #32]
 800052a:	4604      	mov	r4, r0
 800052c:	468c      	mov	ip, r1
 800052e:	2b00      	cmp	r3, #0
 8000530:	f040 8083 	bne.w	800063a <__udivmoddi4+0x116>
 8000534:	428a      	cmp	r2, r1
 8000536:	4617      	mov	r7, r2
 8000538:	d947      	bls.n	80005ca <__udivmoddi4+0xa6>
 800053a:	fab2 f282 	clz	r2, r2
 800053e:	b142      	cbz	r2, 8000552 <__udivmoddi4+0x2e>
 8000540:	f1c2 0020 	rsb	r0, r2, #32
 8000544:	fa24 f000 	lsr.w	r0, r4, r0
 8000548:	4091      	lsls	r1, r2
 800054a:	4097      	lsls	r7, r2
 800054c:	ea40 0c01 	orr.w	ip, r0, r1
 8000550:	4094      	lsls	r4, r2
 8000552:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000556:	0c23      	lsrs	r3, r4, #16
 8000558:	fbbc f6f8 	udiv	r6, ip, r8
 800055c:	fa1f fe87 	uxth.w	lr, r7
 8000560:	fb08 c116 	mls	r1, r8, r6, ip
 8000564:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000568:	fb06 f10e 	mul.w	r1, r6, lr
 800056c:	4299      	cmp	r1, r3
 800056e:	d909      	bls.n	8000584 <__udivmoddi4+0x60>
 8000570:	18fb      	adds	r3, r7, r3
 8000572:	f106 30ff 	add.w	r0, r6, #4294967295
 8000576:	f080 8119 	bcs.w	80007ac <__udivmoddi4+0x288>
 800057a:	4299      	cmp	r1, r3
 800057c:	f240 8116 	bls.w	80007ac <__udivmoddi4+0x288>
 8000580:	3e02      	subs	r6, #2
 8000582:	443b      	add	r3, r7
 8000584:	1a5b      	subs	r3, r3, r1
 8000586:	b2a4      	uxth	r4, r4
 8000588:	fbb3 f0f8 	udiv	r0, r3, r8
 800058c:	fb08 3310 	mls	r3, r8, r0, r3
 8000590:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000594:	fb00 fe0e 	mul.w	lr, r0, lr
 8000598:	45a6      	cmp	lr, r4
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x8c>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 33ff 	add.w	r3, r0, #4294967295
 80005a2:	f080 8105 	bcs.w	80007b0 <__udivmoddi4+0x28c>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8102 	bls.w	80007b0 <__udivmoddi4+0x28c>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005b4:	eba4 040e 	sub.w	r4, r4, lr
 80005b8:	2600      	movs	r6, #0
 80005ba:	b11d      	cbz	r5, 80005c4 <__udivmoddi4+0xa0>
 80005bc:	40d4      	lsrs	r4, r2
 80005be:	2300      	movs	r3, #0
 80005c0:	e9c5 4300 	strd	r4, r3, [r5]
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	b902      	cbnz	r2, 80005ce <__udivmoddi4+0xaa>
 80005cc:	deff      	udf	#255	; 0xff
 80005ce:	fab2 f282 	clz	r2, r2
 80005d2:	2a00      	cmp	r2, #0
 80005d4:	d150      	bne.n	8000678 <__udivmoddi4+0x154>
 80005d6:	1bcb      	subs	r3, r1, r7
 80005d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005dc:	fa1f f887 	uxth.w	r8, r7
 80005e0:	2601      	movs	r6, #1
 80005e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80005e6:	0c21      	lsrs	r1, r4, #16
 80005e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb08 f30c 	mul.w	r3, r8, ip
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d907      	bls.n	8000608 <__udivmoddi4+0xe4>
 80005f8:	1879      	adds	r1, r7, r1
 80005fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80005fe:	d202      	bcs.n	8000606 <__udivmoddi4+0xe2>
 8000600:	428b      	cmp	r3, r1
 8000602:	f200 80e9 	bhi.w	80007d8 <__udivmoddi4+0x2b4>
 8000606:	4684      	mov	ip, r0
 8000608:	1ac9      	subs	r1, r1, r3
 800060a:	b2a3      	uxth	r3, r4
 800060c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000610:	fb0e 1110 	mls	r1, lr, r0, r1
 8000614:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000618:	fb08 f800 	mul.w	r8, r8, r0
 800061c:	45a0      	cmp	r8, r4
 800061e:	d907      	bls.n	8000630 <__udivmoddi4+0x10c>
 8000620:	193c      	adds	r4, r7, r4
 8000622:	f100 33ff 	add.w	r3, r0, #4294967295
 8000626:	d202      	bcs.n	800062e <__udivmoddi4+0x10a>
 8000628:	45a0      	cmp	r8, r4
 800062a:	f200 80d9 	bhi.w	80007e0 <__udivmoddi4+0x2bc>
 800062e:	4618      	mov	r0, r3
 8000630:	eba4 0408 	sub.w	r4, r4, r8
 8000634:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000638:	e7bf      	b.n	80005ba <__udivmoddi4+0x96>
 800063a:	428b      	cmp	r3, r1
 800063c:	d909      	bls.n	8000652 <__udivmoddi4+0x12e>
 800063e:	2d00      	cmp	r5, #0
 8000640:	f000 80b1 	beq.w	80007a6 <__udivmoddi4+0x282>
 8000644:	2600      	movs	r6, #0
 8000646:	e9c5 0100 	strd	r0, r1, [r5]
 800064a:	4630      	mov	r0, r6
 800064c:	4631      	mov	r1, r6
 800064e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000652:	fab3 f683 	clz	r6, r3
 8000656:	2e00      	cmp	r6, #0
 8000658:	d14a      	bne.n	80006f0 <__udivmoddi4+0x1cc>
 800065a:	428b      	cmp	r3, r1
 800065c:	d302      	bcc.n	8000664 <__udivmoddi4+0x140>
 800065e:	4282      	cmp	r2, r0
 8000660:	f200 80b8 	bhi.w	80007d4 <__udivmoddi4+0x2b0>
 8000664:	1a84      	subs	r4, r0, r2
 8000666:	eb61 0103 	sbc.w	r1, r1, r3
 800066a:	2001      	movs	r0, #1
 800066c:	468c      	mov	ip, r1
 800066e:	2d00      	cmp	r5, #0
 8000670:	d0a8      	beq.n	80005c4 <__udivmoddi4+0xa0>
 8000672:	e9c5 4c00 	strd	r4, ip, [r5]
 8000676:	e7a5      	b.n	80005c4 <__udivmoddi4+0xa0>
 8000678:	f1c2 0320 	rsb	r3, r2, #32
 800067c:	fa20 f603 	lsr.w	r6, r0, r3
 8000680:	4097      	lsls	r7, r2
 8000682:	fa01 f002 	lsl.w	r0, r1, r2
 8000686:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800068a:	40d9      	lsrs	r1, r3
 800068c:	4330      	orrs	r0, r6
 800068e:	0c03      	lsrs	r3, r0, #16
 8000690:	fbb1 f6fe 	udiv	r6, r1, lr
 8000694:	fa1f f887 	uxth.w	r8, r7
 8000698:	fb0e 1116 	mls	r1, lr, r6, r1
 800069c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006a0:	fb06 f108 	mul.w	r1, r6, r8
 80006a4:	4299      	cmp	r1, r3
 80006a6:	fa04 f402 	lsl.w	r4, r4, r2
 80006aa:	d909      	bls.n	80006c0 <__udivmoddi4+0x19c>
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80006b2:	f080 808d 	bcs.w	80007d0 <__udivmoddi4+0x2ac>
 80006b6:	4299      	cmp	r1, r3
 80006b8:	f240 808a 	bls.w	80007d0 <__udivmoddi4+0x2ac>
 80006bc:	3e02      	subs	r6, #2
 80006be:	443b      	add	r3, r7
 80006c0:	1a5b      	subs	r3, r3, r1
 80006c2:	b281      	uxth	r1, r0
 80006c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80006c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80006cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006d0:	fb00 f308 	mul.w	r3, r0, r8
 80006d4:	428b      	cmp	r3, r1
 80006d6:	d907      	bls.n	80006e8 <__udivmoddi4+0x1c4>
 80006d8:	1879      	adds	r1, r7, r1
 80006da:	f100 3cff 	add.w	ip, r0, #4294967295
 80006de:	d273      	bcs.n	80007c8 <__udivmoddi4+0x2a4>
 80006e0:	428b      	cmp	r3, r1
 80006e2:	d971      	bls.n	80007c8 <__udivmoddi4+0x2a4>
 80006e4:	3802      	subs	r0, #2
 80006e6:	4439      	add	r1, r7
 80006e8:	1acb      	subs	r3, r1, r3
 80006ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80006ee:	e778      	b.n	80005e2 <__udivmoddi4+0xbe>
 80006f0:	f1c6 0c20 	rsb	ip, r6, #32
 80006f4:	fa03 f406 	lsl.w	r4, r3, r6
 80006f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80006fc:	431c      	orrs	r4, r3
 80006fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000702:	fa01 f306 	lsl.w	r3, r1, r6
 8000706:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800070a:	fa21 f10c 	lsr.w	r1, r1, ip
 800070e:	431f      	orrs	r7, r3
 8000710:	0c3b      	lsrs	r3, r7, #16
 8000712:	fbb1 f9fe 	udiv	r9, r1, lr
 8000716:	fa1f f884 	uxth.w	r8, r4
 800071a:	fb0e 1119 	mls	r1, lr, r9, r1
 800071e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000722:	fb09 fa08 	mul.w	sl, r9, r8
 8000726:	458a      	cmp	sl, r1
 8000728:	fa02 f206 	lsl.w	r2, r2, r6
 800072c:	fa00 f306 	lsl.w	r3, r0, r6
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0x220>
 8000732:	1861      	adds	r1, r4, r1
 8000734:	f109 30ff 	add.w	r0, r9, #4294967295
 8000738:	d248      	bcs.n	80007cc <__udivmoddi4+0x2a8>
 800073a:	458a      	cmp	sl, r1
 800073c:	d946      	bls.n	80007cc <__udivmoddi4+0x2a8>
 800073e:	f1a9 0902 	sub.w	r9, r9, #2
 8000742:	4421      	add	r1, r4
 8000744:	eba1 010a 	sub.w	r1, r1, sl
 8000748:	b2bf      	uxth	r7, r7
 800074a:	fbb1 f0fe 	udiv	r0, r1, lr
 800074e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000752:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000756:	fb00 f808 	mul.w	r8, r0, r8
 800075a:	45b8      	cmp	r8, r7
 800075c:	d907      	bls.n	800076e <__udivmoddi4+0x24a>
 800075e:	19e7      	adds	r7, r4, r7
 8000760:	f100 31ff 	add.w	r1, r0, #4294967295
 8000764:	d22e      	bcs.n	80007c4 <__udivmoddi4+0x2a0>
 8000766:	45b8      	cmp	r8, r7
 8000768:	d92c      	bls.n	80007c4 <__udivmoddi4+0x2a0>
 800076a:	3802      	subs	r0, #2
 800076c:	4427      	add	r7, r4
 800076e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000772:	eba7 0708 	sub.w	r7, r7, r8
 8000776:	fba0 8902 	umull	r8, r9, r0, r2
 800077a:	454f      	cmp	r7, r9
 800077c:	46c6      	mov	lr, r8
 800077e:	4649      	mov	r1, r9
 8000780:	d31a      	bcc.n	80007b8 <__udivmoddi4+0x294>
 8000782:	d017      	beq.n	80007b4 <__udivmoddi4+0x290>
 8000784:	b15d      	cbz	r5, 800079e <__udivmoddi4+0x27a>
 8000786:	ebb3 020e 	subs.w	r2, r3, lr
 800078a:	eb67 0701 	sbc.w	r7, r7, r1
 800078e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000792:	40f2      	lsrs	r2, r6
 8000794:	ea4c 0202 	orr.w	r2, ip, r2
 8000798:	40f7      	lsrs	r7, r6
 800079a:	e9c5 2700 	strd	r2, r7, [r5]
 800079e:	2600      	movs	r6, #0
 80007a0:	4631      	mov	r1, r6
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	462e      	mov	r6, r5
 80007a8:	4628      	mov	r0, r5
 80007aa:	e70b      	b.n	80005c4 <__udivmoddi4+0xa0>
 80007ac:	4606      	mov	r6, r0
 80007ae:	e6e9      	b.n	8000584 <__udivmoddi4+0x60>
 80007b0:	4618      	mov	r0, r3
 80007b2:	e6fd      	b.n	80005b0 <__udivmoddi4+0x8c>
 80007b4:	4543      	cmp	r3, r8
 80007b6:	d2e5      	bcs.n	8000784 <__udivmoddi4+0x260>
 80007b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80007bc:	eb69 0104 	sbc.w	r1, r9, r4
 80007c0:	3801      	subs	r0, #1
 80007c2:	e7df      	b.n	8000784 <__udivmoddi4+0x260>
 80007c4:	4608      	mov	r0, r1
 80007c6:	e7d2      	b.n	800076e <__udivmoddi4+0x24a>
 80007c8:	4660      	mov	r0, ip
 80007ca:	e78d      	b.n	80006e8 <__udivmoddi4+0x1c4>
 80007cc:	4681      	mov	r9, r0
 80007ce:	e7b9      	b.n	8000744 <__udivmoddi4+0x220>
 80007d0:	4666      	mov	r6, ip
 80007d2:	e775      	b.n	80006c0 <__udivmoddi4+0x19c>
 80007d4:	4630      	mov	r0, r6
 80007d6:	e74a      	b.n	800066e <__udivmoddi4+0x14a>
 80007d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80007dc:	4439      	add	r1, r7
 80007de:	e713      	b.n	8000608 <__udivmoddi4+0xe4>
 80007e0:	3802      	subs	r0, #2
 80007e2:	443c      	add	r4, r7
 80007e4:	e724      	b.n	8000630 <__udivmoddi4+0x10c>
 80007e6:	bf00      	nop

080007e8 <__aeabi_idiv0>:
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <SetAccelerationByMinSPS>:

static stepper_state steppers[NUM_STEPPER];

static int32_t initializedSteppersCount;

void SetAccelerationByMinSPS(stepper_state * stepper) {
 80007ec:	b480      	push	{r7}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
    // MinSPS - is a maximum possible starting stepper speed, so it also defines maximum possible acceleration
    // Lets assume that accual acceleration should be at 80% level of minimum starting speed (ACCSPS_TO_MINSPS_RATIO).

    // We have stepper controler clock which defines how often we can update the CurrentSPS
    // Lets get the floating point AccSPS value first, if we would update it every ACCSPS_TO_MINSPS_RATIO
    float fAccSPS = ACCSPS_TO_MINSPS_RATIO * STEP_CONTROLLER_PERIOD_US * stepper->minSPS / 1000000.0f;
 80007f4:	4b4e      	ldr	r3, [pc, #312]	; (8000930 <SetAccelerationByMinSPS+0x144>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	ee07 3a90 	vmov	s15, r3
 80007fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000800:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8000934 <SetAccelerationByMinSPS+0x148>
 8000804:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	ee07 3a90 	vmov	s15, r3
 8000810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000814:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000818:	eddf 6a47 	vldr	s13, [pc, #284]	; 8000938 <SetAccelerationByMinSPS+0x14c>
 800081c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000820:	edc7 7a02 	vstr	s15, [r7, #8]
    // this steppers controller alghoritm using int32_t arifmetics to control CurrentSPS
    // Translating the floating point acceleration value into "Prescaller + discreete AccSPS"
    // allows to use CPU time more effectively, without unncessary frequent updates
    // of Stepping Timer pulse frequency on every tick of controller clock (STEP_CONTROLLER_PERIOD_US).

    if (fAccSPS > 10.0f) {
 8000824:	edd7 7a02 	vldr	s15, [r7, #8]
 8000828:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800082c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000834:	dd0d      	ble.n	8000852 <SetAccelerationByMinSPS+0x66>
        stepper->stepCtrlPrescallerTicks =
        stepper->stepCtrlPrescaller = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	6153      	str	r3, [r2, #20]
        stepper->stepCtrlPrescallerTicks =
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	6193      	str	r3, [r2, #24]
        stepper->accelerationSPS = fAccSPS; // In worst case scenario, like 10.99 we will get 10% less (0.99 out of almost 11.00) acceleration
 8000840:	edd7 7a02 	vldr	s15, [r7, #8]
 8000844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000848:	ee17 2a90 	vmov	r2, s15
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	625a      	str	r2, [r3, #36]	; 0x24

        // Round up if at upper remainder
        if (remainder > 0.9f)
            stepper -> accelerationSPS += 1;
    }
}
 8000850:	e068      	b.n	8000924 <SetAccelerationByMinSPS+0x138>
        uint32_t prescalerValue = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
        float prescaledAccSPS = fAccSPS;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	613b      	str	r3, [r7, #16]
        float remainder = prescaledAccSPS - (uint32_t)prescaledAccSPS;
 800085a:	edd7 7a04 	vldr	s15, [r7, #16]
 800085e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000866:	ed97 7a04 	vldr	s14, [r7, #16]
 800086a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800086e:	edc7 7a03 	vstr	s15, [r7, #12]
        while (prescaledAccSPS < 0.9f || (0.1f < remainder & remainder < 0.9f)) {
 8000872:	e016      	b.n	80008a2 <SetAccelerationByMinSPS+0xb6>
            prescalerValue++;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	3301      	adds	r3, #1
 8000878:	617b      	str	r3, [r7, #20]
            prescaledAccSPS += fAccSPS;
 800087a:	ed97 7a04 	vldr	s14, [r7, #16]
 800087e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000886:	edc7 7a04 	vstr	s15, [r7, #16]
            remainder = prescaledAccSPS - (uint32_t)prescaledAccSPS;
 800088a:	edd7 7a04 	vldr	s15, [r7, #16]
 800088e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000896:	ed97 7a04 	vldr	s14, [r7, #16]
 800089a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800089e:	edc7 7a03 	vstr	s15, [r7, #12]
        while (prescaledAccSPS < 0.9f || (0.1f < remainder & remainder < 0.9f)) {
 80008a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80008a6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800093c <SetAccelerationByMinSPS+0x150>
 80008aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b2:	d4df      	bmi.n	8000874 <SetAccelerationByMinSPS+0x88>
 80008b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80008b8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000940 <SetAccelerationByMinSPS+0x154>
 80008bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c4:	bfcc      	ite	gt
 80008c6:	2301      	movgt	r3, #1
 80008c8:	2300      	movle	r3, #0
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80008d0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800093c <SetAccelerationByMinSPS+0x150>
 80008d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008dc:	bf4c      	ite	mi
 80008de:	2301      	movmi	r3, #1
 80008e0:	2300      	movpl	r3, #0
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4013      	ands	r3, r2
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1c3      	bne.n	8000874 <SetAccelerationByMinSPS+0x88>
        stepper->stepCtrlPrescaller = prescalerValue;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	6153      	str	r3, [r2, #20]
        stepper->stepCtrlPrescallerTicks =
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6193      	str	r3, [r2, #24]
        stepper -> accelerationSPS = prescaledAccSPS;
 80008f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80008fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008fe:	ee17 2a90 	vmov	r2, s15
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
        if (remainder > 0.9f)
 8000906:	edd7 7a03 	vldr	s15, [r7, #12]
 800090a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800093c <SetAccelerationByMinSPS+0x150>
 800090e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000916:	dc00      	bgt.n	800091a <SetAccelerationByMinSPS+0x12e>
}
 8000918:	e004      	b.n	8000924 <SetAccelerationByMinSPS+0x138>
            stepper -> accelerationSPS += 1;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000924:	bf00      	nop
 8000926:	371c      	adds	r7, #28
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	24000a60 	.word	0x24000a60
 8000934:	3f4ccccd 	.word	0x3f4ccccd
 8000938:	49742400 	.word	0x49742400
 800093c:	3f666666 	.word	0x3f666666
 8000940:	3dcccccd 	.word	0x3dcccccd

08000944 <SetStepTimerByCurrentSPS>:

void SetStepTimerByCurrentSPS(stepper_state * stepper){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d027      	beq.n	80009a4 <SetStepTimerByCurrentSPS+0x60>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d022      	beq.n	80009a4 <SetStepTimerByCurrentSPS+0x60>
    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	60fb      	str	r3, [r7, #12]
    uint32_t prescaler = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
    uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSPS;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <SetStepTimerByCurrentSPS+0x6c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000972:	fbb3 f3f2 	udiv	r3, r3, r2
 8000976:	613b      	str	r3, [r7, #16]

    if (timerTicks > 0xFFFF) {
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800097e:	d30b      	bcc.n	8000998 <SetStepTimerByCurrentSPS+0x54>
        // calculate the minimum prescaler
        prescaler = timerTicks/0xFFFF;
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4a0c      	ldr	r2, [pc, #48]	; (80009b4 <SetStepTimerByCurrentSPS+0x70>)
 8000984:	fba2 2303 	umull	r2, r3, r2, r3
 8000988:	0bdb      	lsrs	r3, r3, #15
 800098a:	617b      	str	r3, [r7, #20]
        timerTicks /= (prescaler + 1);
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	3301      	adds	r3, #1
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	613b      	str	r3, [r7, #16]
    }

    timer -> PSC = prescaler;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	629a      	str	r2, [r3, #40]	; 0x28
    timer -> ARR = timerTicks;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80009a4:	bf00      	nop
 80009a6:	371c      	adds	r7, #28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	24000ab0 	.word	0x24000ab0
 80009b4:	80008001 	.word	0x80008001

080009b8 <DecrementSPS>:

void DecrementSPS(stepper_state * stepper){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    if (stepper -> currentSPS > stepper -> minSPS){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	69db      	ldr	r3, [r3, #28]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dd09      	ble.n	80009e0 <DecrementSPS+0x28>
        stepper -> currentSPS -=  stepper -> accelerationSPS;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80009d4:	1ad2      	subs	r2, r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
        SetStepTimerByCurrentSPS(stepper);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ffb2 	bl	8000944 <SetStepTimerByCurrentSPS>
    }
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <IncrementSPS>:

void IncrementSPS(stepper_state * stepper){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
    if (stepper -> currentSPS < stepper -> maxSPS) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6a1b      	ldr	r3, [r3, #32]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	da09      	bge.n	8000a10 <IncrementSPS+0x28>
        stepper -> currentSPS +=  stepper -> accelerationSPS;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a04:	441a      	add	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c
        SetStepTimerByCurrentSPS(stepper);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ff9a 	bl	8000944 <SetStepTimerByCurrentSPS>
    }
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <GetStepDirectionUnit>:
//  }
//  // if nothing found - take the default very first stepper in the collection
//  return (stepper_state *)NULL;
//}

int32_t GetStepDirectionUnit(stepper_state * stepper){
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    return (stepper->status & SS_RUNNING_BACKWARD) ? -1 : 1;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <GetStepDirectionUnit+0x1e>
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	e000      	b.n	8000a38 <GetStepDirectionUnit+0x20>
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <GetStepsToTarget>:

int64_t GetStepsToTarget(stepper_state * stepper) {
 8000a44:	b5b0      	push	{r4, r5, r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    // returns absolute value of steps left to target
    return ((int64_t)stepper->targetPosition - (int64_t)stepper->currentPosition) * GetStepDirectionUnit(stepper);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4618      	mov	r0, r3
 8000a52:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000a60:	1a84      	subs	r4, r0, r2
 8000a62:	eb61 0503 	sbc.w	r5, r1, r3
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ffd6 	bl	8000a18 <GetStepDirectionUnit>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000a74:	fb02 f005 	mul.w	r0, r2, r5
 8000a78:	fb04 f103 	mul.w	r1, r4, r3
 8000a7c:	4401      	add	r1, r0
 8000a7e:	fba4 2302 	umull	r2, r3, r4, r2
 8000a82:	4419      	add	r1, r3
 8000a84:	460b      	mov	r3, r1
}
 8000a86:	4610      	mov	r0, r2
 8000a88:	4619      	mov	r1, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bdb0      	pop	{r4, r5, r7, pc}

08000a90 <Stepper_SetupPeripherals>:

stepper_error Stepper_SetupPeripherals(int numStepper, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef  * dirGPIO, uint16_t dirPIN){
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
    // Find existing or init new.
    stepper_state * stepper = &steppers[numStepper];
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	1a9b      	subs	r3, r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <Stepper_SetupPeripherals+0xa0>)
 8000aaa:	4413      	add	r3, r2
 8000aac:	617b      	str	r3, [r7, #20]
    if (stepper == NULL) {
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d119      	bne.n	8000ae8 <Stepper_SetupPeripherals+0x58>
        if (initializedSteppersCount == MAX_STEPPERS_COUNT) return SERR_NOMORESTATESAVAILABLE;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <Stepper_SetupPeripherals+0xa4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b0a      	cmp	r3, #10
 8000aba:	d101      	bne.n	8000ac0 <Stepper_SetupPeripherals+0x30>
 8000abc:	2301      	movs	r3, #1
 8000abe:	e031      	b.n	8000b24 <Stepper_SetupPeripherals+0x94>
        stepper = &steppers[initializedSteppersCount++];
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <Stepper_SetupPeripherals+0xa4>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	1c53      	adds	r3, r2, #1
 8000ac6:	491b      	ldr	r1, [pc, #108]	; (8000b34 <Stepper_SetupPeripherals+0xa4>)
 8000ac8:	600b      	str	r3, [r1, #0]
 8000aca:	4613      	mov	r3, r2
 8000acc:	011b      	lsls	r3, r3, #4
 8000ace:	1a9b      	subs	r3, r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <Stepper_SetupPeripherals+0xa0>)
 8000ad4:	4413      	add	r3, r2
 8000ad6:	617b      	str	r3, [r7, #20]
        stepper -> numberStepper = numStepper;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	601a      	str	r2, [r3, #0]
        stepper -> status = SS_STOPPED;
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000ae6:	e008      	b.n	8000afa <Stepper_SetupPeripherals+0x6a>
    } else if (!(stepper->status & SS_STOPPED)) {
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db01      	blt.n	8000afa <Stepper_SetupPeripherals+0x6a>
        return SERR_MUSTBESTOPPED;
 8000af6:	2302      	movs	r3, #2
 8000af8:	e014      	b.n	8000b24 <Stepper_SetupPeripherals+0x94>
    }

    // ensure that ARR preload mode is enabled on timer
    // but we don't need to set the PWM pulse duration preload, it is constant all the time
    stepTimer -> Instance -> CR1 |=TIM_CR1_ARPE;
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b08:	601a      	str	r2, [r3, #0]

    stepper -> STEP_TIMER       = stepTimer;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	605a      	str	r2, [r3, #4]
    stepper -> STEP_CHANNEL     = stepChannel;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	609a      	str	r2, [r3, #8]
    stepper -> DIR_GPIO         = dirGPIO;
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	60da      	str	r2, [r3, #12]
    stepper -> DIR_PIN          = dirPIN;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	8c3a      	ldrh	r2, [r7, #32]
 8000b20:	821a      	strh	r2, [r3, #16]

    return SERR_OK;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	240000ec 	.word	0x240000ec
 8000b34:	240001dc 	.word	0x240001dc

08000b38 <Stepper_InitDefaultState>:

stepper_error Stepper_InitDefaultState(int numStepper) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    // Find existing or init new.
    stepper_state * stepper = &steppers[numStepper];
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	4613      	mov	r3, r2
 8000b44:	011b      	lsls	r3, r3, #4
 8000b46:	1a9b      	subs	r3, r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <Stepper_InitDefaultState+0xa4>)
 8000b4c:	4413      	add	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]
    if (stepper == NULL) {
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d119      	bne.n	8000b8a <Stepper_InitDefaultState+0x52>
        if (initializedSteppersCount == MAX_STEPPERS_COUNT) return SERR_NOMORESTATESAVAILABLE;
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <Stepper_InitDefaultState+0xa8>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b0a      	cmp	r3, #10
 8000b5c:	d101      	bne.n	8000b62 <Stepper_InitDefaultState+0x2a>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e037      	b.n	8000bd2 <Stepper_InitDefaultState+0x9a>
        stepper = &steppers[initializedSteppersCount++];
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <Stepper_InitDefaultState+0xa8>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	1c53      	adds	r3, r2, #1
 8000b68:	491d      	ldr	r1, [pc, #116]	; (8000be0 <Stepper_InitDefaultState+0xa8>)
 8000b6a:	600b      	str	r3, [r1, #0]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	1a9b      	subs	r3, r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <Stepper_InitDefaultState+0xa4>)
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
        stepper -> numberStepper = numStepper;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	601a      	str	r2, [r3, #0]
        stepper -> status = SS_STOPPED;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000b88:	e008      	b.n	8000b9c <Stepper_InitDefaultState+0x64>
    } else if (!(stepper->status & SS_STOPPED)) {
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db01      	blt.n	8000b9c <Stepper_InitDefaultState+0x64>
        return SERR_MUSTBESTOPPED;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	e01a      	b.n	8000bd2 <Stepper_InitDefaultState+0x9a>
    }

    stepper -> minSPS                   = DEFAULT_MIN_SPS;       // this is like an hour or two per turn in microstepping mode
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	61da      	str	r2, [r3, #28]
    stepper -> maxSPS                   = DEFAULT_MAX_SPS;  // 400kHz is 2.5uS per step, while theoretically possible limit for A4988 dirver is 2uS
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <Stepper_InitDefaultState+0xac>)
 8000ba6:	621a      	str	r2, [r3, #32]
    stepper -> currentSPS               = stepper -> minSPS;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	69da      	ldr	r2, [r3, #28]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c

    // zero service fields
    stepper -> targetPosition           = 0;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	631a      	str	r2, [r3, #48]	; 0x30
    stepper -> currentPosition          = 0;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	635a      	str	r2, [r3, #52]	; 0x34
    stepper -> breakInitiationSPS       = stepper -> maxSPS;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6a1a      	ldr	r2, [r3, #32]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28

    SetAccelerationByMinSPS(stepper);
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f7ff fe11 	bl	80007ec <SetAccelerationByMinSPS>
    SetStepTimerByCurrentSPS(stepper);
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f7ff feba 	bl	8000944 <SetStepTimerByCurrentSPS>

    return SERR_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240000ec 	.word	0x240000ec
 8000be0:	240001dc 	.word	0x240001dc
 8000be4:	00061a80 	.word	0x00061a80

08000be8 <ExecuteController>:

void ExecuteController(stepper_state * stepper){
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	ed2d 8b02 	vpush	{d8}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  stepper_status status = stepper -> status;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000bfa:	77fb      	strb	r3, [r7, #31]

  if (status & SS_STOPPED) {
 8000bfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	da1c      	bge.n	8000c3e <ExecuteController+0x56>
    if (stepper->targetPosition != stepper->currentPosition) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	f000 80f1 	beq.w	8000df4 <ExecuteController+0x20c>
     stepper->stepCtrlPrescallerTicks = stepper->stepCtrlPrescaller;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	695a      	ldr	r2, [r3, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	619a      	str	r2, [r3, #24]
     stepper->status = SS_STARTING;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     stepper->STEP_TIMER->Instance->EGR = TIM_EGR_UG;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	615a      	str	r2, [r3, #20]
     HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	4619      	mov	r1, r3
 8000c36:	4610      	mov	r0, r2
 8000c38:	f009 fa76 	bl	800a128 <HAL_TIM_PWM_Start>
    }
    return;
 8000c3c:	e0da      	b.n	8000df4 <ExecuteController+0x20c>
  }

  if (status == SS_STARTING)
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	f000 80d9 	beq.w	8000df8 <ExecuteController+0x210>
    return;

  stepper->stepCtrlPrescallerTicks--;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	1e5a      	subs	r2, r3, #1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	619a      	str	r2, [r3, #24]

  if (!(status & SS_BREAKING))
 8000c50:	7ffb      	ldrb	r3, [r7, #31]
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d17e      	bne.n	8000d58 <ExecuteController+0x170>
    // check - do we need to break
    // to do that - we take average speed (between current and minimum)
    // and using it to calculate how much time left to the stopping point

    // Steps to target deevided by average speed.
    float estimatedTimeToTarget = 2.0f * GetStepsToTarget(stepper) / (stepper->currentSPS + stepper->minSPS);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff fef2 	bl	8000a44 <GetStepsToTarget>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	4610      	mov	r0, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	f7ff fc06 	bl	8000478 <__aeabi_l2f>
 8000c6c:	ee07 0a90 	vmov	s15, r0
 8000c70:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c8a:	edc7 7a06 	vstr	s15, [r7, #24]
    int32_t spsSwitches        = (stepper->currentSPS - stepper->minSPS) / stepper->accelerationSPS;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	1ad2      	subs	r2, r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ca0:	617b      	str	r3, [r7, #20]
    float timeToReduceSpeed     =
        (((float)STEP_CONTROLLER_PERIOD_US)/ 1000000.0f) *
 8000ca2:	4b59      	ldr	r3, [pc, #356]	; (8000e08 <ExecuteController+0x220>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	ee07 3a90 	vmov	s15, r3
 8000caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cae:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000e0c <ExecuteController+0x224>
 8000cb2:	ee87 8a87 	vdiv.f32	s16, s15, s14
        ((int64_t)(stepper->stepCtrlPrescaller) * spsSwitches + stepper->stepCtrlPrescallerTicks);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000cc8:	fb02 fc01 	mul.w	ip, r2, r1
 8000ccc:	fb00 f603 	mul.w	r6, r0, r3
 8000cd0:	4466      	add	r6, ip
 8000cd2:	fba0 2302 	umull	r2, r3, r0, r2
 8000cd6:	18f1      	adds	r1, r6, r3
 8000cd8:	460b      	mov	r3, r1
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	6989      	ldr	r1, [r1, #24]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000ce4:	1814      	adds	r4, r2, r0
 8000ce6:	eb43 0501 	adc.w	r5, r3, r1
        (((float)STEP_CONTROLLER_PERIOD_US)/ 1000000.0f) *
 8000cea:	4620      	mov	r0, r4
 8000cec:	4629      	mov	r1, r5
 8000cee:	f7ff fbc3 	bl	8000478 <__aeabi_l2f>
 8000cf2:	ee07 0a90 	vmov	s15, r0
    float timeToReduceSpeed     =
 8000cf6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000cfa:	edc7 7a04 	vstr	s15, [r7, #16]

    // If we are in condition to start bracking, but not breaking yet
    if (estimatedTimeToTarget <= timeToReduceSpeed) {
 8000cfe:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d02:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0e:	d823      	bhi.n	8000d58 <ExecuteController+0x170>

        stepper->breakInitiationSPS = stepper->currentSPS;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
        stepper->status &= ~SS_BREAKCORRECTION;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f023 0320 	bic.w	r3, r3, #32
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        stepper->status |= SS_BREAKING;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f043 0310 	orr.w	r3, r3, #16
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        DecrementSPS(stepper);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff fe39 	bl	80009b8 <DecrementSPS>

        // So we terminated onging acceleration, or immidiately switched back from top speed
        if (stepper->stepCtrlPrescallerTicks == 0)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d156      	bne.n	8000dfc <ExecuteController+0x214>
            stepper->stepCtrlPrescallerTicks = stepper->stepCtrlPrescaller;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	695a      	ldr	r2, [r3, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	619a      	str	r2, [r3, #24]

        // we are done with this check
        return;
 8000d56:	e051      	b.n	8000dfc <ExecuteController+0x214>
     }
  }

  if (stepper->stepCtrlPrescallerTicks == 0) {
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <ExecuteController+0x216>
    if (status & SS_BREAKING) {
 8000d60:	7ffb      	ldrb	r3, [r7, #31]
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d037      	beq.n	8000dda <ExecuteController+0x1f2>
        // check, mabe we don't need to break any more, because earlier overestimation
        int32_t spsSwitchesOnBreakeInitiated = (stepper->breakInitiationSPS - stepper->minSPS) / stepper->accelerationSPS;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	1ad2      	subs	r2, r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d78:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d7c:	60fb      	str	r3, [r7, #12]
        int32_t spsSwitchesLeft              = (stepper->currentSPS         - stepper->minSPS) / stepper->accelerationSPS;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	1ad2      	subs	r2, r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d90:	60bb      	str	r3, [r7, #8]


        // if we already reduced our speed twice
        // and we still at sufficient speed
        // re-evaluete "do we still need breaking, or can relax and roll for a while?"
        if (spsSwitchesOnBreakeInitiated/2 > spsSwitchesLeft && spsSwitchesLeft > 10) {
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	da00      	bge.n	8000d9a <ExecuteController+0x1b2>
 8000d98:	3301      	adds	r3, #1
 8000d9a:	105b      	asrs	r3, r3, #1
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	4293      	cmp	r3, r2
 8000da2:	da16      	bge.n	8000dd2 <ExecuteController+0x1ea>
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2b0a      	cmp	r3, #10
 8000da8:	dd13      	ble.n	8000dd2 <ExecuteController+0x1ea>
           stepper->status |= SS_BREAKCORRECTION;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f043 0320 	orr.w	r3, r3, #32
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           stepper->status &= ~SS_BREAKING;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	f023 0310 	bic.w	r3, r3, #16
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        }

        // we still have to execute breaking transition here
        DecrementSPS(stepper);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fdf0 	bl	80009b8 <DecrementSPS>
 8000dd8:	e007      	b.n	8000dea <ExecuteController+0x202>
    }
    else if (!(status & SS_BREAKCORRECTION)){
 8000dda:	7ffb      	ldrb	r3, [r7, #31]
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <ExecuteController+0x202>
        IncrementSPS(stepper);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff fdff 	bl	80009e8 <IncrementSPS>
    }
    stepper->stepCtrlPrescallerTicks = stepper->stepCtrlPrescaller;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695a      	ldr	r2, [r3, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	619a      	str	r2, [r3, #24]
 8000df2:	e004      	b.n	8000dfe <ExecuteController+0x216>
    return;
 8000df4:	bf00      	nop
 8000df6:	e002      	b.n	8000dfe <ExecuteController+0x216>
    return;
 8000df8:	bf00      	nop
 8000dfa:	e000      	b.n	8000dfe <ExecuteController+0x216>
        return;
 8000dfc:	bf00      	nop
  }
}
 8000dfe:	3724      	adds	r7, #36	; 0x24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	ecbd 8b02 	vpop	{d8}
 8000e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e08:	24000a60 	.word	0x24000a60
 8000e0c:	49742400 	.word	0x49742400

08000e10 <Stepper_PulseTimerUpdate>:

void Stepper_PulseTimerUpdate(int numStepper){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  stepper_state * stepper = &steppers[numStepper];
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	1a9b      	subs	r3, r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4a3a      	ldr	r2, [pc, #232]	; (8000f0c <Stepper_PulseTimerUpdate+0xfc>)
 8000e24:	4413      	add	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
  if (stepper == NULL)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d066      	beq.n	8000efc <Stepper_PulseTimerUpdate+0xec>
    return;

  switch (stepper->status & ~(SS_BREAKING|SS_BREAKCORRECTION)){
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	dc02      	bgt.n	8000e44 <Stepper_PulseTimerUpdate+0x34>
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dc37      	bgt.n	8000eb2 <Stepper_PulseTimerUpdate+0xa2>
 8000e42:	e060      	b.n	8000f06 <Stepper_PulseTimerUpdate+0xf6>
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d15e      	bne.n	8000f06 <Stepper_PulseTimerUpdate+0xf6>
    case SS_STARTING:
      if (stepper->currentPosition > stepper->targetPosition){
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dd0b      	ble.n	8000e6c <Stepper_PulseTimerUpdate+0x5c>
          stepper->status = SS_RUNNING_BACKWARD;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << 16u;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	8a1b      	ldrh	r3, [r3, #16]
 8000e60:	461a      	mov	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	0412      	lsls	r2, r2, #16
 8000e68:	619a      	str	r2, [r3, #24]
          stepper->DIR_GPIO->BSRR = stepper->DIR_PIN;
      } else if (stepper->currentPosition == stepper->targetPosition) {
          stepper->status = SS_STOPPED;
          HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
      }
      break;
 8000e6a:	e049      	b.n	8000f00 <Stepper_PulseTimerUpdate+0xf0>
      } else if (stepper->currentPosition < stepper->targetPosition){
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	429a      	cmp	r2, r3
 8000e76:	da09      	bge.n	8000e8c <Stepper_PulseTimerUpdate+0x7c>
          stepper->status = SS_RUNNING_FORWARD;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          stepper->DIR_GPIO->BSRR = stepper->DIR_PIN;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	8a1a      	ldrh	r2, [r3, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	619a      	str	r2, [r3, #24]
      break;
 8000e8a:	e039      	b.n	8000f00 <Stepper_PulseTimerUpdate+0xf0>
      } else if (stepper->currentPosition == stepper->targetPosition) {
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d133      	bne.n	8000f00 <Stepper_PulseTimerUpdate+0xf0>
          stepper->status = SS_STOPPED;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4610      	mov	r0, r2
 8000eac:	f009 fa44 	bl	800a338 <HAL_TIM_PWM_Stop>
      break;
 8000eb0:	e026      	b.n	8000f00 <Stepper_PulseTimerUpdate+0xf0>
    case SS_RUNNING_FORWARD:
    case SS_RUNNING_BACKWARD:
      // The actual pulse has been generated by previous timer run.
      stepper->currentPosition += GetStepDirectionUnit(stepper); {
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f7ff fdb0 	bl	8000a18 <GetStepDirectionUnit>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebe:	441a      	add	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
      if (GetStepsToTarget(stepper) <= 0 && stepper -> currentSPS == stepper -> minSPS) {
 8000ec4:	68f8      	ldr	r0, [r7, #12]
 8000ec6:	f7ff fdbd 	bl	8000a44 <GetStepsToTarget>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	2a01      	cmp	r2, #1
 8000ed0:	f173 0300 	sbcs.w	r3, r3, #0
 8000ed4:	da16      	bge.n	8000f04 <Stepper_PulseTimerUpdate+0xf4>
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d110      	bne.n	8000f04 <Stepper_PulseTimerUpdate+0xf4>
          // We reached or passed through our target position at the stopping speed
          stepper->status = SS_STOPPED;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	f009 fa1f 	bl	800a338 <HAL_TIM_PWM_Stop>
//          printf("%c.stop:%d\r\n", stepper->numberStepper, stepper->currentPosition);
      }}
      break;
 8000efa:	e003      	b.n	8000f04 <Stepper_PulseTimerUpdate+0xf4>
    return;
 8000efc:	bf00      	nop
 8000efe:	e002      	b.n	8000f06 <Stepper_PulseTimerUpdate+0xf6>
      break;
 8000f00:	bf00      	nop
 8000f02:	e000      	b.n	8000f06 <Stepper_PulseTimerUpdate+0xf6>
      break;
 8000f04:	bf00      	nop
  }
}
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	240000ec 	.word	0x240000ec

08000f10 <Stepper_ExecuteAllControllers>:

void Stepper_ExecuteAllControllers(void){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  int32_t i = initializedSteppersCount;
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <Stepper_ExecuteAllControllers+0x3c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	607b      	str	r3, [r7, #4]
  if (i==0)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d010      	beq.n	8000f44 <Stepper_ExecuteAllControllers+0x34>
    return;
  while(i--)
 8000f22:	e009      	b.n	8000f38 <Stepper_ExecuteAllControllers+0x28>
    ExecuteController(&steppers[i]);
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	1a9b      	subs	r3, r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <Stepper_ExecuteAllControllers+0x40>)
 8000f30:	4413      	add	r3, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fe58 	bl	8000be8 <ExecuteController>
  while(i--)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	1e5a      	subs	r2, r3, #1
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <Stepper_ExecuteAllControllers+0x14>
 8000f42:	e000      	b.n	8000f46 <Stepper_ExecuteAllControllers+0x36>
    return;
 8000f44:	bf00      	nop
}
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	240001dc 	.word	0x240001dc
 8000f50:	240000ec 	.word	0x240000ec

08000f54 <Stepper_SetTargetPosition>:

// Sets the new target position (step number) of the motor (where it should rotate to).
// THREAD-SAFE (may be invoked at any time)
// If stepper_status is SS_RUNNING the motor will adjust its state to get to the new target in fastest possible way
// So, if needed - the motor will break to the full stop and immediatelly will start rotating in oposite direction.
stepper_error Stepper_SetTargetPosition(int numStepper, int32_t value){
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  stepper_state * stepper = &steppers[numStepper];
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	1a9b      	subs	r3, r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <Stepper_SetTargetPosition+0x38>)
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  if (stepper == NULL)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <Stepper_SetTargetPosition+0x24>
    return SERR_STATENOTFOUND;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e003      	b.n	8000f80 <Stepper_SetTargetPosition+0x2c>
  stepper->targetPosition = value;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30
  return SERR_OK;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	240000ec 	.word	0x240000ec

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f001 ff85 	bl	8002ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f889 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 fe73 	bl	8001c88 <MX_GPIO_Init>
  MX_BDMA_Init();
 8000fa2:	f000 fe31 	bl	8001c08 <MX_BDMA_Init>
  MX_DMA_Init();
 8000fa6:	f000 fe4f 	bl	8001c48 <MX_DMA_Init>
  MX_ETH_Init();
 8000faa:	f000 f96b 	bl	8001284 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fae:	f000 fdf9 	bl	8001ba4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000fb2:	f000 fa69 	bl	8001488 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fb6:	f000 fabb 	bl	8001530 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fba:	f000 fb0f 	bl	80015dc <MX_TIM4_Init>
  MX_TIM1_Init();
 8000fbe:	f000 fa09 	bl	80013d4 <MX_TIM1_Init>
  MX_SPI3_Init();
 8000fc2:	f000 f9b1 	bl	8001328 <MX_SPI3_Init>
  MX_ADC3_Init();
 8000fc6:	f000 f8f9 	bl	80011bc <MX_ADC3_Init>
  MX_TIM5_Init();
 8000fca:	f000 fb5d 	bl	8001688 <MX_TIM5_Init>
  MX_UART7_Init();
 8000fce:	f000 fd9d 	bl	8001b0c <MX_UART7_Init>
  MX_TIM12_Init();
 8000fd2:	f000 fba9 	bl	8001728 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000fd6:	f000 fc0b 	bl	80017f0 <MX_TIM13_Init>
  MX_TIM16_Init();
 8000fda:	f000 fc57 	bl	800188c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000fde:	f000 fccf 	bl	8001980 <MX_TIM17_Init>
  MX_UART5_Init();
 8000fe2:	f000 fd47 	bl	8001a74 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 8000fe6:	f006 fc77 	bl	80078d8 <HAL_RCC_GetHCLKFreq>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a27      	ldr	r2, [pc, #156]	; (800108c <main+0xfc>)
 8000fee:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 8000ff0:	f006 fc72 	bl	80078d8 <HAL_RCC_GetHCLKFreq>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	4b26      	ldr	r3, [pc, #152]	; (8001090 <main+0x100>)
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4a25      	ldr	r2, [pc, #148]	; (8001094 <main+0x104>)
 8001000:	fbb2 f3f3 	udiv	r3, r2, r3
 8001004:	4a24      	ldr	r2, [pc, #144]	; (8001098 <main+0x108>)
 8001006:	6013      	str	r3, [r2, #0]

  Stepper_SetupPeripherals(1, &htim12, TIM_CHANNEL_2, DIR1_GPIO_Port, DIR1_Pin);
 8001008:	2320      	movs	r3, #32
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <main+0x10c>)
 800100e:	2204      	movs	r2, #4
 8001010:	4923      	ldr	r1, [pc, #140]	; (80010a0 <main+0x110>)
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff fd3c 	bl	8000a90 <Stepper_SetupPeripherals>
  Stepper_SetupPeripherals(2, &htim13, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin);
 8001018:	2310      	movs	r3, #16
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <main+0x10c>)
 800101e:	2200      	movs	r2, #0
 8001020:	4920      	ldr	r1, [pc, #128]	; (80010a4 <main+0x114>)
 8001022:	2002      	movs	r0, #2
 8001024:	f7ff fd34 	bl	8000a90 <Stepper_SetupPeripherals>
  Stepper_SetupPeripherals(3, &htim16, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin);
 8001028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <main+0x118>)
 8001030:	2200      	movs	r2, #0
 8001032:	491e      	ldr	r1, [pc, #120]	; (80010ac <main+0x11c>)
 8001034:	2003      	movs	r0, #3
 8001036:	f7ff fd2b 	bl	8000a90 <Stepper_SetupPeripherals>

  Stepper_InitDefaultState(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff fd7c 	bl	8000b38 <Stepper_InitDefaultState>
  Stepper_InitDefaultState(2);
 8001040:	2002      	movs	r0, #2
 8001042:	f7ff fd79 	bl	8000b38 <Stepper_InitDefaultState>
  Stepper_InitDefaultState(3);
 8001046:	2003      	movs	r0, #3
 8001048:	f7ff fd76 	bl	8000b38 <Stepper_InitDefaultState>

  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <main+0x110>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <main+0x110>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <main+0x114>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <main+0x114>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 0201 	orr.w	r2, r2, #1
 800106a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <main+0x11c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <main+0x11c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	60da      	str	r2, [r3, #12]

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <main+0x100>)
 800107e:	f008 ff81 	bl	8009f84 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Stepper_SetTargetPosition(1, 10);
 8001082:	210a      	movs	r1, #10
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff ff65 	bl	8000f54 <Stepper_SetTargetPosition>
  {
 800108a:	e7fa      	b.n	8001082 <main+0xf2>
 800108c:	24000ab0 	.word	0x24000ab0
 8001090:	24000788 	.word	0x24000788
 8001094:	000f4240 	.word	0x000f4240
 8001098:	24000a60 	.word	0x24000a60
 800109c:	58021400 	.word	0x58021400
 80010a0:	24000b00 	.word	0x24000b00
 80010a4:	24000a14 	.word	0x24000a14
 80010a8:	58021000 	.word	0x58021000
 80010ac:	24000c08 	.word	0x24000c08

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b09c      	sub	sp, #112	; 0x70
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	224c      	movs	r2, #76	; 0x4c
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f00b fe14 	bl	800ccec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2220      	movs	r2, #32
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f00b fe0e 	bl	800ccec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010d0:	2002      	movs	r0, #2
 80010d2:	f005 fc77 	bl	80069c4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <SystemClock_Config+0x100>)
 80010dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010de:	4a34      	ldr	r2, [pc, #208]	; (80011b0 <SystemClock_Config+0x100>)
 80010e0:	f023 0301 	bic.w	r3, r3, #1
 80010e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010e6:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <SystemClock_Config+0x100>)
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <SystemClock_Config+0x104>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010f8:	4a2e      	ldr	r2, [pc, #184]	; (80011b4 <SystemClock_Config+0x104>)
 80010fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <SystemClock_Config+0x104>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800110c:	bf00      	nop
 800110e:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <SystemClock_Config+0x104>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800111a:	d1f8      	bne.n	800110e <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <SystemClock_Config+0x108>)
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	4a25      	ldr	r2, [pc, #148]	; (80011b8 <SystemClock_Config+0x108>)
 8001122:	f023 0303 	bic.w	r3, r3, #3
 8001126:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001128:	2322      	movs	r3, #34	; 0x22
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800112c:	2301      	movs	r3, #1
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001130:	2340      	movs	r3, #64	; 0x40
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800113c:	2300      	movs	r3, #0
 800113e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001140:	2304      	movs	r3, #4
 8001142:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001144:	2319      	movs	r3, #25
 8001146:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001148:	2302      	movs	r3, #2
 800114a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800114c:	2304      	movs	r3, #4
 800114e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001154:	230c      	movs	r3, #12
 8001156:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001158:	2300      	movs	r3, #0
 800115a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4618      	mov	r0, r3
 8001166:	f005 fc77 	bl	8006a58 <HAL_RCC_OscConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001170:	f000 ff48 	bl	8002004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001174:	233f      	movs	r3, #63	; 0x3f
 8001176:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001178:	2303      	movs	r3, #3
 800117a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001180:	2308      	movs	r3, #8
 8001182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001188:	2340      	movs	r3, #64	; 0x40
 800118a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2102      	movs	r1, #2
 8001198:	4618      	mov	r0, r3
 800119a:	f006 f86d 	bl	8007278 <HAL_RCC_ClockConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80011a4:	f000 ff2e 	bl	8002004 <Error_Handler>
  }
}
 80011a8:	bf00      	nop
 80011aa:	3770      	adds	r7, #112	; 0x70
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	58000400 	.word	0x58000400
 80011b4:	58024800 	.word	0x58024800
 80011b8:	58024400 	.word	0x58024400

080011bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <MX_ADC3_Init+0xc0>)
 80011d6:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <MX_ADC3_Init+0xc4>)
 80011d8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <MX_ADC3_Init+0xc0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_ADC3_Init+0xc0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <MX_ADC3_Init+0xc0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_ADC3_Init+0xc0>)
 80011ee:	2204      	movs	r2, #4
 80011f0:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <MX_ADC3_Init+0xc0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <MX_ADC3_Init+0xc0>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_ADC3_Init+0xc0>)
 8001200:	2201      	movs	r2, #1
 8001202:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_ADC3_Init+0xc0>)
 8001206:	2200      	movs	r2, #0
 8001208:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_ADC3_Init+0xc0>)
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_ADC3_Init+0xc0>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_ADC3_Init+0xc0>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_ADC3_Init+0xc0>)
 800121e:	2200      	movs	r2, #0
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_ADC3_Init+0xc0>)
 8001224:	2200      	movs	r2, #0
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_ADC3_Init+0xc0>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001230:	4812      	ldr	r0, [pc, #72]	; (800127c <MX_ADC3_Init+0xc0>)
 8001232:	f002 f8af 	bl	8003394 <HAL_ADC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 800123c:	f000 fee2 	bl	8002004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001240:	2301      	movs	r3, #1
 8001242:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001244:	2306      	movs	r3, #6
 8001246:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800124c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001250:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001252:	2304      	movs	r3, #4
 8001254:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_ADC3_Init+0xc0>)
 8001264:	f002 fa36 	bl	80036d4 <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 800126e:	f000 fec9 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	240009b0 	.word	0x240009b0
 8001280:	58026000 	.word	0x58026000

08001284 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <MX_ETH_Init+0x90>)
 800128a:	4a23      	ldr	r2, [pc, #140]	; (8001318 <MX_ETH_Init+0x94>)
 800128c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <MX_ETH_Init+0x90>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_ETH_Init+0x90>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	3301      	adds	r3, #1
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_ETH_Init+0x90>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	3302      	adds	r3, #2
 80012a6:	22e1      	movs	r2, #225	; 0xe1
 80012a8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_ETH_Init+0x90>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	3303      	adds	r3, #3
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_ETH_Init+0x90>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_ETH_Init+0x90>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	3305      	adds	r3, #5
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_ETH_Init+0x90>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_ETH_Init+0x90>)
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_ETH_Init+0x98>)
 80012d2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_ETH_Init+0x90>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_ETH_Init+0x9c>)
 80012d8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_ETH_Init+0x90>)
 80012dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012e0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_ETH_Init+0x90>)
 80012e4:	f004 fc22 	bl	8005b2c <HAL_ETH_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80012ee:	f000 fe89 	bl	8002004 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80012f2:	2234      	movs	r2, #52	; 0x34
 80012f4:	2100      	movs	r1, #0
 80012f6:	480b      	ldr	r0, [pc, #44]	; (8001324 <MX_ETH_Init+0xa0>)
 80012f8:	f00b fcf8 	bl	800ccec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_ETH_Init+0xa0>)
 80012fe:	2221      	movs	r2, #33	; 0x21
 8001300:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_ETH_Init+0xa0>)
 8001304:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001308:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_ETH_Init+0xa0>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	24000b4c 	.word	0x24000b4c
 8001318:	40028000 	.word	0x40028000
 800131c:	24000070 	.word	0x24000070
 8001320:	24000010 	.word	0x24000010
 8001324:	24000bd4 	.word	0x24000bd4

08001328 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <MX_SPI3_Init+0xa4>)
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <MX_SPI3_Init+0xa8>)
 8001330:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_SPI3_Init+0xa4>)
 8001334:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001338:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <MX_SPI3_Init+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_SPI3_Init+0xa4>)
 8001342:	2203      	movs	r2, #3
 8001344:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_SPI3_Init+0xa4>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_SPI3_Init+0xa4>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <MX_SPI3_Init+0xa4>)
 8001354:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001358:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_SPI3_Init+0xa4>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_SPI3_Init+0xa4>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_SPI3_Init+0xa4>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_SPI3_Init+0xa4>)
 800136e:	2200      	movs	r2, #0
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_SPI3_Init+0xa4>)
 8001374:	2200      	movs	r2, #0
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_SPI3_Init+0xa4>)
 800137a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800137e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_SPI3_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_SPI3_Init+0xa4>)
 8001388:	2200      	movs	r2, #0
 800138a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_SPI3_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_SPI3_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_SPI3_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_SPI3_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_SPI3_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_SPI3_Init+0xa4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_SPI3_Init+0xa4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_SPI3_Init+0xa4>)
 80013b8:	f008 fc70 	bl	8009c9c <HAL_SPI_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80013c2:	f000 fe1f 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	24000820 	.word	0x24000820
 80013d0:	40003c00 	.word	0x40003c00

080013d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2224      	movs	r2, #36	; 0x24
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00b fc82 	bl	800ccec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	463b      	mov	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_TIM1_Init+0xac>)
 80013f4:	4a23      	ldr	r2, [pc, #140]	; (8001484 <MX_TIM1_Init+0xb0>)
 80013f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_TIM1_Init+0xac>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_TIM1_Init+0xac>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_TIM1_Init+0xac>)
 8001406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_TIM1_Init+0xac>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_TIM1_Init+0xac>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_TIM1_Init+0xac>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800141e:	2303      	movs	r3, #3
 8001420:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001426:	2301      	movs	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001436:	2301      	movs	r3, #1
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	4619      	mov	r1, r3
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_TIM1_Init+0xac>)
 800144a:	f009 f80b 	bl	800a464 <HAL_TIM_Encoder_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001454:	f000 fdd6 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_TIM1_Init+0xac>)
 800146a:	f00a f819 	bl	800b4a0 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001474:	f000 fdc6 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	3730      	adds	r7, #48	; 0x30
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	24000a64 	.word	0x24000a64
 8001484:	40010000 	.word	0x40010000

08001488 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2224      	movs	r2, #36	; 0x24
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f00b fc28 	bl	800ccec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <MX_TIM2_Init+0xa4>)
 80014a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_TIM2_Init+0xa4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <MX_TIM2_Init+0xa4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_TIM2_Init+0xa4>)
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_TIM2_Init+0xa4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_TIM2_Init+0xa4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014ce:	2301      	movs	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014e6:	2301      	movs	r3, #1
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <MX_TIM2_Init+0xa4>)
 80014fa:	f008 ffb3 	bl	800a464 <HAL_TIM_Encoder_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001504:	f000 fd7e 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_TIM2_Init+0xa4>)
 8001516:	f009 ffc3 	bl	800b4a0 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001520:	f000 fd70 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	; 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	24000ab4 	.word	0x24000ab4

08001530 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	; 0x30
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2224      	movs	r2, #36	; 0x24
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f00b fbd4 	bl	800ccec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	463b      	mov	r3, r7
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <MX_TIM3_Init+0xa4>)
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <MX_TIM3_Init+0xa8>)
 8001552:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MX_TIM3_Init+0xa4>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <MX_TIM3_Init+0xa4>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <MX_TIM3_Init+0xa4>)
 8001562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001566:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_TIM3_Init+0xa4>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_TIM3_Init+0xa4>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001574:	2303      	movs	r3, #3
 8001576:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800157c:	2301      	movs	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800158c:	2301      	movs	r3, #1
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <MX_TIM3_Init+0xa4>)
 80015a0:	f008 ff60 	bl	800a464 <HAL_TIM_Encoder_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80015aa:	f000 fd2b 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_TIM3_Init+0xa4>)
 80015bc:	f009 ff70 	bl	800b4a0 <HAL_TIMEx_MasterConfigSynchronization>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80015c6:	f000 fd1d 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3730      	adds	r7, #48	; 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	240007d4 	.word	0x240007d4
 80015d8:	40000400 	.word	0x40000400

080015dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	; 0x30
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	2224      	movs	r2, #36	; 0x24
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f00b fb7e 	bl	800ccec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	463b      	mov	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_TIM4_Init+0xa4>)
 80015fc:	4a21      	ldr	r2, [pc, #132]	; (8001684 <MX_TIM4_Init+0xa8>)
 80015fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_TIM4_Init+0xa4>)
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <MX_TIM4_Init+0xa4>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <MX_TIM4_Init+0xa4>)
 800160e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001612:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_TIM4_Init+0xa4>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <MX_TIM4_Init+0xa4>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001620:	2303      	movs	r3, #3
 8001622:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001628:	2301      	movs	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001630:	230a      	movs	r3, #10
 8001632:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001638:	2301      	movs	r3, #1
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001640:	230a      	movs	r3, #10
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4619      	mov	r1, r3
 800164a:	480d      	ldr	r0, [pc, #52]	; (8001680 <MX_TIM4_Init+0xa4>)
 800164c:	f008 ff0a 	bl	800a464 <HAL_TIM_Encoder_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001656:	f000 fcd5 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001662:	463b      	mov	r3, r7
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	; (8001680 <MX_TIM4_Init+0xa4>)
 8001668:	f009 ff1a 	bl	800b4a0 <HAL_TIMEx_MasterConfigSynchronization>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001672:	f000 fcc7 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	3730      	adds	r7, #48	; 0x30
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	24000270 	.word	0x24000270
 8001684:	40000800 	.word	0x40000800

08001688 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <MX_TIM5_Init+0x94>)
 80016a8:	4a1d      	ldr	r2, [pc, #116]	; (8001720 <MX_TIM5_Init+0x98>)
 80016aa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MX_TIM5_Init+0x94>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_TIM5_Init+0x94>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000;
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_TIM5_Init+0x94>)
 80016ba:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <MX_TIM5_Init+0x9c>)
 80016bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_TIM5_Init+0x94>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_TIM5_Init+0x94>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016ca:	4814      	ldr	r0, [pc, #80]	; (800171c <MX_TIM5_Init+0x94>)
 80016cc:	f008 fc03 	bl	8009ed6 <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80016d6:	f000 fc95 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	4619      	mov	r1, r3
 80016e6:	480d      	ldr	r0, [pc, #52]	; (800171c <MX_TIM5_Init+0x94>)
 80016e8:	f009 f992 	bl	800aa10 <HAL_TIM_ConfigClockSource>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80016f2:	f000 fc87 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4619      	mov	r1, r3
 8001702:	4806      	ldr	r0, [pc, #24]	; (800171c <MX_TIM5_Init+0x94>)
 8001704:	f009 fecc 	bl	800b4a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800170e:	f000 fc79 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	24000788 	.word	0x24000788
 8001720:	40000c00 	.word	0x40000c00
 8001724:	000186a0 	.word	0x000186a0

08001728 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	615a      	str	r2, [r3, #20]
 800174c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <MX_TIM12_Init+0xc0>)
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <MX_TIM12_Init+0xc4>)
 8001752:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8001754:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <MX_TIM12_Init+0xc0>)
 8001756:	2201      	movs	r2, #1
 8001758:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <MX_TIM12_Init+0xc0>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 50000;
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <MX_TIM12_Init+0xc0>)
 8001762:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001766:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MX_TIM12_Init+0xc0>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MX_TIM12_Init+0xc0>)
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001774:	481c      	ldr	r0, [pc, #112]	; (80017e8 <MX_TIM12_Init+0xc0>)
 8001776:	f008 fbae 	bl	8009ed6 <HAL_TIM_Base_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001780:	f000 fc40 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001788:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800178a:	f107 0320 	add.w	r3, r7, #32
 800178e:	4619      	mov	r1, r3
 8001790:	4815      	ldr	r0, [pc, #84]	; (80017e8 <MX_TIM12_Init+0xc0>)
 8001792:	f009 f93d 	bl	800aa10 <HAL_TIM_ConfigClockSource>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800179c:	f000 fc32 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80017a0:	4811      	ldr	r0, [pc, #68]	; (80017e8 <MX_TIM12_Init+0xc0>)
 80017a2:	f008 fc5f 	bl	800a064 <HAL_TIM_PWM_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80017ac:	f000 fc2a 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b0:	2360      	movs	r3, #96	; 0x60
 80017b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000;
 80017b4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80017b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2204      	movs	r2, #4
 80017c6:	4619      	mov	r1, r3
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <MX_TIM12_Init+0xc0>)
 80017ca:	f009 f811 	bl	800a7f0 <HAL_TIM_PWM_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80017d4:	f000 fc16 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <MX_TIM12_Init+0xc0>)
 80017da:	f001 f80b 	bl	80027f4 <HAL_TIM_MspPostInit>

}
 80017de:	bf00      	nop
 80017e0:	3730      	adds	r7, #48	; 0x30
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	24000b00 	.word	0x24000b00
 80017ec:	40001800 	.word	0x40001800

080017f0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <MX_TIM13_Init+0x94>)
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <MX_TIM13_Init+0x98>)
 800180c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 99;
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <MX_TIM13_Init+0x94>)
 8001810:	2263      	movs	r2, #99	; 0x63
 8001812:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <MX_TIM13_Init+0x94>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000;
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_TIM13_Init+0x94>)
 800181c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001820:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_TIM13_Init+0x94>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <MX_TIM13_Init+0x94>)
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800182e:	4815      	ldr	r0, [pc, #84]	; (8001884 <MX_TIM13_Init+0x94>)
 8001830:	f008 fb51 	bl	8009ed6 <HAL_TIM_Base_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800183a:	f000 fbe3 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800183e:	4811      	ldr	r0, [pc, #68]	; (8001884 <MX_TIM13_Init+0x94>)
 8001840:	f008 fc10 	bl	800a064 <HAL_TIM_PWM_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800184a:	f000 fbdb 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184e:	2360      	movs	r3, #96	; 0x60
 8001850:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000;
 8001852:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001856:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	4619      	mov	r1, r3
 8001866:	4807      	ldr	r0, [pc, #28]	; (8001884 <MX_TIM13_Init+0x94>)
 8001868:	f008 ffc2 	bl	800a7f0 <HAL_TIM_PWM_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8001872:	f000 fbc7 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001876:	4803      	ldr	r0, [pc, #12]	; (8001884 <MX_TIM13_Init+0x94>)
 8001878:	f000 ffbc 	bl	80027f4 <HAL_TIM_MspPostInit>

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	24000a14 	.word	0x24000a14
 8001888:	40001c00 	.word	0x40001c00

0800188c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b092      	sub	sp, #72	; 0x48
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]
 80018a2:	615a      	str	r2, [r3, #20]
 80018a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018a6:	463b      	mov	r3, r7
 80018a8:	222c      	movs	r2, #44	; 0x2c
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00b fa1d 	bl	800ccec <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <MX_TIM16_Init+0xec>)
 80018b4:	4a31      	ldr	r2, [pc, #196]	; (800197c <MX_TIM16_Init+0xf0>)
 80018b6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 99;
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <MX_TIM16_Init+0xec>)
 80018ba:	2263      	movs	r2, #99	; 0x63
 80018bc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <MX_TIM16_Init+0xec>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50000;
 80018c4:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <MX_TIM16_Init+0xec>)
 80018c6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80018ca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <MX_TIM16_Init+0xec>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018d2:	4b29      	ldr	r3, [pc, #164]	; (8001978 <MX_TIM16_Init+0xec>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <MX_TIM16_Init+0xec>)
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018de:	4826      	ldr	r0, [pc, #152]	; (8001978 <MX_TIM16_Init+0xec>)
 80018e0:	f008 faf9 	bl	8009ed6 <HAL_TIM_Base_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80018ea:	f000 fb8b 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80018ee:	4822      	ldr	r0, [pc, #136]	; (8001978 <MX_TIM16_Init+0xec>)
 80018f0:	f008 fbb8 	bl	800a064 <HAL_TIM_PWM_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80018fa:	f000 fb83 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fe:	2360      	movs	r3, #96	; 0x60
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 25000;
 8001902:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800190c:	2300      	movs	r3, #0
 800190e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800191c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001920:	2200      	movs	r2, #0
 8001922:	4619      	mov	r1, r3
 8001924:	4814      	ldr	r0, [pc, #80]	; (8001978 <MX_TIM16_Init+0xec>)
 8001926:	f008 ff63 	bl	800a7f0 <HAL_TIM_PWM_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001930:	f000 fb68 	bl	8002004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001956:	463b      	mov	r3, r7
 8001958:	4619      	mov	r1, r3
 800195a:	4807      	ldr	r0, [pc, #28]	; (8001978 <MX_TIM16_Init+0xec>)
 800195c:	f009 fe28 	bl	800b5b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8001966:	f000 fb4d 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <MX_TIM16_Init+0xec>)
 800196c:	f000 ff42 	bl	80027f4 <HAL_TIM_MspPostInit>

}
 8001970:	bf00      	nop
 8001972:	3748      	adds	r7, #72	; 0x48
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	24000c08 	.word	0x24000c08
 800197c:	40014400 	.word	0x40014400

08001980 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b092      	sub	sp, #72	; 0x48
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]
 8001996:	615a      	str	r2, [r3, #20]
 8001998:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800199a:	463b      	mov	r3, r7
 800199c:	222c      	movs	r2, #44	; 0x2c
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00b f9a3 	bl	800ccec <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <MX_TIM17_Init+0xec>)
 80019a8:	4a31      	ldr	r2, [pc, #196]	; (8001a70 <MX_TIM17_Init+0xf0>)
 80019aa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 99;
 80019ac:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <MX_TIM17_Init+0xec>)
 80019ae:	2263      	movs	r2, #99	; 0x63
 80019b0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <MX_TIM17_Init+0xec>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 50000;
 80019b8:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <MX_TIM17_Init+0xec>)
 80019ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80019be:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <MX_TIM17_Init+0xec>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <MX_TIM17_Init+0xec>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <MX_TIM17_Init+0xec>)
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80019d2:	4826      	ldr	r0, [pc, #152]	; (8001a6c <MX_TIM17_Init+0xec>)
 80019d4:	f008 fa7f 	bl	8009ed6 <HAL_TIM_Base_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80019de:	f000 fb11 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80019e2:	4822      	ldr	r0, [pc, #136]	; (8001a6c <MX_TIM17_Init+0xec>)
 80019e4:	f008 fb3e 	bl	800a064 <HAL_TIM_PWM_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80019ee:	f000 fb09 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f2:	2360      	movs	r3, #96	; 0x60
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 25000;
 80019f6:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fc:	2300      	movs	r3, #0
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a00:	2300      	movs	r3, #0
 8001a02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a14:	2200      	movs	r2, #0
 8001a16:	4619      	mov	r1, r3
 8001a18:	4814      	ldr	r0, [pc, #80]	; (8001a6c <MX_TIM17_Init+0xec>)
 8001a1a:	f008 fee9 	bl	800a7f0 <HAL_TIM_PWM_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8001a24:	f000 faee 	bl	8002004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4807      	ldr	r0, [pc, #28]	; (8001a6c <MX_TIM17_Init+0xec>)
 8001a50:	f009 fdae 	bl	800b5b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8001a5a:	f000 fad3 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001a5e:	4803      	ldr	r0, [pc, #12]	; (8001a6c <MX_TIM17_Init+0xec>)
 8001a60:	f000 fec8 	bl	80027f4 <HAL_TIM_MspPostInit>

}
 8001a64:	bf00      	nop
 8001a66:	3748      	adds	r7, #72	; 0x48
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	240006c4 	.word	0x240006c4
 8001a70:	40014800 	.word	0x40014800

08001a74 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a78:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <MX_UART5_Init+0x90>)
 8001a7a:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <MX_UART5_Init+0x94>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <MX_UART5_Init+0x90>)
 8001a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a84:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <MX_UART5_Init+0x90>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <MX_UART5_Init+0x90>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <MX_UART5_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <MX_UART5_Init+0x90>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <MX_UART5_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_UART5_Init+0x90>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_UART5_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_UART5_Init+0x90>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <MX_UART5_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001abc:	4811      	ldr	r0, [pc, #68]	; (8001b04 <MX_UART5_Init+0x90>)
 8001abe:	f009 fe13 	bl	800b6e8 <HAL_UART_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001ac8:	f000 fa9c 	bl	8002004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001acc:	2100      	movs	r1, #0
 8001ace:	480d      	ldr	r0, [pc, #52]	; (8001b04 <MX_UART5_Init+0x90>)
 8001ad0:	f00a fd60 	bl	800c594 <HAL_UARTEx_SetTxFifoThreshold>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001ada:	f000 fa93 	bl	8002004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4808      	ldr	r0, [pc, #32]	; (8001b04 <MX_UART5_Init+0x90>)
 8001ae2:	f00a fd95 	bl	800c610 <HAL_UARTEx_SetRxFifoThreshold>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001aec:	f000 fa8a 	bl	8002004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001af0:	4804      	ldr	r0, [pc, #16]	; (8001b04 <MX_UART5_Init+0x90>)
 8001af2:	f00a fd16 	bl	800c522 <HAL_UARTEx_DisableFifoMode>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001afc:	f000 fa82 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	240008a8 	.word	0x240008a8
 8001b08:	40005000 	.word	0x40005000

08001b0c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b12:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <MX_UART7_Init+0x94>)
 8001b14:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b1c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b32:	220c      	movs	r2, #12
 8001b34:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001b54:	4811      	ldr	r0, [pc, #68]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b56:	f009 fdc7 	bl	800b6e8 <HAL_UART_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001b60:	f000 fa50 	bl	8002004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b64:	2100      	movs	r1, #0
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b68:	f00a fd14 	bl	800c594 <HAL_UARTEx_SetTxFifoThreshold>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001b72:	f000 fa47 	bl	8002004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b76:	2100      	movs	r1, #0
 8001b78:	4808      	ldr	r0, [pc, #32]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b7a:	f00a fd49 	bl	800c610 <HAL_UARTEx_SetRxFifoThreshold>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001b84:	f000 fa3e 	bl	8002004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <MX_UART7_Init+0x90>)
 8001b8a:	f00a fcca 	bl	800c522 <HAL_UARTEx_DisableFifoMode>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001b94:	f000 fa36 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	240001e0 	.word	0x240001e0
 8001ba0:	40007800 	.word	0x40007800

08001ba4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001baa:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001bac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bb0:	2209      	movs	r2, #9
 8001bb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bec:	f004 fda2 	bl	8006734 <HAL_PCD_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001bf6:	f000 fa05 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	240002bc 	.word	0x240002bc
 8001c04:	40080000 	.word	0x40080000

08001c08 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <MX_BDMA_Init+0x3c>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <MX_BDMA_Init+0x3c>)
 8001c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_BDMA_Init+0x3c>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2081      	movs	r0, #129	; 0x81
 8001c32:	f002 fa84 	bl	800413e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001c36:	2081      	movs	r0, #129	; 0x81
 8001c38:	f002 fa9b 	bl	8004172 <HAL_NVIC_EnableIRQ>

}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	58024400 	.word	0x58024400

08001c48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <MX_DMA_Init+0x3c>)
 8001c50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c54:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <MX_DMA_Init+0x3c>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_DMA_Init+0x3c>)
 8001c60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	200c      	movs	r0, #12
 8001c72:	f002 fa64 	bl	800413e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c76:	200c      	movs	r0, #12
 8001c78:	f002 fa7b 	bl	8004172 <HAL_NVIC_EnableIRQ>

}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	58024400 	.word	0x58024400

08001c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08e      	sub	sp, #56	; 0x38
 8001c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	4b95      	ldr	r3, [pc, #596]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca4:	4a93      	ldr	r2, [pc, #588]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cae:	4b91      	ldr	r3, [pc, #580]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	623b      	str	r3, [r7, #32]
 8001cba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cbc:	4b8d      	ldr	r3, [pc, #564]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc2:	4a8c      	ldr	r2, [pc, #560]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001cc4:	f043 0320 	orr.w	r3, r3, #32
 8001cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ccc:	4b89      	ldr	r3, [pc, #548]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cda:	4b86      	ldr	r3, [pc, #536]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce0:	4a84      	ldr	r2, [pc, #528]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cea:	4b82      	ldr	r3, [pc, #520]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4b7e      	ldr	r3, [pc, #504]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfe:	4a7d      	ldr	r2, [pc, #500]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d08:	4b7a      	ldr	r3, [pc, #488]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	4b77      	ldr	r3, [pc, #476]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1c:	4a75      	ldr	r2, [pc, #468]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d26:	4b73      	ldr	r3, [pc, #460]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d34:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3a:	4a6e      	ldr	r2, [pc, #440]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d44:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d52:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d58:	4a66      	ldr	r2, [pc, #408]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d5a:	f043 0310 	orr.w	r3, r3, #16
 8001d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d62:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d70:	4b60      	ldr	r3, [pc, #384]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d76:	4a5f      	ldr	r2, [pc, #380]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d78:	f043 0308 	orr.w	r3, r3, #8
 8001d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d80:	4b5c      	ldr	r3, [pc, #368]	; (8001ef4 <MX_GPIO_Init+0x26c>)
 8001d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001d94:	4858      	ldr	r0, [pc, #352]	; (8001ef8 <MX_GPIO_Init+0x270>)
 8001d96:	f004 fc8f 	bl	80066b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f644 4101 	movw	r1, #19457	; 0x4c01
 8001da0:	4856      	ldr	r0, [pc, #344]	; (8001efc <MX_GPIO_Init+0x274>)
 8001da2:	f004 fc89 	bl	80066b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001da6:	2200      	movs	r2, #0
 8001da8:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001dac:	4854      	ldr	r0, [pc, #336]	; (8001f00 <MX_GPIO_Init+0x278>)
 8001dae:	f004 fc83 	bl	80066b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001db8:	4852      	ldr	r0, [pc, #328]	; (8001f04 <MX_GPIO_Init+0x27c>)
 8001dba:	f004 fc7d 	bl	80066b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc4:	4850      	ldr	r0, [pc, #320]	; (8001f08 <MX_GPIO_Init+0x280>)
 8001dc6:	f004 fc77 	bl	80066b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ddc:	4619      	mov	r1, r3
 8001dde:	484b      	ldr	r0, [pc, #300]	; (8001f0c <MX_GPIO_Init+0x284>)
 8001de0:	f004 faba 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin PF9 DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin;
 8001de4:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	483e      	ldr	r0, [pc, #248]	; (8001ef8 <MX_GPIO_Init+0x270>)
 8001dfe:	f004 faab 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB10 PB11 LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin;
 8001e02:	f644 4301 	movw	r3, #19457	; 0x4c01
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4838      	ldr	r0, [pc, #224]	; (8001efc <MX_GPIO_Init+0x274>)
 8001e1c:	f004 fa9c 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001e20:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e36:	4619      	mov	r1, r3
 8001e38:	4831      	ldr	r0, [pc, #196]	; (8001f00 <MX_GPIO_Init+0x278>)
 8001e3a:	f004 fa8d 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|LD2_Pin;
 8001e3e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e54:	4619      	mov	r1, r3
 8001e56:	482b      	ldr	r0, [pc, #172]	; (8001f04 <MX_GPIO_Init+0x27c>)
 8001e58:	f004 fa7e 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e6e:	2307      	movs	r3, #7
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	4823      	ldr	r0, [pc, #140]	; (8001f08 <MX_GPIO_Init+0x280>)
 8001e7a:	f004 fa6d 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	481c      	ldr	r0, [pc, #112]	; (8001f08 <MX_GPIO_Init+0x280>)
 8001e98:	f004 fa5e 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <MX_GPIO_Init+0x288>)
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eac:	4619      	mov	r1, r3
 8001eae:	4814      	ldr	r0, [pc, #80]	; (8001f00 <MX_GPIO_Init+0x278>)
 8001eb0:	f004 fa52 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin
                           PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin
 8001eb4:	23f8      	movs	r3, #248	; 0xf8
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
                          |PROXIMITY4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <MX_GPIO_Init+0x288>)
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4810      	ldr	r0, [pc, #64]	; (8001f08 <MX_GPIO_Init+0x280>)
 8001ec8:	f004 fa46 	bl	8006358 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	200a      	movs	r0, #10
 8001ed2:	f002 f934 	bl	800413e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ed6:	200a      	movs	r0, #10
 8001ed8:	f002 f94b 	bl	8004172 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2017      	movs	r0, #23
 8001ee2:	f002 f92c 	bl	800413e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ee6:	2017      	movs	r0, #23
 8001ee8:	f002 f943 	bl	8004172 <HAL_NVIC_EnableIRQ>

}
 8001eec:	bf00      	nop
 8001eee:	3738      	adds	r7, #56	; 0x38
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58021400 	.word	0x58021400
 8001efc:	58020400 	.word	0x58020400
 8001f00:	58021800 	.word	0x58021800
 8001f04:	58021000 	.word	0x58021000
 8001f08:	58020c00 	.word	0x58020c00
 8001f0c:	58020800 	.word	0x58020800
 8001f10:	11110000 	.word	0x11110000

08001f14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a35      	ldr	r2, [pc, #212]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d114      	bne.n	8001f4e <HAL_TIM_PeriodElapsedCallback+0x3a>
		if (__HAL_TIM_GET_FLAG(&htim5, TIM_FLAG_UPDATE))
 8001f24:	4b33      	ldr	r3, [pc, #204]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d10d      	bne.n	8001f4e <HAL_TIM_PeriodElapsedCallback+0x3a>
		  {
		    if (__HAL_TIM_GET_ITSTATUS(&htim5, TIM_IT_UPDATE))
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d106      	bne.n	8001f4e <HAL_TIM_PeriodElapsedCallback+0x3a>
		    {
//		      HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
		      __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8001f40:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0201 	mvn.w	r2, #1
 8001f48:	611a      	str	r2, [r3, #16]

		      Stepper_ExecuteAllControllers();
 8001f4a:	f7fe ffe1 	bl	8000f10 <Stepper_ExecuteAllControllers>

//		      HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
		    }
		  }
	}
	if(htim==&htim12){
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a29      	ldr	r2, [pc, #164]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d115      	bne.n	8001f82 <HAL_TIM_PeriodElapsedCallback+0x6e>
		if (__HAL_TIM_GET_FLAG(&htim12, TIM_FLAG_UPDATE))
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d10e      	bne.n	8001f82 <HAL_TIM_PeriodElapsedCallback+0x6e>
		  {
		    if (__HAL_TIM_GET_ITSTATUS(&htim12, TIM_IT_UPDATE))
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_TIM_PeriodElapsedCallback+0x6e>
		    {
		      __HAL_TIM_CLEAR_FLAG(&htim12, TIM_FLAG_UPDATE);
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f06f 0201 	mvn.w	r2, #1
 8001f7a:	611a      	str	r2, [r3, #16]
		      Stepper_PulseTimerUpdate(1);
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7fe ff47 	bl	8000e10 <Stepper_PulseTimerUpdate>
		    }
		  }
	}
	if (htim == &htim13){
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d115      	bne.n	8001fb6 <HAL_TIM_PeriodElapsedCallback+0xa2>
		if (__HAL_TIM_GET_FLAG(&htim13, TIM_FLAG_UPDATE))
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d10e      	bne.n	8001fb6 <HAL_TIM_PeriodElapsedCallback+0xa2>
		  {
		    if (__HAL_TIM_GET_ITSTATUS(&htim13, TIM_IT_UPDATE))
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_TIM_PeriodElapsedCallback+0xa2>
		    {
		      __HAL_TIM_CLEAR_FLAG(&htim13, TIM_FLAG_UPDATE);
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f06f 0201 	mvn.w	r2, #1
 8001fae:	611a      	str	r2, [r3, #16]
		      Stepper_PulseTimerUpdate(2);
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f7fe ff2d 	bl	8000e10 <Stepper_PulseTimerUpdate>
		    }
		  }
	}
	if (htim == &htim16) {
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a11      	ldr	r2, [pc, #68]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d115      	bne.n	8001fea <HAL_TIM_PeriodElapsedCallback+0xd6>
		if (__HAL_TIM_GET_FLAG(&htim16, TIM_FLAG_UPDATE))
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10e      	bne.n	8001fea <HAL_TIM_PeriodElapsedCallback+0xd6>
		  {
		    if (__HAL_TIM_GET_ITSTATUS(&htim16, TIM_IT_UPDATE))
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d107      	bne.n	8001fea <HAL_TIM_PeriodElapsedCallback+0xd6>
		    {
		      __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f06f 0201 	mvn.w	r2, #1
 8001fe2:	611a      	str	r2, [r3, #16]
		      Stepper_PulseTimerUpdate(3);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f7fe ff13 	bl	8000e10 <Stepper_PulseTimerUpdate>
		    }
		  }
	}
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	24000788 	.word	0x24000788
 8001ff8:	24000b00 	.word	0x24000b00
 8001ffc:	24000a14 	.word	0x24000a14
 8002000:	24000c08 	.word	0x24000c08

08002004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002008:	b672      	cpsid	i
}
 800200a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800200c:	e7fe      	b.n	800200c <Error_Handler+0x8>
	...

08002010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_MspInit+0x30>)
 8002018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800201c:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_MspInit+0x30>)
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_MspInit+0x30>)
 8002028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	58024400 	.word	0x58024400

08002044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0ba      	sub	sp, #232	; 0xe8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800205c:	f107 0318 	add.w	r3, r7, #24
 8002060:	22bc      	movs	r2, #188	; 0xbc
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f00a fe41 	bl	800ccec <memset>
  if(hadc->Instance==ADC3)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a51      	ldr	r2, [pc, #324]	; (80021b4 <HAL_ADC_MspInit+0x170>)
 8002070:	4293      	cmp	r3, r2
 8002072:	f040 809a 	bne.w	80021aa <HAL_ADC_MspInit+0x166>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002076:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800207a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 800207c:	2304      	movs	r3, #4
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 9;
 8002080:	2309      	movs	r3, #9
 8002082:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002084:	2302      	movs	r3, #2
 8002086:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002088:	2302      	movs	r3, #2
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 800208c:	2304      	movs	r3, #4
 800208e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002090:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002094:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800209a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 3072;
 800209c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020a0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80020a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020aa:	f107 0318 	add.w	r3, r7, #24
 80020ae:	4618      	mov	r0, r3
 80020b0:	f005 fc6e 	bl	8007990 <HAL_RCCEx_PeriphCLKConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80020ba:	f7ff ffa3 	bl	8002004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020be:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <HAL_ADC_MspInit+0x174>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c4:	4a3c      	ldr	r2, [pc, #240]	; (80021b8 <HAL_ADC_MspInit+0x174>)
 80020c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ce:	4b3a      	ldr	r3, [pc, #232]	; (80021b8 <HAL_ADC_MspInit+0x174>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020dc:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_ADC_MspInit+0x174>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e2:	4a35      	ldr	r2, [pc, #212]	; (80021b8 <HAL_ADC_MspInit+0x174>)
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ec:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <HAL_ADC_MspInit+0x174>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fa:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <HAL_ADC_MspInit+0x174>)
 80020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002100:	4a2d      	ldr	r2, [pc, #180]	; (80021b8 <HAL_ADC_MspInit+0x174>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_ADC_MspInit+0x174>)
 800210c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = Current_3_Pin;
 8002118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800211c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002120:	2303      	movs	r3, #3
 8002122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(Current_3_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002130:	4619      	mov	r1, r3
 8002132:	4822      	ldr	r0, [pc, #136]	; (80021bc <HAL_ADC_MspInit+0x178>)
 8002134:	f004 f910 	bl	8006358 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002138:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800213c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002140:	f000 ff86 	bl	8003050 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002144:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002148:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800214c:	f000 ff80 	bl	8003050 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_ADC_MspInit+0x17c>)
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_ADC_MspInit+0x180>)
 8002154:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_ADC_MspInit+0x17c>)
 8002158:	2211      	movs	r2, #17
 800215a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_ADC_MspInit+0x17c>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <HAL_ADC_MspInit+0x17c>)
 8002164:	2200      	movs	r2, #0
 8002166:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_ADC_MspInit+0x17c>)
 800216a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800216e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_ADC_MspInit+0x17c>)
 8002172:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002176:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_ADC_MspInit+0x17c>)
 800217a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800217e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_ADC_MspInit+0x17c>)
 8002182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002186:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_ADC_MspInit+0x17c>)
 800218a:	2200      	movs	r2, #0
 800218c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800218e:	480c      	ldr	r0, [pc, #48]	; (80021c0 <HAL_ADC_MspInit+0x17c>)
 8002190:	f002 f80a 	bl	80041a8 <HAL_DMA_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_ADC_MspInit+0x15a>
    {
      Error_Handler();
 800219a:	f7ff ff33 	bl	8002004 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_ADC_MspInit+0x17c>)
 80021a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <HAL_ADC_MspInit+0x17c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80021aa:	bf00      	nop
 80021ac:	37e8      	adds	r7, #232	; 0xe8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	58026000 	.word	0x58026000
 80021b8:	58024400 	.word	0x58024400
 80021bc:	58021400 	.word	0x58021400
 80021c0:	24000710 	.word	0x24000710
 80021c4:	58025408 	.word	0x58025408

080021c8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08e      	sub	sp, #56	; 0x38
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a59      	ldr	r2, [pc, #356]	; (800234c <HAL_ETH_MspInit+0x184>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	f040 80ab 	bne.w	8002342 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80021ec:	4b58      	ldr	r3, [pc, #352]	; (8002350 <HAL_ETH_MspInit+0x188>)
 80021ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021f2:	4a57      	ldr	r2, [pc, #348]	; (8002350 <HAL_ETH_MspInit+0x188>)
 80021f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021fc:	4b54      	ldr	r3, [pc, #336]	; (8002350 <HAL_ETH_MspInit+0x188>)
 80021fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002206:	623b      	str	r3, [r7, #32]
 8002208:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800220a:	4b51      	ldr	r3, [pc, #324]	; (8002350 <HAL_ETH_MspInit+0x188>)
 800220c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002210:	4a4f      	ldr	r2, [pc, #316]	; (8002350 <HAL_ETH_MspInit+0x188>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002216:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800221a:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <HAL_ETH_MspInit+0x188>)
 800221c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002228:	4b49      	ldr	r3, [pc, #292]	; (8002350 <HAL_ETH_MspInit+0x188>)
 800222a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800222e:	4a48      	ldr	r2, [pc, #288]	; (8002350 <HAL_ETH_MspInit+0x188>)
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002238:	4b45      	ldr	r3, [pc, #276]	; (8002350 <HAL_ETH_MspInit+0x188>)
 800223a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002246:	4b42      	ldr	r3, [pc, #264]	; (8002350 <HAL_ETH_MspInit+0x188>)
 8002248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224c:	4a40      	ldr	r2, [pc, #256]	; (8002350 <HAL_ETH_MspInit+0x188>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002256:	4b3e      	ldr	r3, [pc, #248]	; (8002350 <HAL_ETH_MspInit+0x188>)
 8002258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <HAL_ETH_MspInit+0x188>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226a:	4a39      	ldr	r2, [pc, #228]	; (8002350 <HAL_ETH_MspInit+0x188>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_ETH_MspInit+0x188>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_ETH_MspInit+0x188>)
 8002284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002288:	4a31      	ldr	r2, [pc, #196]	; (8002350 <HAL_ETH_MspInit+0x188>)
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002292:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_ETH_MspInit+0x188>)
 8002294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_ETH_MspInit+0x188>)
 80022a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a6:	4a2a      	ldr	r2, [pc, #168]	; (8002350 <HAL_ETH_MspInit+0x188>)
 80022a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b0:	4b27      	ldr	r3, [pc, #156]	; (8002350 <HAL_ETH_MspInit+0x188>)
 80022b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80022be:	2332      	movs	r3, #50	; 0x32
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022ce:	230b      	movs	r3, #11
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d6:	4619      	mov	r1, r3
 80022d8:	481e      	ldr	r0, [pc, #120]	; (8002354 <HAL_ETH_MspInit+0x18c>)
 80022da:	f004 f83d 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80022de:	2386      	movs	r3, #134	; 0x86
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022ee:	230b      	movs	r3, #11
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	4619      	mov	r1, r3
 80022f8:	4817      	ldr	r0, [pc, #92]	; (8002358 <HAL_ETH_MspInit+0x190>)
 80022fa:	f004 f82d 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002310:	230b      	movs	r3, #11
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002318:	4619      	mov	r1, r3
 800231a:	4810      	ldr	r0, [pc, #64]	; (800235c <HAL_ETH_MspInit+0x194>)
 800231c:	f004 f81c 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002320:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002332:	230b      	movs	r3, #11
 8002334:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233a:	4619      	mov	r1, r3
 800233c:	4808      	ldr	r0, [pc, #32]	; (8002360 <HAL_ETH_MspInit+0x198>)
 800233e:	f004 f80b 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002342:	bf00      	nop
 8002344:	3738      	adds	r7, #56	; 0x38
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40028000 	.word	0x40028000
 8002350:	58024400 	.word	0x58024400
 8002354:	58020800 	.word	0x58020800
 8002358:	58020000 	.word	0x58020000
 800235c:	58020400 	.word	0x58020400
 8002360:	58021800 	.word	0x58021800

08002364 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b0ba      	sub	sp, #232	; 0xe8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800237c:	f107 0318 	add.w	r3, r7, #24
 8002380:	22bc      	movs	r2, #188	; 0xbc
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f00a fcb1 	bl	800ccec <memset>
  if(hspi->Instance==SPI3)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a37      	ldr	r2, [pc, #220]	; (800246c <HAL_SPI_MspInit+0x108>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d166      	bne.n	8002462 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002398:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800239a:	2300      	movs	r3, #0
 800239c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239e:	f107 0318 	add.w	r3, r7, #24
 80023a2:	4618      	mov	r0, r3
 80023a4:	f005 faf4 	bl	8007990 <HAL_RCCEx_PeriphCLKConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80023ae:	f7ff fe29 	bl	8002004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80023b2:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <HAL_SPI_MspInit+0x10c>)
 80023b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b8:	4a2d      	ldr	r2, [pc, #180]	; (8002470 <HAL_SPI_MspInit+0x10c>)
 80023ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_SPI_MspInit+0x10c>)
 80023c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_SPI_MspInit+0x10c>)
 80023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d6:	4a26      	ldr	r2, [pc, #152]	; (8002470 <HAL_SPI_MspInit+0x10c>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e0:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_SPI_MspInit+0x10c>)
 80023e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_SPI_MspInit+0x10c>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f4:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <HAL_SPI_MspInit+0x10c>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_SPI_MspInit+0x10c>)
 8002400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800240c:	2310      	movs	r3, #16
 800240e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002424:	2306      	movs	r3, #6
 8002426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800242e:	4619      	mov	r1, r3
 8002430:	4810      	ldr	r0, [pc, #64]	; (8002474 <HAL_SPI_MspInit+0x110>)
 8002432:	f003 ff91 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002436:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800243a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002450:	2306      	movs	r3, #6
 8002452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002456:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800245a:	4619      	mov	r1, r3
 800245c:	4806      	ldr	r0, [pc, #24]	; (8002478 <HAL_SPI_MspInit+0x114>)
 800245e:	f003 ff7b 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002462:	bf00      	nop
 8002464:	37e8      	adds	r7, #232	; 0xe8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40003c00 	.word	0x40003c00
 8002470:	58024400 	.word	0x58024400
 8002474:	58020000 	.word	0x58020000
 8002478:	58020800 	.word	0x58020800

0800247c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b090      	sub	sp, #64	; 0x40
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a7c      	ldr	r2, [pc, #496]	; (800268c <HAL_TIM_Encoder_MspInit+0x210>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d12f      	bne.n	80024fe <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800249e:	4b7c      	ldr	r3, [pc, #496]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 80024a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024a4:	4a7a      	ldr	r2, [pc, #488]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024ae:	4b78      	ldr	r3, [pc, #480]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 80024b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024bc:	4b74      	ldr	r3, [pc, #464]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 80024be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c2:	4a73      	ldr	r2, [pc, #460]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 80024c4:	f043 0310 	orr.w	r3, r3, #16
 80024c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024cc:	4b70      	ldr	r3, [pc, #448]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 80024ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 80024da:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f4:	4619      	mov	r1, r3
 80024f6:	4867      	ldr	r0, [pc, #412]	; (8002694 <HAL_TIM_Encoder_MspInit+0x218>)
 80024f8:	f003 ff2e 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024fc:	e0c2      	b.n	8002684 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002506:	d14d      	bne.n	80025a4 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002508:	4b61      	ldr	r3, [pc, #388]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 800250a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800250e:	4a60      	ldr	r2, [pc, #384]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002518:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 800251a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	623b      	str	r3, [r7, #32]
 8002524:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002526:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252c:	4a58      	ldr	r2, [pc, #352]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002536:	4b56      	ldr	r3, [pc, #344]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 8002538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002544:	4b52      	ldr	r3, [pc, #328]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 8002546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254a:	4a51      	ldr	r2, [pc, #324]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002554:	4b4e      	ldr	r3, [pc, #312]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 8002556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 8002562:	2320      	movs	r3, #32
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002572:	2301      	movs	r3, #1
 8002574:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 8002576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257a:	4619      	mov	r1, r3
 800257c:	4846      	ldr	r0, [pc, #280]	; (8002698 <HAL_TIM_Encoder_MspInit+0x21c>)
 800257e:	f003 feeb 	bl	8006358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 8002582:	2308      	movs	r3, #8
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002592:	2301      	movs	r3, #1
 8002594:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259a:	4619      	mov	r1, r3
 800259c:	483f      	ldr	r0, [pc, #252]	; (800269c <HAL_TIM_Encoder_MspInit+0x220>)
 800259e:	f003 fedb 	bl	8006358 <HAL_GPIO_Init>
}
 80025a2:	e06f      	b.n	8002684 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM3)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a3d      	ldr	r2, [pc, #244]	; (80026a0 <HAL_TIM_Encoder_MspInit+0x224>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d12e      	bne.n	800260c <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ae:	4b38      	ldr	r3, [pc, #224]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 80025b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025b4:	4a36      	ldr	r2, [pc, #216]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025be:	4b34      	ldr	r3, [pc, #208]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 80025c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 80025ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d2:	4a2f      	ldr	r2, [pc, #188]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025dc:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 80025de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 80025ea:	2330      	movs	r3, #48	; 0x30
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025fa:	2302      	movs	r3, #2
 80025fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002602:	4619      	mov	r1, r3
 8002604:	4825      	ldr	r0, [pc, #148]	; (800269c <HAL_TIM_Encoder_MspInit+0x220>)
 8002606:	f003 fea7 	bl	8006358 <HAL_GPIO_Init>
}
 800260a:	e03b      	b.n	8002684 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM4)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a24      	ldr	r2, [pc, #144]	; (80026a4 <HAL_TIM_Encoder_MspInit+0x228>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d136      	bne.n	8002684 <HAL_TIM_Encoder_MspInit+0x208>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 8002618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800261c:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 800261e:	f043 0304 	orr.w	r3, r3, #4
 8002622:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 8002628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002634:	4b16      	ldr	r3, [pc, #88]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 8002636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263a:	4a15      	ldr	r2, [pc, #84]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 800263c:	f043 0308 	orr.w	r3, r3, #8
 8002640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_TIM_Encoder_MspInit+0x214>)
 8002646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 8002652:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800265c:	2301      	movs	r3, #1
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002664:	2302      	movs	r3, #2
 8002666:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800266c:	4619      	mov	r1, r3
 800266e:	480e      	ldr	r0, [pc, #56]	; (80026a8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002670:	f003 fe72 	bl	8006358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	201e      	movs	r0, #30
 800267a:	f001 fd60 	bl	800413e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800267e:	201e      	movs	r0, #30
 8002680:	f001 fd77 	bl	8004172 <HAL_NVIC_EnableIRQ>
}
 8002684:	bf00      	nop
 8002686:	3740      	adds	r7, #64	; 0x40
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40010000 	.word	0x40010000
 8002690:	58024400 	.word	0x58024400
 8002694:	58021000 	.word	0x58021000
 8002698:	58020000 	.word	0x58020000
 800269c:	58020400 	.word	0x58020400
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40000800 	.word	0x40000800
 80026a8:	58020c00 	.word	0x58020c00

080026ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a48      	ldr	r2, [pc, #288]	; (80027dc <HAL_TIM_Base_MspInit+0x130>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d117      	bne.n	80026ee <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026be:	4b48      	ldr	r3, [pc, #288]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 80026c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026c4:	4a46      	ldr	r2, [pc, #280]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 80026c6:	f043 0308 	orr.w	r3, r3, #8
 80026ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026ce:	4b44      	ldr	r3, [pc, #272]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 80026d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	2032      	movs	r0, #50	; 0x32
 80026e2:	f001 fd2c 	bl	800413e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80026e6:	2032      	movs	r0, #50	; 0x32
 80026e8:	f001 fd43 	bl	8004172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80026ec:	e072      	b.n	80027d4 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a3c      	ldr	r2, [pc, #240]	; (80027e4 <HAL_TIM_Base_MspInit+0x138>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d117      	bne.n	8002728 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80026f8:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 80026fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026fe:	4a38      	ldr	r2, [pc, #224]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 8002700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002704:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002708:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 800270a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	202b      	movs	r0, #43	; 0x2b
 800271c:	f001 fd0f 	bl	800413e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002720:	202b      	movs	r0, #43	; 0x2b
 8002722:	f001 fd26 	bl	8004172 <HAL_NVIC_EnableIRQ>
}
 8002726:	e055      	b.n	80027d4 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2e      	ldr	r2, [pc, #184]	; (80027e8 <HAL_TIM_Base_MspInit+0x13c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d117      	bne.n	8002762 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002732:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 8002734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002738:	4a29      	ldr	r2, [pc, #164]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 800273a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 8002744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	202c      	movs	r0, #44	; 0x2c
 8002756:	f001 fcf2 	bl	800413e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800275a:	202c      	movs	r0, #44	; 0x2c
 800275c:	f001 fd09 	bl	8004172 <HAL_NVIC_EnableIRQ>
}
 8002760:	e038      	b.n	80027d4 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a21      	ldr	r2, [pc, #132]	; (80027ec <HAL_TIM_Base_MspInit+0x140>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d117      	bne.n	800279c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 800276e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002772:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 8002774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002778:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 800277e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2100      	movs	r1, #0
 800278e:	2075      	movs	r0, #117	; 0x75
 8002790:	f001 fcd5 	bl	800413e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002794:	2075      	movs	r0, #117	; 0x75
 8002796:	f001 fcec 	bl	8004172 <HAL_NVIC_EnableIRQ>
}
 800279a:	e01b      	b.n	80027d4 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <HAL_TIM_Base_MspInit+0x144>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d116      	bne.n	80027d4 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 80027a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027ac:	4a0c      	ldr	r2, [pc, #48]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 80027ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_TIM_Base_MspInit+0x134>)
 80027b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	2076      	movs	r0, #118	; 0x76
 80027ca:	f001 fcb8 	bl	800413e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80027ce:	2076      	movs	r0, #118	; 0x76
 80027d0:	f001 fccf 	bl	8004172 <HAL_NVIC_EnableIRQ>
}
 80027d4:	bf00      	nop
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40000c00 	.word	0x40000c00
 80027e0:	58024400 	.word	0x58024400
 80027e4:	40001800 	.word	0x40001800
 80027e8:	40001c00 	.word	0x40001c00
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800

080027f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a4b      	ldr	r2, [pc, #300]	; (8002940 <HAL_TIM_MspPostInit+0x14c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d120      	bne.n	8002858 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	4b4b      	ldr	r3, [pc, #300]	; (8002944 <HAL_TIM_MspPostInit+0x150>)
 8002818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281c:	4a49      	ldr	r2, [pc, #292]	; (8002944 <HAL_TIM_MspPostInit+0x150>)
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002826:	4b47      	ldr	r3, [pc, #284]	; (8002944 <HAL_TIM_MspPostInit+0x150>)
 8002828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 8002834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2300      	movs	r3, #0
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002846:	2302      	movs	r3, #2
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	4619      	mov	r1, r3
 8002850:	483d      	ldr	r0, [pc, #244]	; (8002948 <HAL_TIM_MspPostInit+0x154>)
 8002852:	f003 fd81 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002856:	e06f      	b.n	8002938 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3b      	ldr	r2, [pc, #236]	; (800294c <HAL_TIM_MspPostInit+0x158>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d11f      	bne.n	80028a2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	4b38      	ldr	r3, [pc, #224]	; (8002944 <HAL_TIM_MspPostInit+0x150>)
 8002864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002868:	4a36      	ldr	r2, [pc, #216]	; (8002944 <HAL_TIM_MspPostInit+0x150>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002872:	4b34      	ldr	r3, [pc, #208]	; (8002944 <HAL_TIM_MspPostInit+0x150>)
 8002874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 8002880:	2340      	movs	r3, #64	; 0x40
 8002882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	2300      	movs	r3, #0
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002890:	2309      	movs	r3, #9
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 8002894:	f107 031c 	add.w	r3, r7, #28
 8002898:	4619      	mov	r1, r3
 800289a:	482d      	ldr	r0, [pc, #180]	; (8002950 <HAL_TIM_MspPostInit+0x15c>)
 800289c:	f003 fd5c 	bl	8006358 <HAL_GPIO_Init>
}
 80028a0:	e04a      	b.n	8002938 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2b      	ldr	r2, [pc, #172]	; (8002954 <HAL_TIM_MspPostInit+0x160>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d120      	bne.n	80028ee <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_TIM_MspPostInit+0x150>)
 80028ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b2:	4a24      	ldr	r2, [pc, #144]	; (8002944 <HAL_TIM_MspPostInit+0x150>)
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_TIM_MspPostInit+0x150>)
 80028be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 80028ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80028dc:	2301      	movs	r3, #1
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	4619      	mov	r1, r3
 80028e6:	4818      	ldr	r0, [pc, #96]	; (8002948 <HAL_TIM_MspPostInit+0x154>)
 80028e8:	f003 fd36 	bl	8006358 <HAL_GPIO_Init>
}
 80028ec:	e024      	b.n	8002938 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a19      	ldr	r2, [pc, #100]	; (8002958 <HAL_TIM_MspPostInit+0x164>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d11f      	bne.n	8002938 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_TIM_MspPostInit+0x150>)
 80028fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028fe:	4a11      	ldr	r2, [pc, #68]	; (8002944 <HAL_TIM_MspPostInit+0x150>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002908:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <HAL_TIM_MspPostInit+0x150>)
 800290a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 8002916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002928:	2301      	movs	r3, #1
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	4619      	mov	r1, r3
 8002932:	4805      	ldr	r0, [pc, #20]	; (8002948 <HAL_TIM_MspPostInit+0x154>)
 8002934:	f003 fd10 	bl	8006358 <HAL_GPIO_Init>
}
 8002938:	bf00      	nop
 800293a:	3730      	adds	r7, #48	; 0x30
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40001800 	.word	0x40001800
 8002944:	58024400 	.word	0x58024400
 8002948:	58020400 	.word	0x58020400
 800294c:	40001c00 	.word	0x40001c00
 8002950:	58020000 	.word	0x58020000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800

0800295c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b0ba      	sub	sp, #232	; 0xe8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002974:	f107 0318 	add.w	r3, r7, #24
 8002978:	22bc      	movs	r2, #188	; 0xbc
 800297a:	2100      	movs	r1, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f00a f9b5 	bl	800ccec <memset>
  if(huart->Instance==UART5)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a60      	ldr	r2, [pc, #384]	; (8002b08 <HAL_UART_MspInit+0x1ac>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d143      	bne.n	8002a14 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800298c:	2302      	movs	r3, #2
 800298e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002996:	f107 0318 	add.w	r3, r7, #24
 800299a:	4618      	mov	r0, r3
 800299c:	f004 fff8 	bl	8007990 <HAL_RCCEx_PeriphCLKConfig>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80029a6:	f7ff fb2d 	bl	8002004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80029aa:	4b58      	ldr	r3, [pc, #352]	; (8002b0c <HAL_UART_MspInit+0x1b0>)
 80029ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029b0:	4a56      	ldr	r2, [pc, #344]	; (8002b0c <HAL_UART_MspInit+0x1b0>)
 80029b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029ba:	4b54      	ldr	r3, [pc, #336]	; (8002b0c <HAL_UART_MspInit+0x1b0>)
 80029bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c8:	4b50      	ldr	r3, [pc, #320]	; (8002b0c <HAL_UART_MspInit+0x1b0>)
 80029ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ce:	4a4f      	ldr	r2, [pc, #316]	; (8002b0c <HAL_UART_MspInit+0x1b0>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d8:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <HAL_UART_MspInit+0x1b0>)
 80029da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 80029e6:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80029ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002a00:	230e      	movs	r3, #14
 8002a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4840      	ldr	r0, [pc, #256]	; (8002b10 <HAL_UART_MspInit+0x1b4>)
 8002a0e:	f003 fca3 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8002a12:	e074      	b.n	8002afe <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==UART7)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a3e      	ldr	r2, [pc, #248]	; (8002b14 <HAL_UART_MspInit+0x1b8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d16f      	bne.n	8002afe <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a28:	f107 0318 	add.w	r3, r7, #24
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f004 ffaf 	bl	8007990 <HAL_RCCEx_PeriphCLKConfig>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002a38:	f7ff fae4 	bl	8002004 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002a3c:	4b33      	ldr	r3, [pc, #204]	; (8002b0c <HAL_UART_MspInit+0x1b0>)
 8002a3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a42:	4a32      	ldr	r2, [pc, #200]	; (8002b0c <HAL_UART_MspInit+0x1b0>)
 8002a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <HAL_UART_MspInit+0x1b0>)
 8002a4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <HAL_UART_MspInit+0x1b0>)
 8002a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a60:	4a2a      	ldr	r2, [pc, #168]	; (8002b0c <HAL_UART_MspInit+0x1b0>)
 8002a62:	f043 0320 	orr.w	r3, r3, #32
 8002a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6a:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <HAL_UART_MspInit+0x1b0>)
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 8002a78:	23c0      	movs	r3, #192	; 0xc0
 8002a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002a90:	2307      	movs	r3, #7
 8002a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	481e      	ldr	r0, [pc, #120]	; (8002b18 <HAL_UART_MspInit+0x1bc>)
 8002a9e:	f003 fc5b 	bl	8006358 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream1;
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002aa4:	4a1e      	ldr	r2, [pc, #120]	; (8002b20 <HAL_UART_MspInit+0x1c4>)
 8002aa6:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8002aa8:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002aaa:	224f      	movs	r2, #79	; 0x4f
 8002aac:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002abc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ac0:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad4:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ad6:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002ae2:	480e      	ldr	r0, [pc, #56]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002ae4:	f001 fb60 	bl	80041a8 <HAL_DMA_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8002aee:	f7ff fa89 	bl	8002004 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002af6:	67da      	str	r2, [r3, #124]	; 0x7c
 8002af8:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <HAL_UART_MspInit+0x1c0>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002afe:	bf00      	nop
 8002b00:	37e8      	adds	r7, #232	; 0xe8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40005000 	.word	0x40005000
 8002b0c:	58024400 	.word	0x58024400
 8002b10:	58020400 	.word	0x58020400
 8002b14:	40007800 	.word	0x40007800
 8002b18:	58021400 	.word	0x58021400
 8002b1c:	24000938 	.word	0x24000938
 8002b20:	40020028 	.word	0x40020028

08002b24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b0b8      	sub	sp, #224	; 0xe0
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b3c:	f107 0310 	add.w	r3, r7, #16
 8002b40:	22bc      	movs	r2, #188	; 0xbc
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f00a f8d1 	bl	800ccec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	; (8002c0c <HAL_PCD_MspInit+0xe8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d156      	bne.n	8002c02 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002b54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002b5a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8002b5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 ff12 	bl	8007990 <HAL_RCCEx_PeriphCLKConfig>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8002b72:	f7ff fa47 	bl	8002004 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002b76:	f003 ff5f 	bl	8006a38 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_PCD_MspInit+0xec>)
 8002b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b80:	4a23      	ldr	r2, [pc, #140]	; (8002c10 <HAL_PCD_MspInit+0xec>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_PCD_MspInit+0xec>)
 8002b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002b98:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002b9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002bb2:	230a      	movs	r3, #10
 8002bb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4815      	ldr	r0, [pc, #84]	; (8002c14 <HAL_PCD_MspInit+0xf0>)
 8002bc0:	f003 fbca 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bdc:	4619      	mov	r1, r3
 8002bde:	480d      	ldr	r0, [pc, #52]	; (8002c14 <HAL_PCD_MspInit+0xf0>)
 8002be0:	f003 fbba 	bl	8006358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_PCD_MspInit+0xec>)
 8002be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bea:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <HAL_PCD_MspInit+0xec>)
 8002bec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bf0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_PCD_MspInit+0xec>)
 8002bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002c02:	bf00      	nop
 8002c04:	37e0      	adds	r7, #224	; 0xe0
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40080000 	.word	0x40080000
 8002c10:	58024400 	.word	0x58024400
 8002c14:	58020000 	.word	0x58020000

08002c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <NMI_Handler+0x4>

08002c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2e:	e7fe      	b.n	8002c2e <BusFault_Handler+0x4>

08002c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <UsageFault_Handler+0x4>

08002c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c64:	f000 f990 	bl	8002f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002c70:	2010      	movs	r0, #16
 8002c72:	f003 fd3a 	bl	80066ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <DMA1_Stream1_IRQHandler+0x10>)
 8002c82:	f001 fded 	bl	8004860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	24000938 	.word	0x24000938

08002c90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002c94:	2020      	movs	r0, #32
 8002c96:	f003 fd28 	bl	80066ea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002c9a:	2040      	movs	r0, #64	; 0x40
 8002c9c:	f003 fd25 	bl	80066ea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002ca0:	2080      	movs	r0, #128	; 0x80
 8002ca2:	f003 fd22 	bl	80066ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <TIM4_IRQHandler+0x10>)
 8002cb2:	f007 fc7d 	bl	800a5b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	24000270 	.word	0x24000270

08002cc0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002cc6:	f007 fc73 	bl	800a5b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	24000b00 	.word	0x24000b00

08002cd4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002cda:	f007 fc69 	bl	800a5b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	24000a14 	.word	0x24000a14

08002ce8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <TIM5_IRQHandler+0x10>)
 8002cee:	f007 fc5f 	bl	800a5b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	24000788 	.word	0x24000788

08002cfc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <TIM16_IRQHandler+0x10>)
 8002d02:	f007 fc55 	bl	800a5b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	24000c08 	.word	0x24000c08

08002d10 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <TIM17_IRQHandler+0x10>)
 8002d16:	f007 fc4b 	bl	800a5b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	240006c4 	.word	0x240006c4

08002d24 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002d28:	4802      	ldr	r0, [pc, #8]	; (8002d34 <BDMA_Channel0_IRQHandler+0x10>)
 8002d2a:	f001 fd99 	bl	8004860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	24000710 	.word	0x24000710

08002d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d3c:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <SystemInit+0xec>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	4a38      	ldr	r2, [pc, #224]	; (8002e24 <SystemInit+0xec>)
 8002d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d4c:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <SystemInit+0xf0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d807      	bhi.n	8002d68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d58:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <SystemInit+0xf0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 030f 	bic.w	r3, r3, #15
 8002d60:	4a31      	ldr	r2, [pc, #196]	; (8002e28 <SystemInit+0xf0>)
 8002d62:	f043 0307 	orr.w	r3, r3, #7
 8002d66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <SystemInit+0xf4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <SystemInit+0xf4>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d74:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <SystemInit+0xf4>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <SystemInit+0xf4>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	492b      	ldr	r1, [pc, #172]	; (8002e2c <SystemInit+0xf4>)
 8002d80:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <SystemInit+0xf8>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d86:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <SystemInit+0xf0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d92:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <SystemInit+0xf0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 030f 	bic.w	r3, r3, #15
 8002d9a:	4a23      	ldr	r2, [pc, #140]	; (8002e28 <SystemInit+0xf0>)
 8002d9c:	f043 0307 	orr.w	r3, r3, #7
 8002da0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <SystemInit+0xf4>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002da8:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <SystemInit+0xf4>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002dae:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <SystemInit+0xf4>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <SystemInit+0xf4>)
 8002db6:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <SystemInit+0xfc>)
 8002db8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <SystemInit+0xf4>)
 8002dbc:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <SystemInit+0x100>)
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <SystemInit+0xf4>)
 8002dc2:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <SystemInit+0x104>)
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002dc6:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <SystemInit+0xf4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002dcc:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <SystemInit+0xf4>)
 8002dce:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <SystemInit+0x104>)
 8002dd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <SystemInit+0xf4>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002dd8:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <SystemInit+0xf4>)
 8002dda:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <SystemInit+0x104>)
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002dde:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <SystemInit+0xf4>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <SystemInit+0xf4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <SystemInit+0xf4>)
 8002dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <SystemInit+0xf4>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <SystemInit+0x108>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <SystemInit+0x10c>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e02:	d202      	bcs.n	8002e0a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e04:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <SystemInit+0x110>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <SystemInit+0x114>)
 8002e0c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e10:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e12:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <SystemInit+0xec>)
 8002e14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e18:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00
 8002e28:	52002000 	.word	0x52002000
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e34:	02020200 	.word	0x02020200
 8002e38:	01ff0000 	.word	0x01ff0000
 8002e3c:	01010280 	.word	0x01010280
 8002e40:	5c001000 	.word	0x5c001000
 8002e44:	ffff0000 	.word	0xffff0000
 8002e48:	51008108 	.word	0x51008108
 8002e4c:	52004000 	.word	0x52004000

08002e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e88 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e54:	f7ff ff70 	bl	8002d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e5a:	e003      	b.n	8002e64 <LoopCopyDataInit>

08002e5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002e5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e62:	3104      	adds	r1, #4

08002e64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e64:	480a      	ldr	r0, [pc, #40]	; (8002e90 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002e68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e6c:	d3f6      	bcc.n	8002e5c <CopyDataInit>
  ldr  r2, =_sbss
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002e70:	e002      	b.n	8002e78 <LoopFillZerobss>

08002e72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e74:	f842 3b04 	str.w	r3, [r2], #4

08002e78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e78:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002e7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e7c:	d3f9      	bcc.n	8002e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e7e:	f009 ff11 	bl	800cca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e82:	f7fe f885 	bl	8000f90 <main>
  bx  lr    
 8002e86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e88:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002e8c:	0800cd64 	.word	0x0800cd64
  ldr  r0, =_sdata
 8002e90:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002e94:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8002e98:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8002e9c:	24000c58 	.word	0x24000c58

08002ea0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ea0:	e7fe      	b.n	8002ea0 <ADC3_IRQHandler>
	...

08002ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eaa:	2003      	movs	r0, #3
 8002eac:	f001 f93c 	bl	8004128 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002eb0:	f004 fb98 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_Init+0x68>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	4913      	ldr	r1, [pc, #76]	; (8002f10 <HAL_Init+0x6c>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ecc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_Init+0x68>)
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <HAL_Init+0x6c>)
 8002ed8:	5cd3      	ldrb	r3, [r2, r3]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <HAL_Init+0x70>)
 8002ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ee8:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <HAL_Init+0x74>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f000 f814 	bl	8002f1c <HAL_InitTick>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e002      	b.n	8002f04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002efe:	f7ff f887 	bl	8002010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	58024400 	.word	0x58024400
 8002f10:	0800cd14 	.word	0x0800cd14
 8002f14:	24000004 	.word	0x24000004
 8002f18:	24000000 	.word	0x24000000

08002f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f24:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_InitTick+0x60>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e021      	b.n	8002f74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_InitTick+0x64>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_InitTick+0x60>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f921 	bl	800418e <HAL_SYSTICK_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00e      	b.n	8002f74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d80a      	bhi.n	8002f72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f001 f8eb 	bl	800413e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f68:	4a06      	ldr	r2, [pc, #24]	; (8002f84 <HAL_InitTick+0x68>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	2400000c 	.word	0x2400000c
 8002f80:	24000000 	.word	0x24000000
 8002f84:	24000008 	.word	0x24000008

08002f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_IncTick+0x20>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_IncTick+0x24>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <HAL_IncTick+0x24>)
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	2400000c 	.word	0x2400000c
 8002fac:	24000c54 	.word	0x24000c54

08002fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_GetTick+0x14>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	24000c54 	.word	0x24000c54

08002fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff ffee 	bl	8002fb0 <HAL_GetTick>
 8002fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d005      	beq.n	8002fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_Delay+0x44>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fee:	bf00      	nop
 8002ff0:	f7ff ffde 	bl	8002fb0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d8f7      	bhi.n	8002ff0 <HAL_Delay+0x28>
  {
  }
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2400000c 	.word	0x2400000c

08003010 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <HAL_GetREVID+0x14>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0c1b      	lsrs	r3, r3, #16
}
 800301a:	4618      	mov	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	5c001000 	.word	0x5c001000

08003028 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003038:	4904      	ldr	r1, [pc, #16]	; (800304c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	58000400 	.word	0x58000400

08003050 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800305a:	4b07      	ldr	r3, [pc, #28]	; (8003078 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	43db      	mvns	r3, r3
 8003062:	401a      	ands	r2, r3
 8003064:	4904      	ldr	r1, [pc, #16]	; (8003078 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	58000400 	.word	0x58000400

0800307c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	609a      	str	r2, [r3, #8]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3360      	adds	r3, #96	; 0x60
 80030f6:	461a      	mov	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	430b      	orrs	r3, r1
 8003112:	431a      	orrs	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003118:	bf00      	nop
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	fa01 f303 	lsl.w	r3, r1, r3
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	611a      	str	r2, [r3, #16]
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003156:	b480      	push	{r7}
 8003158:	b087      	sub	sp, #28
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3360      	adds	r3, #96	; 0x60
 8003166:	461a      	mov	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	431a      	orrs	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	601a      	str	r2, [r3, #0]
  }
}
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3330      	adds	r3, #48	; 0x30
 800319c:	461a      	mov	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	4413      	add	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	211f      	movs	r1, #31
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	401a      	ands	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	0e9b      	lsrs	r3, r3, #26
 80031c4:	f003 011f 	and.w	r1, r3, #31
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	431a      	orrs	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031d8:	bf00      	nop
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3314      	adds	r3, #20
 80031f4:	461a      	mov	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	0e5b      	lsrs	r3, r3, #25
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	4413      	add	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	0d1b      	lsrs	r3, r3, #20
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	2107      	movs	r1, #7
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	401a      	ands	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	0d1b      	lsrs	r3, r3, #20
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	431a      	orrs	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800322e:	bf00      	nop
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003254:	43db      	mvns	r3, r3
 8003256:	401a      	ands	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0318 	and.w	r3, r3, #24
 800325e:	4908      	ldr	r1, [pc, #32]	; (8003280 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003260:	40d9      	lsrs	r1, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	400b      	ands	r3, r1
 8003266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800326a:	431a      	orrs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	000fffff 	.word	0x000fffff

08003284 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003292:	4013      	ands	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6093      	str	r3, [r2, #8]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	5fffffc0 	.word	0x5fffffc0

080032a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032bc:	d101      	bne.n	80032c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80032de:	4013      	ands	r3, r2
 80032e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	6fffffc0 	.word	0x6fffffc0

080032f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003308:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800330c:	d101      	bne.n	8003312 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <LL_ADC_IsEnabled+0x18>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <LL_ADC_IsEnabled+0x1a>
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b04      	cmp	r3, #4
 8003358:	d101      	bne.n	800335e <LL_ADC_REG_IsConversionOngoing+0x18>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b08      	cmp	r3, #8
 800337e:	d101      	bne.n	8003384 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e18e      	b.n	80036cc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7fe fe41 	bl	8002044 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff67 	bl	80032a8 <LL_ADC_IsDeepPowerDownEnabled>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d004      	beq.n	80033ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff4d 	bl	8003284 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff82 	bl	80032f8 <LL_ADC_IsInternalRegulatorEnabled>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d114      	bne.n	8003424 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff ff66 	bl	80032d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003404:	4b9a      	ldr	r3, [pc, #616]	; (8003670 <HAL_ADC_Init+0x2dc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	4a9a      	ldr	r2, [pc, #616]	; (8003674 <HAL_ADC_Init+0x2e0>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	099b      	lsrs	r3, r3, #6
 8003412:	3301      	adds	r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003416:	e002      	b.n	800341e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3b01      	subs	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f9      	bne.n	8003418 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff65 	bl	80032f8 <LL_ADC_IsInternalRegulatorEnabled>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10d      	bne.n	8003450 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	f043 0210 	orr.w	r2, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff76 	bl	8003346 <LL_ADC_REG_IsConversionOngoing>
 800345a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	f040 8128 	bne.w	80036ba <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f040 8124 	bne.w	80036ba <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800347a:	f043 0202 	orr.w	r2, r3, #2
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff ff4a 	bl	8003320 <LL_ADC_IsEnabled>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d136      	bne.n	8003500 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a78      	ldr	r2, [pc, #480]	; (8003678 <HAL_ADC_Init+0x2e4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_ADC_Init+0x112>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a76      	ldr	r2, [pc, #472]	; (800367c <HAL_ADC_Init+0x2e8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10e      	bne.n	80034c4 <HAL_ADC_Init+0x130>
 80034a6:	4874      	ldr	r0, [pc, #464]	; (8003678 <HAL_ADC_Init+0x2e4>)
 80034a8:	f7ff ff3a 	bl	8003320 <LL_ADC_IsEnabled>
 80034ac:	4604      	mov	r4, r0
 80034ae:	4873      	ldr	r0, [pc, #460]	; (800367c <HAL_ADC_Init+0x2e8>)
 80034b0:	f7ff ff36 	bl	8003320 <LL_ADC_IsEnabled>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4323      	orrs	r3, r4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e008      	b.n	80034d6 <HAL_ADC_Init+0x142>
 80034c4:	486e      	ldr	r0, [pc, #440]	; (8003680 <HAL_ADC_Init+0x2ec>)
 80034c6:	f7ff ff2b 	bl	8003320 <LL_ADC_IsEnabled>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d012      	beq.n	8003500 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a66      	ldr	r2, [pc, #408]	; (8003678 <HAL_ADC_Init+0x2e4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_ADC_Init+0x15a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a64      	ldr	r2, [pc, #400]	; (800367c <HAL_ADC_Init+0x2e8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_Init+0x15e>
 80034ee:	4a65      	ldr	r2, [pc, #404]	; (8003684 <HAL_ADC_Init+0x2f0>)
 80034f0:	e000      	b.n	80034f4 <HAL_ADC_Init+0x160>
 80034f2:	4a65      	ldr	r2, [pc, #404]	; (8003688 <HAL_ADC_Init+0x2f4>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f7ff fdbe 	bl	800307c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003500:	f7ff fd86 	bl	8003010 <HAL_GetREVID>
 8003504:	4603      	mov	r3, r0
 8003506:	f241 0203 	movw	r2, #4099	; 0x1003
 800350a:	4293      	cmp	r3, r2
 800350c:	d914      	bls.n	8003538 <HAL_ADC_Init+0x1a4>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b10      	cmp	r3, #16
 8003514:	d110      	bne.n	8003538 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7d5b      	ldrb	r3, [r3, #21]
 800351a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003520:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003526:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7f1b      	ldrb	r3, [r3, #28]
 800352c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800352e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003530:	f043 030c 	orr.w	r3, r3, #12
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	e00d      	b.n	8003554 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	7d5b      	ldrb	r3, [r3, #21]
 800353c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003542:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003548:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	7f1b      	ldrb	r3, [r3, #28]
 800354e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003550:	4313      	orrs	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	7f1b      	ldrb	r3, [r3, #28]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d106      	bne.n	800356a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	3b01      	subs	r3, #1
 8003562:	045b      	lsls	r3, r3, #17
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	4b3f      	ldr	r3, [pc, #252]	; (800368c <HAL_ADC_Init+0x2f8>)
 800358e:	4013      	ands	r3, r2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	69b9      	ldr	r1, [r7, #24]
 8003596:	430b      	orrs	r3, r1
 8003598:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fed1 	bl	8003346 <LL_ADC_REG_IsConversionOngoing>
 80035a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fede 	bl	800336c <LL_ADC_INJ_IsConversionOngoing>
 80035b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d14a      	bne.n	800364e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d147      	bne.n	800364e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7d1b      	ldrb	r3, [r3, #20]
 80035c2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <HAL_ADC_Init+0x2fc>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	69b9      	ldr	r1, [r7, #24]
 80035dc:	430b      	orrs	r3, r1
 80035de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d11b      	bne.n	8003622 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	4b27      	ldr	r3, [pc, #156]	; (8003694 <HAL_ADC_Init+0x300>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035fe:	3a01      	subs	r2, #1
 8003600:	0411      	lsls	r1, r2, #16
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800360c:	4311      	orrs	r1, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003612:	430a      	orrs	r2, r1
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	611a      	str	r2, [r3, #16]
 8003620:	e007      	b.n	8003632 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fb93 	bl	8003d74 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d120      	bne.n	8003698 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	f023 010f 	bic.w	r1, r3, #15
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	1e5a      	subs	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
 800366e:	e01b      	b.n	80036a8 <HAL_ADC_Init+0x314>
 8003670:	24000000 	.word	0x24000000
 8003674:	053e2d63 	.word	0x053e2d63
 8003678:	40022000 	.word	0x40022000
 800367c:	40022100 	.word	0x40022100
 8003680:	58026000 	.word	0x58026000
 8003684:	40022300 	.word	0x40022300
 8003688:	58026300 	.word	0x58026300
 800368c:	fff0c003 	.word	0xfff0c003
 8003690:	ffffbffc 	.word	0xffffbffc
 8003694:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 020f 	bic.w	r2, r2, #15
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ac:	f023 0303 	bic.w	r3, r3, #3
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
 80036b8:	e007      	b.n	80036ca <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f043 0210 	orr.w	r2, r3, #16
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3724      	adds	r7, #36	; 0x24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd90      	pop	{r4, r7, pc}

080036d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b0a1      	sub	sp, #132	; 0x84
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a9d      	ldr	r2, [pc, #628]	; (8003964 <HAL_ADC_ConfigChannel+0x290>)
 80036ee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x2a>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e321      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x66e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fe1b 	bl	8003346 <LL_ADC_REG_IsConversionOngoing>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 8306 	bne.w	8003d24 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003720:	2b00      	cmp	r3, #0
 8003722:	d108      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x62>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0e9b      	lsrs	r3, r3, #26
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2201      	movs	r2, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	e016      	b.n	8003764 <HAL_ADC_ConfigChannel+0x90>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003746:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e003      	b.n	800375a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	2201      	movs	r2, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	69d1      	ldr	r1, [r2, #28]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	430b      	orrs	r3, r1
 8003770:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6859      	ldr	r1, [r3, #4]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	f7ff fd04 	bl	800318c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fddc 	bl	8003346 <LL_ADC_REG_IsConversionOngoing>
 800378e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fde9 	bl	800336c <LL_ADC_INJ_IsConversionOngoing>
 800379a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800379c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 80b3 	bne.w	800390a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 80af 	bne.w	800390a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	461a      	mov	r2, r3
 80037ba:	f7ff fd13 	bl	80031e4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037be:	4b6a      	ldr	r3, [pc, #424]	; (8003968 <HAL_ADC_ConfigChannel+0x294>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80037c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ca:	d10b      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x110>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	089b      	lsrs	r3, r3, #2
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	e01d      	b.n	8003820 <HAL_ADC_ConfigChannel+0x14c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10b      	bne.n	800380a <HAL_ADC_ConfigChannel+0x136>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	e00a      	b.n	8003820 <HAL_ADC_ConfigChannel+0x14c>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b04      	cmp	r3, #4
 8003828:	d027      	beq.n	800387a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6919      	ldr	r1, [r3, #16]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003838:	f7ff fc54 	bl	80030e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6919      	ldr	r1, [r3, #16]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	7e5b      	ldrb	r3, [r3, #25]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d102      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x17e>
 800384c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003850:	e000      	b.n	8003854 <HAL_ADC_ConfigChannel+0x180>
 8003852:	2300      	movs	r3, #0
 8003854:	461a      	mov	r2, r3
 8003856:	f7ff fc7e 	bl	8003156 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6919      	ldr	r1, [r3, #16]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	7e1b      	ldrb	r3, [r3, #24]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d102      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x19c>
 800386a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800386e:	e000      	b.n	8003872 <HAL_ADC_ConfigChannel+0x19e>
 8003870:	2300      	movs	r3, #0
 8003872:	461a      	mov	r2, r3
 8003874:	f7ff fc56 	bl	8003124 <LL_ADC_SetDataRightShift>
 8003878:	e047      	b.n	800390a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003880:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	069b      	lsls	r3, r3, #26
 800388a:	429a      	cmp	r2, r3
 800388c:	d107      	bne.n	800389e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800389c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	069b      	lsls	r3, r3, #26
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d107      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038c0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	069b      	lsls	r3, r3, #26
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d107      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038e4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	069b      	lsls	r3, r3, #26
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d107      	bne.n	800390a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003908:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fd06 	bl	8003320 <LL_ADC_IsEnabled>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 820d 	bne.w	8003d36 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	461a      	mov	r2, r3
 800392a:	f7ff fc87 	bl	800323c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4a0c      	ldr	r2, [pc, #48]	; (8003964 <HAL_ADC_ConfigChannel+0x290>)
 8003934:	4293      	cmp	r3, r2
 8003936:	f040 8133 	bne.w	8003ba0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003946:	2b00      	cmp	r3, #0
 8003948:	d110      	bne.n	800396c <HAL_ADC_ConfigChannel+0x298>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	0e9b      	lsrs	r3, r3, #26
 8003950:	3301      	adds	r3, #1
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	2b09      	cmp	r3, #9
 8003958:	bf94      	ite	ls
 800395a:	2301      	movls	r3, #1
 800395c:	2300      	movhi	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	e01e      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x2cc>
 8003962:	bf00      	nop
 8003964:	47ff0000 	.word	0x47ff0000
 8003968:	5c001000 	.word	0x5c001000
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003974:	fa93 f3a3 	rbit	r3, r3
 8003978:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800397a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800397e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003984:	2320      	movs	r3, #32
 8003986:	e003      	b.n	8003990 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	3301      	adds	r3, #1
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2b09      	cmp	r3, #9
 8003998:	bf94      	ite	ls
 800399a:	2301      	movls	r3, #1
 800399c:	2300      	movhi	r3, #0
 800399e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d079      	beq.n	8003a98 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d107      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x2ec>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	0e9b      	lsrs	r3, r3, #26
 80039b6:	3301      	adds	r3, #1
 80039b8:	069b      	lsls	r3, r3, #26
 80039ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039be:	e015      	b.n	80039ec <HAL_ADC_ConfigChannel+0x318>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c8:	fa93 f3a3 	rbit	r3, r3
 80039cc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80039ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039d0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80039d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80039d8:	2320      	movs	r3, #32
 80039da:	e003      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80039dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	3301      	adds	r3, #1
 80039e6:	069b      	lsls	r3, r3, #26
 80039e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x338>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0e9b      	lsrs	r3, r3, #26
 80039fe:	3301      	adds	r3, #1
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	2101      	movs	r1, #1
 8003a06:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0a:	e017      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x368>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003a24:	2320      	movs	r3, #32
 8003a26:	e003      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	2101      	movs	r1, #1
 8003a38:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3c:	ea42 0103 	orr.w	r1, r2, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x38e>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	0e9b      	lsrs	r3, r3, #26
 8003a52:	3301      	adds	r3, #1
 8003a54:	f003 021f 	and.w	r2, r3, #31
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	051b      	lsls	r3, r3, #20
 8003a60:	e018      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x3c0>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003a7a:	2320      	movs	r3, #32
 8003a7c:	e003      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	fab3 f383 	clz	r3, r3
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f003 021f 	and.w	r2, r3, #31
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a94:	430b      	orrs	r3, r1
 8003a96:	e07e      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d107      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x3e0>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0e9b      	lsrs	r3, r3, #26
 8003aaa:	3301      	adds	r3, #1
 8003aac:	069b      	lsls	r3, r3, #26
 8003aae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ab2:	e015      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x40c>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003acc:	2320      	movs	r3, #32
 8003ace:	e003      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	069b      	lsls	r3, r3, #26
 8003adc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x42c>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	0e9b      	lsrs	r3, r3, #26
 8003af2:	3301      	adds	r3, #1
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2101      	movs	r1, #1
 8003afa:	fa01 f303 	lsl.w	r3, r1, r3
 8003afe:	e017      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x45c>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	fa93 f3a3 	rbit	r3, r3
 8003b0c:	61bb      	str	r3, [r7, #24]
  return result;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003b18:	2320      	movs	r3, #32
 8003b1a:	e003      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	3301      	adds	r3, #1
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	ea42 0103 	orr.w	r1, r2, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10d      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x488>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	0e9b      	lsrs	r3, r3, #26
 8003b46:	3301      	adds	r3, #1
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	4413      	add	r3, r2
 8003b52:	3b1e      	subs	r3, #30
 8003b54:	051b      	lsls	r3, r3, #20
 8003b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	e01b      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x4c0>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	60fb      	str	r3, [r7, #12]
  return result;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003b74:	2320      	movs	r3, #32
 8003b76:	e003      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	f003 021f 	and.w	r2, r3, #31
 8003b86:	4613      	mov	r3, r2
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3b1e      	subs	r3, #30
 8003b8e:	051b      	lsls	r3, r3, #20
 8003b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b94:	430b      	orrs	r3, r1
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	6892      	ldr	r2, [r2, #8]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f7ff fb22 	bl	80031e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f280 80c6 	bge.w	8003d36 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a67      	ldr	r2, [pc, #412]	; (8003d4c <HAL_ADC_ConfigChannel+0x678>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_ADC_ConfigChannel+0x4ea>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a65      	ldr	r2, [pc, #404]	; (8003d50 <HAL_ADC_ConfigChannel+0x67c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d101      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x4ee>
 8003bbe:	4b65      	ldr	r3, [pc, #404]	; (8003d54 <HAL_ADC_ConfigChannel+0x680>)
 8003bc0:	e000      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x4f0>
 8003bc2:	4b65      	ldr	r3, [pc, #404]	; (8003d58 <HAL_ADC_ConfigChannel+0x684>)
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fa7f 	bl	80030c8 <LL_ADC_GetCommonPathInternalCh>
 8003bca:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a5e      	ldr	r2, [pc, #376]	; (8003d4c <HAL_ADC_ConfigChannel+0x678>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <HAL_ADC_ConfigChannel+0x50c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a5d      	ldr	r2, [pc, #372]	; (8003d50 <HAL_ADC_ConfigChannel+0x67c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10e      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x52a>
 8003be0:	485a      	ldr	r0, [pc, #360]	; (8003d4c <HAL_ADC_ConfigChannel+0x678>)
 8003be2:	f7ff fb9d 	bl	8003320 <LL_ADC_IsEnabled>
 8003be6:	4604      	mov	r4, r0
 8003be8:	4859      	ldr	r0, [pc, #356]	; (8003d50 <HAL_ADC_ConfigChannel+0x67c>)
 8003bea:	f7ff fb99 	bl	8003320 <LL_ADC_IsEnabled>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4323      	orrs	r3, r4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2301      	moveq	r3, #1
 8003bf8:	2300      	movne	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	e008      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x53c>
 8003bfe:	4857      	ldr	r0, [pc, #348]	; (8003d5c <HAL_ADC_ConfigChannel+0x688>)
 8003c00:	f7ff fb8e 	bl	8003320 <LL_ADC_IsEnabled>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d07d      	beq.n	8003d10 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a51      	ldr	r2, [pc, #324]	; (8003d60 <HAL_ADC_ConfigChannel+0x68c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d130      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x5ac>
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d12b      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a4b      	ldr	r2, [pc, #300]	; (8003d5c <HAL_ADC_ConfigChannel+0x688>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	f040 8081 	bne.w	8003d36 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a44      	ldr	r2, [pc, #272]	; (8003d4c <HAL_ADC_ConfigChannel+0x678>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d004      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0x574>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a43      	ldr	r2, [pc, #268]	; (8003d50 <HAL_ADC_ConfigChannel+0x67c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d101      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x578>
 8003c48:	4a42      	ldr	r2, [pc, #264]	; (8003d54 <HAL_ADC_ConfigChannel+0x680>)
 8003c4a:	e000      	b.n	8003c4e <HAL_ADC_ConfigChannel+0x57a>
 8003c4c:	4a42      	ldr	r2, [pc, #264]	; (8003d58 <HAL_ADC_ConfigChannel+0x684>)
 8003c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f7ff fa23 	bl	80030a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c5c:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <HAL_ADC_ConfigChannel+0x690>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	099b      	lsrs	r3, r3, #6
 8003c62:	4a41      	ldr	r2, [pc, #260]	; (8003d68 <HAL_ADC_ConfigChannel+0x694>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c70:	e002      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f9      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c7e:	e05a      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <HAL_ADC_ConfigChannel+0x698>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d11e      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x5f4>
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d119      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a30      	ldr	r2, [pc, #192]	; (8003d5c <HAL_ADC_ConfigChannel+0x688>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d14b      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2a      	ldr	r2, [pc, #168]	; (8003d4c <HAL_ADC_ConfigChannel+0x678>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_ADC_ConfigChannel+0x5de>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a28      	ldr	r2, [pc, #160]	; (8003d50 <HAL_ADC_ConfigChannel+0x67c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x5e2>
 8003cb2:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <HAL_ADC_ConfigChannel+0x680>)
 8003cb4:	e000      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x5e4>
 8003cb6:	4a28      	ldr	r2, [pc, #160]	; (8003d58 <HAL_ADC_ConfigChannel+0x684>)
 8003cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7ff f9ee 	bl	80030a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cc6:	e036      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a28      	ldr	r2, [pc, #160]	; (8003d70 <HAL_ADC_ConfigChannel+0x69c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d131      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x662>
 8003cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d12c      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <HAL_ADC_ConfigChannel+0x688>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d127      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a18      	ldr	r2, [pc, #96]	; (8003d4c <HAL_ADC_ConfigChannel+0x678>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_ADC_ConfigChannel+0x626>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a16      	ldr	r2, [pc, #88]	; (8003d50 <HAL_ADC_ConfigChannel+0x67c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x62a>
 8003cfa:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <HAL_ADC_ConfigChannel+0x680>)
 8003cfc:	e000      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x62c>
 8003cfe:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <HAL_ADC_ConfigChannel+0x684>)
 8003d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f7ff f9ca 	bl	80030a2 <LL_ADC_SetCommonPathInternalCh>
 8003d0e:	e012      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003d22:	e008      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	f043 0220 	orr.w	r2, r3, #32
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d3e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3784      	adds	r7, #132	; 0x84
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd90      	pop	{r4, r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40022000 	.word	0x40022000
 8003d50:	40022100 	.word	0x40022100
 8003d54:	40022300 	.word	0x40022300
 8003d58:	58026300 	.word	0x58026300
 8003d5c:	58026000 	.word	0x58026000
 8003d60:	cb840000 	.word	0xcb840000
 8003d64:	24000000 	.word	0x24000000
 8003d68:	053e2d63 	.word	0x053e2d63
 8003d6c:	c7520000 	.word	0xc7520000
 8003d70:	cfb80000 	.word	0xcfb80000

08003d74 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a79      	ldr	r2, [pc, #484]	; (8003f68 <ADC_ConfigureBoostMode+0x1f4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <ADC_ConfigureBoostMode+0x1c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a78      	ldr	r2, [pc, #480]	; (8003f6c <ADC_ConfigureBoostMode+0x1f8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d109      	bne.n	8003da4 <ADC_ConfigureBoostMode+0x30>
 8003d90:	4b77      	ldr	r3, [pc, #476]	; (8003f70 <ADC_ConfigureBoostMode+0x1fc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e008      	b.n	8003db6 <ADC_ConfigureBoostMode+0x42>
 8003da4:	4b73      	ldr	r3, [pc, #460]	; (8003f74 <ADC_ConfigureBoostMode+0x200>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01c      	beq.n	8003df4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003dba:	f003 fd8d 	bl	80078d8 <HAL_RCC_GetHCLKFreq>
 8003dbe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dc8:	d010      	beq.n	8003dec <ADC_ConfigureBoostMode+0x78>
 8003dca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dce:	d871      	bhi.n	8003eb4 <ADC_ConfigureBoostMode+0x140>
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd4:	d002      	beq.n	8003ddc <ADC_ConfigureBoostMode+0x68>
 8003dd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dda:	d16b      	bne.n	8003eb4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	60fb      	str	r3, [r7, #12]
        break;
 8003dea:	e066      	b.n	8003eba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	60fb      	str	r3, [r7, #12]
        break;
 8003df2:	e062      	b.n	8003eba <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003df4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003df8:	f004 fd0a 	bl	8008810 <HAL_RCCEx_GetPeriphCLKFreq>
 8003dfc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003e06:	d051      	beq.n	8003eac <ADC_ConfigureBoostMode+0x138>
 8003e08:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003e0c:	d854      	bhi.n	8003eb8 <ADC_ConfigureBoostMode+0x144>
 8003e0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e12:	d047      	beq.n	8003ea4 <ADC_ConfigureBoostMode+0x130>
 8003e14:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e18:	d84e      	bhi.n	8003eb8 <ADC_ConfigureBoostMode+0x144>
 8003e1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003e1e:	d03d      	beq.n	8003e9c <ADC_ConfigureBoostMode+0x128>
 8003e20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003e24:	d848      	bhi.n	8003eb8 <ADC_ConfigureBoostMode+0x144>
 8003e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e2a:	d033      	beq.n	8003e94 <ADC_ConfigureBoostMode+0x120>
 8003e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e30:	d842      	bhi.n	8003eb8 <ADC_ConfigureBoostMode+0x144>
 8003e32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003e36:	d029      	beq.n	8003e8c <ADC_ConfigureBoostMode+0x118>
 8003e38:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003e3c:	d83c      	bhi.n	8003eb8 <ADC_ConfigureBoostMode+0x144>
 8003e3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003e42:	d01a      	beq.n	8003e7a <ADC_ConfigureBoostMode+0x106>
 8003e44:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003e48:	d836      	bhi.n	8003eb8 <ADC_ConfigureBoostMode+0x144>
 8003e4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003e4e:	d014      	beq.n	8003e7a <ADC_ConfigureBoostMode+0x106>
 8003e50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003e54:	d830      	bhi.n	8003eb8 <ADC_ConfigureBoostMode+0x144>
 8003e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5a:	d00e      	beq.n	8003e7a <ADC_ConfigureBoostMode+0x106>
 8003e5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e60:	d82a      	bhi.n	8003eb8 <ADC_ConfigureBoostMode+0x144>
 8003e62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e66:	d008      	beq.n	8003e7a <ADC_ConfigureBoostMode+0x106>
 8003e68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e6c:	d824      	bhi.n	8003eb8 <ADC_ConfigureBoostMode+0x144>
 8003e6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e72:	d002      	beq.n	8003e7a <ADC_ConfigureBoostMode+0x106>
 8003e74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e78:	d11e      	bne.n	8003eb8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	0c9b      	lsrs	r3, r3, #18
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e88:	60fb      	str	r3, [r7, #12]
        break;
 8003e8a:	e016      	b.n	8003eba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	60fb      	str	r3, [r7, #12]
        break;
 8003e92:	e012      	b.n	8003eba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	60fb      	str	r3, [r7, #12]
        break;
 8003e9a:	e00e      	b.n	8003eba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	60fb      	str	r3, [r7, #12]
        break;
 8003ea2:	e00a      	b.n	8003eba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	09db      	lsrs	r3, r3, #7
 8003ea8:	60fb      	str	r3, [r7, #12]
        break;
 8003eaa:	e006      	b.n	8003eba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	60fb      	str	r3, [r7, #12]
        break;
 8003eb2:	e002      	b.n	8003eba <ADC_ConfigureBoostMode+0x146>
        break;
 8003eb4:	bf00      	nop
 8003eb6:	e000      	b.n	8003eba <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003eb8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003eba:	f7ff f8a9 	bl	8003010 <HAL_GetREVID>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d815      	bhi.n	8003ef4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a2b      	ldr	r2, [pc, #172]	; (8003f78 <ADC_ConfigureBoostMode+0x204>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d908      	bls.n	8003ee2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ede:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ee0:	e03e      	b.n	8003f60 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ef0:	609a      	str	r2, [r3, #8]
}
 8003ef2:	e035      	b.n	8003f60 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <ADC_ConfigureBoostMode+0x208>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d808      	bhi.n	8003f14 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f10:	609a      	str	r2, [r3, #8]
}
 8003f12:	e025      	b.n	8003f60 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <ADC_ConfigureBoostMode+0x20c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d80a      	bhi.n	8003f32 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f2e:	609a      	str	r2, [r3, #8]
}
 8003f30:	e016      	b.n	8003f60 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <ADC_ConfigureBoostMode+0x210>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d80a      	bhi.n	8003f50 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4c:	609a      	str	r2, [r3, #8]
}
 8003f4e:	e007      	b.n	8003f60 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f5e:	609a      	str	r2, [r3, #8]
}
 8003f60:	bf00      	nop
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40022000 	.word	0x40022000
 8003f6c:	40022100 	.word	0x40022100
 8003f70:	40022300 	.word	0x40022300
 8003f74:	58026300 	.word	0x58026300
 8003f78:	01312d00 	.word	0x01312d00
 8003f7c:	005f5e10 	.word	0x005f5e10
 8003f80:	00bebc20 	.word	0x00bebc20
 8003f84:	017d7840 	.word	0x017d7840

08003f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <__NVIC_SetPriorityGrouping+0x44>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fb6:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	60d3      	str	r3, [r2, #12]
}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000ed00 	.word	0xe000ed00
 8003fcc:	05fa0000 	.word	0x05fa0000

08003fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	0a1b      	lsrs	r3, r3, #8
 8003fda:	f003 0307 	and.w	r3, r3, #7
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	db0b      	blt.n	8004016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	f003 021f 	and.w	r2, r3, #31
 8004004:	4907      	ldr	r1, [pc, #28]	; (8004024 <__NVIC_EnableIRQ+0x38>)
 8004006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	2001      	movs	r0, #1
 800400e:	fa00 f202 	lsl.w	r2, r0, r2
 8004012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000e100 	.word	0xe000e100

08004028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	6039      	str	r1, [r7, #0]
 8004032:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004038:	2b00      	cmp	r3, #0
 800403a:	db0a      	blt.n	8004052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	b2da      	uxtb	r2, r3
 8004040:	490c      	ldr	r1, [pc, #48]	; (8004074 <__NVIC_SetPriority+0x4c>)
 8004042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004046:	0112      	lsls	r2, r2, #4
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	440b      	add	r3, r1
 800404c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004050:	e00a      	b.n	8004068 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4908      	ldr	r1, [pc, #32]	; (8004078 <__NVIC_SetPriority+0x50>)
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	3b04      	subs	r3, #4
 8004060:	0112      	lsls	r2, r2, #4
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	440b      	add	r3, r1
 8004066:	761a      	strb	r2, [r3, #24]
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000e100 	.word	0xe000e100
 8004078:	e000ed00 	.word	0xe000ed00

0800407c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800407c:	b480      	push	{r7}
 800407e:	b089      	sub	sp, #36	; 0x24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f1c3 0307 	rsb	r3, r3, #7
 8004096:	2b04      	cmp	r3, #4
 8004098:	bf28      	it	cs
 800409a:	2304      	movcs	r3, #4
 800409c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	3304      	adds	r3, #4
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d902      	bls.n	80040ac <NVIC_EncodePriority+0x30>
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3b03      	subs	r3, #3
 80040aa:	e000      	b.n	80040ae <NVIC_EncodePriority+0x32>
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b0:	f04f 32ff 	mov.w	r2, #4294967295
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43da      	mvns	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	401a      	ands	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c4:	f04f 31ff 	mov.w	r1, #4294967295
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	fa01 f303 	lsl.w	r3, r1, r3
 80040ce:	43d9      	mvns	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d4:	4313      	orrs	r3, r2
         );
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3724      	adds	r7, #36	; 0x24
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040f4:	d301      	bcc.n	80040fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040f6:	2301      	movs	r3, #1
 80040f8:	e00f      	b.n	800411a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040fa:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <SysTick_Config+0x40>)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004102:	210f      	movs	r1, #15
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	f7ff ff8e 	bl	8004028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <SysTick_Config+0x40>)
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004112:	4b04      	ldr	r3, [pc, #16]	; (8004124 <SysTick_Config+0x40>)
 8004114:	2207      	movs	r2, #7
 8004116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	e000e010 	.word	0xe000e010

08004128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff29 	bl	8003f88 <__NVIC_SetPriorityGrouping>
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	4603      	mov	r3, r0
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800414c:	f7ff ff40 	bl	8003fd0 <__NVIC_GetPriorityGrouping>
 8004150:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	6978      	ldr	r0, [r7, #20]
 8004158:	f7ff ff90 	bl	800407c <NVIC_EncodePriority>
 800415c:	4602      	mov	r2, r0
 800415e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004162:	4611      	mov	r1, r2
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ff5f 	bl	8004028 <__NVIC_SetPriority>
}
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	4603      	mov	r3, r0
 800417a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800417c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ff33 	bl	8003fec <__NVIC_EnableIRQ>
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff ffa4 	bl	80040e4 <SysTick_Config>
 800419c:	4603      	mov	r3, r0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80041b0:	f7fe fefe 	bl	8002fb0 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e316      	b.n	80047ee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a66      	ldr	r2, [pc, #408]	; (8004360 <HAL_DMA_Init+0x1b8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d04a      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a65      	ldr	r2, [pc, #404]	; (8004364 <HAL_DMA_Init+0x1bc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d045      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a63      	ldr	r2, [pc, #396]	; (8004368 <HAL_DMA_Init+0x1c0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d040      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a62      	ldr	r2, [pc, #392]	; (800436c <HAL_DMA_Init+0x1c4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d03b      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a60      	ldr	r2, [pc, #384]	; (8004370 <HAL_DMA_Init+0x1c8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d036      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a5f      	ldr	r2, [pc, #380]	; (8004374 <HAL_DMA_Init+0x1cc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d031      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a5d      	ldr	r2, [pc, #372]	; (8004378 <HAL_DMA_Init+0x1d0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d02c      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a5c      	ldr	r2, [pc, #368]	; (800437c <HAL_DMA_Init+0x1d4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d027      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a5a      	ldr	r2, [pc, #360]	; (8004380 <HAL_DMA_Init+0x1d8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d022      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a59      	ldr	r2, [pc, #356]	; (8004384 <HAL_DMA_Init+0x1dc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d01d      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a57      	ldr	r2, [pc, #348]	; (8004388 <HAL_DMA_Init+0x1e0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d018      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a56      	ldr	r2, [pc, #344]	; (800438c <HAL_DMA_Init+0x1e4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d013      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a54      	ldr	r2, [pc, #336]	; (8004390 <HAL_DMA_Init+0x1e8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00e      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a53      	ldr	r2, [pc, #332]	; (8004394 <HAL_DMA_Init+0x1ec>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d009      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a51      	ldr	r2, [pc, #324]	; (8004398 <HAL_DMA_Init+0x1f0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <HAL_DMA_Init+0xb8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a50      	ldr	r2, [pc, #320]	; (800439c <HAL_DMA_Init+0x1f4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d101      	bne.n	8004264 <HAL_DMA_Init+0xbc>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <HAL_DMA_Init+0xbe>
 8004264:	2300      	movs	r3, #0
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 813b 	beq.w	80044e2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a37      	ldr	r2, [pc, #220]	; (8004360 <HAL_DMA_Init+0x1b8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d04a      	beq.n	800431c <HAL_DMA_Init+0x174>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a36      	ldr	r2, [pc, #216]	; (8004364 <HAL_DMA_Init+0x1bc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d045      	beq.n	800431c <HAL_DMA_Init+0x174>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a34      	ldr	r2, [pc, #208]	; (8004368 <HAL_DMA_Init+0x1c0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d040      	beq.n	800431c <HAL_DMA_Init+0x174>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a33      	ldr	r2, [pc, #204]	; (800436c <HAL_DMA_Init+0x1c4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d03b      	beq.n	800431c <HAL_DMA_Init+0x174>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a31      	ldr	r2, [pc, #196]	; (8004370 <HAL_DMA_Init+0x1c8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d036      	beq.n	800431c <HAL_DMA_Init+0x174>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a30      	ldr	r2, [pc, #192]	; (8004374 <HAL_DMA_Init+0x1cc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d031      	beq.n	800431c <HAL_DMA_Init+0x174>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a2e      	ldr	r2, [pc, #184]	; (8004378 <HAL_DMA_Init+0x1d0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d02c      	beq.n	800431c <HAL_DMA_Init+0x174>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a2d      	ldr	r2, [pc, #180]	; (800437c <HAL_DMA_Init+0x1d4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d027      	beq.n	800431c <HAL_DMA_Init+0x174>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2b      	ldr	r2, [pc, #172]	; (8004380 <HAL_DMA_Init+0x1d8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d022      	beq.n	800431c <HAL_DMA_Init+0x174>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a2a      	ldr	r2, [pc, #168]	; (8004384 <HAL_DMA_Init+0x1dc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d01d      	beq.n	800431c <HAL_DMA_Init+0x174>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a28      	ldr	r2, [pc, #160]	; (8004388 <HAL_DMA_Init+0x1e0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d018      	beq.n	800431c <HAL_DMA_Init+0x174>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a27      	ldr	r2, [pc, #156]	; (800438c <HAL_DMA_Init+0x1e4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <HAL_DMA_Init+0x174>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a25      	ldr	r2, [pc, #148]	; (8004390 <HAL_DMA_Init+0x1e8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00e      	beq.n	800431c <HAL_DMA_Init+0x174>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a24      	ldr	r2, [pc, #144]	; (8004394 <HAL_DMA_Init+0x1ec>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_DMA_Init+0x174>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a22      	ldr	r2, [pc, #136]	; (8004398 <HAL_DMA_Init+0x1f0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_DMA_Init+0x174>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a21      	ldr	r2, [pc, #132]	; (800439c <HAL_DMA_Init+0x1f4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d108      	bne.n	800432e <HAL_DMA_Init+0x186>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e007      	b.n	800433e <HAL_DMA_Init+0x196>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800433e:	e02f      	b.n	80043a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004340:	f7fe fe36 	bl	8002fb0 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b05      	cmp	r3, #5
 800434c:	d928      	bls.n	80043a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2203      	movs	r2, #3
 8004358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e246      	b.n	80047ee <HAL_DMA_Init+0x646>
 8004360:	40020010 	.word	0x40020010
 8004364:	40020028 	.word	0x40020028
 8004368:	40020040 	.word	0x40020040
 800436c:	40020058 	.word	0x40020058
 8004370:	40020070 	.word	0x40020070
 8004374:	40020088 	.word	0x40020088
 8004378:	400200a0 	.word	0x400200a0
 800437c:	400200b8 	.word	0x400200b8
 8004380:	40020410 	.word	0x40020410
 8004384:	40020428 	.word	0x40020428
 8004388:	40020440 	.word	0x40020440
 800438c:	40020458 	.word	0x40020458
 8004390:	40020470 	.word	0x40020470
 8004394:	40020488 	.word	0x40020488
 8004398:	400204a0 	.word	0x400204a0
 800439c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1c8      	bne.n	8004340 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4b83      	ldr	r3, [pc, #524]	; (80045c8 <HAL_DMA_Init+0x420>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80043c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d107      	bne.n	8004404 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	4313      	orrs	r3, r2
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004404:	4b71      	ldr	r3, [pc, #452]	; (80045cc <HAL_DMA_Init+0x424>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b71      	ldr	r3, [pc, #452]	; (80045d0 <HAL_DMA_Init+0x428>)
 800440a:	4013      	ands	r3, r2
 800440c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004410:	d328      	bcc.n	8004464 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b28      	cmp	r3, #40	; 0x28
 8004418:	d903      	bls.n	8004422 <HAL_DMA_Init+0x27a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b2e      	cmp	r3, #46	; 0x2e
 8004420:	d917      	bls.n	8004452 <HAL_DMA_Init+0x2aa>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b3e      	cmp	r3, #62	; 0x3e
 8004428:	d903      	bls.n	8004432 <HAL_DMA_Init+0x28a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b42      	cmp	r3, #66	; 0x42
 8004430:	d90f      	bls.n	8004452 <HAL_DMA_Init+0x2aa>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b46      	cmp	r3, #70	; 0x46
 8004438:	d903      	bls.n	8004442 <HAL_DMA_Init+0x29a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b48      	cmp	r3, #72	; 0x48
 8004440:	d907      	bls.n	8004452 <HAL_DMA_Init+0x2aa>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b4e      	cmp	r3, #78	; 0x4e
 8004448:	d905      	bls.n	8004456 <HAL_DMA_Init+0x2ae>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b52      	cmp	r3, #82	; 0x52
 8004450:	d801      	bhi.n	8004456 <HAL_DMA_Init+0x2ae>
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <HAL_DMA_Init+0x2b0>
 8004456:	2300      	movs	r3, #0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004462:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0307 	bic.w	r3, r3, #7
 800447a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	2b04      	cmp	r3, #4
 800448c:	d117      	bne.n	80044be <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00e      	beq.n	80044be <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f001 f9b9 	bl	8005818 <DMA_CheckFifoParam>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2240      	movs	r2, #64	; 0x40
 80044b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e197      	b.n	80047ee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f001 f8f4 	bl	80056b4 <DMA_CalcBaseAndBitshift>
 80044cc:	4603      	mov	r3, r0
 80044ce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	223f      	movs	r2, #63	; 0x3f
 80044da:	409a      	lsls	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	609a      	str	r2, [r3, #8]
 80044e0:	e0cd      	b.n	800467e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a3b      	ldr	r2, [pc, #236]	; (80045d4 <HAL_DMA_Init+0x42c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d022      	beq.n	8004532 <HAL_DMA_Init+0x38a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a39      	ldr	r2, [pc, #228]	; (80045d8 <HAL_DMA_Init+0x430>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01d      	beq.n	8004532 <HAL_DMA_Init+0x38a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a38      	ldr	r2, [pc, #224]	; (80045dc <HAL_DMA_Init+0x434>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d018      	beq.n	8004532 <HAL_DMA_Init+0x38a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a36      	ldr	r2, [pc, #216]	; (80045e0 <HAL_DMA_Init+0x438>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_DMA_Init+0x38a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a35      	ldr	r2, [pc, #212]	; (80045e4 <HAL_DMA_Init+0x43c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00e      	beq.n	8004532 <HAL_DMA_Init+0x38a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a33      	ldr	r2, [pc, #204]	; (80045e8 <HAL_DMA_Init+0x440>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_DMA_Init+0x38a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a32      	ldr	r2, [pc, #200]	; (80045ec <HAL_DMA_Init+0x444>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_DMA_Init+0x38a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a30      	ldr	r2, [pc, #192]	; (80045f0 <HAL_DMA_Init+0x448>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d101      	bne.n	8004536 <HAL_DMA_Init+0x38e>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <HAL_DMA_Init+0x390>
 8004536:	2300      	movs	r3, #0
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8097 	beq.w	800466c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a24      	ldr	r2, [pc, #144]	; (80045d4 <HAL_DMA_Init+0x42c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d021      	beq.n	800458c <HAL_DMA_Init+0x3e4>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a22      	ldr	r2, [pc, #136]	; (80045d8 <HAL_DMA_Init+0x430>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01c      	beq.n	800458c <HAL_DMA_Init+0x3e4>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a21      	ldr	r2, [pc, #132]	; (80045dc <HAL_DMA_Init+0x434>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d017      	beq.n	800458c <HAL_DMA_Init+0x3e4>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1f      	ldr	r2, [pc, #124]	; (80045e0 <HAL_DMA_Init+0x438>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d012      	beq.n	800458c <HAL_DMA_Init+0x3e4>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <HAL_DMA_Init+0x43c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00d      	beq.n	800458c <HAL_DMA_Init+0x3e4>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1c      	ldr	r2, [pc, #112]	; (80045e8 <HAL_DMA_Init+0x440>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d008      	beq.n	800458c <HAL_DMA_Init+0x3e4>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <HAL_DMA_Init+0x444>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d003      	beq.n	800458c <HAL_DMA_Init+0x3e4>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a19      	ldr	r2, [pc, #100]	; (80045f0 <HAL_DMA_Init+0x448>)
 800458a:	4293      	cmp	r3, r2
 800458c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <HAL_DMA_Init+0x44c>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d020      	beq.n	80045f8 <HAL_DMA_Init+0x450>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d102      	bne.n	80045c4 <HAL_DMA_Init+0x41c>
 80045be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045c2:	e01a      	b.n	80045fa <HAL_DMA_Init+0x452>
 80045c4:	2300      	movs	r3, #0
 80045c6:	e018      	b.n	80045fa <HAL_DMA_Init+0x452>
 80045c8:	fe10803f 	.word	0xfe10803f
 80045cc:	5c001000 	.word	0x5c001000
 80045d0:	ffff0000 	.word	0xffff0000
 80045d4:	58025408 	.word	0x58025408
 80045d8:	5802541c 	.word	0x5802541c
 80045dc:	58025430 	.word	0x58025430
 80045e0:	58025444 	.word	0x58025444
 80045e4:	58025458 	.word	0x58025458
 80045e8:	5802546c 	.word	0x5802546c
 80045ec:	58025480 	.word	0x58025480
 80045f0:	58025494 	.word	0x58025494
 80045f4:	fffe000f 	.word	0xfffe000f
 80045f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68d2      	ldr	r2, [r2, #12]
 80045fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004600:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004608:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004610:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004618:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004620:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004628:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	4b6e      	ldr	r3, [pc, #440]	; (80047f8 <HAL_DMA_Init+0x650>)
 8004640:	4413      	add	r3, r2
 8004642:	4a6e      	ldr	r2, [pc, #440]	; (80047fc <HAL_DMA_Init+0x654>)
 8004644:	fba2 2303 	umull	r2, r3, r2, r3
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	009a      	lsls	r2, r3, #2
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f001 f82f 	bl	80056b4 <DMA_CalcBaseAndBitshift>
 8004656:	4603      	mov	r3, r0
 8004658:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	2201      	movs	r2, #1
 8004664:	409a      	lsls	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	e008      	b.n	800467e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2240      	movs	r2, #64	; 0x40
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2203      	movs	r2, #3
 8004676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0b7      	b.n	80047ee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a5f      	ldr	r2, [pc, #380]	; (8004800 <HAL_DMA_Init+0x658>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d072      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a5d      	ldr	r2, [pc, #372]	; (8004804 <HAL_DMA_Init+0x65c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d06d      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a5c      	ldr	r2, [pc, #368]	; (8004808 <HAL_DMA_Init+0x660>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d068      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a5a      	ldr	r2, [pc, #360]	; (800480c <HAL_DMA_Init+0x664>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d063      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a59      	ldr	r2, [pc, #356]	; (8004810 <HAL_DMA_Init+0x668>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d05e      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a57      	ldr	r2, [pc, #348]	; (8004814 <HAL_DMA_Init+0x66c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d059      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a56      	ldr	r2, [pc, #344]	; (8004818 <HAL_DMA_Init+0x670>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d054      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a54      	ldr	r2, [pc, #336]	; (800481c <HAL_DMA_Init+0x674>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d04f      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a53      	ldr	r2, [pc, #332]	; (8004820 <HAL_DMA_Init+0x678>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d04a      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a51      	ldr	r2, [pc, #324]	; (8004824 <HAL_DMA_Init+0x67c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d045      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a50      	ldr	r2, [pc, #320]	; (8004828 <HAL_DMA_Init+0x680>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d040      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a4e      	ldr	r2, [pc, #312]	; (800482c <HAL_DMA_Init+0x684>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d03b      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a4d      	ldr	r2, [pc, #308]	; (8004830 <HAL_DMA_Init+0x688>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d036      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a4b      	ldr	r2, [pc, #300]	; (8004834 <HAL_DMA_Init+0x68c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d031      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a4a      	ldr	r2, [pc, #296]	; (8004838 <HAL_DMA_Init+0x690>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d02c      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a48      	ldr	r2, [pc, #288]	; (800483c <HAL_DMA_Init+0x694>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d027      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a47      	ldr	r2, [pc, #284]	; (8004840 <HAL_DMA_Init+0x698>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d022      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a45      	ldr	r2, [pc, #276]	; (8004844 <HAL_DMA_Init+0x69c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01d      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a44      	ldr	r2, [pc, #272]	; (8004848 <HAL_DMA_Init+0x6a0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d018      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a42      	ldr	r2, [pc, #264]	; (800484c <HAL_DMA_Init+0x6a4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a41      	ldr	r2, [pc, #260]	; (8004850 <HAL_DMA_Init+0x6a8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00e      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a3f      	ldr	r2, [pc, #252]	; (8004854 <HAL_DMA_Init+0x6ac>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d009      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a3e      	ldr	r2, [pc, #248]	; (8004858 <HAL_DMA_Init+0x6b0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_DMA_Init+0x5c6>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a3c      	ldr	r2, [pc, #240]	; (800485c <HAL_DMA_Init+0x6b4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_DMA_Init+0x5ca>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <HAL_DMA_Init+0x5cc>
 8004772:	2300      	movs	r3, #0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d032      	beq.n	80047de <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f001 f8c9 	bl	8005910 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b80      	cmp	r3, #128	; 0x80
 8004784:	d102      	bne.n	800478c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047a0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d010      	beq.n	80047cc <HAL_DMA_Init+0x624>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d80c      	bhi.n	80047cc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f001 f946 	bl	8005a44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	e008      	b.n	80047de <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	a7fdabf8 	.word	0xa7fdabf8
 80047fc:	cccccccd 	.word	0xcccccccd
 8004800:	40020010 	.word	0x40020010
 8004804:	40020028 	.word	0x40020028
 8004808:	40020040 	.word	0x40020040
 800480c:	40020058 	.word	0x40020058
 8004810:	40020070 	.word	0x40020070
 8004814:	40020088 	.word	0x40020088
 8004818:	400200a0 	.word	0x400200a0
 800481c:	400200b8 	.word	0x400200b8
 8004820:	40020410 	.word	0x40020410
 8004824:	40020428 	.word	0x40020428
 8004828:	40020440 	.word	0x40020440
 800482c:	40020458 	.word	0x40020458
 8004830:	40020470 	.word	0x40020470
 8004834:	40020488 	.word	0x40020488
 8004838:	400204a0 	.word	0x400204a0
 800483c:	400204b8 	.word	0x400204b8
 8004840:	58025408 	.word	0x58025408
 8004844:	5802541c 	.word	0x5802541c
 8004848:	58025430 	.word	0x58025430
 800484c:	58025444 	.word	0x58025444
 8004850:	58025458 	.word	0x58025458
 8004854:	5802546c 	.word	0x5802546c
 8004858:	58025480 	.word	0x58025480
 800485c:	58025494 	.word	0x58025494

08004860 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	; 0x28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800486c:	4b67      	ldr	r3, [pc, #412]	; (8004a0c <HAL_DMA_IRQHandler+0x1ac>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a67      	ldr	r2, [pc, #412]	; (8004a10 <HAL_DMA_IRQHandler+0x1b0>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	0a9b      	lsrs	r3, r3, #10
 8004878:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a5f      	ldr	r2, [pc, #380]	; (8004a14 <HAL_DMA_IRQHandler+0x1b4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d04a      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a5d      	ldr	r2, [pc, #372]	; (8004a18 <HAL_DMA_IRQHandler+0x1b8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d045      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a5c      	ldr	r2, [pc, #368]	; (8004a1c <HAL_DMA_IRQHandler+0x1bc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d040      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a5a      	ldr	r2, [pc, #360]	; (8004a20 <HAL_DMA_IRQHandler+0x1c0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d03b      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a59      	ldr	r2, [pc, #356]	; (8004a24 <HAL_DMA_IRQHandler+0x1c4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d036      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a57      	ldr	r2, [pc, #348]	; (8004a28 <HAL_DMA_IRQHandler+0x1c8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d031      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a56      	ldr	r2, [pc, #344]	; (8004a2c <HAL_DMA_IRQHandler+0x1cc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d02c      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a54      	ldr	r2, [pc, #336]	; (8004a30 <HAL_DMA_IRQHandler+0x1d0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d027      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a53      	ldr	r2, [pc, #332]	; (8004a34 <HAL_DMA_IRQHandler+0x1d4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d022      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a51      	ldr	r2, [pc, #324]	; (8004a38 <HAL_DMA_IRQHandler+0x1d8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01d      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a50      	ldr	r2, [pc, #320]	; (8004a3c <HAL_DMA_IRQHandler+0x1dc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d018      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a4e      	ldr	r2, [pc, #312]	; (8004a40 <HAL_DMA_IRQHandler+0x1e0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a4d      	ldr	r2, [pc, #308]	; (8004a44 <HAL_DMA_IRQHandler+0x1e4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00e      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a4b      	ldr	r2, [pc, #300]	; (8004a48 <HAL_DMA_IRQHandler+0x1e8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d009      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a4a      	ldr	r2, [pc, #296]	; (8004a4c <HAL_DMA_IRQHandler+0x1ec>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d004      	beq.n	8004932 <HAL_DMA_IRQHandler+0xd2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a48      	ldr	r2, [pc, #288]	; (8004a50 <HAL_DMA_IRQHandler+0x1f0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d101      	bne.n	8004936 <HAL_DMA_IRQHandler+0xd6>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <HAL_DMA_IRQHandler+0xd8>
 8004936:	2300      	movs	r3, #0
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 842b 	beq.w	8005194 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	2208      	movs	r2, #8
 8004948:	409a      	lsls	r2, r3
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	4013      	ands	r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 80a2 	beq.w	8004a98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2e      	ldr	r2, [pc, #184]	; (8004a14 <HAL_DMA_IRQHandler+0x1b4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d04a      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2d      	ldr	r2, [pc, #180]	; (8004a18 <HAL_DMA_IRQHandler+0x1b8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d045      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2b      	ldr	r2, [pc, #172]	; (8004a1c <HAL_DMA_IRQHandler+0x1bc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d040      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2a      	ldr	r2, [pc, #168]	; (8004a20 <HAL_DMA_IRQHandler+0x1c0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d03b      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <HAL_DMA_IRQHandler+0x1c4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d036      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a27      	ldr	r2, [pc, #156]	; (8004a28 <HAL_DMA_IRQHandler+0x1c8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d031      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a25      	ldr	r2, [pc, #148]	; (8004a2c <HAL_DMA_IRQHandler+0x1cc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d02c      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a24      	ldr	r2, [pc, #144]	; (8004a30 <HAL_DMA_IRQHandler+0x1d0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d027      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a22      	ldr	r2, [pc, #136]	; (8004a34 <HAL_DMA_IRQHandler+0x1d4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d022      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a21      	ldr	r2, [pc, #132]	; (8004a38 <HAL_DMA_IRQHandler+0x1d8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d01d      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <HAL_DMA_IRQHandler+0x1dc>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d018      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <HAL_DMA_IRQHandler+0x1e0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d013      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1c      	ldr	r2, [pc, #112]	; (8004a44 <HAL_DMA_IRQHandler+0x1e4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00e      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1b      	ldr	r2, [pc, #108]	; (8004a48 <HAL_DMA_IRQHandler+0x1e8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d009      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a19      	ldr	r2, [pc, #100]	; (8004a4c <HAL_DMA_IRQHandler+0x1ec>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x194>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <HAL_DMA_IRQHandler+0x1f0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d12f      	bne.n	8004a54 <HAL_DMA_IRQHandler+0x1f4>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bf14      	ite	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	2300      	moveq	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	e02e      	b.n	8004a68 <HAL_DMA_IRQHandler+0x208>
 8004a0a:	bf00      	nop
 8004a0c:	24000000 	.word	0x24000000
 8004a10:	1b4e81b5 	.word	0x1b4e81b5
 8004a14:	40020010 	.word	0x40020010
 8004a18:	40020028 	.word	0x40020028
 8004a1c:	40020040 	.word	0x40020040
 8004a20:	40020058 	.word	0x40020058
 8004a24:	40020070 	.word	0x40020070
 8004a28:	40020088 	.word	0x40020088
 8004a2c:	400200a0 	.word	0x400200a0
 8004a30:	400200b8 	.word	0x400200b8
 8004a34:	40020410 	.word	0x40020410
 8004a38:	40020428 	.word	0x40020428
 8004a3c:	40020440 	.word	0x40020440
 8004a40:	40020458 	.word	0x40020458
 8004a44:	40020470 	.word	0x40020470
 8004a48:	40020488 	.word	0x40020488
 8004a4c:	400204a0 	.word	0x400204a0
 8004a50:	400204b8 	.word	0x400204b8
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bf14      	ite	ne
 8004a62:	2301      	movne	r3, #1
 8004a64:	2300      	moveq	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d015      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0204 	bic.w	r2, r2, #4
 8004a7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a80:	f003 031f 	and.w	r3, r3, #31
 8004a84:	2208      	movs	r2, #8
 8004a86:	409a      	lsls	r2, r3
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a90:	f043 0201 	orr.w	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d06e      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a69      	ldr	r2, [pc, #420]	; (8004c58 <HAL_DMA_IRQHandler+0x3f8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d04a      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a67      	ldr	r2, [pc, #412]	; (8004c5c <HAL_DMA_IRQHandler+0x3fc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d045      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a66      	ldr	r2, [pc, #408]	; (8004c60 <HAL_DMA_IRQHandler+0x400>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d040      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a64      	ldr	r2, [pc, #400]	; (8004c64 <HAL_DMA_IRQHandler+0x404>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d03b      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a63      	ldr	r2, [pc, #396]	; (8004c68 <HAL_DMA_IRQHandler+0x408>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d036      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a61      	ldr	r2, [pc, #388]	; (8004c6c <HAL_DMA_IRQHandler+0x40c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d031      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a60      	ldr	r2, [pc, #384]	; (8004c70 <HAL_DMA_IRQHandler+0x410>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d02c      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a5e      	ldr	r2, [pc, #376]	; (8004c74 <HAL_DMA_IRQHandler+0x414>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d027      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a5d      	ldr	r2, [pc, #372]	; (8004c78 <HAL_DMA_IRQHandler+0x418>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d022      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a5b      	ldr	r2, [pc, #364]	; (8004c7c <HAL_DMA_IRQHandler+0x41c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d01d      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a5a      	ldr	r2, [pc, #360]	; (8004c80 <HAL_DMA_IRQHandler+0x420>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d018      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a58      	ldr	r2, [pc, #352]	; (8004c84 <HAL_DMA_IRQHandler+0x424>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a57      	ldr	r2, [pc, #348]	; (8004c88 <HAL_DMA_IRQHandler+0x428>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00e      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a55      	ldr	r2, [pc, #340]	; (8004c8c <HAL_DMA_IRQHandler+0x42c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d009      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a54      	ldr	r2, [pc, #336]	; (8004c90 <HAL_DMA_IRQHandler+0x430>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d004      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x2ee>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a52      	ldr	r2, [pc, #328]	; (8004c94 <HAL_DMA_IRQHandler+0x434>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d10a      	bne.n	8004b64 <HAL_DMA_IRQHandler+0x304>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e003      	b.n	8004b6c <HAL_DMA_IRQHandler+0x30c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	2201      	movs	r2, #1
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	f043 0202 	orr.w	r2, r3, #2
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	2204      	movs	r2, #4
 8004b96:	409a      	lsls	r2, r3
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 808f 	beq.w	8004cc0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a2c      	ldr	r2, [pc, #176]	; (8004c58 <HAL_DMA_IRQHandler+0x3f8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d04a      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a2a      	ldr	r2, [pc, #168]	; (8004c5c <HAL_DMA_IRQHandler+0x3fc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d045      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a29      	ldr	r2, [pc, #164]	; (8004c60 <HAL_DMA_IRQHandler+0x400>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d040      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a27      	ldr	r2, [pc, #156]	; (8004c64 <HAL_DMA_IRQHandler+0x404>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d03b      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a26      	ldr	r2, [pc, #152]	; (8004c68 <HAL_DMA_IRQHandler+0x408>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d036      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a24      	ldr	r2, [pc, #144]	; (8004c6c <HAL_DMA_IRQHandler+0x40c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d031      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a23      	ldr	r2, [pc, #140]	; (8004c70 <HAL_DMA_IRQHandler+0x410>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d02c      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a21      	ldr	r2, [pc, #132]	; (8004c74 <HAL_DMA_IRQHandler+0x414>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d027      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a20      	ldr	r2, [pc, #128]	; (8004c78 <HAL_DMA_IRQHandler+0x418>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d022      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1e      	ldr	r2, [pc, #120]	; (8004c7c <HAL_DMA_IRQHandler+0x41c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01d      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1d      	ldr	r2, [pc, #116]	; (8004c80 <HAL_DMA_IRQHandler+0x420>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d018      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <HAL_DMA_IRQHandler+0x424>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1a      	ldr	r2, [pc, #104]	; (8004c88 <HAL_DMA_IRQHandler+0x428>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a18      	ldr	r2, [pc, #96]	; (8004c8c <HAL_DMA_IRQHandler+0x42c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a17      	ldr	r2, [pc, #92]	; (8004c90 <HAL_DMA_IRQHandler+0x430>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x3e2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <HAL_DMA_IRQHandler+0x434>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d12a      	bne.n	8004c98 <HAL_DMA_IRQHandler+0x438>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf14      	ite	ne
 8004c50:	2301      	movne	r3, #1
 8004c52:	2300      	moveq	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	e023      	b.n	8004ca0 <HAL_DMA_IRQHandler+0x440>
 8004c58:	40020010 	.word	0x40020010
 8004c5c:	40020028 	.word	0x40020028
 8004c60:	40020040 	.word	0x40020040
 8004c64:	40020058 	.word	0x40020058
 8004c68:	40020070 	.word	0x40020070
 8004c6c:	40020088 	.word	0x40020088
 8004c70:	400200a0 	.word	0x400200a0
 8004c74:	400200b8 	.word	0x400200b8
 8004c78:	40020410 	.word	0x40020410
 8004c7c:	40020428 	.word	0x40020428
 8004c80:	40020440 	.word	0x40020440
 8004c84:	40020458 	.word	0x40020458
 8004c88:	40020470 	.word	0x40020470
 8004c8c:	40020488 	.word	0x40020488
 8004c90:	400204a0 	.word	0x400204a0
 8004c94:	400204b8 	.word	0x400204b8
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00d      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	2204      	movs	r2, #4
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb8:	f043 0204 	orr.w	r2, r3, #4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc4:	f003 031f 	and.w	r3, r3, #31
 8004cc8:	2210      	movs	r2, #16
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 80a6 	beq.w	8004e22 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a85      	ldr	r2, [pc, #532]	; (8004ef0 <HAL_DMA_IRQHandler+0x690>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d04a      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a83      	ldr	r2, [pc, #524]	; (8004ef4 <HAL_DMA_IRQHandler+0x694>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d045      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a82      	ldr	r2, [pc, #520]	; (8004ef8 <HAL_DMA_IRQHandler+0x698>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d040      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a80      	ldr	r2, [pc, #512]	; (8004efc <HAL_DMA_IRQHandler+0x69c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d03b      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a7f      	ldr	r2, [pc, #508]	; (8004f00 <HAL_DMA_IRQHandler+0x6a0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d036      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a7d      	ldr	r2, [pc, #500]	; (8004f04 <HAL_DMA_IRQHandler+0x6a4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d031      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a7c      	ldr	r2, [pc, #496]	; (8004f08 <HAL_DMA_IRQHandler+0x6a8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d02c      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a7a      	ldr	r2, [pc, #488]	; (8004f0c <HAL_DMA_IRQHandler+0x6ac>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d027      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a79      	ldr	r2, [pc, #484]	; (8004f10 <HAL_DMA_IRQHandler+0x6b0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d022      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a77      	ldr	r2, [pc, #476]	; (8004f14 <HAL_DMA_IRQHandler+0x6b4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01d      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a76      	ldr	r2, [pc, #472]	; (8004f18 <HAL_DMA_IRQHandler+0x6b8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d018      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a74      	ldr	r2, [pc, #464]	; (8004f1c <HAL_DMA_IRQHandler+0x6bc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d013      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a73      	ldr	r2, [pc, #460]	; (8004f20 <HAL_DMA_IRQHandler+0x6c0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00e      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a71      	ldr	r2, [pc, #452]	; (8004f24 <HAL_DMA_IRQHandler+0x6c4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d009      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a70      	ldr	r2, [pc, #448]	; (8004f28 <HAL_DMA_IRQHandler+0x6c8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x516>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a6e      	ldr	r2, [pc, #440]	; (8004f2c <HAL_DMA_IRQHandler+0x6cc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d10a      	bne.n	8004d8c <HAL_DMA_IRQHandler+0x52c>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e009      	b.n	8004da0 <HAL_DMA_IRQHandler+0x540>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d03e      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da8:	f003 031f 	and.w	r3, r3, #31
 8004dac:	2210      	movs	r2, #16
 8004dae:	409a      	lsls	r2, r3
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d018      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d108      	bne.n	8004de2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d024      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
 8004de0:	e01f      	b.n	8004e22 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01b      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	4798      	blx	r3
 8004df2:	e016      	b.n	8004e22 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d107      	bne.n	8004e12 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0208 	bic.w	r2, r2, #8
 8004e10:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e26:	f003 031f 	and.w	r3, r3, #31
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	409a      	lsls	r2, r3
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8110 	beq.w	8005058 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <HAL_DMA_IRQHandler+0x690>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d04a      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a2b      	ldr	r2, [pc, #172]	; (8004ef4 <HAL_DMA_IRQHandler+0x694>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d045      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <HAL_DMA_IRQHandler+0x698>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d040      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a28      	ldr	r2, [pc, #160]	; (8004efc <HAL_DMA_IRQHandler+0x69c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d03b      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a26      	ldr	r2, [pc, #152]	; (8004f00 <HAL_DMA_IRQHandler+0x6a0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d036      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a25      	ldr	r2, [pc, #148]	; (8004f04 <HAL_DMA_IRQHandler+0x6a4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d031      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a23      	ldr	r2, [pc, #140]	; (8004f08 <HAL_DMA_IRQHandler+0x6a8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d02c      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a22      	ldr	r2, [pc, #136]	; (8004f0c <HAL_DMA_IRQHandler+0x6ac>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d027      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a20      	ldr	r2, [pc, #128]	; (8004f10 <HAL_DMA_IRQHandler+0x6b0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d022      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1f      	ldr	r2, [pc, #124]	; (8004f14 <HAL_DMA_IRQHandler+0x6b4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d01d      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1d      	ldr	r2, [pc, #116]	; (8004f18 <HAL_DMA_IRQHandler+0x6b8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d018      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <HAL_DMA_IRQHandler+0x6bc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d013      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1a      	ldr	r2, [pc, #104]	; (8004f20 <HAL_DMA_IRQHandler+0x6c0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00e      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <HAL_DMA_IRQHandler+0x6c4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d009      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a17      	ldr	r2, [pc, #92]	; (8004f28 <HAL_DMA_IRQHandler+0x6c8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x678>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <HAL_DMA_IRQHandler+0x6cc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d12b      	bne.n	8004f30 <HAL_DMA_IRQHandler+0x6d0>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bf14      	ite	ne
 8004ee6:	2301      	movne	r3, #1
 8004ee8:	2300      	moveq	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	e02a      	b.n	8004f44 <HAL_DMA_IRQHandler+0x6e4>
 8004eee:	bf00      	nop
 8004ef0:	40020010 	.word	0x40020010
 8004ef4:	40020028 	.word	0x40020028
 8004ef8:	40020040 	.word	0x40020040
 8004efc:	40020058 	.word	0x40020058
 8004f00:	40020070 	.word	0x40020070
 8004f04:	40020088 	.word	0x40020088
 8004f08:	400200a0 	.word	0x400200a0
 8004f0c:	400200b8 	.word	0x400200b8
 8004f10:	40020410 	.word	0x40020410
 8004f14:	40020428 	.word	0x40020428
 8004f18:	40020440 	.word	0x40020440
 8004f1c:	40020458 	.word	0x40020458
 8004f20:	40020470 	.word	0x40020470
 8004f24:	40020488 	.word	0x40020488
 8004f28:	400204a0 	.word	0x400204a0
 8004f2c:	400204b8 	.word	0x400204b8
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bf14      	ite	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	2300      	moveq	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8087 	beq.w	8005058 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	2220      	movs	r2, #32
 8004f54:	409a      	lsls	r2, r3
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d139      	bne.n	8004fda <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0216 	bic.w	r2, r2, #22
 8004f74:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695a      	ldr	r2, [r3, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f84:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <HAL_DMA_IRQHandler+0x736>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0208 	bic.w	r2, r2, #8
 8004fa4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	223f      	movs	r2, #63	; 0x3f
 8004fb0:	409a      	lsls	r2, r3
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 834a 	beq.w	8005664 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	4798      	blx	r3
          }
          return;
 8004fd8:	e344      	b.n	8005664 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d018      	beq.n	800501a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d108      	bne.n	8005008 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d02c      	beq.n	8005058 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4798      	blx	r3
 8005006:	e027      	b.n	8005058 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500c:	2b00      	cmp	r3, #0
 800500e:	d023      	beq.n	8005058 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
 8005018:	e01e      	b.n	8005058 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10f      	bne.n	8005048 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0210 	bic.w	r2, r2, #16
 8005036:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8306 	beq.w	800566e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 8088 	beq.w	8005180 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2204      	movs	r2, #4
 8005074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a7a      	ldr	r2, [pc, #488]	; (8005268 <HAL_DMA_IRQHandler+0xa08>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d04a      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a79      	ldr	r2, [pc, #484]	; (800526c <HAL_DMA_IRQHandler+0xa0c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d045      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a77      	ldr	r2, [pc, #476]	; (8005270 <HAL_DMA_IRQHandler+0xa10>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d040      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a76      	ldr	r2, [pc, #472]	; (8005274 <HAL_DMA_IRQHandler+0xa14>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d03b      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a74      	ldr	r2, [pc, #464]	; (8005278 <HAL_DMA_IRQHandler+0xa18>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d036      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a73      	ldr	r2, [pc, #460]	; (800527c <HAL_DMA_IRQHandler+0xa1c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d031      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a71      	ldr	r2, [pc, #452]	; (8005280 <HAL_DMA_IRQHandler+0xa20>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d02c      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a70      	ldr	r2, [pc, #448]	; (8005284 <HAL_DMA_IRQHandler+0xa24>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d027      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a6e      	ldr	r2, [pc, #440]	; (8005288 <HAL_DMA_IRQHandler+0xa28>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6d      	ldr	r2, [pc, #436]	; (800528c <HAL_DMA_IRQHandler+0xa2c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01d      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a6b      	ldr	r2, [pc, #428]	; (8005290 <HAL_DMA_IRQHandler+0xa30>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a6a      	ldr	r2, [pc, #424]	; (8005294 <HAL_DMA_IRQHandler+0xa34>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a68      	ldr	r2, [pc, #416]	; (8005298 <HAL_DMA_IRQHandler+0xa38>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a67      	ldr	r2, [pc, #412]	; (800529c <HAL_DMA_IRQHandler+0xa3c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a65      	ldr	r2, [pc, #404]	; (80052a0 <HAL_DMA_IRQHandler+0xa40>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_DMA_IRQHandler+0x8b8>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a64      	ldr	r2, [pc, #400]	; (80052a4 <HAL_DMA_IRQHandler+0xa44>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d108      	bne.n	800512a <HAL_DMA_IRQHandler+0x8ca>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	e007      	b.n	800513a <HAL_DMA_IRQHandler+0x8da>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3301      	adds	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005142:	429a      	cmp	r2, r3
 8005144:	d307      	bcc.n	8005156 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f2      	bne.n	800513a <HAL_DMA_IRQHandler+0x8da>
 8005154:	e000      	b.n	8005158 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005156:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d004      	beq.n	8005178 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2203      	movs	r2, #3
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005176:	e003      	b.n	8005180 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8272 	beq.w	800566e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4798      	blx	r3
 8005192:	e26c      	b.n	800566e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a43      	ldr	r2, [pc, #268]	; (80052a8 <HAL_DMA_IRQHandler+0xa48>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d022      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x984>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a42      	ldr	r2, [pc, #264]	; (80052ac <HAL_DMA_IRQHandler+0xa4c>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d01d      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x984>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a40      	ldr	r2, [pc, #256]	; (80052b0 <HAL_DMA_IRQHandler+0xa50>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d018      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x984>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a3f      	ldr	r2, [pc, #252]	; (80052b4 <HAL_DMA_IRQHandler+0xa54>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x984>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a3d      	ldr	r2, [pc, #244]	; (80052b8 <HAL_DMA_IRQHandler+0xa58>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00e      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x984>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a3c      	ldr	r2, [pc, #240]	; (80052bc <HAL_DMA_IRQHandler+0xa5c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d009      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x984>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a3a      	ldr	r2, [pc, #232]	; (80052c0 <HAL_DMA_IRQHandler+0xa60>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x984>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a39      	ldr	r2, [pc, #228]	; (80052c4 <HAL_DMA_IRQHandler+0xa64>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d101      	bne.n	80051e8 <HAL_DMA_IRQHandler+0x988>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <HAL_DMA_IRQHandler+0x98a>
 80051e8:	2300      	movs	r3, #0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 823f 	beq.w	800566e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	2204      	movs	r2, #4
 8005202:	409a      	lsls	r2, r3
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80cd 	beq.w	80053a8 <HAL_DMA_IRQHandler+0xb48>
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80c7 	beq.w	80053a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	2204      	movs	r2, #4
 8005224:	409a      	lsls	r2, r3
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d049      	beq.n	80052c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8210 	beq.w	8005668 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005250:	e20a      	b.n	8005668 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 8206 	beq.w	8005668 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005264:	e200      	b.n	8005668 <HAL_DMA_IRQHandler+0xe08>
 8005266:	bf00      	nop
 8005268:	40020010 	.word	0x40020010
 800526c:	40020028 	.word	0x40020028
 8005270:	40020040 	.word	0x40020040
 8005274:	40020058 	.word	0x40020058
 8005278:	40020070 	.word	0x40020070
 800527c:	40020088 	.word	0x40020088
 8005280:	400200a0 	.word	0x400200a0
 8005284:	400200b8 	.word	0x400200b8
 8005288:	40020410 	.word	0x40020410
 800528c:	40020428 	.word	0x40020428
 8005290:	40020440 	.word	0x40020440
 8005294:	40020458 	.word	0x40020458
 8005298:	40020470 	.word	0x40020470
 800529c:	40020488 	.word	0x40020488
 80052a0:	400204a0 	.word	0x400204a0
 80052a4:	400204b8 	.word	0x400204b8
 80052a8:	58025408 	.word	0x58025408
 80052ac:	5802541c 	.word	0x5802541c
 80052b0:	58025430 	.word	0x58025430
 80052b4:	58025444 	.word	0x58025444
 80052b8:	58025458 	.word	0x58025458
 80052bc:	5802546c 	.word	0x5802546c
 80052c0:	58025480 	.word	0x58025480
 80052c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d160      	bne.n	8005394 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a8c      	ldr	r2, [pc, #560]	; (8005508 <HAL_DMA_IRQHandler+0xca8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d04a      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a8a      	ldr	r2, [pc, #552]	; (800550c <HAL_DMA_IRQHandler+0xcac>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d045      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a89      	ldr	r2, [pc, #548]	; (8005510 <HAL_DMA_IRQHandler+0xcb0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d040      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a87      	ldr	r2, [pc, #540]	; (8005514 <HAL_DMA_IRQHandler+0xcb4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d03b      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a86      	ldr	r2, [pc, #536]	; (8005518 <HAL_DMA_IRQHandler+0xcb8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d036      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a84      	ldr	r2, [pc, #528]	; (800551c <HAL_DMA_IRQHandler+0xcbc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d031      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a83      	ldr	r2, [pc, #524]	; (8005520 <HAL_DMA_IRQHandler+0xcc0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d02c      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a81      	ldr	r2, [pc, #516]	; (8005524 <HAL_DMA_IRQHandler+0xcc4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d027      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a80      	ldr	r2, [pc, #512]	; (8005528 <HAL_DMA_IRQHandler+0xcc8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d022      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a7e      	ldr	r2, [pc, #504]	; (800552c <HAL_DMA_IRQHandler+0xccc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01d      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a7d      	ldr	r2, [pc, #500]	; (8005530 <HAL_DMA_IRQHandler+0xcd0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d018      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a7b      	ldr	r2, [pc, #492]	; (8005534 <HAL_DMA_IRQHandler+0xcd4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a7a      	ldr	r2, [pc, #488]	; (8005538 <HAL_DMA_IRQHandler+0xcd8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00e      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a78      	ldr	r2, [pc, #480]	; (800553c <HAL_DMA_IRQHandler+0xcdc>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d009      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a77      	ldr	r2, [pc, #476]	; (8005540 <HAL_DMA_IRQHandler+0xce0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d004      	beq.n	8005372 <HAL_DMA_IRQHandler+0xb12>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a75      	ldr	r2, [pc, #468]	; (8005544 <HAL_DMA_IRQHandler+0xce4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d108      	bne.n	8005384 <HAL_DMA_IRQHandler+0xb24>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0208 	bic.w	r2, r2, #8
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e007      	b.n	8005394 <HAL_DMA_IRQHandler+0xb34>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0204 	bic.w	r2, r2, #4
 8005392:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8165 	beq.w	8005668 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053a6:	e15f      	b.n	8005668 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	2202      	movs	r2, #2
 80053b2:	409a      	lsls	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 80c5 	beq.w	8005548 <HAL_DMA_IRQHandler+0xce8>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80bf 	beq.w	8005548 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	2202      	movs	r2, #2
 80053d4:	409a      	lsls	r2, r3
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d018      	beq.n	8005416 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 813a 	beq.w	800566c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005400:	e134      	b.n	800566c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 8130 	beq.w	800566c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005414:	e12a      	b.n	800566c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b00      	cmp	r3, #0
 800541e:	d168      	bne.n	80054f2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a38      	ldr	r2, [pc, #224]	; (8005508 <HAL_DMA_IRQHandler+0xca8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d04a      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a37      	ldr	r2, [pc, #220]	; (800550c <HAL_DMA_IRQHandler+0xcac>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d045      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a35      	ldr	r2, [pc, #212]	; (8005510 <HAL_DMA_IRQHandler+0xcb0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d040      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a34      	ldr	r2, [pc, #208]	; (8005514 <HAL_DMA_IRQHandler+0xcb4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d03b      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a32      	ldr	r2, [pc, #200]	; (8005518 <HAL_DMA_IRQHandler+0xcb8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d036      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a31      	ldr	r2, [pc, #196]	; (800551c <HAL_DMA_IRQHandler+0xcbc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d031      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2f      	ldr	r2, [pc, #188]	; (8005520 <HAL_DMA_IRQHandler+0xcc0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d02c      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a2e      	ldr	r2, [pc, #184]	; (8005524 <HAL_DMA_IRQHandler+0xcc4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d027      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2c      	ldr	r2, [pc, #176]	; (8005528 <HAL_DMA_IRQHandler+0xcc8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d022      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a2b      	ldr	r2, [pc, #172]	; (800552c <HAL_DMA_IRQHandler+0xccc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d01d      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a29      	ldr	r2, [pc, #164]	; (8005530 <HAL_DMA_IRQHandler+0xcd0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d018      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a28      	ldr	r2, [pc, #160]	; (8005534 <HAL_DMA_IRQHandler+0xcd4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a26      	ldr	r2, [pc, #152]	; (8005538 <HAL_DMA_IRQHandler+0xcd8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00e      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a25      	ldr	r2, [pc, #148]	; (800553c <HAL_DMA_IRQHandler+0xcdc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d009      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a23      	ldr	r2, [pc, #140]	; (8005540 <HAL_DMA_IRQHandler+0xce0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d004      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xc60>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a22      	ldr	r2, [pc, #136]	; (8005544 <HAL_DMA_IRQHandler+0xce4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d108      	bne.n	80054d2 <HAL_DMA_IRQHandler+0xc72>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0214 	bic.w	r2, r2, #20
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e007      	b.n	80054e2 <HAL_DMA_IRQHandler+0xc82>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 020a 	bic.w	r2, r2, #10
 80054e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 80b8 	beq.w	800566c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005504:	e0b2      	b.n	800566c <HAL_DMA_IRQHandler+0xe0c>
 8005506:	bf00      	nop
 8005508:	40020010 	.word	0x40020010
 800550c:	40020028 	.word	0x40020028
 8005510:	40020040 	.word	0x40020040
 8005514:	40020058 	.word	0x40020058
 8005518:	40020070 	.word	0x40020070
 800551c:	40020088 	.word	0x40020088
 8005520:	400200a0 	.word	0x400200a0
 8005524:	400200b8 	.word	0x400200b8
 8005528:	40020410 	.word	0x40020410
 800552c:	40020428 	.word	0x40020428
 8005530:	40020440 	.word	0x40020440
 8005534:	40020458 	.word	0x40020458
 8005538:	40020470 	.word	0x40020470
 800553c:	40020488 	.word	0x40020488
 8005540:	400204a0 	.word	0x400204a0
 8005544:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554c:	f003 031f 	and.w	r3, r3, #31
 8005550:	2208      	movs	r2, #8
 8005552:	409a      	lsls	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8088 	beq.w	800566e <HAL_DMA_IRQHandler+0xe0e>
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8082 	beq.w	800566e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a41      	ldr	r2, [pc, #260]	; (8005674 <HAL_DMA_IRQHandler+0xe14>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d04a      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a3f      	ldr	r2, [pc, #252]	; (8005678 <HAL_DMA_IRQHandler+0xe18>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d045      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a3e      	ldr	r2, [pc, #248]	; (800567c <HAL_DMA_IRQHandler+0xe1c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d040      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a3c      	ldr	r2, [pc, #240]	; (8005680 <HAL_DMA_IRQHandler+0xe20>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d03b      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a3b      	ldr	r2, [pc, #236]	; (8005684 <HAL_DMA_IRQHandler+0xe24>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d036      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a39      	ldr	r2, [pc, #228]	; (8005688 <HAL_DMA_IRQHandler+0xe28>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d031      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a38      	ldr	r2, [pc, #224]	; (800568c <HAL_DMA_IRQHandler+0xe2c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d02c      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a36      	ldr	r2, [pc, #216]	; (8005690 <HAL_DMA_IRQHandler+0xe30>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d027      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a35      	ldr	r2, [pc, #212]	; (8005694 <HAL_DMA_IRQHandler+0xe34>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d022      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a33      	ldr	r2, [pc, #204]	; (8005698 <HAL_DMA_IRQHandler+0xe38>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01d      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a32      	ldr	r2, [pc, #200]	; (800569c <HAL_DMA_IRQHandler+0xe3c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d018      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a30      	ldr	r2, [pc, #192]	; (80056a0 <HAL_DMA_IRQHandler+0xe40>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a2f      	ldr	r2, [pc, #188]	; (80056a4 <HAL_DMA_IRQHandler+0xe44>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00e      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a2d      	ldr	r2, [pc, #180]	; (80056a8 <HAL_DMA_IRQHandler+0xe48>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a2c      	ldr	r2, [pc, #176]	; (80056ac <HAL_DMA_IRQHandler+0xe4c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_DMA_IRQHandler+0xdaa>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2a      	ldr	r2, [pc, #168]	; (80056b0 <HAL_DMA_IRQHandler+0xe50>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d108      	bne.n	800561c <HAL_DMA_IRQHandler+0xdbc>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 021c 	bic.w	r2, r2, #28
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	e007      	b.n	800562c <HAL_DMA_IRQHandler+0xdcc>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 020e 	bic.w	r2, r2, #14
 800562a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	2201      	movs	r2, #1
 8005636:	409a      	lsls	r2, r3
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d009      	beq.n	800566e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
 8005662:	e004      	b.n	800566e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005664:	bf00      	nop
 8005666:	e002      	b.n	800566e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800566c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800566e:	3728      	adds	r7, #40	; 0x28
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40020010 	.word	0x40020010
 8005678:	40020028 	.word	0x40020028
 800567c:	40020040 	.word	0x40020040
 8005680:	40020058 	.word	0x40020058
 8005684:	40020070 	.word	0x40020070
 8005688:	40020088 	.word	0x40020088
 800568c:	400200a0 	.word	0x400200a0
 8005690:	400200b8 	.word	0x400200b8
 8005694:	40020410 	.word	0x40020410
 8005698:	40020428 	.word	0x40020428
 800569c:	40020440 	.word	0x40020440
 80056a0:	40020458 	.word	0x40020458
 80056a4:	40020470 	.word	0x40020470
 80056a8:	40020488 	.word	0x40020488
 80056ac:	400204a0 	.word	0x400204a0
 80056b0:	400204b8 	.word	0x400204b8

080056b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a42      	ldr	r2, [pc, #264]	; (80057cc <DMA_CalcBaseAndBitshift+0x118>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d04a      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a41      	ldr	r2, [pc, #260]	; (80057d0 <DMA_CalcBaseAndBitshift+0x11c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d045      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a3f      	ldr	r2, [pc, #252]	; (80057d4 <DMA_CalcBaseAndBitshift+0x120>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d040      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a3e      	ldr	r2, [pc, #248]	; (80057d8 <DMA_CalcBaseAndBitshift+0x124>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d03b      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a3c      	ldr	r2, [pc, #240]	; (80057dc <DMA_CalcBaseAndBitshift+0x128>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d036      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a3b      	ldr	r2, [pc, #236]	; (80057e0 <DMA_CalcBaseAndBitshift+0x12c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d031      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a39      	ldr	r2, [pc, #228]	; (80057e4 <DMA_CalcBaseAndBitshift+0x130>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d02c      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a38      	ldr	r2, [pc, #224]	; (80057e8 <DMA_CalcBaseAndBitshift+0x134>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d027      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a36      	ldr	r2, [pc, #216]	; (80057ec <DMA_CalcBaseAndBitshift+0x138>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a35      	ldr	r2, [pc, #212]	; (80057f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d01d      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a33      	ldr	r2, [pc, #204]	; (80057f4 <DMA_CalcBaseAndBitshift+0x140>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a32      	ldr	r2, [pc, #200]	; (80057f8 <DMA_CalcBaseAndBitshift+0x144>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a30      	ldr	r2, [pc, #192]	; (80057fc <DMA_CalcBaseAndBitshift+0x148>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2f      	ldr	r2, [pc, #188]	; (8005800 <DMA_CalcBaseAndBitshift+0x14c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a2d      	ldr	r2, [pc, #180]	; (8005804 <DMA_CalcBaseAndBitshift+0x150>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <DMA_CalcBaseAndBitshift+0xa8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a2c      	ldr	r2, [pc, #176]	; (8005808 <DMA_CalcBaseAndBitshift+0x154>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d101      	bne.n	8005760 <DMA_CalcBaseAndBitshift+0xac>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <DMA_CalcBaseAndBitshift+0xae>
 8005760:	2300      	movs	r3, #0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d024      	beq.n	80057b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	3b10      	subs	r3, #16
 800576e:	4a27      	ldr	r2, [pc, #156]	; (800580c <DMA_CalcBaseAndBitshift+0x158>)
 8005770:	fba2 2303 	umull	r2, r3, r2, r3
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	4a24      	ldr	r2, [pc, #144]	; (8005810 <DMA_CalcBaseAndBitshift+0x15c>)
 8005780:	5cd3      	ldrb	r3, [r2, r3]
 8005782:	461a      	mov	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b03      	cmp	r3, #3
 800578c:	d908      	bls.n	80057a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	4b1f      	ldr	r3, [pc, #124]	; (8005814 <DMA_CalcBaseAndBitshift+0x160>)
 8005796:	4013      	ands	r3, r2
 8005798:	1d1a      	adds	r2, r3, #4
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	659a      	str	r2, [r3, #88]	; 0x58
 800579e:	e00d      	b.n	80057bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	4b1b      	ldr	r3, [pc, #108]	; (8005814 <DMA_CalcBaseAndBitshift+0x160>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6593      	str	r3, [r2, #88]	; 0x58
 80057ae:	e005      	b.n	80057bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	40020010 	.word	0x40020010
 80057d0:	40020028 	.word	0x40020028
 80057d4:	40020040 	.word	0x40020040
 80057d8:	40020058 	.word	0x40020058
 80057dc:	40020070 	.word	0x40020070
 80057e0:	40020088 	.word	0x40020088
 80057e4:	400200a0 	.word	0x400200a0
 80057e8:	400200b8 	.word	0x400200b8
 80057ec:	40020410 	.word	0x40020410
 80057f0:	40020428 	.word	0x40020428
 80057f4:	40020440 	.word	0x40020440
 80057f8:	40020458 	.word	0x40020458
 80057fc:	40020470 	.word	0x40020470
 8005800:	40020488 	.word	0x40020488
 8005804:	400204a0 	.word	0x400204a0
 8005808:	400204b8 	.word	0x400204b8
 800580c:	aaaaaaab 	.word	0xaaaaaaab
 8005810:	0800cd24 	.word	0x0800cd24
 8005814:	fffffc00 	.word	0xfffffc00

08005818 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d120      	bne.n	800586e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	2b03      	cmp	r3, #3
 8005832:	d858      	bhi.n	80058e6 <DMA_CheckFifoParam+0xce>
 8005834:	a201      	add	r2, pc, #4	; (adr r2, 800583c <DMA_CheckFifoParam+0x24>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	0800584d 	.word	0x0800584d
 8005840:	0800585f 	.word	0x0800585f
 8005844:	0800584d 	.word	0x0800584d
 8005848:	080058e7 	.word	0x080058e7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d048      	beq.n	80058ea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800585c:	e045      	b.n	80058ea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005866:	d142      	bne.n	80058ee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800586c:	e03f      	b.n	80058ee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005876:	d123      	bne.n	80058c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	2b03      	cmp	r3, #3
 800587e:	d838      	bhi.n	80058f2 <DMA_CheckFifoParam+0xda>
 8005880:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <DMA_CheckFifoParam+0x70>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	08005899 	.word	0x08005899
 800588c:	0800589f 	.word	0x0800589f
 8005890:	08005899 	.word	0x08005899
 8005894:	080058b1 	.word	0x080058b1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
        break;
 800589c:	e030      	b.n	8005900 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d025      	beq.n	80058f6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058ae:	e022      	b.n	80058f6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058b8:	d11f      	bne.n	80058fa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058be:	e01c      	b.n	80058fa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d902      	bls.n	80058ce <DMA_CheckFifoParam+0xb6>
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d003      	beq.n	80058d4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80058cc:	e018      	b.n	8005900 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
        break;
 80058d2:	e015      	b.n	8005900 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00e      	beq.n	80058fe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
    break;
 80058e4:	e00b      	b.n	80058fe <DMA_CheckFifoParam+0xe6>
        break;
 80058e6:	bf00      	nop
 80058e8:	e00a      	b.n	8005900 <DMA_CheckFifoParam+0xe8>
        break;
 80058ea:	bf00      	nop
 80058ec:	e008      	b.n	8005900 <DMA_CheckFifoParam+0xe8>
        break;
 80058ee:	bf00      	nop
 80058f0:	e006      	b.n	8005900 <DMA_CheckFifoParam+0xe8>
        break;
 80058f2:	bf00      	nop
 80058f4:	e004      	b.n	8005900 <DMA_CheckFifoParam+0xe8>
        break;
 80058f6:	bf00      	nop
 80058f8:	e002      	b.n	8005900 <DMA_CheckFifoParam+0xe8>
        break;
 80058fa:	bf00      	nop
 80058fc:	e000      	b.n	8005900 <DMA_CheckFifoParam+0xe8>
    break;
 80058fe:	bf00      	nop
    }
  }

  return status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop

08005910 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a38      	ldr	r2, [pc, #224]	; (8005a04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d022      	beq.n	800596e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a36      	ldr	r2, [pc, #216]	; (8005a08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d01d      	beq.n	800596e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a35      	ldr	r2, [pc, #212]	; (8005a0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d018      	beq.n	800596e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a33      	ldr	r2, [pc, #204]	; (8005a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a32      	ldr	r2, [pc, #200]	; (8005a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00e      	beq.n	800596e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a30      	ldr	r2, [pc, #192]	; (8005a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d009      	beq.n	800596e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a2d      	ldr	r2, [pc, #180]	; (8005a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d101      	bne.n	8005972 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005972:	2300      	movs	r3, #0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01a      	beq.n	80059ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	b2db      	uxtb	r3, r3
 800597e:	3b08      	subs	r3, #8
 8005980:	4a28      	ldr	r2, [pc, #160]	; (8005a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4b26      	ldr	r3, [pc, #152]	; (8005a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	461a      	mov	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a24      	ldr	r2, [pc, #144]	; (8005a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800599c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	2201      	movs	r2, #1
 80059a6:	409a      	lsls	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059ac:	e024      	b.n	80059f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	3b10      	subs	r3, #16
 80059b6:	4a1e      	ldr	r2, [pc, #120]	; (8005a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	091b      	lsrs	r3, r3, #4
 80059be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4a1c      	ldr	r2, [pc, #112]	; (8005a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d806      	bhi.n	80059d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4a1b      	ldr	r2, [pc, #108]	; (8005a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d902      	bls.n	80059d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3308      	adds	r3, #8
 80059d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4b18      	ldr	r3, [pc, #96]	; (8005a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a16      	ldr	r2, [pc, #88]	; (8005a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80059e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	2201      	movs	r2, #1
 80059f2:	409a      	lsls	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	58025408 	.word	0x58025408
 8005a08:	5802541c 	.word	0x5802541c
 8005a0c:	58025430 	.word	0x58025430
 8005a10:	58025444 	.word	0x58025444
 8005a14:	58025458 	.word	0x58025458
 8005a18:	5802546c 	.word	0x5802546c
 8005a1c:	58025480 	.word	0x58025480
 8005a20:	58025494 	.word	0x58025494
 8005a24:	cccccccd 	.word	0xcccccccd
 8005a28:	16009600 	.word	0x16009600
 8005a2c:	58025880 	.word	0x58025880
 8005a30:	aaaaaaab 	.word	0xaaaaaaab
 8005a34:	400204b8 	.word	0x400204b8
 8005a38:	4002040f 	.word	0x4002040f
 8005a3c:	10008200 	.word	0x10008200
 8005a40:	40020880 	.word	0x40020880

08005a44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d04a      	beq.n	8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d847      	bhi.n	8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a25      	ldr	r2, [pc, #148]	; (8005afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d022      	beq.n	8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a24      	ldr	r2, [pc, #144]	; (8005b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d01d      	beq.n	8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a22      	ldr	r2, [pc, #136]	; (8005b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d018      	beq.n	8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a21      	ldr	r2, [pc, #132]	; (8005b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d013      	beq.n	8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00e      	beq.n	8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1e      	ldr	r2, [pc, #120]	; (8005b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d009      	beq.n	8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d004      	beq.n	8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d101      	bne.n	8005ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4b17      	ldr	r3, [pc, #92]	; (8005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005abe:	4413      	add	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a15      	ldr	r2, [pc, #84]	; (8005b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005acc:	671a      	str	r2, [r3, #112]	; 0x70
 8005ace:	e009      	b.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4b14      	ldr	r3, [pc, #80]	; (8005b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	461a      	mov	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a11      	ldr	r2, [pc, #68]	; (8005b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005ae2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	2201      	movs	r2, #1
 8005aea:	409a      	lsls	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	58025408 	.word	0x58025408
 8005b00:	5802541c 	.word	0x5802541c
 8005b04:	58025430 	.word	0x58025430
 8005b08:	58025444 	.word	0x58025444
 8005b0c:	58025458 	.word	0x58025458
 8005b10:	5802546c 	.word	0x5802546c
 8005b14:	58025480 	.word	0x58025480
 8005b18:	58025494 	.word	0x58025494
 8005b1c:	1600963f 	.word	0x1600963f
 8005b20:	58025940 	.word	0x58025940
 8005b24:	1000823f 	.word	0x1000823f
 8005b28:	40020940 	.word	0x40020940

08005b2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e0c6      	b.n	8005ccc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d102      	bne.n	8005b4c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fc fb3e 	bl	80021c8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2223      	movs	r2, #35	; 0x23
 8005b50:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b52:	4b60      	ldr	r3, [pc, #384]	; (8005cd4 <HAL_ETH_Init+0x1a8>)
 8005b54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b58:	4a5e      	ldr	r2, [pc, #376]	; (8005cd4 <HAL_ETH_Init+0x1a8>)
 8005b5a:	f043 0302 	orr.w	r3, r3, #2
 8005b5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b62:	4b5c      	ldr	r3, [pc, #368]	; (8005cd4 <HAL_ETH_Init+0x1a8>)
 8005b64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	7a1b      	ldrb	r3, [r3, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d103      	bne.n	8005b80 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f7fd fa55 	bl	8003028 <HAL_SYSCFG_ETHInterfaceSelect>
 8005b7e:	e003      	b.n	8005b88 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005b80:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005b84:	f7fd fa50 	bl	8003028 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ba0:	f7fd fa06 	bl	8002fb0 <HAL_GetTick>
 8005ba4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005ba6:	e00f      	b.n	8005bc8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005ba8:	f7fd fa02 	bl	8002fb0 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005bb6:	d907      	bls.n	8005bc8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2204      	movs	r2, #4
 8005bbc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	22e0      	movs	r2, #224	; 0xe0
 8005bc2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e081      	b.n	8005ccc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e6      	bne.n	8005ba8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fac0 	bl	8006160 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005be0:	f001 fe7a 	bl	80078d8 <HAL_RCC_GetHCLKFreq>
 8005be4:	4603      	mov	r3, r0
 8005be6:	4a3c      	ldr	r2, [pc, #240]	; (8005cd8 <HAL_ETH_Init+0x1ac>)
 8005be8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bec:	0c9a      	lsrs	r2, r3, #18
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3a01      	subs	r2, #1
 8005bf4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fa13 	bl	8006024 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005c14:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005c18:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d007      	beq.n	8005c36 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	22e0      	movs	r2, #224	; 0xe0
 8005c30:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e04a      	b.n	8005ccc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	f241 1308 	movw	r3, #4360	; 0x1108
 8005c3e:	4413      	add	r3, r2
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b26      	ldr	r3, [pc, #152]	; (8005cdc <HAL_ETH_Init+0x1b0>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6952      	ldr	r2, [r2, #20]
 8005c4a:	0052      	lsls	r2, r2, #1
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	6809      	ldr	r1, [r1, #0]
 8005c50:	431a      	orrs	r2, r3
 8005c52:	f241 1308 	movw	r3, #4360	; 0x1108
 8005c56:	440b      	add	r3, r1
 8005c58:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fad8 	bl	8006210 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fb1c 	bl	800629e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	3305      	adds	r3, #5
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	021a      	lsls	r2, r3, #8
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	3304      	adds	r3, #4
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	3303      	adds	r3, #3
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	061a      	lsls	r2, r3, #24
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	3302      	adds	r3, #2
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005ca4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005cb2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005cb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2210      	movs	r2, #16
 8005cc2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2210      	movs	r2, #16
 8005cc8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	58024400 	.word	0x58024400
 8005cd8:	431bde83 	.word	0x431bde83
 8005cdc:	ffff8001 	.word	0xffff8001

08005ce0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005cf2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	791b      	ldrb	r3, [r3, #4]
 8005cf8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005cfa:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	7b1b      	ldrb	r3, [r3, #12]
 8005d00:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005d02:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	7b5b      	ldrb	r3, [r3, #13]
 8005d08:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005d0a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	7b9b      	ldrb	r3, [r3, #14]
 8005d10:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005d12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	7bdb      	ldrb	r3, [r3, #15]
 8005d18:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005d1a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	7c12      	ldrb	r2, [r2, #16]
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	d102      	bne.n	8005d2a <ETH_SetMACConfig+0x4a>
 8005d24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005d28:	e000      	b.n	8005d2c <ETH_SetMACConfig+0x4c>
 8005d2a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005d2c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	7c52      	ldrb	r2, [r2, #17]
 8005d32:	2a00      	cmp	r2, #0
 8005d34:	d102      	bne.n	8005d3c <ETH_SetMACConfig+0x5c>
 8005d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d3a:	e000      	b.n	8005d3e <ETH_SetMACConfig+0x5e>
 8005d3c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005d3e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	7c9b      	ldrb	r3, [r3, #18]
 8005d44:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005d46:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005d4c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005d52:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	7f1b      	ldrb	r3, [r3, #28]
 8005d58:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005d5a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	7f5b      	ldrb	r3, [r3, #29]
 8005d60:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005d62:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	7f92      	ldrb	r2, [r2, #30]
 8005d68:	2a00      	cmp	r2, #0
 8005d6a:	d102      	bne.n	8005d72 <ETH_SetMACConfig+0x92>
 8005d6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d70:	e000      	b.n	8005d74 <ETH_SetMACConfig+0x94>
 8005d72:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005d74:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	7fdb      	ldrb	r3, [r3, #31]
 8005d7a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005d7c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	d102      	bne.n	8005d8e <ETH_SetMACConfig+0xae>
 8005d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d8c:	e000      	b.n	8005d90 <ETH_SetMACConfig+0xb0>
 8005d8e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005d90:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005d96:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d9e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005da0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4b56      	ldr	r3, [pc, #344]	; (8005f0c <ETH_SetMACConfig+0x22c>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6812      	ldr	r2, [r2, #0]
 8005db8:	68f9      	ldr	r1, [r7, #12]
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dca:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005dcc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dd4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005dd6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005dde:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005de0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005de8:	2a00      	cmp	r2, #0
 8005dea:	d102      	bne.n	8005df2 <ETH_SetMACConfig+0x112>
 8005dec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005df0:	e000      	b.n	8005df4 <ETH_SetMACConfig+0x114>
 8005df2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005df4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	4b42      	ldr	r3, [pc, #264]	; (8005f10 <ETH_SetMACConfig+0x230>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6812      	ldr	r2, [r2, #0]
 8005e0c:	68f9      	ldr	r1, [r7, #12]
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e18:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	4b3a      	ldr	r3, [pc, #232]	; (8005f14 <ETH_SetMACConfig+0x234>)
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	68f9      	ldr	r1, [r7, #12]
 8005e32:	430b      	orrs	r3, r1
 8005e34:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005e3c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005e42:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d101      	bne.n	8005e52 <ETH_SetMACConfig+0x172>
 8005e4e:	2280      	movs	r2, #128	; 0x80
 8005e50:	e000      	b.n	8005e54 <ETH_SetMACConfig+0x174>
 8005e52:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005e54:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e66:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6812      	ldr	r2, [r2, #0]
 8005e70:	68f9      	ldr	r1, [r7, #12]
 8005e72:	430b      	orrs	r3, r1
 8005e74:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005e7c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005e84:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e92:	f023 0103 	bic.w	r1, r3, #3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005eaa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005ec6:	2a00      	cmp	r2, #0
 8005ec8:	d101      	bne.n	8005ece <ETH_SetMACConfig+0x1ee>
 8005eca:	2240      	movs	r2, #64	; 0x40
 8005ecc:	e000      	b.n	8005ed0 <ETH_SetMACConfig+0x1f0>
 8005ece:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005ed0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005ed8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005eda:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005ee2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005ef0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005f00:	bf00      	nop
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	00048083 	.word	0x00048083
 8005f10:	c0f88000 	.word	0xc0f88000
 8005f14:	fffffef0 	.word	0xfffffef0

08005f18 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	4b38      	ldr	r3, [pc, #224]	; (8006010 <ETH_SetDMAConfig+0xf8>)
 8005f2e:	4013      	ands	r3, r2
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	6809      	ldr	r1, [r1, #0]
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005f3e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	791b      	ldrb	r3, [r3, #4]
 8005f44:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005f4a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	7b1b      	ldrb	r3, [r3, #12]
 8005f50:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	f241 0304 	movw	r3, #4100	; 0x1004
 8005f5e:	4413      	add	r3, r2
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b2c      	ldr	r3, [pc, #176]	; (8006014 <ETH_SetDMAConfig+0xfc>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005f72:	440b      	add	r3, r1
 8005f74:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	7b5b      	ldrb	r3, [r3, #13]
 8005f7a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b22      	ldr	r3, [pc, #136]	; (8006018 <ETH_SetDMAConfig+0x100>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6811      	ldr	r1, [r2, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005f9e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	7d1b      	ldrb	r3, [r3, #20]
 8005fa8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005faa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	7f5b      	ldrb	r3, [r3, #29]
 8005fb0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	f241 1304 	movw	r3, #4356	; 0x1104
 8005fbe:	4413      	add	r3, r2
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b16      	ldr	r3, [pc, #88]	; (800601c <ETH_SetDMAConfig+0x104>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6811      	ldr	r1, [r2, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	f241 1304 	movw	r3, #4356	; 0x1104
 8005fd2:	440b      	add	r3, r1
 8005fd4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	7f1b      	ldrb	r3, [r3, #28]
 8005fda:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	f241 1308 	movw	r3, #4360	; 0x1108
 8005fec:	4413      	add	r3, r2
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <ETH_SetDMAConfig+0x108>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6811      	ldr	r1, [r2, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	f241 1308 	movw	r3, #4360	; 0x1108
 8006000:	440b      	add	r3, r1
 8006002:	601a      	str	r2, [r3, #0]
}
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	ffff87fd 	.word	0xffff87fd
 8006014:	ffff2ffe 	.word	0xffff2ffe
 8006018:	fffec000 	.word	0xfffec000
 800601c:	ffc0efef 	.word	0xffc0efef
 8006020:	7fc0ffff 	.word	0x7fc0ffff

08006024 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b0a4      	sub	sp, #144	; 0x90
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006032:	2300      	movs	r3, #0
 8006034:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006036:	2300      	movs	r3, #0
 8006038:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800603c:	2300      	movs	r3, #0
 800603e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006048:	2301      	movs	r3, #1
 800604a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800604e:	2301      	movs	r3, #1
 8006050:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006054:	2300      	movs	r3, #0
 8006056:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800605a:	2301      	movs	r3, #1
 800605c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006064:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006066:	2300      	movs	r3, #0
 8006068:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800606c:	2300      	movs	r3, #0
 800606e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006070:	2300      	movs	r3, #0
 8006072:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006076:	2300      	movs	r3, #0
 8006078:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800607c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006080:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006082:	2300      	movs	r3, #0
 8006084:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006088:	2300      	movs	r3, #0
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006092:	2300      	movs	r3, #0
 8006094:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006098:	2300      	movs	r3, #0
 800609a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800609e:	2300      	movs	r3, #0
 80060a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80060a6:	2300      	movs	r3, #0
 80060a8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80060bc:	2320      	movs	r3, #32
 80060be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80060ce:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80060d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060d8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80060da:	2300      	movs	r3, #0
 80060dc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80060e0:	2302      	movs	r3, #2
 80060e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80060ec:	2300      	movs	r3, #0
 80060ee:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80060f2:	2300      	movs	r3, #0
 80060f4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80060fe:	2300      	movs	r3, #0
 8006100:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fde6 	bl	8005ce0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006114:	2301      	movs	r3, #1
 8006116:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006118:	2301      	movs	r3, #1
 800611a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800611c:	2300      	movs	r3, #0
 800611e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006120:	2300      	movs	r3, #0
 8006122:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006126:	2300      	movs	r3, #0
 8006128:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800612a:	2300      	movs	r3, #0
 800612c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800612e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006132:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006134:	2300      	movs	r3, #0
 8006136:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006138:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800613c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800613e:	2300      	movs	r3, #0
 8006140:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8006144:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006148:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800614a:	f107 0308 	add.w	r3, r7, #8
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff fee1 	bl	8005f18 <ETH_SetDMAConfig>
}
 8006156:	bf00      	nop
 8006158:	3790      	adds	r7, #144	; 0x90
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006170:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006178:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800617a:	f001 fbad 	bl	80078d8 <HAL_RCC_GetHCLKFreq>
 800617e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4a1e      	ldr	r2, [pc, #120]	; (80061fc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d908      	bls.n	800619a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4a1d      	ldr	r2, [pc, #116]	; (8006200 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d804      	bhi.n	800619a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e027      	b.n	80061ea <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	4a18      	ldr	r2, [pc, #96]	; (8006200 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d908      	bls.n	80061b4 <ETH_MAC_MDIO_ClkConfig+0x54>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4a17      	ldr	r2, [pc, #92]	; (8006204 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d204      	bcs.n	80061b4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	e01a      	b.n	80061ea <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4a13      	ldr	r2, [pc, #76]	; (8006204 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d303      	bcc.n	80061c4 <ETH_MAC_MDIO_ClkConfig+0x64>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4a12      	ldr	r2, [pc, #72]	; (8006208 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d911      	bls.n	80061e8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4a10      	ldr	r2, [pc, #64]	; (8006208 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d908      	bls.n	80061de <ETH_MAC_MDIO_ClkConfig+0x7e>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4a0f      	ldr	r2, [pc, #60]	; (800620c <ETH_MAC_MDIO_ClkConfig+0xac>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d804      	bhi.n	80061de <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e005      	b.n	80061ea <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e000      	b.n	80061ea <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80061e8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	01312cff 	.word	0x01312cff
 8006200:	02160ebf 	.word	0x02160ebf
 8006204:	03938700 	.word	0x03938700
 8006208:	05f5e0ff 	.word	0x05f5e0ff
 800620c:	08f0d17f 	.word	0x08f0d17f

08006210 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	e01d      	b.n	800625a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68d9      	ldr	r1, [r3, #12]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4613      	mov	r3, r2
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4413      	add	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	440b      	add	r3, r1
 800622e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2200      	movs	r2, #0
 800623a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2200      	movs	r2, #0
 8006240:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2200      	movs	r2, #0
 8006246:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	3206      	adds	r2, #6
 8006250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3301      	adds	r3, #1
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b03      	cmp	r3, #3
 800625e:	d9de      	bls.n	800621e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	f241 132c 	movw	r3, #4396	; 0x112c
 800626e:	4413      	add	r3, r2
 8006270:	2203      	movs	r2, #3
 8006272:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68d9      	ldr	r1, [r3, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	f241 1314 	movw	r3, #4372	; 0x1114
 8006280:	4413      	add	r3, r2
 8006282:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006290:	601a      	str	r2, [r3, #0]
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800629e:	b480      	push	{r7}
 80062a0:	b085      	sub	sp, #20
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	e024      	b.n	80062f6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6919      	ldr	r1, [r3, #16]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4613      	mov	r3, r2
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	4413      	add	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	440b      	add	r3, r1
 80062bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2200      	movs	r2, #0
 80062c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2200      	movs	r2, #0
 80062ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2200      	movs	r2, #0
 80062d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2200      	movs	r2, #0
 80062da:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3310      	adds	r3, #16
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d9d7      	bls.n	80062ac <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	f241 1330 	movw	r3, #4400	; 0x1130
 8006322:	4413      	add	r3, r2
 8006324:	2203      	movs	r2, #3
 8006326:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6919      	ldr	r1, [r3, #16]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	f241 131c 	movw	r3, #4380	; 0x111c
 8006334:	4413      	add	r3, r2
 8006336:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	f241 1328 	movw	r3, #4392	; 0x1128
 8006348:	4413      	add	r3, r2
 800634a:	6019      	str	r1, [r3, #0]
}
 800634c:	bf00      	nop
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006358:	b480      	push	{r7}
 800635a:	b089      	sub	sp, #36	; 0x24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006366:	4b89      	ldr	r3, [pc, #548]	; (800658c <HAL_GPIO_Init+0x234>)
 8006368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800636a:	e194      	b.n	8006696 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	2101      	movs	r1, #1
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	fa01 f303 	lsl.w	r3, r1, r3
 8006378:	4013      	ands	r3, r2
 800637a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 8186 	beq.w	8006690 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d00b      	beq.n	80063a4 <HAL_GPIO_Init+0x4c>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d007      	beq.n	80063a4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006398:	2b11      	cmp	r3, #17
 800639a:	d003      	beq.n	80063a4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	2b12      	cmp	r3, #18
 80063a2:	d130      	bne.n	8006406 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	2203      	movs	r2, #3
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	43db      	mvns	r3, r3
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	4013      	ands	r3, r2
 80063ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063da:	2201      	movs	r2, #1
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	fa02 f303 	lsl.w	r3, r2, r3
 80063e2:	43db      	mvns	r3, r3
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	4013      	ands	r3, r2
 80063e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	091b      	lsrs	r3, r3, #4
 80063f0:	f003 0201 	and.w	r2, r3, #1
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	2203      	movs	r2, #3
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	43db      	mvns	r3, r3
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	4013      	ands	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4313      	orrs	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2b02      	cmp	r3, #2
 800643c:	d003      	beq.n	8006446 <HAL_GPIO_Init+0xee>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2b12      	cmp	r3, #18
 8006444:	d123      	bne.n	800648e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	08da      	lsrs	r2, r3, #3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3208      	adds	r2, #8
 800644e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	220f      	movs	r2, #15
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	43db      	mvns	r3, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	4013      	ands	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	4313      	orrs	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	08da      	lsrs	r2, r3, #3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3208      	adds	r2, #8
 8006488:	69b9      	ldr	r1, [r7, #24]
 800648a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	2203      	movs	r2, #3
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	43db      	mvns	r3, r3
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	4013      	ands	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f003 0203 	and.w	r2, r3, #3
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 80e0 	beq.w	8006690 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064d0:	4b2f      	ldr	r3, [pc, #188]	; (8006590 <HAL_GPIO_Init+0x238>)
 80064d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064d6:	4a2e      	ldr	r2, [pc, #184]	; (8006590 <HAL_GPIO_Init+0x238>)
 80064d8:	f043 0302 	orr.w	r3, r3, #2
 80064dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80064e0:	4b2b      	ldr	r3, [pc, #172]	; (8006590 <HAL_GPIO_Init+0x238>)
 80064e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064ee:	4a29      	ldr	r2, [pc, #164]	; (8006594 <HAL_GPIO_Init+0x23c>)
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	089b      	lsrs	r3, r3, #2
 80064f4:	3302      	adds	r3, #2
 80064f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	220f      	movs	r2, #15
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43db      	mvns	r3, r3
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	4013      	ands	r3, r2
 8006510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a20      	ldr	r2, [pc, #128]	; (8006598 <HAL_GPIO_Init+0x240>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d052      	beq.n	80065c0 <HAL_GPIO_Init+0x268>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a1f      	ldr	r2, [pc, #124]	; (800659c <HAL_GPIO_Init+0x244>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d031      	beq.n	8006586 <HAL_GPIO_Init+0x22e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a1e      	ldr	r2, [pc, #120]	; (80065a0 <HAL_GPIO_Init+0x248>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d02b      	beq.n	8006582 <HAL_GPIO_Init+0x22a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <HAL_GPIO_Init+0x24c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d025      	beq.n	800657e <HAL_GPIO_Init+0x226>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <HAL_GPIO_Init+0x250>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01f      	beq.n	800657a <HAL_GPIO_Init+0x222>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a1b      	ldr	r2, [pc, #108]	; (80065ac <HAL_GPIO_Init+0x254>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d019      	beq.n	8006576 <HAL_GPIO_Init+0x21e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a1a      	ldr	r2, [pc, #104]	; (80065b0 <HAL_GPIO_Init+0x258>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <HAL_GPIO_Init+0x21a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a19      	ldr	r2, [pc, #100]	; (80065b4 <HAL_GPIO_Init+0x25c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00d      	beq.n	800656e <HAL_GPIO_Init+0x216>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a18      	ldr	r2, [pc, #96]	; (80065b8 <HAL_GPIO_Init+0x260>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d007      	beq.n	800656a <HAL_GPIO_Init+0x212>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a17      	ldr	r2, [pc, #92]	; (80065bc <HAL_GPIO_Init+0x264>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d101      	bne.n	8006566 <HAL_GPIO_Init+0x20e>
 8006562:	2309      	movs	r3, #9
 8006564:	e02d      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 8006566:	230a      	movs	r3, #10
 8006568:	e02b      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 800656a:	2308      	movs	r3, #8
 800656c:	e029      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 800656e:	2307      	movs	r3, #7
 8006570:	e027      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 8006572:	2306      	movs	r3, #6
 8006574:	e025      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 8006576:	2305      	movs	r3, #5
 8006578:	e023      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 800657a:	2304      	movs	r3, #4
 800657c:	e021      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 800657e:	2303      	movs	r3, #3
 8006580:	e01f      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 8006582:	2302      	movs	r3, #2
 8006584:	e01d      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 8006586:	2301      	movs	r3, #1
 8006588:	e01b      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 800658a:	bf00      	nop
 800658c:	58000080 	.word	0x58000080
 8006590:	58024400 	.word	0x58024400
 8006594:	58000400 	.word	0x58000400
 8006598:	58020000 	.word	0x58020000
 800659c:	58020400 	.word	0x58020400
 80065a0:	58020800 	.word	0x58020800
 80065a4:	58020c00 	.word	0x58020c00
 80065a8:	58021000 	.word	0x58021000
 80065ac:	58021400 	.word	0x58021400
 80065b0:	58021800 	.word	0x58021800
 80065b4:	58021c00 	.word	0x58021c00
 80065b8:	58022000 	.word	0x58022000
 80065bc:	58022400 	.word	0x58022400
 80065c0:	2300      	movs	r3, #0
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	f002 0203 	and.w	r2, r2, #3
 80065c8:	0092      	lsls	r2, r2, #2
 80065ca:	4093      	lsls	r3, r2
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065d2:	4938      	ldr	r1, [pc, #224]	; (80066b4 <HAL_GPIO_Init+0x35c>)
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	089b      	lsrs	r3, r3, #2
 80065d8:	3302      	adds	r3, #2
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	4013      	ands	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	43db      	mvns	r3, r3
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	4013      	ands	r3, r2
 8006618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	43db      	mvns	r3, r3
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	4013      	ands	r3, r2
 8006644:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800665a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	43db      	mvns	r3, r3
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	4013      	ands	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	3301      	adds	r3, #1
 8006694:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f47f ae63 	bne.w	800636c <HAL_GPIO_Init+0x14>
  }
}
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	3724      	adds	r7, #36	; 0x24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	58000400 	.word	0x58000400

080066b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	807b      	strh	r3, [r7, #2]
 80066c4:	4613      	mov	r3, r2
 80066c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066c8:	787b      	ldrb	r3, [r7, #1]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066ce:	887a      	ldrh	r2, [r7, #2]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80066d4:	e003      	b.n	80066de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80066d6:	887b      	ldrh	r3, [r7, #2]
 80066d8:	041a      	lsls	r2, r3, #16
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	619a      	str	r2, [r3, #24]
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	4603      	mov	r3, r0
 80066f2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80066f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066fc:	88fb      	ldrh	r3, [r7, #6]
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d008      	beq.n	8006716 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006708:	88fb      	ldrh	r3, [r7, #6]
 800670a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	4618      	mov	r0, r3
 8006712:	f000 f804 	bl	800671e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006716:	bf00      	nop
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	4603      	mov	r3, r0
 8006726:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006736:	b08f      	sub	sp, #60	; 0x3c
 8006738:	af0a      	add	r7, sp, #40	; 0x28
 800673a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e116      	b.n	8006974 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d106      	bne.n	8006766 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7fc f9df 	bl	8002b24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2203      	movs	r2, #3
 800676a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f006 f83d 	bl	800c804 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	687e      	ldr	r6, [r7, #4]
 8006792:	466d      	mov	r5, sp
 8006794:	f106 0410 	add.w	r4, r6, #16
 8006798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800679a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800679c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800679e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80067a8:	1d33      	adds	r3, r6, #4
 80067aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067ac:	6838      	ldr	r0, [r7, #0]
 80067ae:	f005 ffbb 	bl	800c728 <USB_CoreInit>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0d7      	b.n	8006974 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f006 f82b 	bl	800c826 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]
 80067d4:	e04a      	b.n	800686c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80067d6:	7bfa      	ldrb	r2, [r7, #15]
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	333d      	adds	r3, #61	; 0x3d
 80067e6:	2201      	movs	r2, #1
 80067e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80067ea:	7bfa      	ldrb	r2, [r7, #15]
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	440b      	add	r3, r1
 80067f8:	333c      	adds	r3, #60	; 0x3c
 80067fa:	7bfa      	ldrb	r2, [r7, #15]
 80067fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80067fe:	7bfa      	ldrb	r2, [r7, #15]
 8006800:	7bfb      	ldrb	r3, [r7, #15]
 8006802:	b298      	uxth	r0, r3
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	1a9b      	subs	r3, r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	3342      	adds	r3, #66	; 0x42
 8006812:	4602      	mov	r2, r0
 8006814:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006816:	7bfa      	ldrb	r2, [r7, #15]
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	333f      	adds	r3, #63	; 0x3f
 8006826:	2200      	movs	r2, #0
 8006828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800682a:	7bfa      	ldrb	r2, [r7, #15]
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	1a9b      	subs	r3, r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	3344      	adds	r3, #68	; 0x44
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800683e:	7bfa      	ldrb	r2, [r7, #15]
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	3348      	adds	r3, #72	; 0x48
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006852:	7bfa      	ldrb	r2, [r7, #15]
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	3350      	adds	r3, #80	; 0x50
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	3301      	adds	r3, #1
 800686a:	73fb      	strb	r3, [r7, #15]
 800686c:	7bfa      	ldrb	r2, [r7, #15]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	429a      	cmp	r2, r3
 8006874:	d3af      	bcc.n	80067d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]
 800687a:	e044      	b.n	8006906 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800687c:	7bfa      	ldrb	r2, [r7, #15]
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	4613      	mov	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006892:	7bfa      	ldrb	r2, [r7, #15]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80068a4:	7bfa      	ldrb	r2, [r7, #15]
 80068a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80068a8:	7bfa      	ldrb	r2, [r7, #15]
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	4613      	mov	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	1a9b      	subs	r3, r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80068be:	7bfa      	ldrb	r2, [r7, #15]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80068d4:	7bfa      	ldrb	r2, [r7, #15]
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4613      	mov	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	1a9b      	subs	r3, r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80068ea:	7bfa      	ldrb	r2, [r7, #15]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	1a9b      	subs	r3, r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	3301      	adds	r3, #1
 8006904:	73fb      	strb	r3, [r7, #15]
 8006906:	7bfa      	ldrb	r2, [r7, #15]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	d3b5      	bcc.n	800687c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	687e      	ldr	r6, [r7, #4]
 8006918:	466d      	mov	r5, sp
 800691a:	f106 0410 	add.w	r4, r6, #16
 800691e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006926:	e894 0003 	ldmia.w	r4, {r0, r1}
 800692a:	e885 0003 	stmia.w	r5, {r0, r1}
 800692e:	1d33      	adds	r3, r6, #4
 8006930:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006932:	6838      	ldr	r0, [r7, #0]
 8006934:	f005 ffa2 	bl	800c87c <USB_DevInit>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2202      	movs	r2, #2
 8006942:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e014      	b.n	8006974 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	2b01      	cmp	r3, #1
 8006960:	d102      	bne.n	8006968 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f80a 	bl	800697c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	f006 f944 	bl	800cbfa <USB_DevDisconnect>

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800697c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069aa:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	10000003 	.word	0x10000003

080069c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80069cc:	4b19      	ldr	r3, [pc, #100]	; (8006a34 <HAL_PWREx_ConfigSupply+0x70>)
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d00a      	beq.n	80069ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80069d8:	4b16      	ldr	r3, [pc, #88]	; (8006a34 <HAL_PWREx_ConfigSupply+0x70>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d001      	beq.n	80069ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e01f      	b.n	8006a2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e01d      	b.n	8006a2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80069ee:	4b11      	ldr	r3, [pc, #68]	; (8006a34 <HAL_PWREx_ConfigSupply+0x70>)
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f023 0207 	bic.w	r2, r3, #7
 80069f6:	490f      	ldr	r1, [pc, #60]	; (8006a34 <HAL_PWREx_ConfigSupply+0x70>)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80069fe:	f7fc fad7 	bl	8002fb0 <HAL_GetTick>
 8006a02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a04:	e009      	b.n	8006a1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a06:	f7fc fad3 	bl	8002fb0 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a14:	d901      	bls.n	8006a1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e007      	b.n	8006a2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a1a:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <HAL_PWREx_ConfigSupply+0x70>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a26:	d1ee      	bne.n	8006a06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	58024800 	.word	0x58024800

08006a38 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006a3c:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a46:	60d3      	str	r3, [r2, #12]
}
 8006a48:	bf00      	nop
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	58024800 	.word	0x58024800

08006a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08c      	sub	sp, #48	; 0x30
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e3ff      	b.n	800726a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8087 	beq.w	8006b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a78:	4b99      	ldr	r3, [pc, #612]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a82:	4b97      	ldr	r3, [pc, #604]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	2b10      	cmp	r3, #16
 8006a8c:	d007      	beq.n	8006a9e <HAL_RCC_OscConfig+0x46>
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	2b18      	cmp	r3, #24
 8006a92:	d110      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x5e>
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d10b      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a9e:	4b90      	ldr	r3, [pc, #576]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d06c      	beq.n	8006b84 <HAL_RCC_OscConfig+0x12c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d168      	bne.n	8006b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e3d9      	b.n	800726a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006abe:	d106      	bne.n	8006ace <HAL_RCC_OscConfig+0x76>
 8006ac0:	4b87      	ldr	r3, [pc, #540]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a86      	ldr	r2, [pc, #536]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	e02e      	b.n	8006b2c <HAL_RCC_OscConfig+0xd4>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10c      	bne.n	8006af0 <HAL_RCC_OscConfig+0x98>
 8006ad6:	4b82      	ldr	r3, [pc, #520]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a81      	ldr	r2, [pc, #516]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	4b7f      	ldr	r3, [pc, #508]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a7e      	ldr	r2, [pc, #504]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	e01d      	b.n	8006b2c <HAL_RCC_OscConfig+0xd4>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006af8:	d10c      	bne.n	8006b14 <HAL_RCC_OscConfig+0xbc>
 8006afa:	4b79      	ldr	r3, [pc, #484]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a78      	ldr	r2, [pc, #480]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	4b76      	ldr	r3, [pc, #472]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a75      	ldr	r2, [pc, #468]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	e00b      	b.n	8006b2c <HAL_RCC_OscConfig+0xd4>
 8006b14:	4b72      	ldr	r3, [pc, #456]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a71      	ldr	r2, [pc, #452]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	4b6f      	ldr	r3, [pc, #444]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a6e      	ldr	r2, [pc, #440]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d013      	beq.n	8006b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fc fa3c 	bl	8002fb0 <HAL_GetTick>
 8006b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b3c:	f7fc fa38 	bl	8002fb0 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b64      	cmp	r3, #100	; 0x64
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e38d      	b.n	800726a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b4e:	4b64      	ldr	r3, [pc, #400]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0xe4>
 8006b5a:	e014      	b.n	8006b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fc fa28 	bl	8002fb0 <HAL_GetTick>
 8006b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b64:	f7fc fa24 	bl	8002fb0 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b64      	cmp	r3, #100	; 0x64
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e379      	b.n	800726a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b76:	4b5a      	ldr	r3, [pc, #360]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0x10c>
 8006b82:	e000      	b.n	8006b86 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 80ae 	beq.w	8006cf0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b94:	4b52      	ldr	r3, [pc, #328]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b9e:	4b50      	ldr	r3, [pc, #320]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d007      	beq.n	8006bba <HAL_RCC_OscConfig+0x162>
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	2b18      	cmp	r3, #24
 8006bae:	d13a      	bne.n	8006c26 <HAL_RCC_OscConfig+0x1ce>
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d135      	bne.n	8006c26 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bba:	4b49      	ldr	r3, [pc, #292]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d005      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x17a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e34b      	b.n	800726a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bd2:	f7fc fa1d 	bl	8003010 <HAL_GetREVID>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d817      	bhi.n	8006c10 <HAL_RCC_OscConfig+0x1b8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2b40      	cmp	r3, #64	; 0x40
 8006be6:	d108      	bne.n	8006bfa <HAL_RCC_OscConfig+0x1a2>
 8006be8:	4b3d      	ldr	r3, [pc, #244]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006bf0:	4a3b      	ldr	r2, [pc, #236]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bf8:	e07a      	b.n	8006cf0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bfa:	4b39      	ldr	r3, [pc, #228]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	031b      	lsls	r3, r3, #12
 8006c08:	4935      	ldr	r1, [pc, #212]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c0e:	e06f      	b.n	8006cf0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c10:	4b33      	ldr	r3, [pc, #204]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	061b      	lsls	r3, r3, #24
 8006c1e:	4930      	ldr	r1, [pc, #192]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c24:	e064      	b.n	8006cf0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d045      	beq.n	8006cba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f023 0219 	bic.w	r2, r3, #25
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	4929      	ldr	r1, [pc, #164]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c40:	f7fc f9b6 	bl	8002fb0 <HAL_GetTick>
 8006c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c48:	f7fc f9b2 	bl	8002fb0 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e307      	b.n	800726a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c5a:	4b21      	ldr	r3, [pc, #132]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f0      	beq.n	8006c48 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c66:	f7fc f9d3 	bl	8003010 <HAL_GetREVID>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d817      	bhi.n	8006ca4 <HAL_RCC_OscConfig+0x24c>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	2b40      	cmp	r3, #64	; 0x40
 8006c7a:	d108      	bne.n	8006c8e <HAL_RCC_OscConfig+0x236>
 8006c7c:	4b18      	ldr	r3, [pc, #96]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c84:	4a16      	ldr	r2, [pc, #88]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8a:	6053      	str	r3, [r2, #4]
 8006c8c:	e030      	b.n	8006cf0 <HAL_RCC_OscConfig+0x298>
 8006c8e:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	031b      	lsls	r3, r3, #12
 8006c9c:	4910      	ldr	r1, [pc, #64]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	604b      	str	r3, [r1, #4]
 8006ca2:	e025      	b.n	8006cf0 <HAL_RCC_OscConfig+0x298>
 8006ca4:	4b0e      	ldr	r3, [pc, #56]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	061b      	lsls	r3, r3, #24
 8006cb2:	490b      	ldr	r1, [pc, #44]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	604b      	str	r3, [r1, #4]
 8006cb8:	e01a      	b.n	8006cf0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cba:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a08      	ldr	r2, [pc, #32]	; (8006ce0 <HAL_RCC_OscConfig+0x288>)
 8006cc0:	f023 0301 	bic.w	r3, r3, #1
 8006cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc6:	f7fc f973 	bl	8002fb0 <HAL_GetTick>
 8006cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ccc:	e00a      	b.n	8006ce4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cce:	f7fc f96f 	bl	8002fb0 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d903      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e2c4      	b.n	800726a <HAL_RCC_OscConfig+0x812>
 8006ce0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ce4:	4ba4      	ldr	r3, [pc, #656]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1ee      	bne.n	8006cce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 80a9 	beq.w	8006e50 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cfe:	4b9e      	ldr	r3, [pc, #632]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d08:	4b9b      	ldr	r3, [pc, #620]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d007      	beq.n	8006d24 <HAL_RCC_OscConfig+0x2cc>
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b18      	cmp	r3, #24
 8006d18:	d13a      	bne.n	8006d90 <HAL_RCC_OscConfig+0x338>
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f003 0303 	and.w	r3, r3, #3
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d135      	bne.n	8006d90 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d24:	4b94      	ldr	r3, [pc, #592]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <HAL_RCC_OscConfig+0x2e4>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	2b80      	cmp	r3, #128	; 0x80
 8006d36:	d001      	beq.n	8006d3c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e296      	b.n	800726a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d3c:	f7fc f968 	bl	8003010 <HAL_GetREVID>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d817      	bhi.n	8006d7a <HAL_RCC_OscConfig+0x322>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d108      	bne.n	8006d64 <HAL_RCC_OscConfig+0x30c>
 8006d52:	4b89      	ldr	r3, [pc, #548]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d5a:	4a87      	ldr	r2, [pc, #540]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006d5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d60:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d62:	e075      	b.n	8006e50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d64:	4b84      	ldr	r3, [pc, #528]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	069b      	lsls	r3, r3, #26
 8006d72:	4981      	ldr	r1, [pc, #516]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d78:	e06a      	b.n	8006e50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d7a:	4b7f      	ldr	r3, [pc, #508]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	061b      	lsls	r3, r3, #24
 8006d88:	497b      	ldr	r1, [pc, #492]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d8e:	e05f      	b.n	8006e50 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d042      	beq.n	8006e1e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006d98:	4b77      	ldr	r3, [pc, #476]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a76      	ldr	r2, [pc, #472]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da4:	f7fc f904 	bl	8002fb0 <HAL_GetTick>
 8006da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006dac:	f7fc f900 	bl	8002fb0 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e255      	b.n	800726a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006dbe:	4b6e      	ldr	r3, [pc, #440]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f0      	beq.n	8006dac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dca:	f7fc f921 	bl	8003010 <HAL_GetREVID>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d817      	bhi.n	8006e08 <HAL_RCC_OscConfig+0x3b0>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d108      	bne.n	8006df2 <HAL_RCC_OscConfig+0x39a>
 8006de0:	4b65      	ldr	r3, [pc, #404]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006de8:	4a63      	ldr	r2, [pc, #396]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006dea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dee:	6053      	str	r3, [r2, #4]
 8006df0:	e02e      	b.n	8006e50 <HAL_RCC_OscConfig+0x3f8>
 8006df2:	4b61      	ldr	r3, [pc, #388]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	069b      	lsls	r3, r3, #26
 8006e00:	495d      	ldr	r1, [pc, #372]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	604b      	str	r3, [r1, #4]
 8006e06:	e023      	b.n	8006e50 <HAL_RCC_OscConfig+0x3f8>
 8006e08:	4b5b      	ldr	r3, [pc, #364]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	061b      	lsls	r3, r3, #24
 8006e16:	4958      	ldr	r1, [pc, #352]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60cb      	str	r3, [r1, #12]
 8006e1c:	e018      	b.n	8006e50 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e1e:	4b56      	ldr	r3, [pc, #344]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a55      	ldr	r2, [pc, #340]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2a:	f7fc f8c1 	bl	8002fb0 <HAL_GetTick>
 8006e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e30:	e008      	b.n	8006e44 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e32:	f7fc f8bd 	bl	8002fb0 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e212      	b.n	800726a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e44:	4b4c      	ldr	r3, [pc, #304]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1f0      	bne.n	8006e32 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d036      	beq.n	8006eca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d019      	beq.n	8006e98 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e64:	4b44      	ldr	r3, [pc, #272]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e68:	4a43      	ldr	r2, [pc, #268]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006e6a:	f043 0301 	orr.w	r3, r3, #1
 8006e6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e70:	f7fc f89e 	bl	8002fb0 <HAL_GetTick>
 8006e74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e78:	f7fc f89a 	bl	8002fb0 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e1ef      	b.n	800726a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e8a:	4b3b      	ldr	r3, [pc, #236]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0f0      	beq.n	8006e78 <HAL_RCC_OscConfig+0x420>
 8006e96:	e018      	b.n	8006eca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e98:	4b37      	ldr	r3, [pc, #220]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e9c:	4a36      	ldr	r2, [pc, #216]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006e9e:	f023 0301 	bic.w	r3, r3, #1
 8006ea2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea4:	f7fc f884 	bl	8002fb0 <HAL_GetTick>
 8006ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eac:	f7fc f880 	bl	8002fb0 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e1d5      	b.n	800726a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ebe:	4b2e      	ldr	r3, [pc, #184]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f0      	bne.n	8006eac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d036      	beq.n	8006f44 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d019      	beq.n	8006f12 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ede:	4b26      	ldr	r3, [pc, #152]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a25      	ldr	r2, [pc, #148]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ee8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006eea:	f7fc f861 	bl	8002fb0 <HAL_GetTick>
 8006eee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006ef2:	f7fc f85d 	bl	8002fb0 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e1b2      	b.n	800726a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f04:	4b1c      	ldr	r3, [pc, #112]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0f0      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x49a>
 8006f10:	e018      	b.n	8006f44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f12:	4b19      	ldr	r3, [pc, #100]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a18      	ldr	r2, [pc, #96]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006f18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f1e:	f7fc f847 	bl	8002fb0 <HAL_GetTick>
 8006f22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f24:	e008      	b.n	8006f38 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f26:	f7fc f843 	bl	8002fb0 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d901      	bls.n	8006f38 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e198      	b.n	800726a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f38:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <HAL_RCC_OscConfig+0x520>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f0      	bne.n	8006f26 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 8085 	beq.w	800705c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f52:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <HAL_RCC_OscConfig+0x524>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a09      	ldr	r2, [pc, #36]	; (8006f7c <HAL_RCC_OscConfig+0x524>)
 8006f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f5e:	f7fc f827 	bl	8002fb0 <HAL_GetTick>
 8006f62:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f64:	e00c      	b.n	8006f80 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f66:	f7fc f823 	bl	8002fb0 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b64      	cmp	r3, #100	; 0x64
 8006f72:	d905      	bls.n	8006f80 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e178      	b.n	800726a <HAL_RCC_OscConfig+0x812>
 8006f78:	58024400 	.word	0x58024400
 8006f7c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f80:	4b96      	ldr	r3, [pc, #600]	; (80071dc <HAL_RCC_OscConfig+0x784>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0ec      	beq.n	8006f66 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d106      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x54a>
 8006f94:	4b92      	ldr	r3, [pc, #584]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f98:	4a91      	ldr	r2, [pc, #580]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006f9a:	f043 0301 	orr.w	r3, r3, #1
 8006f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006fa0:	e02d      	b.n	8006ffe <HAL_RCC_OscConfig+0x5a6>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10c      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x56c>
 8006faa:	4b8d      	ldr	r3, [pc, #564]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	4a8c      	ldr	r2, [pc, #560]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006fb0:	f023 0301 	bic.w	r3, r3, #1
 8006fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8006fb6:	4b8a      	ldr	r3, [pc, #552]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fba:	4a89      	ldr	r2, [pc, #548]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006fbc:	f023 0304 	bic.w	r3, r3, #4
 8006fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8006fc2:	e01c      	b.n	8006ffe <HAL_RCC_OscConfig+0x5a6>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2b05      	cmp	r3, #5
 8006fca:	d10c      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x58e>
 8006fcc:	4b84      	ldr	r3, [pc, #528]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd0:	4a83      	ldr	r2, [pc, #524]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006fd2:	f043 0304 	orr.w	r3, r3, #4
 8006fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd8:	4b81      	ldr	r3, [pc, #516]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fdc:	4a80      	ldr	r2, [pc, #512]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006fde:	f043 0301 	orr.w	r3, r3, #1
 8006fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe4:	e00b      	b.n	8006ffe <HAL_RCC_OscConfig+0x5a6>
 8006fe6:	4b7e      	ldr	r3, [pc, #504]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fea:	4a7d      	ldr	r2, [pc, #500]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006fec:	f023 0301 	bic.w	r3, r3, #1
 8006ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff2:	4b7b      	ldr	r3, [pc, #492]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff6:	4a7a      	ldr	r2, [pc, #488]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8006ff8:	f023 0304 	bic.w	r3, r3, #4
 8006ffc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d015      	beq.n	8007032 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007006:	f7fb ffd3 	bl	8002fb0 <HAL_GetTick>
 800700a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800700c:	e00a      	b.n	8007024 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800700e:	f7fb ffcf 	bl	8002fb0 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	f241 3288 	movw	r2, #5000	; 0x1388
 800701c:	4293      	cmp	r3, r2
 800701e:	d901      	bls.n	8007024 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e122      	b.n	800726a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007024:	4b6e      	ldr	r3, [pc, #440]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0ee      	beq.n	800700e <HAL_RCC_OscConfig+0x5b6>
 8007030:	e014      	b.n	800705c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007032:	f7fb ffbd 	bl	8002fb0 <HAL_GetTick>
 8007036:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007038:	e00a      	b.n	8007050 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800703a:	f7fb ffb9 	bl	8002fb0 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	f241 3288 	movw	r2, #5000	; 0x1388
 8007048:	4293      	cmp	r3, r2
 800704a:	d901      	bls.n	8007050 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e10c      	b.n	800726a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007050:	4b63      	ldr	r3, [pc, #396]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1ee      	bne.n	800703a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 8101 	beq.w	8007268 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007066:	4b5e      	ldr	r3, [pc, #376]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800706e:	2b18      	cmp	r3, #24
 8007070:	f000 80bc 	beq.w	80071ec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	2b02      	cmp	r3, #2
 800707a:	f040 8095 	bne.w	80071a8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800707e:	4b58      	ldr	r3, [pc, #352]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a57      	ldr	r2, [pc, #348]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708a:	f7fb ff91 	bl	8002fb0 <HAL_GetTick>
 800708e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007090:	e008      	b.n	80070a4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007092:	f7fb ff8d 	bl	8002fb0 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d901      	bls.n	80070a4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e0e2      	b.n	800726a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070a4:	4b4e      	ldr	r3, [pc, #312]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1f0      	bne.n	8007092 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070b0:	4b4b      	ldr	r3, [pc, #300]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 80070b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070b4:	4b4b      	ldr	r3, [pc, #300]	; (80071e4 <HAL_RCC_OscConfig+0x78c>)
 80070b6:	4013      	ands	r3, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80070c0:	0112      	lsls	r2, r2, #4
 80070c2:	430a      	orrs	r2, r1
 80070c4:	4946      	ldr	r1, [pc, #280]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	628b      	str	r3, [r1, #40]	; 0x28
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	3b01      	subs	r3, #1
 80070d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d8:	3b01      	subs	r3, #1
 80070da:	025b      	lsls	r3, r3, #9
 80070dc:	b29b      	uxth	r3, r3
 80070de:	431a      	orrs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e4:	3b01      	subs	r3, #1
 80070e6:	041b      	lsls	r3, r3, #16
 80070e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f2:	3b01      	subs	r3, #1
 80070f4:	061b      	lsls	r3, r3, #24
 80070f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070fa:	4939      	ldr	r1, [pc, #228]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007100:	4b37      	ldr	r3, [pc, #220]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	4a36      	ldr	r2, [pc, #216]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007106:	f023 0301 	bic.w	r3, r3, #1
 800710a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800710c:	4b34      	ldr	r3, [pc, #208]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 800710e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007110:	4b35      	ldr	r3, [pc, #212]	; (80071e8 <HAL_RCC_OscConfig+0x790>)
 8007112:	4013      	ands	r3, r2
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007118:	00d2      	lsls	r2, r2, #3
 800711a:	4931      	ldr	r1, [pc, #196]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 800711c:	4313      	orrs	r3, r2
 800711e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007120:	4b2f      	ldr	r3, [pc, #188]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	f023 020c 	bic.w	r2, r3, #12
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	492c      	ldr	r1, [pc, #176]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 800712e:	4313      	orrs	r3, r2
 8007130:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007132:	4b2b      	ldr	r3, [pc, #172]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007136:	f023 0202 	bic.w	r2, r3, #2
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	4928      	ldr	r1, [pc, #160]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007140:	4313      	orrs	r3, r2
 8007142:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007144:	4b26      	ldr	r3, [pc, #152]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	4a25      	ldr	r2, [pc, #148]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 800714a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800714e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007150:	4b23      	ldr	r3, [pc, #140]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007154:	4a22      	ldr	r2, [pc, #136]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800715a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800715c:	4b20      	ldr	r3, [pc, #128]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	4a1f      	ldr	r2, [pc, #124]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007168:	4b1d      	ldr	r3, [pc, #116]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	4a1c      	ldr	r2, [pc, #112]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007174:	4b1a      	ldr	r3, [pc, #104]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a19      	ldr	r2, [pc, #100]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 800717a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800717e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fb ff16 	bl	8002fb0 <HAL_GetTick>
 8007184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007188:	f7fb ff12 	bl	8002fb0 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e067      	b.n	800726a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800719a:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0f0      	beq.n	8007188 <HAL_RCC_OscConfig+0x730>
 80071a6:	e05f      	b.n	8007268 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071a8:	4b0d      	ldr	r3, [pc, #52]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a0c      	ldr	r2, [pc, #48]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 80071ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b4:	f7fb fefc 	bl	8002fb0 <HAL_GetTick>
 80071b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071bc:	f7fb fef8 	bl	8002fb0 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e04d      	b.n	800726a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071ce:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <HAL_RCC_OscConfig+0x788>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f0      	bne.n	80071bc <HAL_RCC_OscConfig+0x764>
 80071da:	e045      	b.n	8007268 <HAL_RCC_OscConfig+0x810>
 80071dc:	58024800 	.word	0x58024800
 80071e0:	58024400 	.word	0x58024400
 80071e4:	fffffc0c 	.word	0xfffffc0c
 80071e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80071ec:	4b21      	ldr	r3, [pc, #132]	; (8007274 <HAL_RCC_OscConfig+0x81c>)
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80071f2:	4b20      	ldr	r3, [pc, #128]	; (8007274 <HAL_RCC_OscConfig+0x81c>)
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d031      	beq.n	8007264 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f003 0203 	and.w	r2, r3, #3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800720a:	429a      	cmp	r2, r3
 800720c:	d12a      	bne.n	8007264 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	091b      	lsrs	r3, r3, #4
 8007212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800721a:	429a      	cmp	r2, r3
 800721c:	d122      	bne.n	8007264 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007228:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800722a:	429a      	cmp	r2, r3
 800722c:	d11a      	bne.n	8007264 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	0a5b      	lsrs	r3, r3, #9
 8007232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800723c:	429a      	cmp	r2, r3
 800723e:	d111      	bne.n	8007264 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	0c1b      	lsrs	r3, r3, #16
 8007244:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800724e:	429a      	cmp	r2, r3
 8007250:	d108      	bne.n	8007264 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	0e1b      	lsrs	r3, r3, #24
 8007256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007260:	429a      	cmp	r2, r3
 8007262:	d001      	beq.n	8007268 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e000      	b.n	800726a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3730      	adds	r7, #48	; 0x30
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	58024400 	.word	0x58024400

08007278 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e19c      	b.n	80075c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800728c:	4b8a      	ldr	r3, [pc, #552]	; (80074b8 <HAL_RCC_ClockConfig+0x240>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d910      	bls.n	80072bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729a:	4b87      	ldr	r3, [pc, #540]	; (80074b8 <HAL_RCC_ClockConfig+0x240>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f023 020f 	bic.w	r2, r3, #15
 80072a2:	4985      	ldr	r1, [pc, #532]	; (80074b8 <HAL_RCC_ClockConfig+0x240>)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072aa:	4b83      	ldr	r3, [pc, #524]	; (80074b8 <HAL_RCC_ClockConfig+0x240>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d001      	beq.n	80072bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e184      	b.n	80075c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d010      	beq.n	80072ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	4b7b      	ldr	r3, [pc, #492]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d908      	bls.n	80072ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072d8:	4b78      	ldr	r3, [pc, #480]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	4975      	ldr	r1, [pc, #468]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d010      	beq.n	8007318 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	695a      	ldr	r2, [r3, #20]
 80072fa:	4b70      	ldr	r3, [pc, #448]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007302:	429a      	cmp	r2, r3
 8007304:	d908      	bls.n	8007318 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007306:	4b6d      	ldr	r3, [pc, #436]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	496a      	ldr	r1, [pc, #424]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 8007314:	4313      	orrs	r3, r2
 8007316:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0310 	and.w	r3, r3, #16
 8007320:	2b00      	cmp	r3, #0
 8007322:	d010      	beq.n	8007346 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	699a      	ldr	r2, [r3, #24]
 8007328:	4b64      	ldr	r3, [pc, #400]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007330:	429a      	cmp	r2, r3
 8007332:	d908      	bls.n	8007346 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007334:	4b61      	ldr	r3, [pc, #388]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	495e      	ldr	r1, [pc, #376]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 8007342:	4313      	orrs	r3, r2
 8007344:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b00      	cmp	r3, #0
 8007350:	d010      	beq.n	8007374 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69da      	ldr	r2, [r3, #28]
 8007356:	4b59      	ldr	r3, [pc, #356]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800735e:	429a      	cmp	r2, r3
 8007360:	d908      	bls.n	8007374 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007362:	4b56      	ldr	r3, [pc, #344]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	4953      	ldr	r1, [pc, #332]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 8007370:	4313      	orrs	r3, r2
 8007372:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d010      	beq.n	80073a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	4b4d      	ldr	r3, [pc, #308]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	f003 030f 	and.w	r3, r3, #15
 800738c:	429a      	cmp	r2, r3
 800738e:	d908      	bls.n	80073a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007390:	4b4a      	ldr	r3, [pc, #296]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	f023 020f 	bic.w	r2, r3, #15
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	4947      	ldr	r1, [pc, #284]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d055      	beq.n	800745a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80073ae:	4b43      	ldr	r3, [pc, #268]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	4940      	ldr	r1, [pc, #256]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d107      	bne.n	80073d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073c8:	4b3c      	ldr	r3, [pc, #240]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d121      	bne.n	8007418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e0f6      	b.n	80075c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d107      	bne.n	80073f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073e0:	4b36      	ldr	r3, [pc, #216]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d115      	bne.n	8007418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e0ea      	b.n	80075c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d107      	bne.n	8007408 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073f8:	4b30      	ldr	r3, [pc, #192]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007400:	2b00      	cmp	r3, #0
 8007402:	d109      	bne.n	8007418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e0de      	b.n	80075c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007408:	4b2c      	ldr	r3, [pc, #176]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e0d6      	b.n	80075c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007418:	4b28      	ldr	r3, [pc, #160]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f023 0207 	bic.w	r2, r3, #7
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	4925      	ldr	r1, [pc, #148]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 8007426:	4313      	orrs	r3, r2
 8007428:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742a:	f7fb fdc1 	bl	8002fb0 <HAL_GetTick>
 800742e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007430:	e00a      	b.n	8007448 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007432:	f7fb fdbd 	bl	8002fb0 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007440:	4293      	cmp	r3, r2
 8007442:	d901      	bls.n	8007448 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e0be      	b.n	80075c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007448:	4b1c      	ldr	r3, [pc, #112]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	429a      	cmp	r2, r3
 8007458:	d1eb      	bne.n	8007432 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d010      	beq.n	8007488 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	4b14      	ldr	r3, [pc, #80]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	429a      	cmp	r2, r3
 8007474:	d208      	bcs.n	8007488 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007476:	4b11      	ldr	r3, [pc, #68]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	f023 020f 	bic.w	r2, r3, #15
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	490e      	ldr	r1, [pc, #56]	; (80074bc <HAL_RCC_ClockConfig+0x244>)
 8007484:	4313      	orrs	r3, r2
 8007486:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007488:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <HAL_RCC_ClockConfig+0x240>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 030f 	and.w	r3, r3, #15
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d214      	bcs.n	80074c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007496:	4b08      	ldr	r3, [pc, #32]	; (80074b8 <HAL_RCC_ClockConfig+0x240>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f023 020f 	bic.w	r2, r3, #15
 800749e:	4906      	ldr	r1, [pc, #24]	; (80074b8 <HAL_RCC_ClockConfig+0x240>)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074a6:	4b04      	ldr	r3, [pc, #16]	; (80074b8 <HAL_RCC_ClockConfig+0x240>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 030f 	and.w	r3, r3, #15
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d005      	beq.n	80074c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e086      	b.n	80075c6 <HAL_RCC_ClockConfig+0x34e>
 80074b8:	52002000 	.word	0x52002000
 80074bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d010      	beq.n	80074ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691a      	ldr	r2, [r3, #16]
 80074d0:	4b3f      	ldr	r3, [pc, #252]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074d8:	429a      	cmp	r2, r3
 80074da:	d208      	bcs.n	80074ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074dc:	4b3c      	ldr	r3, [pc, #240]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	4939      	ldr	r1, [pc, #228]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d010      	beq.n	800751c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	695a      	ldr	r2, [r3, #20]
 80074fe:	4b34      	ldr	r3, [pc, #208]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007506:	429a      	cmp	r2, r3
 8007508:	d208      	bcs.n	800751c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800750a:	4b31      	ldr	r3, [pc, #196]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	492e      	ldr	r1, [pc, #184]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 8007518:	4313      	orrs	r3, r2
 800751a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	2b00      	cmp	r3, #0
 8007526:	d010      	beq.n	800754a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699a      	ldr	r2, [r3, #24]
 800752c:	4b28      	ldr	r3, [pc, #160]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007534:	429a      	cmp	r2, r3
 8007536:	d208      	bcs.n	800754a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007538:	4b25      	ldr	r3, [pc, #148]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	4922      	ldr	r1, [pc, #136]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 8007546:	4313      	orrs	r3, r2
 8007548:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b00      	cmp	r3, #0
 8007554:	d010      	beq.n	8007578 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	69da      	ldr	r2, [r3, #28]
 800755a:	4b1d      	ldr	r3, [pc, #116]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007562:	429a      	cmp	r2, r3
 8007564:	d208      	bcs.n	8007578 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007566:	4b1a      	ldr	r3, [pc, #104]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	4917      	ldr	r1, [pc, #92]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 8007574:	4313      	orrs	r3, r2
 8007576:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007578:	f000 f834 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 800757c:	4602      	mov	r2, r0
 800757e:	4b14      	ldr	r3, [pc, #80]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	0a1b      	lsrs	r3, r3, #8
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	4912      	ldr	r1, [pc, #72]	; (80075d4 <HAL_RCC_ClockConfig+0x35c>)
 800758a:	5ccb      	ldrb	r3, [r1, r3]
 800758c:	f003 031f 	and.w	r3, r3, #31
 8007590:	fa22 f303 	lsr.w	r3, r2, r3
 8007594:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007596:	4b0e      	ldr	r3, [pc, #56]	; (80075d0 <HAL_RCC_ClockConfig+0x358>)
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	4a0d      	ldr	r2, [pc, #52]	; (80075d4 <HAL_RCC_ClockConfig+0x35c>)
 80075a0:	5cd3      	ldrb	r3, [r2, r3]
 80075a2:	f003 031f 	and.w	r3, r3, #31
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	fa22 f303 	lsr.w	r3, r2, r3
 80075ac:	4a0a      	ldr	r2, [pc, #40]	; (80075d8 <HAL_RCC_ClockConfig+0x360>)
 80075ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075b0:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <HAL_RCC_ClockConfig+0x364>)
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80075b6:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <HAL_RCC_ClockConfig+0x368>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fb fcae 	bl	8002f1c <HAL_InitTick>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	58024400 	.word	0x58024400
 80075d4:	0800cd14 	.word	0x0800cd14
 80075d8:	24000004 	.word	0x24000004
 80075dc:	24000000 	.word	0x24000000
 80075e0:	24000008 	.word	0x24000008

080075e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b089      	sub	sp, #36	; 0x24
 80075e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075ea:	4bb3      	ldr	r3, [pc, #716]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075f2:	2b18      	cmp	r3, #24
 80075f4:	f200 8155 	bhi.w	80078a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80075f8:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <HAL_RCC_GetSysClockFreq+0x1c>)
 80075fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fe:	bf00      	nop
 8007600:	08007665 	.word	0x08007665
 8007604:	080078a3 	.word	0x080078a3
 8007608:	080078a3 	.word	0x080078a3
 800760c:	080078a3 	.word	0x080078a3
 8007610:	080078a3 	.word	0x080078a3
 8007614:	080078a3 	.word	0x080078a3
 8007618:	080078a3 	.word	0x080078a3
 800761c:	080078a3 	.word	0x080078a3
 8007620:	0800768b 	.word	0x0800768b
 8007624:	080078a3 	.word	0x080078a3
 8007628:	080078a3 	.word	0x080078a3
 800762c:	080078a3 	.word	0x080078a3
 8007630:	080078a3 	.word	0x080078a3
 8007634:	080078a3 	.word	0x080078a3
 8007638:	080078a3 	.word	0x080078a3
 800763c:	080078a3 	.word	0x080078a3
 8007640:	08007691 	.word	0x08007691
 8007644:	080078a3 	.word	0x080078a3
 8007648:	080078a3 	.word	0x080078a3
 800764c:	080078a3 	.word	0x080078a3
 8007650:	080078a3 	.word	0x080078a3
 8007654:	080078a3 	.word	0x080078a3
 8007658:	080078a3 	.word	0x080078a3
 800765c:	080078a3 	.word	0x080078a3
 8007660:	08007697 	.word	0x08007697
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007664:	4b94      	ldr	r3, [pc, #592]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b00      	cmp	r3, #0
 800766e:	d009      	beq.n	8007684 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007670:	4b91      	ldr	r3, [pc, #580]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	08db      	lsrs	r3, r3, #3
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	4a90      	ldr	r2, [pc, #576]	; (80078bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800767c:	fa22 f303 	lsr.w	r3, r2, r3
 8007680:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007682:	e111      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007684:	4b8d      	ldr	r3, [pc, #564]	; (80078bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007686:	61bb      	str	r3, [r7, #24]
    break;
 8007688:	e10e      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800768a:	4b8d      	ldr	r3, [pc, #564]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800768c:	61bb      	str	r3, [r7, #24]
    break;
 800768e:	e10b      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007690:	4b8c      	ldr	r3, [pc, #560]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007692:	61bb      	str	r3, [r7, #24]
    break;
 8007694:	e108      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007696:	4b88      	ldr	r3, [pc, #544]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80076a0:	4b85      	ldr	r3, [pc, #532]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	091b      	lsrs	r3, r3, #4
 80076a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076ac:	4b82      	ldr	r3, [pc, #520]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80076b6:	4b80      	ldr	r3, [pc, #512]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ba:	08db      	lsrs	r3, r3, #3
 80076bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 80e1 	beq.w	800789c <HAL_RCC_GetSysClockFreq+0x2b8>
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	f000 8083 	beq.w	80077e8 <HAL_RCC_GetSysClockFreq+0x204>
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	f200 80a1 	bhi.w	800782c <HAL_RCC_GetSysClockFreq+0x248>
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <HAL_RCC_GetSysClockFreq+0x114>
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d056      	beq.n	80077a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80076f6:	e099      	b.n	800782c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f8:	4b6f      	ldr	r3, [pc, #444]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b00      	cmp	r3, #0
 8007702:	d02d      	beq.n	8007760 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007704:	4b6c      	ldr	r3, [pc, #432]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	08db      	lsrs	r3, r3, #3
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	4a6b      	ldr	r2, [pc, #428]	; (80078bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007710:	fa22 f303 	lsr.w	r3, r2, r3
 8007714:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	ee07 3a90 	vmov	s15, r3
 800771c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772e:	4b62      	ldr	r3, [pc, #392]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007742:	eddf 5a61 	vldr	s11, [pc, #388]	; 80078c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800775e:	e087      	b.n	8007870 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80078cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800776e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007772:	4b51      	ldr	r3, [pc, #324]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	ed97 6a02 	vldr	s12, [r7, #8]
 8007786:	eddf 5a50 	vldr	s11, [pc, #320]	; 80078c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800778a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077a2:	e065      	b.n	8007870 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80078d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80077b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b6:	4b40      	ldr	r3, [pc, #256]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80078c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077e6:	e043      	b.n	8007870 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80078d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80077f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fa:	4b2f      	ldr	r3, [pc, #188]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780a:	ed97 6a02 	vldr	s12, [r7, #8]
 800780e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80078c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800782a:	e021      	b.n	8007870 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	eddf 6a26 	vldr	s13, [pc, #152]	; 80078d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b1e      	ldr	r3, [pc, #120]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007852:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80078c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800786e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007870:	4b11      	ldr	r3, [pc, #68]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007874:	0a5b      	lsrs	r3, r3, #9
 8007876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800787a:	3301      	adds	r3, #1
 800787c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	ee07 3a90 	vmov	s15, r3
 8007884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007888:	edd7 6a07 	vldr	s13, [r7, #28]
 800788c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007894:	ee17 3a90 	vmov	r3, s15
 8007898:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800789a:	e005      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	61bb      	str	r3, [r7, #24]
    break;
 80078a0:	e002      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80078a2:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078a4:	61bb      	str	r3, [r7, #24]
    break;
 80078a6:	bf00      	nop
  }

  return sysclockfreq;
 80078a8:	69bb      	ldr	r3, [r7, #24]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3724      	adds	r7, #36	; 0x24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	58024400 	.word	0x58024400
 80078bc:	03d09000 	.word	0x03d09000
 80078c0:	003d0900 	.word	0x003d0900
 80078c4:	02dc6c00 	.word	0x02dc6c00
 80078c8:	46000000 	.word	0x46000000
 80078cc:	4c742400 	.word	0x4c742400
 80078d0:	4a742400 	.word	0x4a742400
 80078d4:	4c371b00 	.word	0x4c371b00

080078d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078de:	f7ff fe81 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 80078e2:	4602      	mov	r2, r0
 80078e4:	4b10      	ldr	r3, [pc, #64]	; (8007928 <HAL_RCC_GetHCLKFreq+0x50>)
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	0a1b      	lsrs	r3, r3, #8
 80078ea:	f003 030f 	and.w	r3, r3, #15
 80078ee:	490f      	ldr	r1, [pc, #60]	; (800792c <HAL_RCC_GetHCLKFreq+0x54>)
 80078f0:	5ccb      	ldrb	r3, [r1, r3]
 80078f2:	f003 031f 	and.w	r3, r3, #31
 80078f6:	fa22 f303 	lsr.w	r3, r2, r3
 80078fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078fc:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <HAL_RCC_GetHCLKFreq+0x50>)
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	4a09      	ldr	r2, [pc, #36]	; (800792c <HAL_RCC_GetHCLKFreq+0x54>)
 8007906:	5cd3      	ldrb	r3, [r2, r3]
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	fa22 f303 	lsr.w	r3, r2, r3
 8007912:	4a07      	ldr	r2, [pc, #28]	; (8007930 <HAL_RCC_GetHCLKFreq+0x58>)
 8007914:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007916:	4a07      	ldr	r2, [pc, #28]	; (8007934 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800791c:	4b04      	ldr	r3, [pc, #16]	; (8007930 <HAL_RCC_GetHCLKFreq+0x58>)
 800791e:	681b      	ldr	r3, [r3, #0]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	58024400 	.word	0x58024400
 800792c:	0800cd14 	.word	0x0800cd14
 8007930:	24000004 	.word	0x24000004
 8007934:	24000000 	.word	0x24000000

08007938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800793c:	f7ff ffcc 	bl	80078d8 <HAL_RCC_GetHCLKFreq>
 8007940:	4602      	mov	r2, r0
 8007942:	4b06      	ldr	r3, [pc, #24]	; (800795c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	091b      	lsrs	r3, r3, #4
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	4904      	ldr	r1, [pc, #16]	; (8007960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800794e:	5ccb      	ldrb	r3, [r1, r3]
 8007950:	f003 031f 	and.w	r3, r3, #31
 8007954:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007958:	4618      	mov	r0, r3
 800795a:	bd80      	pop	{r7, pc}
 800795c:	58024400 	.word	0x58024400
 8007960:	0800cd14 	.word	0x0800cd14

08007964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007968:	f7ff ffb6 	bl	80078d8 <HAL_RCC_GetHCLKFreq>
 800796c:	4602      	mov	r2, r0
 800796e:	4b06      	ldr	r3, [pc, #24]	; (8007988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	0a1b      	lsrs	r3, r3, #8
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	4904      	ldr	r1, [pc, #16]	; (800798c <HAL_RCC_GetPCLK2Freq+0x28>)
 800797a:	5ccb      	ldrb	r3, [r1, r3]
 800797c:	f003 031f 	and.w	r3, r3, #31
 8007980:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007984:	4618      	mov	r0, r3
 8007986:	bd80      	pop	{r7, pc}
 8007988:	58024400 	.word	0x58024400
 800798c:	0800cd14 	.word	0x0800cd14

08007990 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007998:	2300      	movs	r3, #0
 800799a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800799c:	2300      	movs	r3, #0
 800799e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d03f      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079b4:	d02a      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80079b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079ba:	d824      	bhi.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80079bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079c0:	d018      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80079c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079c6:	d81e      	bhi.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80079cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d0:	d007      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80079d2:	e018      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d4:	4bab      	ldr	r3, [pc, #684]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	4aaa      	ldr	r2, [pc, #680]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80079e0:	e015      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3304      	adds	r3, #4
 80079e6:	2102      	movs	r1, #2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 fff3 	bl	80099d4 <RCCEx_PLL2_Config>
 80079ee:	4603      	mov	r3, r0
 80079f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80079f2:	e00c      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3324      	adds	r3, #36	; 0x24
 80079f8:	2102      	movs	r1, #2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f002 f89c 	bl	8009b38 <RCCEx_PLL3_Config>
 8007a00:	4603      	mov	r3, r0
 8007a02:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a04:	e003      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	75fb      	strb	r3, [r7, #23]
      break;
 8007a0a:	e000      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d109      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a14:	4b9b      	ldr	r3, [pc, #620]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a20:	4998      	ldr	r1, [pc, #608]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	650b      	str	r3, [r1, #80]	; 0x50
 8007a26:	e001      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d03d      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d826      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007a40:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a46:	bf00      	nop
 8007a48:	08007a5d 	.word	0x08007a5d
 8007a4c:	08007a6b 	.word	0x08007a6b
 8007a50:	08007a7d 	.word	0x08007a7d
 8007a54:	08007a95 	.word	0x08007a95
 8007a58:	08007a95 	.word	0x08007a95
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a5c:	4b89      	ldr	r3, [pc, #548]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	4a88      	ldr	r2, [pc, #544]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a68:	e015      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 ffaf 	bl	80099d4 <RCCEx_PLL2_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a7a:	e00c      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3324      	adds	r3, #36	; 0x24
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f002 f858 	bl	8009b38 <RCCEx_PLL3_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a8c:	e003      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	75fb      	strb	r3, [r7, #23]
      break;
 8007a92:	e000      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d109      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a9c:	4b79      	ldr	r3, [pc, #484]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa0:	f023 0207 	bic.w	r2, r3, #7
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa8:	4976      	ldr	r1, [pc, #472]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	650b      	str	r3, [r1, #80]	; 0x50
 8007aae:	e001      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
 8007ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d042      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ac8:	d02b      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ace:	d825      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ad0:	2bc0      	cmp	r3, #192	; 0xc0
 8007ad2:	d028      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007ad4:	2bc0      	cmp	r3, #192	; 0xc0
 8007ad6:	d821      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ad8:	2b80      	cmp	r3, #128	; 0x80
 8007ada:	d016      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007adc:	2b80      	cmp	r3, #128	; 0x80
 8007ade:	d81d      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007ae4:	2b40      	cmp	r3, #64	; 0x40
 8007ae6:	d007      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007ae8:	e018      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aea:	4b66      	ldr	r3, [pc, #408]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aee:	4a65      	ldr	r2, [pc, #404]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007af4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007af6:	e017      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	2100      	movs	r1, #0
 8007afe:	4618      	mov	r0, r3
 8007b00:	f001 ff68 	bl	80099d4 <RCCEx_PLL2_Config>
 8007b04:	4603      	mov	r3, r0
 8007b06:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b08:	e00e      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3324      	adds	r3, #36	; 0x24
 8007b0e:	2100      	movs	r1, #0
 8007b10:	4618      	mov	r0, r3
 8007b12:	f002 f811 	bl	8009b38 <RCCEx_PLL3_Config>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b1a:	e005      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b20:	e002      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007b22:	bf00      	nop
 8007b24:	e000      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007b2e:	4b55      	ldr	r3, [pc, #340]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b32:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b3a:	4952      	ldr	r1, [pc, #328]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	650b      	str	r3, [r1, #80]	; 0x50
 8007b40:	e001      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d049      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b5c:	d030      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007b5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b62:	d82a      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007b64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b68:	d02c      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007b6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b6e:	d824      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b74:	d018      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b7a:	d81e      	bhi.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007b80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b84:	d007      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007b86:	e018      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b88:	4b3e      	ldr	r3, [pc, #248]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4a3d      	ldr	r2, [pc, #244]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b94:	e017      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 ff19 	bl	80099d4 <RCCEx_PLL2_Config>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007ba6:	e00e      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3324      	adds	r3, #36	; 0x24
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 ffc2 	bl	8009b38 <RCCEx_PLL3_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bb8:	e005      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bbe:	e002      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007bc0:	bf00      	nop
 8007bc2:	e000      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007bcc:	4b2d      	ldr	r3, [pc, #180]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007bda:	492a      	ldr	r1, [pc, #168]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	658b      	str	r3, [r1, #88]	; 0x58
 8007be0:	e001      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d04c      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007bf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bfc:	d030      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c02:	d82a      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c08:	d02c      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007c0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c0e:	d824      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c14:	d018      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007c16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c1a:	d81e      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c24:	d007      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007c26:	e018      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c28:	4b16      	ldr	r3, [pc, #88]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	4a15      	ldr	r2, [pc, #84]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c34:	e017      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 fec9 	bl	80099d4 <RCCEx_PLL2_Config>
 8007c42:	4603      	mov	r3, r0
 8007c44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c46:	e00e      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3324      	adds	r3, #36	; 0x24
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f001 ff72 	bl	8009b38 <RCCEx_PLL3_Config>
 8007c54:	4603      	mov	r3, r0
 8007c56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c58:	e005      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c5e:	e002      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007c60:	bf00      	nop
 8007c62:	e000      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10d      	bne.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c6c:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c70:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c7a:	4902      	ldr	r1, [pc, #8]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	658b      	str	r3, [r1, #88]	; 0x58
 8007c80:	e004      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007c82:	bf00      	nop
 8007c84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d032      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c9c:	2b30      	cmp	r3, #48	; 0x30
 8007c9e:	d01c      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007ca0:	2b30      	cmp	r3, #48	; 0x30
 8007ca2:	d817      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007ca4:	2b20      	cmp	r3, #32
 8007ca6:	d00c      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007ca8:	2b20      	cmp	r3, #32
 8007caa:	d813      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d016      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007cb0:	2b10      	cmp	r3, #16
 8007cb2:	d10f      	bne.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cb4:	4baf      	ldr	r3, [pc, #700]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	4aae      	ldr	r2, [pc, #696]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007cc0:	e00e      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	2102      	movs	r1, #2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 fe83 	bl	80099d4 <RCCEx_PLL2_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007cd2:	e005      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd8:	e002      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007cda:	bf00      	nop
 8007cdc:	e000      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007ce6:	4ba3      	ldr	r3, [pc, #652]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cf2:	49a0      	ldr	r1, [pc, #640]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007cf8:	e001      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d047      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d12:	d030      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d18:	d82a      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d1e:	d02c      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007d20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d24:	d824      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d2a:	d018      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d30:	d81e      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3a:	d007      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007d3c:	e018      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d3e:	4b8d      	ldr	r3, [pc, #564]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d42:	4a8c      	ldr	r2, [pc, #560]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d4a:	e017      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3304      	adds	r3, #4
 8007d50:	2100      	movs	r1, #0
 8007d52:	4618      	mov	r0, r3
 8007d54:	f001 fe3e 	bl	80099d4 <RCCEx_PLL2_Config>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d5c:	e00e      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3324      	adds	r3, #36	; 0x24
 8007d62:	2100      	movs	r1, #0
 8007d64:	4618      	mov	r0, r3
 8007d66:	f001 fee7 	bl	8009b38 <RCCEx_PLL3_Config>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d6e:	e005      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	75fb      	strb	r3, [r7, #23]
      break;
 8007d74:	e002      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007d76:	bf00      	nop
 8007d78:	e000      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d109      	bne.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d82:	4b7c      	ldr	r3, [pc, #496]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d86:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8e:	4979      	ldr	r1, [pc, #484]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	650b      	str	r3, [r1, #80]	; 0x50
 8007d94:	e001      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
 8007d98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d049      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007daa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dae:	d02e      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007db4:	d828      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007db6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dba:	d02a      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007dbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dc0:	d822      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007dc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dc6:	d026      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007dc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dcc:	d81c      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dd2:	d010      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dd8:	d816      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01d      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de2:	d111      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3304      	adds	r3, #4
 8007de8:	2101      	movs	r1, #1
 8007dea:	4618      	mov	r0, r3
 8007dec:	f001 fdf2 	bl	80099d4 <RCCEx_PLL2_Config>
 8007df0:	4603      	mov	r3, r0
 8007df2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007df4:	e012      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3324      	adds	r3, #36	; 0x24
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f001 fe9b 	bl	8009b38 <RCCEx_PLL3_Config>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e06:	e009      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0c:	e006      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e0e:	bf00      	nop
 8007e10:	e004      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e12:	bf00      	nop
 8007e14:	e002      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e16:	bf00      	nop
 8007e18:	e000      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d109      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e22:	4b54      	ldr	r3, [pc, #336]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e26:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2e:	4951      	ldr	r1, [pc, #324]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	650b      	str	r3, [r1, #80]	; 0x50
 8007e34:	e001      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d04b      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e50:	d02e      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e56:	d828      	bhi.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5c:	d02a      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e62:	d822      	bhi.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007e64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e68:	d026      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007e6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e6e:	d81c      	bhi.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e74:	d010      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e7a:	d816      	bhi.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01d      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e84:	d111      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 fda1 	bl	80099d4 <RCCEx_PLL2_Config>
 8007e92:	4603      	mov	r3, r0
 8007e94:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007e96:	e012      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3324      	adds	r3, #36	; 0x24
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f001 fe4a 	bl	8009b38 <RCCEx_PLL3_Config>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ea8:	e009      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	75fb      	strb	r3, [r7, #23]
      break;
 8007eae:	e006      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007eb0:	bf00      	nop
 8007eb2:	e004      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007eb4:	bf00      	nop
 8007eb6:	e002      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007eb8:	bf00      	nop
 8007eba:	e000      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ec4:	4b2b      	ldr	r3, [pc, #172]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ed2:	4928      	ldr	r1, [pc, #160]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	658b      	str	r3, [r1, #88]	; 0x58
 8007ed8:	e001      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d02f      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef2:	d00e      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef8:	d814      	bhi.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d015      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f02:	d10f      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f04:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	4a1a      	ldr	r2, [pc, #104]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f10:	e00c      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3304      	adds	r3, #4
 8007f16:	2101      	movs	r1, #1
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f001 fd5b 	bl	80099d4 <RCCEx_PLL2_Config>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f22:	e003      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	75fb      	strb	r3, [r7, #23]
      break;
 8007f28:	e000      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007f2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f32:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f3e:	490d      	ldr	r1, [pc, #52]	; (8007f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	650b      	str	r3, [r1, #80]	; 0x50
 8007f44:	e001      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d033      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d81c      	bhi.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007f5e:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007f9f 	.word	0x08007f9f
 8007f68:	08007f79 	.word	0x08007f79
 8007f6c:	08007f87 	.word	0x08007f87
 8007f70:	08007f9f 	.word	0x08007f9f
 8007f74:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f78:	4bb8      	ldr	r3, [pc, #736]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	4ab7      	ldr	r2, [pc, #732]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007f84:	e00c      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	2102      	movs	r1, #2
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 fd21 	bl	80099d4 <RCCEx_PLL2_Config>
 8007f92:	4603      	mov	r3, r0
 8007f94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007f96:	e003      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9c:	e000      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d109      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007fa6:	4bad      	ldr	r3, [pc, #692]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007faa:	f023 0203 	bic.w	r2, r3, #3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb2:	49aa      	ldr	r1, [pc, #680]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fb8:	e001      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
 8007fbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 8086 	beq.w	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fcc:	4ba4      	ldr	r3, [pc, #656]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4aa3      	ldr	r2, [pc, #652]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fd8:	f7fa ffea 	bl	8002fb0 <HAL_GetTick>
 8007fdc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fde:	e009      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fe0:	f7fa ffe6 	bl	8002fb0 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	2b64      	cmp	r3, #100	; 0x64
 8007fec:	d902      	bls.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	75fb      	strb	r3, [r7, #23]
        break;
 8007ff2:	e005      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ff4:	4b9a      	ldr	r3, [pc, #616]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d0ef      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008000:	7dfb      	ldrb	r3, [r7, #23]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d166      	bne.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008006:	4b95      	ldr	r3, [pc, #596]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008008:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008010:	4053      	eors	r3, r2
 8008012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008016:	2b00      	cmp	r3, #0
 8008018:	d013      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800801a:	4b90      	ldr	r3, [pc, #576]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800801c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008022:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008024:	4b8d      	ldr	r3, [pc, #564]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008028:	4a8c      	ldr	r2, [pc, #560]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800802a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800802e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008030:	4b8a      	ldr	r3, [pc, #552]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008034:	4a89      	ldr	r2, [pc, #548]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800803a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800803c:	4a87      	ldr	r2, [pc, #540]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800804c:	d115      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804e:	f7fa ffaf 	bl	8002fb0 <HAL_GetTick>
 8008052:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008054:	e00b      	b.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008056:	f7fa ffab 	bl	8002fb0 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	f241 3288 	movw	r2, #5000	; 0x1388
 8008064:	4293      	cmp	r3, r2
 8008066:	d902      	bls.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	75fb      	strb	r3, [r7, #23]
            break;
 800806c:	e005      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800806e:	4b7b      	ldr	r3, [pc, #492]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0ed      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d126      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800808a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800808e:	d10d      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008090:	4b72      	ldr	r3, [pc, #456]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800809e:	0919      	lsrs	r1, r3, #4
 80080a0:	4b70      	ldr	r3, [pc, #448]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80080a2:	400b      	ands	r3, r1
 80080a4:	496d      	ldr	r1, [pc, #436]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	610b      	str	r3, [r1, #16]
 80080aa:	e005      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80080ac:	4b6b      	ldr	r3, [pc, #428]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	4a6a      	ldr	r2, [pc, #424]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080b6:	6113      	str	r3, [r2, #16]
 80080b8:	4b68      	ldr	r3, [pc, #416]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080c6:	4965      	ldr	r1, [pc, #404]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	670b      	str	r3, [r1, #112]	; 0x70
 80080cc:	e004      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	75bb      	strb	r3, [r7, #22]
 80080d2:	e001      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d07e      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080e8:	2b28      	cmp	r3, #40	; 0x28
 80080ea:	d867      	bhi.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80080ec:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	080081c3 	.word	0x080081c3
 80080f8:	080081bd 	.word	0x080081bd
 80080fc:	080081bd 	.word	0x080081bd
 8008100:	080081bd 	.word	0x080081bd
 8008104:	080081bd 	.word	0x080081bd
 8008108:	080081bd 	.word	0x080081bd
 800810c:	080081bd 	.word	0x080081bd
 8008110:	080081bd 	.word	0x080081bd
 8008114:	08008199 	.word	0x08008199
 8008118:	080081bd 	.word	0x080081bd
 800811c:	080081bd 	.word	0x080081bd
 8008120:	080081bd 	.word	0x080081bd
 8008124:	080081bd 	.word	0x080081bd
 8008128:	080081bd 	.word	0x080081bd
 800812c:	080081bd 	.word	0x080081bd
 8008130:	080081bd 	.word	0x080081bd
 8008134:	080081ab 	.word	0x080081ab
 8008138:	080081bd 	.word	0x080081bd
 800813c:	080081bd 	.word	0x080081bd
 8008140:	080081bd 	.word	0x080081bd
 8008144:	080081bd 	.word	0x080081bd
 8008148:	080081bd 	.word	0x080081bd
 800814c:	080081bd 	.word	0x080081bd
 8008150:	080081bd 	.word	0x080081bd
 8008154:	080081c3 	.word	0x080081c3
 8008158:	080081bd 	.word	0x080081bd
 800815c:	080081bd 	.word	0x080081bd
 8008160:	080081bd 	.word	0x080081bd
 8008164:	080081bd 	.word	0x080081bd
 8008168:	080081bd 	.word	0x080081bd
 800816c:	080081bd 	.word	0x080081bd
 8008170:	080081bd 	.word	0x080081bd
 8008174:	080081c3 	.word	0x080081c3
 8008178:	080081bd 	.word	0x080081bd
 800817c:	080081bd 	.word	0x080081bd
 8008180:	080081bd 	.word	0x080081bd
 8008184:	080081bd 	.word	0x080081bd
 8008188:	080081bd 	.word	0x080081bd
 800818c:	080081bd 	.word	0x080081bd
 8008190:	080081bd 	.word	0x080081bd
 8008194:	080081c3 	.word	0x080081c3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3304      	adds	r3, #4
 800819c:	2101      	movs	r1, #1
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 fc18 	bl	80099d4 <RCCEx_PLL2_Config>
 80081a4:	4603      	mov	r3, r0
 80081a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081a8:	e00c      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3324      	adds	r3, #36	; 0x24
 80081ae:	2101      	movs	r1, #1
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 fcc1 	bl	8009b38 <RCCEx_PLL3_Config>
 80081b6:	4603      	mov	r3, r0
 80081b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081ba:	e003      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	75fb      	strb	r3, [r7, #23]
      break;
 80081c0:	e000      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80081c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d109      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081ca:	4b24      	ldr	r3, [pc, #144]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081d6:	4921      	ldr	r1, [pc, #132]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	654b      	str	r3, [r1, #84]	; 0x54
 80081dc:	e001      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d03e      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f2:	2b05      	cmp	r3, #5
 80081f4:	d820      	bhi.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80081f6:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80081f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fc:	0800823f 	.word	0x0800823f
 8008200:	08008215 	.word	0x08008215
 8008204:	08008227 	.word	0x08008227
 8008208:	0800823f 	.word	0x0800823f
 800820c:	0800823f 	.word	0x0800823f
 8008210:	0800823f 	.word	0x0800823f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3304      	adds	r3, #4
 8008218:	2101      	movs	r1, #1
 800821a:	4618      	mov	r0, r3
 800821c:	f001 fbda 	bl	80099d4 <RCCEx_PLL2_Config>
 8008220:	4603      	mov	r3, r0
 8008222:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008224:	e00c      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3324      	adds	r3, #36	; 0x24
 800822a:	2101      	movs	r1, #1
 800822c:	4618      	mov	r0, r3
 800822e:	f001 fc83 	bl	8009b38 <RCCEx_PLL3_Config>
 8008232:	4603      	mov	r3, r0
 8008234:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008236:	e003      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	75fb      	strb	r3, [r7, #23]
      break;
 800823c:	e000      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800823e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d110      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008246:	4b05      	ldr	r3, [pc, #20]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824a:	f023 0207 	bic.w	r2, r3, #7
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008252:	4902      	ldr	r1, [pc, #8]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008254:	4313      	orrs	r3, r2
 8008256:	654b      	str	r3, [r1, #84]	; 0x54
 8008258:	e008      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800825a:	bf00      	nop
 800825c:	58024400 	.word	0x58024400
 8008260:	58024800 	.word	0x58024800
 8008264:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0304 	and.w	r3, r3, #4
 8008274:	2b00      	cmp	r3, #0
 8008276:	d039      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827e:	2b05      	cmp	r3, #5
 8008280:	d820      	bhi.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008282:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	080082cb 	.word	0x080082cb
 800828c:	080082a1 	.word	0x080082a1
 8008290:	080082b3 	.word	0x080082b3
 8008294:	080082cb 	.word	0x080082cb
 8008298:	080082cb 	.word	0x080082cb
 800829c:	080082cb 	.word	0x080082cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3304      	adds	r3, #4
 80082a4:	2101      	movs	r1, #1
 80082a6:	4618      	mov	r0, r3
 80082a8:	f001 fb94 	bl	80099d4 <RCCEx_PLL2_Config>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082b0:	e00c      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3324      	adds	r3, #36	; 0x24
 80082b6:	2101      	movs	r1, #1
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 fc3d 	bl	8009b38 <RCCEx_PLL3_Config>
 80082be:	4603      	mov	r3, r0
 80082c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082c2:	e003      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	75fb      	strb	r3, [r7, #23]
      break;
 80082c8:	e000      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80082ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082d2:	4bb7      	ldr	r3, [pc, #732]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d6:	f023 0207 	bic.w	r2, r3, #7
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e0:	49b3      	ldr	r1, [pc, #716]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	658b      	str	r3, [r1, #88]	; 0x58
 80082e6:	e001      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0320 	and.w	r3, r3, #32
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d04b      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008302:	d02e      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008308:	d828      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800830a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800830e:	d02a      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008314:	d822      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008316:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800831a:	d026      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800831c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008320:	d81c      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008326:	d010      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800832c:	d816      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800832e:	2b00      	cmp	r3, #0
 8008330:	d01d      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008336:	d111      	bne.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	3304      	adds	r3, #4
 800833c:	2100      	movs	r1, #0
 800833e:	4618      	mov	r0, r3
 8008340:	f001 fb48 	bl	80099d4 <RCCEx_PLL2_Config>
 8008344:	4603      	mov	r3, r0
 8008346:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008348:	e012      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3324      	adds	r3, #36	; 0x24
 800834e:	2102      	movs	r1, #2
 8008350:	4618      	mov	r0, r3
 8008352:	f001 fbf1 	bl	8009b38 <RCCEx_PLL3_Config>
 8008356:	4603      	mov	r3, r0
 8008358:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800835a:	e009      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	75fb      	strb	r3, [r7, #23]
      break;
 8008360:	e006      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008362:	bf00      	nop
 8008364:	e004      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008366:	bf00      	nop
 8008368:	e002      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800836a:	bf00      	nop
 800836c:	e000      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800836e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008370:	7dfb      	ldrb	r3, [r7, #23]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10a      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008376:	4b8e      	ldr	r3, [pc, #568]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008384:	498a      	ldr	r1, [pc, #552]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008386:	4313      	orrs	r3, r2
 8008388:	654b      	str	r3, [r1, #84]	; 0x54
 800838a:	e001      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	d04b      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083a6:	d02e      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80083a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083ac:	d828      	bhi.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083b2:	d02a      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80083b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083b8:	d822      	bhi.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083be:	d026      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80083c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083c4:	d81c      	bhi.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ca:	d010      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80083cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083d0:	d816      	bhi.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d01d      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80083d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083da:	d111      	bne.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3304      	adds	r3, #4
 80083e0:	2100      	movs	r1, #0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 faf6 	bl	80099d4 <RCCEx_PLL2_Config>
 80083e8:	4603      	mov	r3, r0
 80083ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80083ec:	e012      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3324      	adds	r3, #36	; 0x24
 80083f2:	2102      	movs	r1, #2
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 fb9f 	bl	8009b38 <RCCEx_PLL3_Config>
 80083fa:	4603      	mov	r3, r0
 80083fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80083fe:	e009      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	75fb      	strb	r3, [r7, #23]
      break;
 8008404:	e006      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008406:	bf00      	nop
 8008408:	e004      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800840a:	bf00      	nop
 800840c:	e002      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800840e:	bf00      	nop
 8008410:	e000      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10a      	bne.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800841a:	4b65      	ldr	r3, [pc, #404]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800841c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008428:	4961      	ldr	r1, [pc, #388]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800842a:	4313      	orrs	r3, r2
 800842c:	658b      	str	r3, [r1, #88]	; 0x58
 800842e:	e001      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843c:	2b00      	cmp	r3, #0
 800843e:	d04b      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008446:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800844a:	d02e      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800844c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008450:	d828      	bhi.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008456:	d02a      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800845c:	d822      	bhi.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800845e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008462:	d026      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008464:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008468:	d81c      	bhi.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800846a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800846e:	d010      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008474:	d816      	bhi.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008476:	2b00      	cmp	r3, #0
 8008478:	d01d      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800847a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800847e:	d111      	bne.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	3304      	adds	r3, #4
 8008484:	2100      	movs	r1, #0
 8008486:	4618      	mov	r0, r3
 8008488:	f001 faa4 	bl	80099d4 <RCCEx_PLL2_Config>
 800848c:	4603      	mov	r3, r0
 800848e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008490:	e012      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3324      	adds	r3, #36	; 0x24
 8008496:	2102      	movs	r1, #2
 8008498:	4618      	mov	r0, r3
 800849a:	f001 fb4d 	bl	8009b38 <RCCEx_PLL3_Config>
 800849e:	4603      	mov	r3, r0
 80084a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084a2:	e009      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	75fb      	strb	r3, [r7, #23]
      break;
 80084a8:	e006      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084aa:	bf00      	nop
 80084ac:	e004      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084ae:	bf00      	nop
 80084b0:	e002      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084b2:	bf00      	nop
 80084b4:	e000      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80084be:	4b3c      	ldr	r3, [pc, #240]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084cc:	4938      	ldr	r1, [pc, #224]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	658b      	str	r3, [r1, #88]	; 0x58
 80084d2:	e001      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d4:	7dfb      	ldrb	r3, [r7, #23]
 80084d6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0308 	and.w	r3, r3, #8
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01a      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ee:	d10a      	bne.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3324      	adds	r3, #36	; 0x24
 80084f4:	2102      	movs	r1, #2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f001 fb1e 	bl	8009b38 <RCCEx_PLL3_Config>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008506:	4b2a      	ldr	r3, [pc, #168]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008514:	4926      	ldr	r1, [pc, #152]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008516:	4313      	orrs	r3, r2
 8008518:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0310 	and.w	r3, r3, #16
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01a      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800852c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008530:	d10a      	bne.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3324      	adds	r3, #36	; 0x24
 8008536:	2102      	movs	r1, #2
 8008538:	4618      	mov	r0, r3
 800853a:	f001 fafd 	bl	8009b38 <RCCEx_PLL3_Config>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008548:	4b19      	ldr	r3, [pc, #100]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800854a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800854c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008556:	4916      	ldr	r1, [pc, #88]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008558:	4313      	orrs	r3, r2
 800855a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d036      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800856e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008572:	d01f      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008578:	d817      	bhi.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800857e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008582:	d009      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008584:	e011      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3304      	adds	r3, #4
 800858a:	2100      	movs	r1, #0
 800858c:	4618      	mov	r0, r3
 800858e:	f001 fa21 	bl	80099d4 <RCCEx_PLL2_Config>
 8008592:	4603      	mov	r3, r0
 8008594:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008596:	e00e      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3324      	adds	r3, #36	; 0x24
 800859c:	2102      	movs	r1, #2
 800859e:	4618      	mov	r0, r3
 80085a0:	f001 faca 	bl	8009b38 <RCCEx_PLL3_Config>
 80085a4:	4603      	mov	r3, r0
 80085a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085a8:	e005      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	75fb      	strb	r3, [r7, #23]
      break;
 80085ae:	e002      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80085b0:	58024400 	.word	0x58024400
      break;
 80085b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10a      	bne.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085bc:	4b93      	ldr	r3, [pc, #588]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085ca:	4990      	ldr	r1, [pc, #576]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	658b      	str	r3, [r1, #88]	; 0x58
 80085d0:	e001      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
 80085d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d033      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085ec:	d01c      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80085ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085f2:	d816      	bhi.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80085f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085f8:	d003      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80085fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085fe:	d007      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008600:	e00f      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008602:	4b82      	ldr	r3, [pc, #520]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008606:	4a81      	ldr	r2, [pc, #516]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800860c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800860e:	e00c      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3324      	adds	r3, #36	; 0x24
 8008614:	2101      	movs	r1, #1
 8008616:	4618      	mov	r0, r3
 8008618:	f001 fa8e 	bl	8009b38 <RCCEx_PLL3_Config>
 800861c:	4603      	mov	r3, r0
 800861e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008620:	e003      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	75fb      	strb	r3, [r7, #23]
      break;
 8008626:	e000      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10a      	bne.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008630:	4b76      	ldr	r3, [pc, #472]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008634:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800863e:	4973      	ldr	r1, [pc, #460]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008640:	4313      	orrs	r3, r2
 8008642:	654b      	str	r3, [r1, #84]	; 0x54
 8008644:	e001      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008646:	7dfb      	ldrb	r3, [r7, #23]
 8008648:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d029      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800865e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008662:	d007      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008664:	e00f      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008666:	4b69      	ldr	r3, [pc, #420]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	4a68      	ldr	r2, [pc, #416]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800866c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008670:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008672:	e00b      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3304      	adds	r3, #4
 8008678:	2102      	movs	r1, #2
 800867a:	4618      	mov	r0, r3
 800867c:	f001 f9aa 	bl	80099d4 <RCCEx_PLL2_Config>
 8008680:	4603      	mov	r3, r0
 8008682:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008684:	e002      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	75fb      	strb	r3, [r7, #23]
      break;
 800868a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d109      	bne.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008692:	4b5e      	ldr	r3, [pc, #376]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008696:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800869e:	495b      	ldr	r1, [pc, #364]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086a4:	e001      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3324      	adds	r3, #36	; 0x24
 80086ba:	2102      	movs	r1, #2
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 fa3b 	bl	8009b38 <RCCEx_PLL3_Config>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d030      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086e0:	d017      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80086e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086e6:	d811      	bhi.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80086e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086ec:	d013      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80086ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f2:	d80b      	bhi.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d010      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80086f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086fc:	d106      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086fe:	4b43      	ldr	r3, [pc, #268]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008702:	4a42      	ldr	r2, [pc, #264]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008708:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800870a:	e007      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	75fb      	strb	r3, [r7, #23]
      break;
 8008710:	e004      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008712:	bf00      	nop
 8008714:	e002      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008716:	bf00      	nop
 8008718:	e000      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800871a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008722:	4b3a      	ldr	r3, [pc, #232]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008726:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800872e:	4937      	ldr	r1, [pc, #220]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008730:	4313      	orrs	r3, r2
 8008732:	654b      	str	r3, [r1, #84]	; 0x54
 8008734:	e001      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d008      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008746:	4b31      	ldr	r3, [pc, #196]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800874a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008752:	492e      	ldr	r1, [pc, #184]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008754:	4313      	orrs	r3, r2
 8008756:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d009      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008764:	4b29      	ldr	r3, [pc, #164]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008772:	4926      	ldr	r1, [pc, #152]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008774:	4313      	orrs	r3, r2
 8008776:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d008      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008784:	4b21      	ldr	r3, [pc, #132]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008788:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008790:	491e      	ldr	r1, [pc, #120]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008792:	4313      	orrs	r3, r2
 8008794:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00d      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087a2:	4b1a      	ldr	r3, [pc, #104]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	4a19      	ldr	r2, [pc, #100]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087ac:	6113      	str	r3, [r2, #16]
 80087ae:	4b17      	ldr	r3, [pc, #92]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087b0:	691a      	ldr	r2, [r3, #16]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80087b8:	4914      	ldr	r1, [pc, #80]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	da08      	bge.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80087c6:	4b11      	ldr	r3, [pc, #68]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d2:	490e      	ldr	r1, [pc, #56]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d009      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80087e4:	4b09      	ldr	r3, [pc, #36]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f2:	4906      	ldr	r1, [pc, #24]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80087f8:	7dbb      	ldrb	r3, [r7, #22]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	e000      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	58024400 	.word	0x58024400

08008810 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b090      	sub	sp, #64	; 0x40
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800881e:	f040 8095 	bne.w	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008822:	4bae      	ldr	r3, [pc, #696]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	633b      	str	r3, [r7, #48]	; 0x30
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	2b04      	cmp	r3, #4
 8008830:	f200 8088 	bhi.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008834:	a201      	add	r2, pc, #4	; (adr r2, 800883c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883a:	bf00      	nop
 800883c:	08008851 	.word	0x08008851
 8008840:	08008879 	.word	0x08008879
 8008844:	080088a1 	.word	0x080088a1
 8008848:	0800893d 	.word	0x0800893d
 800884c:	080088c9 	.word	0x080088c9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008850:	4ba2      	ldr	r3, [pc, #648]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800885c:	d108      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800885e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008862:	4618      	mov	r0, r3
 8008864:	f000 ff64 	bl	8009730 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800886c:	f000 bc95 	b.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008874:	f000 bc91 	b.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008878:	4b98      	ldr	r3, [pc, #608]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008884:	d108      	bne.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008886:	f107 0318 	add.w	r3, r7, #24
 800888a:	4618      	mov	r0, r3
 800888c:	f000 fca8 	bl	80091e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008894:	f000 bc81 	b.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800889c:	f000 bc7d 	b.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088a0:	4b8e      	ldr	r3, [pc, #568]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ac:	d108      	bne.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ae:	f107 030c 	add.w	r3, r7, #12
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fde8 	bl	8009488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088bc:	f000 bc6d 	b.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088c4:	f000 bc69 	b.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088c8:	4b84      	ldr	r3, [pc, #528]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088d0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088d2:	4b82      	ldr	r3, [pc, #520]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d10c      	bne.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d109      	bne.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088e4:	4b7d      	ldr	r3, [pc, #500]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	08db      	lsrs	r3, r3, #3
 80088ea:	f003 0303 	and.w	r3, r3, #3
 80088ee:	4a7c      	ldr	r2, [pc, #496]	; (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80088f0:	fa22 f303 	lsr.w	r3, r2, r3
 80088f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088f6:	e01f      	b.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088f8:	4b78      	ldr	r3, [pc, #480]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008904:	d106      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008908:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800890c:	d102      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800890e:	4b75      	ldr	r3, [pc, #468]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008912:	e011      	b.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008914:	4b71      	ldr	r3, [pc, #452]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800891c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008920:	d106      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008928:	d102      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800892a:	4b6f      	ldr	r3, [pc, #444]	; (8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800892e:	e003      	b.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008934:	f000 bc31 	b.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008938:	f000 bc2f 	b.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800893c:	4b6b      	ldr	r3, [pc, #428]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800893e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008940:	f000 bc2b 	b.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008944:	2300      	movs	r3, #0
 8008946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008948:	f000 bc27 	b.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008952:	f040 8095 	bne.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008956:	4b61      	ldr	r3, [pc, #388]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800895a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800895e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008966:	d04d      	beq.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800896e:	f200 8084 	bhi.w	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	2bc0      	cmp	r3, #192	; 0xc0
 8008976:	d07d      	beq.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	2bc0      	cmp	r3, #192	; 0xc0
 800897c:	d87d      	bhi.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	2b80      	cmp	r3, #128	; 0x80
 8008982:	d02d      	beq.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	2b80      	cmp	r3, #128	; 0x80
 8008988:	d877      	bhi.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800898a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	2b40      	cmp	r3, #64	; 0x40
 8008994:	d012      	beq.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008996:	e070      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008998:	4b50      	ldr	r3, [pc, #320]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089a4:	d107      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 fec0 	bl	8009730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089b4:	e3f1      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ba:	e3ee      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089bc:	4b47      	ldr	r3, [pc, #284]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089c8:	d107      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ca:	f107 0318 	add.w	r3, r7, #24
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 fc06 	bl	80091e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089d8:	e3df      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089de:	e3dc      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089e0:	4b3e      	ldr	r3, [pc, #248]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089ec:	d107      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ee:	f107 030c 	add.w	r3, r7, #12
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fd48 	bl	8009488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089fc:	e3cd      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a02:	e3ca      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a04:	4b35      	ldr	r3, [pc, #212]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a0c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a0e:	4b33      	ldr	r3, [pc, #204]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0304 	and.w	r3, r3, #4
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	d10c      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d109      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a20:	4b2e      	ldr	r3, [pc, #184]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	08db      	lsrs	r3, r3, #3
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	4a2d      	ldr	r2, [pc, #180]	; (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a32:	e01e      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a34:	4b29      	ldr	r3, [pc, #164]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a40:	d106      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a48:	d102      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a4a:	4b26      	ldr	r3, [pc, #152]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a4e:	e010      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a50:	4b22      	ldr	r3, [pc, #136]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a5c:	d106      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a64:	d102      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a66:	4b20      	ldr	r3, [pc, #128]	; (8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a6a:	e002      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a70:	e393      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a72:	e392      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a74:	4b1d      	ldr	r3, [pc, #116]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a78:	e38f      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a7e:	e38c      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a86:	f040 80a7 	bne.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008a8a:	4b14      	ldr	r3, [pc, #80]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a8e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008a92:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a9a:	d05f      	beq.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aa2:	f200 8096 	bhi.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008aac:	f000 808e 	beq.w	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ab6:	f200 808c 	bhi.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ac0:	d03a      	beq.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ac8:	f200 8083 	bhi.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00e      	beq.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ad8:	d01c      	beq.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008ada:	e07a      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008adc:	58024400 	.word	0x58024400
 8008ae0:	03d09000 	.word	0x03d09000
 8008ae4:	003d0900 	.word	0x003d0900
 8008ae8:	02dc6c00 	.word	0x02dc6c00
 8008aec:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008af0:	4baa      	ldr	r3, [pc, #680]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008afc:	d107      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fe14 	bl	8009730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b0c:	e345      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b12:	e342      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b14:	4ba1      	ldr	r3, [pc, #644]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b20:	d107      	bne.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b22:	f107 0318 	add.w	r3, r7, #24
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fb5a 	bl	80091e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b30:	e333      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b32:	2300      	movs	r3, #0
 8008b34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b36:	e330      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b38:	4b98      	ldr	r3, [pc, #608]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b44:	d107      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b46:	f107 030c 	add.w	r3, r7, #12
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fc9c 	bl	8009488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b54:	e321      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b5a:	e31e      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b5c:	4b8f      	ldr	r3, [pc, #572]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b64:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b66:	4b8d      	ldr	r3, [pc, #564]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0304 	and.w	r3, r3, #4
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d10c      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d109      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b78:	4b88      	ldr	r3, [pc, #544]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	08db      	lsrs	r3, r3, #3
 8008b7e:	f003 0303 	and.w	r3, r3, #3
 8008b82:	4a87      	ldr	r2, [pc, #540]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008b84:	fa22 f303 	lsr.w	r3, r2, r3
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b8a:	e01e      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b8c:	4b83      	ldr	r3, [pc, #524]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b98:	d106      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ba0:	d102      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ba2:	4b80      	ldr	r3, [pc, #512]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ba6:	e010      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ba8:	4b7c      	ldr	r3, [pc, #496]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bb4:	d106      	bne.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bbc:	d102      	bne.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008bbe:	4b7a      	ldr	r3, [pc, #488]	; (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bc2:	e002      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008bc8:	e2e7      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008bca:	e2e6      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008bcc:	4b77      	ldr	r3, [pc, #476]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bd0:	e2e3      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bd6:	e2e0      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bde:	f040 809c 	bne.w	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008be2:	4b6e      	ldr	r3, [pc, #440]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008bea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bf2:	d054      	beq.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bfa:	f200 808b 	bhi.w	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c04:	f000 8083 	beq.w	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c0e:	f200 8081 	bhi.w	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c18:	d02f      	beq.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c20:	d878      	bhi.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d004      	beq.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c2e:	d012      	beq.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008c30:	e070      	b.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c32:	4b5a      	ldr	r3, [pc, #360]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c3e:	d107      	bne.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 fd73 	bl	8009730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c4e:	e2a4      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c50:	2300      	movs	r3, #0
 8008c52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c54:	e2a1      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c56:	4b51      	ldr	r3, [pc, #324]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c62:	d107      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c64:	f107 0318 	add.w	r3, r7, #24
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fab9 	bl	80091e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008c72:	e292      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c78:	e28f      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c7a:	4b48      	ldr	r3, [pc, #288]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c86:	d107      	bne.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c88:	f107 030c 	add.w	r3, r7, #12
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fbfb 	bl	8009488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c96:	e280      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c9c:	e27d      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c9e:	4b3f      	ldr	r3, [pc, #252]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ca6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ca8:	4b3c      	ldr	r3, [pc, #240]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d10c      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cba:	4b38      	ldr	r3, [pc, #224]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	08db      	lsrs	r3, r3, #3
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	4a36      	ldr	r2, [pc, #216]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ccc:	e01e      	b.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cce:	4b33      	ldr	r3, [pc, #204]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cda:	d106      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ce2:	d102      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ce4:	4b2f      	ldr	r3, [pc, #188]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ce8:	e010      	b.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cea:	4b2c      	ldr	r3, [pc, #176]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cf6:	d106      	bne.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cfe:	d102      	bne.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d00:	4b29      	ldr	r3, [pc, #164]	; (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d04:	e002      	b.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d06:	2300      	movs	r3, #0
 8008d08:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d0a:	e246      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d0c:	e245      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d0e:	4b27      	ldr	r3, [pc, #156]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d12:	e242      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d18:	e23f      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d20:	f040 80a8 	bne.w	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008d24:	4b1d      	ldr	r3, [pc, #116]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d28:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008d2c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d34:	d060      	beq.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d3c:	f200 8097 	bhi.w	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d46:	f000 808f 	beq.w	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d50:	f200 808d 	bhi.w	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d5a:	d03b      	beq.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d62:	f200 8084 	bhi.w	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d004      	beq.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d72:	d01d      	beq.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008d74:	e07b      	b.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d76:	4b09      	ldr	r3, [pc, #36]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d82:	d107      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fcd1 	bl	8009730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d92:	e202      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d98:	e1ff      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d9a:	bf00      	nop
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	03d09000 	.word	0x03d09000
 8008da4:	003d0900 	.word	0x003d0900
 8008da8:	02dc6c00 	.word	0x02dc6c00
 8008dac:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008db0:	4ba3      	ldr	r3, [pc, #652]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dbc:	d107      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dbe:	f107 0318 	add.w	r3, r7, #24
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 fa0c 	bl	80091e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dcc:	e1e5      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dd2:	e1e2      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dd4:	4b9a      	ldr	r3, [pc, #616]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008de0:	d107      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008de2:	f107 030c 	add.w	r3, r7, #12
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fb4e 	bl	8009488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008df0:	e1d3      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008df6:	e1d0      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008df8:	4b91      	ldr	r3, [pc, #580]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e00:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e02:	4b8f      	ldr	r3, [pc, #572]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0304 	and.w	r3, r3, #4
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	d10c      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d109      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e14:	4b8a      	ldr	r3, [pc, #552]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	08db      	lsrs	r3, r3, #3
 8008e1a:	f003 0303 	and.w	r3, r3, #3
 8008e1e:	4a89      	ldr	r2, [pc, #548]	; (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e20:	fa22 f303 	lsr.w	r3, r2, r3
 8008e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e26:	e01e      	b.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e28:	4b85      	ldr	r3, [pc, #532]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e34:	d106      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e3c:	d102      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e3e:	4b82      	ldr	r3, [pc, #520]	; (8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e42:	e010      	b.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e44:	4b7e      	ldr	r3, [pc, #504]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e50:	d106      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e58:	d102      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e5a:	4b7c      	ldr	r3, [pc, #496]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e5e:	e002      	b.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e64:	e199      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e66:	e198      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e68:	4b79      	ldr	r3, [pc, #484]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e6c:	e195      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e72:	e192      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008e7a:	d173      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008e7c:	4b70      	ldr	r3, [pc, #448]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e8c:	d02f      	beq.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e94:	d863      	bhi.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d004      	beq.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ea2:	d012      	beq.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008ea4:	e05b      	b.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ea6:	4b66      	ldr	r3, [pc, #408]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008eb2:	d107      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb4:	f107 0318 	add.w	r3, r7, #24
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 f991 	bl	80091e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ec2:	e16a      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec8:	e167      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008eca:	4b5d      	ldr	r3, [pc, #372]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed6:	d107      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed8:	f107 030c 	add.w	r3, r7, #12
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fad3 	bl	8009488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ee6:	e158      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eec:	e155      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008eee:	4b54      	ldr	r3, [pc, #336]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ef6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ef8:	4b51      	ldr	r3, [pc, #324]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d10c      	bne.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8008f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d109      	bne.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f0a:	4b4d      	ldr	r3, [pc, #308]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	08db      	lsrs	r3, r3, #3
 8008f10:	f003 0303 	and.w	r3, r3, #3
 8008f14:	4a4b      	ldr	r2, [pc, #300]	; (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f16:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f1c:	e01e      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f1e:	4b48      	ldr	r3, [pc, #288]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f2a:	d106      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f32:	d102      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008f34:	4b44      	ldr	r3, [pc, #272]	; (8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f38:	e010      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f3a:	4b41      	ldr	r3, [pc, #260]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f46:	d106      	bne.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f4e:	d102      	bne.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008f50:	4b3e      	ldr	r3, [pc, #248]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f54:	e002      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008f5a:	e11e      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f5c:	e11d      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f62:	e11a      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f6a:	d133      	bne.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008f6c:	4b34      	ldr	r3, [pc, #208]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f74:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d004      	beq.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f82:	d012      	beq.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008f84:	e023      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f86:	4b2e      	ldr	r3, [pc, #184]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f92:	d107      	bne.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 fbc9 	bl	8009730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fa2:	e0fa      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fa8:	e0f7      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008faa:	4b25      	ldr	r3, [pc, #148]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fb6:	d107      	bne.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fb8:	f107 0318 	add.w	r3, r7, #24
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 f90f 	bl	80091e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fc6:	e0e8      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fcc:	e0e5      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd2:	e0e2      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fda:	f040 808f 	bne.w	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008fde:	4b18      	ldr	r3, [pc, #96]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008fe6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fee:	d075      	beq.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ff6:	d87e      	bhi.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ffe:	d060      	beq.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009006:	d876      	bhi.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800900e:	d045      	beq.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009016:	d86e      	bhi.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800901e:	d02b      	beq.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009026:	d866      	bhi.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	2b00      	cmp	r3, #0
 800902c:	d004      	beq.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009034:	d00e      	beq.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009036:	e05e      	b.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009038:	f000 f8bc 	bl	80091b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800903c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800903e:	e0ac      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009040:	58024400 	.word	0x58024400
 8009044:	03d09000 	.word	0x03d09000
 8009048:	003d0900 	.word	0x003d0900
 800904c:	02dc6c00 	.word	0x02dc6c00
 8009050:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009054:	4b53      	ldr	r3, [pc, #332]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800905c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009060:	d107      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009062:	f107 0318 	add.w	r3, r7, #24
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f8ba 	bl	80091e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009070:	e093      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009076:	e090      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009078:	4b4a      	ldr	r3, [pc, #296]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009084:	d107      	bne.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009086:	f107 030c 	add.w	r3, r7, #12
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f9fc 	bl	8009488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009094:	e081      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800909a:	e07e      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800909c:	4b41      	ldr	r3, [pc, #260]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0304 	and.w	r3, r3, #4
 80090a4:	2b04      	cmp	r3, #4
 80090a6:	d109      	bne.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090a8:	4b3e      	ldr	r3, [pc, #248]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	08db      	lsrs	r3, r3, #3
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	4a3d      	ldr	r2, [pc, #244]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80090b4:	fa22 f303 	lsr.w	r3, r2, r3
 80090b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090ba:	e06e      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c0:	e06b      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80090c2:	4b38      	ldr	r3, [pc, #224]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ce:	d102      	bne.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80090d0:	4b36      	ldr	r3, [pc, #216]	; (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80090d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090d4:	e061      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090da:	e05e      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80090dc:	4b31      	ldr	r3, [pc, #196]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090e8:	d102      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80090ea:	4b31      	ldr	r3, [pc, #196]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090ee:	e054      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f4:	e051      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090fa:	e04e      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009102:	d148      	bne.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009104:	4b27      	ldr	r3, [pc, #156]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800910c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800910e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009114:	d02a      	beq.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800911c:	d838      	bhi.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	2b00      	cmp	r3, #0
 8009122:	d004      	beq.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800912a:	d00d      	beq.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800912c:	e030      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800912e:	4b1d      	ldr	r3, [pc, #116]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009136:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800913a:	d102      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800913c:	4b1c      	ldr	r3, [pc, #112]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009140:	e02b      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009146:	e028      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009148:	4b16      	ldr	r3, [pc, #88]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009154:	d107      	bne.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fae8 	bl	8009730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009164:	e019      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800916a:	e016      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800916c:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009178:	d107      	bne.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800917a:	f107 0318 	add.w	r3, r7, #24
 800917e:	4618      	mov	r0, r3
 8009180:	f000 f82e 	bl	80091e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009188:	e007      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800918e:	e004      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009194:	e001      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800919a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800919c:	4618      	mov	r0, r3
 800919e:	3740      	adds	r7, #64	; 0x40
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	58024400 	.word	0x58024400
 80091a8:	03d09000 	.word	0x03d09000
 80091ac:	003d0900 	.word	0x003d0900
 80091b0:	02dc6c00 	.word	0x02dc6c00

080091b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80091b8:	f7fe fb8e 	bl	80078d8 <HAL_RCC_GetHCLKFreq>
 80091bc:	4602      	mov	r2, r0
 80091be:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	091b      	lsrs	r3, r3, #4
 80091c4:	f003 0307 	and.w	r3, r3, #7
 80091c8:	4904      	ldr	r1, [pc, #16]	; (80091dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80091ca:	5ccb      	ldrb	r3, [r1, r3]
 80091cc:	f003 031f 	and.w	r3, r3, #31
 80091d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	58024400 	.word	0x58024400
 80091dc:	0800cd14 	.word	0x0800cd14

080091e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b089      	sub	sp, #36	; 0x24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091e8:	4ba1      	ldr	r3, [pc, #644]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ec:	f003 0303 	and.w	r3, r3, #3
 80091f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80091f2:	4b9f      	ldr	r3, [pc, #636]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f6:	0b1b      	lsrs	r3, r3, #12
 80091f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80091fe:	4b9c      	ldr	r3, [pc, #624]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009202:	091b      	lsrs	r3, r3, #4
 8009204:	f003 0301 	and.w	r3, r3, #1
 8009208:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800920a:	4b99      	ldr	r3, [pc, #612]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800920c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920e:	08db      	lsrs	r3, r3, #3
 8009210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	fb02 f303 	mul.w	r3, r2, r3
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009222:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 8111 	beq.w	8009450 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	2b02      	cmp	r3, #2
 8009232:	f000 8083 	beq.w	800933c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	2b02      	cmp	r3, #2
 800923a:	f200 80a1 	bhi.w	8009380 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d056      	beq.n	80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800924a:	e099      	b.n	8009380 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800924c:	4b88      	ldr	r3, [pc, #544]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b00      	cmp	r3, #0
 8009256:	d02d      	beq.n	80092b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009258:	4b85      	ldr	r3, [pc, #532]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	08db      	lsrs	r3, r3, #3
 800925e:	f003 0303 	and.w	r3, r3, #3
 8009262:	4a84      	ldr	r2, [pc, #528]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009264:	fa22 f303 	lsr.w	r3, r2, r3
 8009268:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	ee07 3a90 	vmov	s15, r3
 8009270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	ee07 3a90 	vmov	s15, r3
 800927a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009282:	4b7b      	ldr	r3, [pc, #492]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800928a:	ee07 3a90 	vmov	s15, r3
 800928e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009292:	ed97 6a03 	vldr	s12, [r7, #12]
 8009296:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800929a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800929e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092b2:	e087      	b.n	80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	ee07 3a90 	vmov	s15, r3
 80092ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800947c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80092c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092c6:	4b6a      	ldr	r3, [pc, #424]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ce:	ee07 3a90 	vmov	s15, r3
 80092d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092f6:	e065      	b.n	80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	ee07 3a90 	vmov	s15, r3
 80092fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009302:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009480 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800930a:	4b59      	ldr	r3, [pc, #356]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800930c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009312:	ee07 3a90 	vmov	s15, r3
 8009316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931a:	ed97 6a03 	vldr	s12, [r7, #12]
 800931e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800932a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800932e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009336:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800933a:	e043      	b.n	80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009346:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800934a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800934e:	4b48      	ldr	r3, [pc, #288]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009356:	ee07 3a90 	vmov	s15, r3
 800935a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800935e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009362:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800936a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800936e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800937e:	e021      	b.n	80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	ee07 3a90 	vmov	s15, r3
 8009386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009480 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800938e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009392:	4b37      	ldr	r3, [pc, #220]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80093c4:	4b2a      	ldr	r3, [pc, #168]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c8:	0a5b      	lsrs	r3, r3, #9
 80093ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093de:	edd7 6a07 	vldr	s13, [r7, #28]
 80093e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ea:	ee17 2a90 	vmov	r2, s15
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80093f2:	4b1f      	ldr	r3, [pc, #124]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f6:	0c1b      	lsrs	r3, r3, #16
 80093f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009408:	ee37 7a87 	vadd.f32	s14, s15, s14
 800940c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009418:	ee17 2a90 	vmov	r2, s15
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009420:	4b13      	ldr	r3, [pc, #76]	; (8009470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009424:	0e1b      	lsrs	r3, r3, #24
 8009426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800943a:	edd7 6a07 	vldr	s13, [r7, #28]
 800943e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009446:	ee17 2a90 	vmov	r2, s15
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800944e:	e008      	b.n	8009462 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	609a      	str	r2, [r3, #8]
}
 8009462:	bf00      	nop
 8009464:	3724      	adds	r7, #36	; 0x24
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	58024400 	.word	0x58024400
 8009474:	03d09000 	.word	0x03d09000
 8009478:	46000000 	.word	0x46000000
 800947c:	4c742400 	.word	0x4c742400
 8009480:	4a742400 	.word	0x4a742400
 8009484:	4c371b00 	.word	0x4c371b00

08009488 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009488:	b480      	push	{r7}
 800948a:	b089      	sub	sp, #36	; 0x24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009490:	4ba1      	ldr	r3, [pc, #644]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009494:	f003 0303 	and.w	r3, r3, #3
 8009498:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800949a:	4b9f      	ldr	r3, [pc, #636]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800949c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949e:	0d1b      	lsrs	r3, r3, #20
 80094a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094a6:	4b9c      	ldr	r3, [pc, #624]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	0a1b      	lsrs	r3, r3, #8
 80094ac:	f003 0301 	and.w	r3, r3, #1
 80094b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80094b2:	4b99      	ldr	r3, [pc, #612]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b6:	08db      	lsrs	r3, r3, #3
 80094b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	fb02 f303 	mul.w	r3, r2, r3
 80094c2:	ee07 3a90 	vmov	s15, r3
 80094c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 8111 	beq.w	80096f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	2b02      	cmp	r3, #2
 80094da:	f000 8083 	beq.w	80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	f200 80a1 	bhi.w	8009628 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d056      	beq.n	80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80094f2:	e099      	b.n	8009628 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094f4:	4b88      	ldr	r3, [pc, #544]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0320 	and.w	r3, r3, #32
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d02d      	beq.n	800955c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009500:	4b85      	ldr	r3, [pc, #532]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	08db      	lsrs	r3, r3, #3
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	4a84      	ldr	r2, [pc, #528]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800950c:	fa22 f303 	lsr.w	r3, r2, r3
 8009510:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	ee07 3a90 	vmov	s15, r3
 8009518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800952a:	4b7b      	ldr	r3, [pc, #492]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800952c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800953a:	ed97 6a03 	vldr	s12, [r7, #12]
 800953e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800954a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800954e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009556:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800955a:	e087      	b.n	800966c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	ee07 3a90 	vmov	s15, r3
 8009562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009566:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800956a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800956e:	4b6a      	ldr	r3, [pc, #424]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009576:	ee07 3a90 	vmov	s15, r3
 800957a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800957e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009582:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800958a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800958e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800959a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800959e:	e065      	b.n	800966c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009728 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b2:	4b59      	ldr	r3, [pc, #356]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ba:	ee07 3a90 	vmov	s15, r3
 80095be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095e2:	e043      	b.n	800966c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800972c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80095f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095f6:	4b48      	ldr	r3, [pc, #288]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009606:	ed97 6a03 	vldr	s12, [r7, #12]
 800960a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800960e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800961a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800961e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009626:	e021      	b.n	800966c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009632:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009728 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963a:	4b37      	ldr	r3, [pc, #220]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964a:	ed97 6a03 	vldr	s12, [r7, #12]
 800964e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800965e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800966a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800966c:	4b2a      	ldr	r3, [pc, #168]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800966e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009670:	0a5b      	lsrs	r3, r3, #9
 8009672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009676:	ee07 3a90 	vmov	s15, r3
 800967a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009686:	edd7 6a07 	vldr	s13, [r7, #28]
 800968a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800968e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009692:	ee17 2a90 	vmov	r2, s15
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800969a:	4b1f      	ldr	r3, [pc, #124]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800969c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969e:	0c1b      	lsrs	r3, r3, #16
 80096a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a4:	ee07 3a90 	vmov	s15, r3
 80096a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80096b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096c0:	ee17 2a90 	vmov	r2, s15
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80096c8:	4b13      	ldr	r3, [pc, #76]	; (8009718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096cc:	0e1b      	lsrs	r3, r3, #24
 80096ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d2:	ee07 3a90 	vmov	s15, r3
 80096d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80096e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ee:	ee17 2a90 	vmov	r2, s15
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80096f6:	e008      	b.n	800970a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	609a      	str	r2, [r3, #8]
}
 800970a:	bf00      	nop
 800970c:	3724      	adds	r7, #36	; 0x24
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	58024400 	.word	0x58024400
 800971c:	03d09000 	.word	0x03d09000
 8009720:	46000000 	.word	0x46000000
 8009724:	4c742400 	.word	0x4c742400
 8009728:	4a742400 	.word	0x4a742400
 800972c:	4c371b00 	.word	0x4c371b00

08009730 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009730:	b480      	push	{r7}
 8009732:	b089      	sub	sp, #36	; 0x24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009738:	4ba0      	ldr	r3, [pc, #640]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800973a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800973c:	f003 0303 	and.w	r3, r3, #3
 8009740:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009742:	4b9e      	ldr	r3, [pc, #632]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009746:	091b      	lsrs	r3, r3, #4
 8009748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800974c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800974e:	4b9b      	ldr	r3, [pc, #620]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009758:	4b98      	ldr	r3, [pc, #608]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800975a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975c:	08db      	lsrs	r3, r3, #3
 800975e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	fb02 f303 	mul.w	r3, r2, r3
 8009768:	ee07 3a90 	vmov	s15, r3
 800976c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009770:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 8111 	beq.w	800999e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	2b02      	cmp	r3, #2
 8009780:	f000 8083 	beq.w	800988a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	2b02      	cmp	r3, #2
 8009788:	f200 80a1 	bhi.w	80098ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d056      	beq.n	8009846 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009798:	e099      	b.n	80098ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800979a:	4b88      	ldr	r3, [pc, #544]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0320 	and.w	r3, r3, #32
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d02d      	beq.n	8009802 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097a6:	4b85      	ldr	r3, [pc, #532]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	08db      	lsrs	r3, r3, #3
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	4a83      	ldr	r2, [pc, #524]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80097b2:	fa22 f303 	lsr.w	r3, r2, r3
 80097b6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	ee07 3a90 	vmov	s15, r3
 80097be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	ee07 3a90 	vmov	s15, r3
 80097c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097d0:	4b7a      	ldr	r3, [pc, #488]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d8:	ee07 3a90 	vmov	s15, r3
 80097dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80099c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097fc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009800:	e087      	b.n	8009912 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	ee07 3a90 	vmov	s15, r3
 8009808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80099c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009814:	4b69      	ldr	r3, [pc, #420]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800981c:	ee07 3a90 	vmov	s15, r3
 8009820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009824:	ed97 6a03 	vldr	s12, [r7, #12]
 8009828:	eddf 5a66 	vldr	s11, [pc, #408]	; 80099c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800982c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800983c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009840:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009844:	e065      	b.n	8009912 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	ee07 3a90 	vmov	s15, r3
 800984c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009850:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80099cc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009858:	4b58      	ldr	r3, [pc, #352]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009860:	ee07 3a90 	vmov	s15, r3
 8009864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009868:	ed97 6a03 	vldr	s12, [r7, #12]
 800986c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80099c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800987c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009884:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009888:	e043      	b.n	8009912 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009894:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80099d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800989c:	4b47      	ldr	r3, [pc, #284]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800989e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a4:	ee07 3a90 	vmov	s15, r3
 80098a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80098b0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80099c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098cc:	e021      	b.n	8009912 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	ee07 3a90 	vmov	s15, r3
 80098d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80099c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80098dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e0:	4b36      	ldr	r3, [pc, #216]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e8:	ee07 3a90 	vmov	s15, r3
 80098ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80098f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80099c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009900:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009904:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800990c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009910:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009912:	4b2a      	ldr	r3, [pc, #168]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009916:	0a5b      	lsrs	r3, r3, #9
 8009918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800991c:	ee07 3a90 	vmov	s15, r3
 8009920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800992c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009938:	ee17 2a90 	vmov	r2, s15
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009940:	4b1e      	ldr	r3, [pc, #120]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009944:	0c1b      	lsrs	r3, r3, #16
 8009946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800994a:	ee07 3a90 	vmov	s15, r3
 800994e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009952:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009956:	ee37 7a87 	vadd.f32	s14, s15, s14
 800995a:	edd7 6a07 	vldr	s13, [r7, #28]
 800995e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009966:	ee17 2a90 	vmov	r2, s15
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800996e:	4b13      	ldr	r3, [pc, #76]	; (80099bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009972:	0e1b      	lsrs	r3, r3, #24
 8009974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009978:	ee07 3a90 	vmov	s15, r3
 800997c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009984:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009988:	edd7 6a07 	vldr	s13, [r7, #28]
 800998c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009994:	ee17 2a90 	vmov	r2, s15
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800999c:	e008      	b.n	80099b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	609a      	str	r2, [r3, #8]
}
 80099b0:	bf00      	nop
 80099b2:	3724      	adds	r7, #36	; 0x24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	58024400 	.word	0x58024400
 80099c0:	03d09000 	.word	0x03d09000
 80099c4:	46000000 	.word	0x46000000
 80099c8:	4c742400 	.word	0x4c742400
 80099cc:	4a742400 	.word	0x4a742400
 80099d0:	4c371b00 	.word	0x4c371b00

080099d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099e2:	4b53      	ldr	r3, [pc, #332]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 80099e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e6:	f003 0303 	and.w	r3, r3, #3
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d101      	bne.n	80099f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e099      	b.n	8009b26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80099f2:	4b4f      	ldr	r3, [pc, #316]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a4e      	ldr	r2, [pc, #312]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 80099f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099fe:	f7f9 fad7 	bl	8002fb0 <HAL_GetTick>
 8009a02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a04:	e008      	b.n	8009a18 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a06:	f7f9 fad3 	bl	8002fb0 <HAL_GetTick>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d901      	bls.n	8009a18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e086      	b.n	8009b26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a18:	4b45      	ldr	r3, [pc, #276]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1f0      	bne.n	8009a06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a24:	4b42      	ldr	r3, [pc, #264]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	031b      	lsls	r3, r3, #12
 8009a32:	493f      	ldr	r1, [pc, #252]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009a34:	4313      	orrs	r3, r2
 8009a36:	628b      	str	r3, [r1, #40]	; 0x28
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	025b      	lsls	r3, r3, #9
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	431a      	orrs	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	041b      	lsls	r3, r3, #16
 8009a56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	061b      	lsls	r3, r3, #24
 8009a64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a68:	4931      	ldr	r1, [pc, #196]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009a6e:	4b30      	ldr	r3, [pc, #192]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	492d      	ldr	r1, [pc, #180]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a80:	4b2b      	ldr	r3, [pc, #172]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a84:	f023 0220 	bic.w	r2, r3, #32
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	699b      	ldr	r3, [r3, #24]
 8009a8c:	4928      	ldr	r1, [pc, #160]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009a92:	4b27      	ldr	r3, [pc, #156]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a96:	4a26      	ldr	r2, [pc, #152]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009a98:	f023 0310 	bic.w	r3, r3, #16
 8009a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a9e:	4b24      	ldr	r3, [pc, #144]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009aa2:	4b24      	ldr	r3, [pc, #144]	; (8009b34 <RCCEx_PLL2_Config+0x160>)
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	69d2      	ldr	r2, [r2, #28]
 8009aaa:	00d2      	lsls	r2, r2, #3
 8009aac:	4920      	ldr	r1, [pc, #128]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ab2:	4b1f      	ldr	r3, [pc, #124]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab6:	4a1e      	ldr	r2, [pc, #120]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009ab8:	f043 0310 	orr.w	r3, r3, #16
 8009abc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d106      	bne.n	8009ad2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ac4:	4b1a      	ldr	r3, [pc, #104]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	4a19      	ldr	r2, [pc, #100]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009aca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ace:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ad0:	e00f      	b.n	8009af2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d106      	bne.n	8009ae6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ad8:	4b15      	ldr	r3, [pc, #84]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009adc:	4a14      	ldr	r2, [pc, #80]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ae2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ae4:	e005      	b.n	8009af2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009ae6:	4b12      	ldr	r3, [pc, #72]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aea:	4a11      	ldr	r2, [pc, #68]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009aec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009af0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009af2:	4b0f      	ldr	r3, [pc, #60]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a0e      	ldr	r2, [pc, #56]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009af8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009afe:	f7f9 fa57 	bl	8002fb0 <HAL_GetTick>
 8009b02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b04:	e008      	b.n	8009b18 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b06:	f7f9 fa53 	bl	8002fb0 <HAL_GetTick>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d901      	bls.n	8009b18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b14:	2303      	movs	r3, #3
 8009b16:	e006      	b.n	8009b26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b18:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <RCCEx_PLL2_Config+0x15c>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d0f0      	beq.n	8009b06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	58024400 	.word	0x58024400
 8009b34:	ffff0007 	.word	0xffff0007

08009b38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b46:	4b53      	ldr	r3, [pc, #332]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4a:	f003 0303 	and.w	r3, r3, #3
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d101      	bne.n	8009b56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e099      	b.n	8009c8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b56:	4b4f      	ldr	r3, [pc, #316]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a4e      	ldr	r2, [pc, #312]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b62:	f7f9 fa25 	bl	8002fb0 <HAL_GetTick>
 8009b66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b68:	e008      	b.n	8009b7c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b6a:	f7f9 fa21 	bl	8002fb0 <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d901      	bls.n	8009b7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e086      	b.n	8009c8a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b7c:	4b45      	ldr	r3, [pc, #276]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1f0      	bne.n	8009b6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009b88:	4b42      	ldr	r3, [pc, #264]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	051b      	lsls	r3, r3, #20
 8009b96:	493f      	ldr	r1, [pc, #252]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	628b      	str	r3, [r1, #40]	; 0x28
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	025b      	lsls	r3, r3, #9
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	041b      	lsls	r3, r3, #16
 8009bba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	061b      	lsls	r3, r3, #24
 8009bc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009bcc:	4931      	ldr	r1, [pc, #196]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009bd2:	4b30      	ldr	r3, [pc, #192]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	492d      	ldr	r1, [pc, #180]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009be4:	4b2b      	ldr	r3, [pc, #172]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	4928      	ldr	r1, [pc, #160]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009bf6:	4b27      	ldr	r3, [pc, #156]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfa:	4a26      	ldr	r2, [pc, #152]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c02:	4b24      	ldr	r3, [pc, #144]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c06:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <RCCEx_PLL3_Config+0x160>)
 8009c08:	4013      	ands	r3, r2
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	69d2      	ldr	r2, [r2, #28]
 8009c0e:	00d2      	lsls	r2, r2, #3
 8009c10:	4920      	ldr	r1, [pc, #128]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c16:	4b1f      	ldr	r3, [pc, #124]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	4a1e      	ldr	r2, [pc, #120]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d106      	bne.n	8009c36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c28:	4b1a      	ldr	r3, [pc, #104]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	4a19      	ldr	r2, [pc, #100]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c34:	e00f      	b.n	8009c56 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d106      	bne.n	8009c4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c3c:	4b15      	ldr	r3, [pc, #84]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c40:	4a14      	ldr	r2, [pc, #80]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c48:	e005      	b.n	8009c56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c4a:	4b12      	ldr	r3, [pc, #72]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4e:	4a11      	ldr	r2, [pc, #68]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c56:	4b0f      	ldr	r3, [pc, #60]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a0e      	ldr	r2, [pc, #56]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c62:	f7f9 f9a5 	bl	8002fb0 <HAL_GetTick>
 8009c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c68:	e008      	b.n	8009c7c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009c6a:	f7f9 f9a1 	bl	8002fb0 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d901      	bls.n	8009c7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e006      	b.n	8009c8a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c7c:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <RCCEx_PLL3_Config+0x15c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0f0      	beq.n	8009c6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	58024400 	.word	0x58024400
 8009c98:	ffff0007 	.word	0xffff0007

08009c9c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e0eb      	b.n	8009e8a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a75      	ldr	r2, [pc, #468]	; (8009e94 <HAL_SPI_Init+0x1f8>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d00f      	beq.n	8009ce2 <HAL_SPI_Init+0x46>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a74      	ldr	r2, [pc, #464]	; (8009e98 <HAL_SPI_Init+0x1fc>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d00a      	beq.n	8009ce2 <HAL_SPI_Init+0x46>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a72      	ldr	r2, [pc, #456]	; (8009e9c <HAL_SPI_Init+0x200>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d005      	beq.n	8009ce2 <HAL_SPI_Init+0x46>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	2b0f      	cmp	r3, #15
 8009cdc:	d901      	bls.n	8009ce2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e0d3      	b.n	8009e8a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f8dc 	bl	8009ea0 <SPI_GetPacketSize>
 8009ce8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a69      	ldr	r2, [pc, #420]	; (8009e94 <HAL_SPI_Init+0x1f8>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d00c      	beq.n	8009d0e <HAL_SPI_Init+0x72>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a67      	ldr	r2, [pc, #412]	; (8009e98 <HAL_SPI_Init+0x1fc>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d007      	beq.n	8009d0e <HAL_SPI_Init+0x72>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a66      	ldr	r2, [pc, #408]	; (8009e9c <HAL_SPI_Init+0x200>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d002      	beq.n	8009d0e <HAL_SPI_Init+0x72>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b08      	cmp	r3, #8
 8009d0c:	d811      	bhi.n	8009d32 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d12:	4a60      	ldr	r2, [pc, #384]	; (8009e94 <HAL_SPI_Init+0x1f8>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d009      	beq.n	8009d2c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a5e      	ldr	r2, [pc, #376]	; (8009e98 <HAL_SPI_Init+0x1fc>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d004      	beq.n	8009d2c <HAL_SPI_Init+0x90>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a5d      	ldr	r2, [pc, #372]	; (8009e9c <HAL_SPI_Init+0x200>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d104      	bne.n	8009d36 <HAL_SPI_Init+0x9a>
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b10      	cmp	r3, #16
 8009d30:	d901      	bls.n	8009d36 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e0a9      	b.n	8009e8a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d106      	bne.n	8009d50 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7f8 fb0a 	bl	8002364 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2202      	movs	r2, #2
 8009d54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f022 0201 	bic.w	r2, r2, #1
 8009d66:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d70:	d119      	bne.n	8009da6 <HAL_SPI_Init+0x10a>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d7a:	d103      	bne.n	8009d84 <HAL_SPI_Init+0xe8>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d008      	beq.n	8009d96 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10c      	bne.n	8009da6 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d94:	d107      	bne.n	8009da6 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009da4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	69da      	ldr	r2, [r3, #28]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dae:	431a      	orrs	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	431a      	orrs	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009db8:	ea42 0103 	orr.w	r1, r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68da      	ldr	r2, [r3, #12]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	430a      	orrs	r2, r1
 8009dc6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	431a      	orrs	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	431a      	orrs	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	431a      	orrs	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	431a      	orrs	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	431a      	orrs	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e06:	ea42 0103 	orr.w	r1, r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d113      	bne.n	8009e46 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e30:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e44:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0201 	bic.w	r2, r2, #1
 8009e54:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00a      	beq.n	8009e78 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	40013000 	.word	0x40013000
 8009e98:	40003800 	.word	0x40003800
 8009e9c:	40003c00 	.word	0x40003c00

08009ea0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eac:	095b      	lsrs	r3, r3, #5
 8009eae:	3301      	adds	r3, #1
 8009eb0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	3307      	adds	r3, #7
 8009ebe:	08db      	lsrs	r3, r3, #3
 8009ec0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	fb02 f303 	mul.w	r3, r2, r3
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e049      	b.n	8009f7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d106      	bne.n	8009f02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7f8 fbd5 	bl	80026ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2202      	movs	r2, #2
 8009f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	3304      	adds	r3, #4
 8009f12:	4619      	mov	r1, r3
 8009f14:	4610      	mov	r0, r2
 8009f16:	f000 fe97 	bl	800ac48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d001      	beq.n	8009f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e04f      	b.n	800a03c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68da      	ldr	r2, [r3, #12]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f042 0201 	orr.w	r2, r2, #1
 8009fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a23      	ldr	r2, [pc, #140]	; (800a048 <HAL_TIM_Base_Start_IT+0xc4>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d01d      	beq.n	8009ffa <HAL_TIM_Base_Start_IT+0x76>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc6:	d018      	beq.n	8009ffa <HAL_TIM_Base_Start_IT+0x76>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a1f      	ldr	r2, [pc, #124]	; (800a04c <HAL_TIM_Base_Start_IT+0xc8>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d013      	beq.n	8009ffa <HAL_TIM_Base_Start_IT+0x76>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a1e      	ldr	r2, [pc, #120]	; (800a050 <HAL_TIM_Base_Start_IT+0xcc>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d00e      	beq.n	8009ffa <HAL_TIM_Base_Start_IT+0x76>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a1c      	ldr	r2, [pc, #112]	; (800a054 <HAL_TIM_Base_Start_IT+0xd0>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d009      	beq.n	8009ffa <HAL_TIM_Base_Start_IT+0x76>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a1b      	ldr	r2, [pc, #108]	; (800a058 <HAL_TIM_Base_Start_IT+0xd4>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d004      	beq.n	8009ffa <HAL_TIM_Base_Start_IT+0x76>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a19      	ldr	r2, [pc, #100]	; (800a05c <HAL_TIM_Base_Start_IT+0xd8>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d115      	bne.n	800a026 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	4b17      	ldr	r3, [pc, #92]	; (800a060 <HAL_TIM_Base_Start_IT+0xdc>)
 800a002:	4013      	ands	r3, r2
 800a004:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b06      	cmp	r3, #6
 800a00a:	d015      	beq.n	800a038 <HAL_TIM_Base_Start_IT+0xb4>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a012:	d011      	beq.n	800a038 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f042 0201 	orr.w	r2, r2, #1
 800a022:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a024:	e008      	b.n	800a038 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f042 0201 	orr.w	r2, r2, #1
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	e000      	b.n	800a03a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a038:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	40010000 	.word	0x40010000
 800a04c:	40000400 	.word	0x40000400
 800a050:	40000800 	.word	0x40000800
 800a054:	40000c00 	.word	0x40000c00
 800a058:	40010400 	.word	0x40010400
 800a05c:	40001800 	.word	0x40001800
 800a060:	00010007 	.word	0x00010007

0800a064 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e049      	b.n	800a10a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f841 	bl	800a112 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2202      	movs	r2, #2
 800a094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	f000 fdd0 	bl	800ac48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a112:	b480      	push	{r7}
 800a114:	b083      	sub	sp, #12
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a11a:	bf00      	nop
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
	...

0800a128 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d109      	bne.n	800a14c <HAL_TIM_PWM_Start+0x24>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	2b01      	cmp	r3, #1
 800a142:	bf14      	ite	ne
 800a144:	2301      	movne	r3, #1
 800a146:	2300      	moveq	r3, #0
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	e03c      	b.n	800a1c6 <HAL_TIM_PWM_Start+0x9e>
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	2b04      	cmp	r3, #4
 800a150:	d109      	bne.n	800a166 <HAL_TIM_PWM_Start+0x3e>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	bf14      	ite	ne
 800a15e:	2301      	movne	r3, #1
 800a160:	2300      	moveq	r3, #0
 800a162:	b2db      	uxtb	r3, r3
 800a164:	e02f      	b.n	800a1c6 <HAL_TIM_PWM_Start+0x9e>
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d109      	bne.n	800a180 <HAL_TIM_PWM_Start+0x58>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b01      	cmp	r3, #1
 800a176:	bf14      	ite	ne
 800a178:	2301      	movne	r3, #1
 800a17a:	2300      	moveq	r3, #0
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	e022      	b.n	800a1c6 <HAL_TIM_PWM_Start+0x9e>
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b0c      	cmp	r3, #12
 800a184:	d109      	bne.n	800a19a <HAL_TIM_PWM_Start+0x72>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b01      	cmp	r3, #1
 800a190:	bf14      	ite	ne
 800a192:	2301      	movne	r3, #1
 800a194:	2300      	moveq	r3, #0
 800a196:	b2db      	uxtb	r3, r3
 800a198:	e015      	b.n	800a1c6 <HAL_TIM_PWM_Start+0x9e>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b10      	cmp	r3, #16
 800a19e:	d109      	bne.n	800a1b4 <HAL_TIM_PWM_Start+0x8c>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	bf14      	ite	ne
 800a1ac:	2301      	movne	r3, #1
 800a1ae:	2300      	moveq	r3, #0
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	e008      	b.n	800a1c6 <HAL_TIM_PWM_Start+0x9e>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	bf14      	ite	ne
 800a1c0:	2301      	movne	r3, #1
 800a1c2:	2300      	moveq	r3, #0
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e09c      	b.n	800a308 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d104      	bne.n	800a1de <HAL_TIM_PWM_Start+0xb6>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1dc:	e023      	b.n	800a226 <HAL_TIM_PWM_Start+0xfe>
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	d104      	bne.n	800a1ee <HAL_TIM_PWM_Start+0xc6>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1ec:	e01b      	b.n	800a226 <HAL_TIM_PWM_Start+0xfe>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b08      	cmp	r3, #8
 800a1f2:	d104      	bne.n	800a1fe <HAL_TIM_PWM_Start+0xd6>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1fc:	e013      	b.n	800a226 <HAL_TIM_PWM_Start+0xfe>
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b0c      	cmp	r3, #12
 800a202:	d104      	bne.n	800a20e <HAL_TIM_PWM_Start+0xe6>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a20c:	e00b      	b.n	800a226 <HAL_TIM_PWM_Start+0xfe>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b10      	cmp	r3, #16
 800a212:	d104      	bne.n	800a21e <HAL_TIM_PWM_Start+0xf6>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a21c:	e003      	b.n	800a226 <HAL_TIM_PWM_Start+0xfe>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2202      	movs	r2, #2
 800a222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2201      	movs	r2, #1
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	4618      	mov	r0, r3
 800a230:	f001 f910 	bl	800b454 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a35      	ldr	r2, [pc, #212]	; (800a310 <HAL_TIM_PWM_Start+0x1e8>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d013      	beq.n	800a266 <HAL_TIM_PWM_Start+0x13e>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a34      	ldr	r2, [pc, #208]	; (800a314 <HAL_TIM_PWM_Start+0x1ec>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d00e      	beq.n	800a266 <HAL_TIM_PWM_Start+0x13e>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a32      	ldr	r2, [pc, #200]	; (800a318 <HAL_TIM_PWM_Start+0x1f0>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d009      	beq.n	800a266 <HAL_TIM_PWM_Start+0x13e>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a31      	ldr	r2, [pc, #196]	; (800a31c <HAL_TIM_PWM_Start+0x1f4>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d004      	beq.n	800a266 <HAL_TIM_PWM_Start+0x13e>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a2f      	ldr	r2, [pc, #188]	; (800a320 <HAL_TIM_PWM_Start+0x1f8>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d101      	bne.n	800a26a <HAL_TIM_PWM_Start+0x142>
 800a266:	2301      	movs	r3, #1
 800a268:	e000      	b.n	800a26c <HAL_TIM_PWM_Start+0x144>
 800a26a:	2300      	movs	r3, #0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d007      	beq.n	800a280 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a27e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a22      	ldr	r2, [pc, #136]	; (800a310 <HAL_TIM_PWM_Start+0x1e8>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d01d      	beq.n	800a2c6 <HAL_TIM_PWM_Start+0x19e>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a292:	d018      	beq.n	800a2c6 <HAL_TIM_PWM_Start+0x19e>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a22      	ldr	r2, [pc, #136]	; (800a324 <HAL_TIM_PWM_Start+0x1fc>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d013      	beq.n	800a2c6 <HAL_TIM_PWM_Start+0x19e>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a21      	ldr	r2, [pc, #132]	; (800a328 <HAL_TIM_PWM_Start+0x200>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d00e      	beq.n	800a2c6 <HAL_TIM_PWM_Start+0x19e>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a1f      	ldr	r2, [pc, #124]	; (800a32c <HAL_TIM_PWM_Start+0x204>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d009      	beq.n	800a2c6 <HAL_TIM_PWM_Start+0x19e>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a17      	ldr	r2, [pc, #92]	; (800a314 <HAL_TIM_PWM_Start+0x1ec>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d004      	beq.n	800a2c6 <HAL_TIM_PWM_Start+0x19e>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a1b      	ldr	r2, [pc, #108]	; (800a330 <HAL_TIM_PWM_Start+0x208>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d115      	bne.n	800a2f2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	689a      	ldr	r2, [r3, #8]
 800a2cc:	4b19      	ldr	r3, [pc, #100]	; (800a334 <HAL_TIM_PWM_Start+0x20c>)
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b06      	cmp	r3, #6
 800a2d6:	d015      	beq.n	800a304 <HAL_TIM_PWM_Start+0x1dc>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2de:	d011      	beq.n	800a304 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f042 0201 	orr.w	r2, r2, #1
 800a2ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f0:	e008      	b.n	800a304 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f042 0201 	orr.w	r2, r2, #1
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	e000      	b.n	800a306 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a304:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	40010000 	.word	0x40010000
 800a314:	40010400 	.word	0x40010400
 800a318:	40014000 	.word	0x40014000
 800a31c:	40014400 	.word	0x40014400
 800a320:	40014800 	.word	0x40014800
 800a324:	40000400 	.word	0x40000400
 800a328:	40000800 	.word	0x40000800
 800a32c:	40000c00 	.word	0x40000c00
 800a330:	40001800 	.word	0x40001800
 800a334:	00010007 	.word	0x00010007

0800a338 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2200      	movs	r2, #0
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 f882 	bl	800b454 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a3e      	ldr	r2, [pc, #248]	; (800a450 <HAL_TIM_PWM_Stop+0x118>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d013      	beq.n	800a382 <HAL_TIM_PWM_Stop+0x4a>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a3d      	ldr	r2, [pc, #244]	; (800a454 <HAL_TIM_PWM_Stop+0x11c>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d00e      	beq.n	800a382 <HAL_TIM_PWM_Stop+0x4a>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a3b      	ldr	r2, [pc, #236]	; (800a458 <HAL_TIM_PWM_Stop+0x120>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d009      	beq.n	800a382 <HAL_TIM_PWM_Stop+0x4a>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a3a      	ldr	r2, [pc, #232]	; (800a45c <HAL_TIM_PWM_Stop+0x124>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d004      	beq.n	800a382 <HAL_TIM_PWM_Stop+0x4a>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a38      	ldr	r2, [pc, #224]	; (800a460 <HAL_TIM_PWM_Stop+0x128>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d101      	bne.n	800a386 <HAL_TIM_PWM_Stop+0x4e>
 800a382:	2301      	movs	r3, #1
 800a384:	e000      	b.n	800a388 <HAL_TIM_PWM_Stop+0x50>
 800a386:	2300      	movs	r3, #0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d017      	beq.n	800a3bc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6a1a      	ldr	r2, [r3, #32]
 800a392:	f241 1311 	movw	r3, #4369	; 0x1111
 800a396:	4013      	ands	r3, r2
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10f      	bne.n	800a3bc <HAL_TIM_PWM_Stop+0x84>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6a1a      	ldr	r2, [r3, #32]
 800a3a2:	f240 4344 	movw	r3, #1092	; 0x444
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d107      	bne.n	800a3bc <HAL_TIM_PWM_Stop+0x84>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6a1a      	ldr	r2, [r3, #32]
 800a3c2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10f      	bne.n	800a3ec <HAL_TIM_PWM_Stop+0xb4>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6a1a      	ldr	r2, [r3, #32]
 800a3d2:	f240 4344 	movw	r3, #1092	; 0x444
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d107      	bne.n	800a3ec <HAL_TIM_PWM_Stop+0xb4>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f022 0201 	bic.w	r2, r2, #1
 800a3ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d104      	bne.n	800a3fc <HAL_TIM_PWM_Stop+0xc4>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3fa:	e023      	b.n	800a444 <HAL_TIM_PWM_Stop+0x10c>
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	2b04      	cmp	r3, #4
 800a400:	d104      	bne.n	800a40c <HAL_TIM_PWM_Stop+0xd4>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a40a:	e01b      	b.n	800a444 <HAL_TIM_PWM_Stop+0x10c>
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2b08      	cmp	r3, #8
 800a410:	d104      	bne.n	800a41c <HAL_TIM_PWM_Stop+0xe4>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a41a:	e013      	b.n	800a444 <HAL_TIM_PWM_Stop+0x10c>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	2b0c      	cmp	r3, #12
 800a420:	d104      	bne.n	800a42c <HAL_TIM_PWM_Stop+0xf4>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a42a:	e00b      	b.n	800a444 <HAL_TIM_PWM_Stop+0x10c>
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	2b10      	cmp	r3, #16
 800a430:	d104      	bne.n	800a43c <HAL_TIM_PWM_Stop+0x104>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a43a:	e003      	b.n	800a444 <HAL_TIM_PWM_Stop+0x10c>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	40010000 	.word	0x40010000
 800a454:	40010400 	.word	0x40010400
 800a458:	40014000 	.word	0x40014000
 800a45c:	40014400 	.word	0x40014400
 800a460:	40014800 	.word	0x40014800

0800a464 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d101      	bne.n	800a478 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e08f      	b.n	800a598 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b00      	cmp	r3, #0
 800a482:	d106      	bne.n	800a492 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7f7 fff5 	bl	800247c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2202      	movs	r2, #2
 800a496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6899      	ldr	r1, [r3, #8]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	4b3e      	ldr	r3, [pc, #248]	; (800a5a0 <HAL_TIM_Encoder_Init+0x13c>)
 800a4a6:	400b      	ands	r3, r1
 800a4a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	f000 fbc7 	bl	800ac48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	699b      	ldr	r3, [r3, #24]
 800a4c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	4b31      	ldr	r3, [pc, #196]	; (800a5a4 <HAL_TIM_Encoder_Init+0x140>)
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	4b2b      	ldr	r3, [pc, #172]	; (800a5a8 <HAL_TIM_Encoder_Init+0x144>)
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a4fe:	693a      	ldr	r2, [r7, #16]
 800a500:	4b2a      	ldr	r3, [pc, #168]	; (800a5ac <HAL_TIM_Encoder_Init+0x148>)
 800a502:	4013      	ands	r3, r2
 800a504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	68da      	ldr	r2, [r3, #12]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	69db      	ldr	r3, [r3, #28]
 800a50e:	021b      	lsls	r3, r3, #8
 800a510:	4313      	orrs	r3, r2
 800a512:	693a      	ldr	r2, [r7, #16]
 800a514:	4313      	orrs	r3, r2
 800a516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	011a      	lsls	r2, r3, #4
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	031b      	lsls	r3, r3, #12
 800a524:	4313      	orrs	r3, r2
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	4313      	orrs	r3, r2
 800a52a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a532:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a53a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	685a      	ldr	r2, [r3, #4]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	695b      	ldr	r3, [r3, #20]
 800a544:	011b      	lsls	r3, r3, #4
 800a546:	4313      	orrs	r3, r2
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	fffebff8 	.word	0xfffebff8
 800a5a4:	fffffcfc 	.word	0xfffffcfc
 800a5a8:	fffff3f3 	.word	0xfffff3f3
 800a5ac:	ffff0f0f 	.word	0xffff0f0f

0800a5b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	f003 0302 	and.w	r3, r3, #2
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d122      	bne.n	800a60c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	f003 0302 	and.w	r3, r3, #2
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d11b      	bne.n	800a60c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f06f 0202 	mvn.w	r2, #2
 800a5dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	f003 0303 	and.w	r3, r3, #3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d003      	beq.n	800a5fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fb0a 	bl	800ac0c <HAL_TIM_IC_CaptureCallback>
 800a5f8:	e005      	b.n	800a606 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fafc 	bl	800abf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fb0d 	bl	800ac20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	f003 0304 	and.w	r3, r3, #4
 800a616:	2b04      	cmp	r3, #4
 800a618:	d122      	bne.n	800a660 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	f003 0304 	and.w	r3, r3, #4
 800a624:	2b04      	cmp	r3, #4
 800a626:	d11b      	bne.n	800a660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f06f 0204 	mvn.w	r2, #4
 800a630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2202      	movs	r2, #2
 800a636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a642:	2b00      	cmp	r3, #0
 800a644:	d003      	beq.n	800a64e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fae0 	bl	800ac0c <HAL_TIM_IC_CaptureCallback>
 800a64c:	e005      	b.n	800a65a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fad2 	bl	800abf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fae3 	bl	800ac20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	f003 0308 	and.w	r3, r3, #8
 800a66a:	2b08      	cmp	r3, #8
 800a66c:	d122      	bne.n	800a6b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	f003 0308 	and.w	r3, r3, #8
 800a678:	2b08      	cmp	r3, #8
 800a67a:	d11b      	bne.n	800a6b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f06f 0208 	mvn.w	r2, #8
 800a684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2204      	movs	r2, #4
 800a68a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	f003 0303 	and.w	r3, r3, #3
 800a696:	2b00      	cmp	r3, #0
 800a698:	d003      	beq.n	800a6a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fab6 	bl	800ac0c <HAL_TIM_IC_CaptureCallback>
 800a6a0:	e005      	b.n	800a6ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 faa8 	bl	800abf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fab9 	bl	800ac20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	f003 0310 	and.w	r3, r3, #16
 800a6be:	2b10      	cmp	r3, #16
 800a6c0:	d122      	bne.n	800a708 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	f003 0310 	and.w	r3, r3, #16
 800a6cc:	2b10      	cmp	r3, #16
 800a6ce:	d11b      	bne.n	800a708 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f06f 0210 	mvn.w	r2, #16
 800a6d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2208      	movs	r2, #8
 800a6de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d003      	beq.n	800a6f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fa8c 	bl	800ac0c <HAL_TIM_IC_CaptureCallback>
 800a6f4:	e005      	b.n	800a702 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fa7e 	bl	800abf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fa8f 	bl	800ac20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b01      	cmp	r3, #1
 800a714:	d10e      	bne.n	800a734 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	2b01      	cmp	r3, #1
 800a722:	d107      	bne.n	800a734 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f06f 0201 	mvn.w	r2, #1
 800a72c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7f7 fbf0 	bl	8001f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73e:	2b80      	cmp	r3, #128	; 0x80
 800a740:	d10e      	bne.n	800a760 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a74c:	2b80      	cmp	r3, #128	; 0x80
 800a74e:	d107      	bne.n	800a760 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 ffb0 	bl	800b6c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a76a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a76e:	d10e      	bne.n	800a78e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a77a:	2b80      	cmp	r3, #128	; 0x80
 800a77c:	d107      	bne.n	800a78e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 ffa3 	bl	800b6d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a798:	2b40      	cmp	r3, #64	; 0x40
 800a79a:	d10e      	bne.n	800a7ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a6:	2b40      	cmp	r3, #64	; 0x40
 800a7a8:	d107      	bne.n	800a7ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fa3d 	bl	800ac34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	f003 0320 	and.w	r3, r3, #32
 800a7c4:	2b20      	cmp	r3, #32
 800a7c6:	d10e      	bne.n	800a7e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	f003 0320 	and.w	r3, r3, #32
 800a7d2:	2b20      	cmp	r3, #32
 800a7d4:	d107      	bne.n	800a7e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f06f 0220 	mvn.w	r2, #32
 800a7de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 ff63 	bl	800b6ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
	...

0800a7f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a802:	2b01      	cmp	r3, #1
 800a804:	d101      	bne.n	800a80a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a806:	2302      	movs	r3, #2
 800a808:	e0fd      	b.n	800aa06 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2201      	movs	r2, #1
 800a80e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b14      	cmp	r3, #20
 800a816:	f200 80f0 	bhi.w	800a9fa <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a81a:	a201      	add	r2, pc, #4	; (adr r2, 800a820 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a820:	0800a875 	.word	0x0800a875
 800a824:	0800a9fb 	.word	0x0800a9fb
 800a828:	0800a9fb 	.word	0x0800a9fb
 800a82c:	0800a9fb 	.word	0x0800a9fb
 800a830:	0800a8b5 	.word	0x0800a8b5
 800a834:	0800a9fb 	.word	0x0800a9fb
 800a838:	0800a9fb 	.word	0x0800a9fb
 800a83c:	0800a9fb 	.word	0x0800a9fb
 800a840:	0800a8f7 	.word	0x0800a8f7
 800a844:	0800a9fb 	.word	0x0800a9fb
 800a848:	0800a9fb 	.word	0x0800a9fb
 800a84c:	0800a9fb 	.word	0x0800a9fb
 800a850:	0800a937 	.word	0x0800a937
 800a854:	0800a9fb 	.word	0x0800a9fb
 800a858:	0800a9fb 	.word	0x0800a9fb
 800a85c:	0800a9fb 	.word	0x0800a9fb
 800a860:	0800a979 	.word	0x0800a979
 800a864:	0800a9fb 	.word	0x0800a9fb
 800a868:	0800a9fb 	.word	0x0800a9fb
 800a86c:	0800a9fb 	.word	0x0800a9fb
 800a870:	0800a9b9 	.word	0x0800a9b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68b9      	ldr	r1, [r7, #8]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 fa7e 	bl	800ad7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	699a      	ldr	r2, [r3, #24]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f042 0208 	orr.w	r2, r2, #8
 800a88e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	699a      	ldr	r2, [r3, #24]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f022 0204 	bic.w	r2, r2, #4
 800a89e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6999      	ldr	r1, [r3, #24]
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	691a      	ldr	r2, [r3, #16]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	619a      	str	r2, [r3, #24]
      break;
 800a8b2:	e0a3      	b.n	800a9fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68b9      	ldr	r1, [r7, #8]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 faee 	bl	800ae9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	699a      	ldr	r2, [r3, #24]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	699a      	ldr	r2, [r3, #24]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6999      	ldr	r1, [r3, #24]
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	021a      	lsls	r2, r3, #8
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	430a      	orrs	r2, r1
 800a8f2:	619a      	str	r2, [r3, #24]
      break;
 800a8f4:	e082      	b.n	800a9fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68b9      	ldr	r1, [r7, #8]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fb57 	bl	800afb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	69da      	ldr	r2, [r3, #28]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f042 0208 	orr.w	r2, r2, #8
 800a910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	69da      	ldr	r2, [r3, #28]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f022 0204 	bic.w	r2, r2, #4
 800a920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	69d9      	ldr	r1, [r3, #28]
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	691a      	ldr	r2, [r3, #16]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	430a      	orrs	r2, r1
 800a932:	61da      	str	r2, [r3, #28]
      break;
 800a934:	e062      	b.n	800a9fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68b9      	ldr	r1, [r7, #8]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 fbbd 	bl	800b0bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	69da      	ldr	r2, [r3, #28]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	69da      	ldr	r2, [r3, #28]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69d9      	ldr	r1, [r3, #28]
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	021a      	lsls	r2, r3, #8
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	430a      	orrs	r2, r1
 800a974:	61da      	str	r2, [r3, #28]
      break;
 800a976:	e041      	b.n	800a9fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68b9      	ldr	r1, [r7, #8]
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 fc04 	bl	800b18c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f042 0208 	orr.w	r2, r2, #8
 800a992:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f022 0204 	bic.w	r2, r2, #4
 800a9a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	691a      	ldr	r2, [r3, #16]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a9b6:	e021      	b.n	800a9fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	68b9      	ldr	r1, [r7, #8]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 fc46 	bl	800b250 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	021a      	lsls	r2, r3, #8
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	430a      	orrs	r2, r1
 800a9f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a9f8:	e000      	b.n	800a9fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a9fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop

0800aa10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d101      	bne.n	800aa28 <HAL_TIM_ConfigClockSource+0x18>
 800aa24:	2302      	movs	r3, #2
 800aa26:	e0db      	b.n	800abe0 <HAL_TIM_ConfigClockSource+0x1d0>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2202      	movs	r2, #2
 800aa34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	4b69      	ldr	r3, [pc, #420]	; (800abe8 <HAL_TIM_ConfigClockSource+0x1d8>)
 800aa44:	4013      	ands	r3, r2
 800aa46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a63      	ldr	r2, [pc, #396]	; (800abec <HAL_TIM_ConfigClockSource+0x1dc>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	f000 80a9 	beq.w	800abb6 <HAL_TIM_ConfigClockSource+0x1a6>
 800aa64:	4a61      	ldr	r2, [pc, #388]	; (800abec <HAL_TIM_ConfigClockSource+0x1dc>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	f200 80ae 	bhi.w	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aa6c:	4a60      	ldr	r2, [pc, #384]	; (800abf0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	f000 80a1 	beq.w	800abb6 <HAL_TIM_ConfigClockSource+0x1a6>
 800aa74:	4a5e      	ldr	r2, [pc, #376]	; (800abf0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	f200 80a6 	bhi.w	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aa7c:	4a5d      	ldr	r2, [pc, #372]	; (800abf4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	f000 8099 	beq.w	800abb6 <HAL_TIM_ConfigClockSource+0x1a6>
 800aa84:	4a5b      	ldr	r2, [pc, #364]	; (800abf4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	f200 809e 	bhi.w	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aa8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aa90:	f000 8091 	beq.w	800abb6 <HAL_TIM_ConfigClockSource+0x1a6>
 800aa94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aa98:	f200 8096 	bhi.w	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aa9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaa0:	f000 8089 	beq.w	800abb6 <HAL_TIM_ConfigClockSource+0x1a6>
 800aaa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaa8:	f200 808e 	bhi.w	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aaac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aab0:	d03e      	beq.n	800ab30 <HAL_TIM_ConfigClockSource+0x120>
 800aab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aab6:	f200 8087 	bhi.w	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aaba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aabe:	f000 8085 	beq.w	800abcc <HAL_TIM_ConfigClockSource+0x1bc>
 800aac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aac6:	d87f      	bhi.n	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aac8:	2b70      	cmp	r3, #112	; 0x70
 800aaca:	d01a      	beq.n	800ab02 <HAL_TIM_ConfigClockSource+0xf2>
 800aacc:	2b70      	cmp	r3, #112	; 0x70
 800aace:	d87b      	bhi.n	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aad0:	2b60      	cmp	r3, #96	; 0x60
 800aad2:	d050      	beq.n	800ab76 <HAL_TIM_ConfigClockSource+0x166>
 800aad4:	2b60      	cmp	r3, #96	; 0x60
 800aad6:	d877      	bhi.n	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aad8:	2b50      	cmp	r3, #80	; 0x50
 800aada:	d03c      	beq.n	800ab56 <HAL_TIM_ConfigClockSource+0x146>
 800aadc:	2b50      	cmp	r3, #80	; 0x50
 800aade:	d873      	bhi.n	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aae0:	2b40      	cmp	r3, #64	; 0x40
 800aae2:	d058      	beq.n	800ab96 <HAL_TIM_ConfigClockSource+0x186>
 800aae4:	2b40      	cmp	r3, #64	; 0x40
 800aae6:	d86f      	bhi.n	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aae8:	2b30      	cmp	r3, #48	; 0x30
 800aaea:	d064      	beq.n	800abb6 <HAL_TIM_ConfigClockSource+0x1a6>
 800aaec:	2b30      	cmp	r3, #48	; 0x30
 800aaee:	d86b      	bhi.n	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aaf0:	2b20      	cmp	r3, #32
 800aaf2:	d060      	beq.n	800abb6 <HAL_TIM_ConfigClockSource+0x1a6>
 800aaf4:	2b20      	cmp	r3, #32
 800aaf6:	d867      	bhi.n	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d05c      	beq.n	800abb6 <HAL_TIM_ConfigClockSource+0x1a6>
 800aafc:	2b10      	cmp	r3, #16
 800aafe:	d05a      	beq.n	800abb6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ab00:	e062      	b.n	800abc8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6818      	ldr	r0, [r3, #0]
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	6899      	ldr	r1, [r3, #8]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	f000 fc7f 	bl	800b414 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	609a      	str	r2, [r3, #8]
      break;
 800ab2e:	e04e      	b.n	800abce <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6818      	ldr	r0, [r3, #0]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	6899      	ldr	r1, [r3, #8]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f000 fc68 	bl	800b414 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	689a      	ldr	r2, [r3, #8]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab52:	609a      	str	r2, [r3, #8]
      break;
 800ab54:	e03b      	b.n	800abce <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6818      	ldr	r0, [r3, #0]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	6859      	ldr	r1, [r3, #4]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f000 fbd8 	bl	800b318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2150      	movs	r1, #80	; 0x50
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 fc32 	bl	800b3d8 <TIM_ITRx_SetConfig>
      break;
 800ab74:	e02b      	b.n	800abce <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6818      	ldr	r0, [r3, #0]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	6859      	ldr	r1, [r3, #4]
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	461a      	mov	r2, r3
 800ab84:	f000 fbf7 	bl	800b376 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2160      	movs	r1, #96	; 0x60
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 fc22 	bl	800b3d8 <TIM_ITRx_SetConfig>
      break;
 800ab94:	e01b      	b.n	800abce <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6818      	ldr	r0, [r3, #0]
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	6859      	ldr	r1, [r3, #4]
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	461a      	mov	r2, r3
 800aba4:	f000 fbb8 	bl	800b318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2140      	movs	r1, #64	; 0x40
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 fc12 	bl	800b3d8 <TIM_ITRx_SetConfig>
      break;
 800abb4:	e00b      	b.n	800abce <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4619      	mov	r1, r3
 800abc0:	4610      	mov	r0, r2
 800abc2:	f000 fc09 	bl	800b3d8 <TIM_ITRx_SetConfig>
        break;
 800abc6:	e002      	b.n	800abce <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800abc8:	bf00      	nop
 800abca:	e000      	b.n	800abce <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800abcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	ffceff88 	.word	0xffceff88
 800abec:	00100040 	.word	0x00100040
 800abf0:	00100030 	.word	0x00100030
 800abf4:	00100020 	.word	0x00100020

0800abf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac14:	bf00      	nop
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a40      	ldr	r2, [pc, #256]	; (800ad5c <TIM_Base_SetConfig+0x114>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d013      	beq.n	800ac88 <TIM_Base_SetConfig+0x40>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac66:	d00f      	beq.n	800ac88 <TIM_Base_SetConfig+0x40>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a3d      	ldr	r2, [pc, #244]	; (800ad60 <TIM_Base_SetConfig+0x118>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d00b      	beq.n	800ac88 <TIM_Base_SetConfig+0x40>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a3c      	ldr	r2, [pc, #240]	; (800ad64 <TIM_Base_SetConfig+0x11c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d007      	beq.n	800ac88 <TIM_Base_SetConfig+0x40>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a3b      	ldr	r2, [pc, #236]	; (800ad68 <TIM_Base_SetConfig+0x120>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d003      	beq.n	800ac88 <TIM_Base_SetConfig+0x40>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a3a      	ldr	r2, [pc, #232]	; (800ad6c <TIM_Base_SetConfig+0x124>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d108      	bne.n	800ac9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a2f      	ldr	r2, [pc, #188]	; (800ad5c <TIM_Base_SetConfig+0x114>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d01f      	beq.n	800ace2 <TIM_Base_SetConfig+0x9a>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aca8:	d01b      	beq.n	800ace2 <TIM_Base_SetConfig+0x9a>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a2c      	ldr	r2, [pc, #176]	; (800ad60 <TIM_Base_SetConfig+0x118>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d017      	beq.n	800ace2 <TIM_Base_SetConfig+0x9a>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a2b      	ldr	r2, [pc, #172]	; (800ad64 <TIM_Base_SetConfig+0x11c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d013      	beq.n	800ace2 <TIM_Base_SetConfig+0x9a>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a2a      	ldr	r2, [pc, #168]	; (800ad68 <TIM_Base_SetConfig+0x120>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d00f      	beq.n	800ace2 <TIM_Base_SetConfig+0x9a>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a29      	ldr	r2, [pc, #164]	; (800ad6c <TIM_Base_SetConfig+0x124>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d00b      	beq.n	800ace2 <TIM_Base_SetConfig+0x9a>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a28      	ldr	r2, [pc, #160]	; (800ad70 <TIM_Base_SetConfig+0x128>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d007      	beq.n	800ace2 <TIM_Base_SetConfig+0x9a>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a27      	ldr	r2, [pc, #156]	; (800ad74 <TIM_Base_SetConfig+0x12c>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d003      	beq.n	800ace2 <TIM_Base_SetConfig+0x9a>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a26      	ldr	r2, [pc, #152]	; (800ad78 <TIM_Base_SetConfig+0x130>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d108      	bne.n	800acf4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ace8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	695b      	ldr	r3, [r3, #20]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a10      	ldr	r2, [pc, #64]	; (800ad5c <TIM_Base_SetConfig+0x114>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d00f      	beq.n	800ad40 <TIM_Base_SetConfig+0xf8>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a12      	ldr	r2, [pc, #72]	; (800ad6c <TIM_Base_SetConfig+0x124>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d00b      	beq.n	800ad40 <TIM_Base_SetConfig+0xf8>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a11      	ldr	r2, [pc, #68]	; (800ad70 <TIM_Base_SetConfig+0x128>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d007      	beq.n	800ad40 <TIM_Base_SetConfig+0xf8>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a10      	ldr	r2, [pc, #64]	; (800ad74 <TIM_Base_SetConfig+0x12c>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d003      	beq.n	800ad40 <TIM_Base_SetConfig+0xf8>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a0f      	ldr	r2, [pc, #60]	; (800ad78 <TIM_Base_SetConfig+0x130>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d103      	bne.n	800ad48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	691a      	ldr	r2, [r3, #16]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	615a      	str	r2, [r3, #20]
}
 800ad4e:	bf00      	nop
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	40010000 	.word	0x40010000
 800ad60:	40000400 	.word	0x40000400
 800ad64:	40000800 	.word	0x40000800
 800ad68:	40000c00 	.word	0x40000c00
 800ad6c:	40010400 	.word	0x40010400
 800ad70:	40014000 	.word	0x40014000
 800ad74:	40014400 	.word	0x40014400
 800ad78:	40014800 	.word	0x40014800

0800ad7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	f023 0201 	bic.w	r2, r3, #1
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	4b37      	ldr	r3, [pc, #220]	; (800ae84 <TIM_OC1_SetConfig+0x108>)
 800ada8:	4013      	ands	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f023 0303 	bic.w	r3, r3, #3
 800adb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	4313      	orrs	r3, r2
 800adbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f023 0302 	bic.w	r3, r3, #2
 800adc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	4313      	orrs	r3, r2
 800adce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a2d      	ldr	r2, [pc, #180]	; (800ae88 <TIM_OC1_SetConfig+0x10c>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d00f      	beq.n	800adf8 <TIM_OC1_SetConfig+0x7c>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a2c      	ldr	r2, [pc, #176]	; (800ae8c <TIM_OC1_SetConfig+0x110>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d00b      	beq.n	800adf8 <TIM_OC1_SetConfig+0x7c>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a2b      	ldr	r2, [pc, #172]	; (800ae90 <TIM_OC1_SetConfig+0x114>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d007      	beq.n	800adf8 <TIM_OC1_SetConfig+0x7c>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a2a      	ldr	r2, [pc, #168]	; (800ae94 <TIM_OC1_SetConfig+0x118>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d003      	beq.n	800adf8 <TIM_OC1_SetConfig+0x7c>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a29      	ldr	r2, [pc, #164]	; (800ae98 <TIM_OC1_SetConfig+0x11c>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d10c      	bne.n	800ae12 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f023 0308 	bic.w	r3, r3, #8
 800adfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f023 0304 	bic.w	r3, r3, #4
 800ae10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4a1c      	ldr	r2, [pc, #112]	; (800ae88 <TIM_OC1_SetConfig+0x10c>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d00f      	beq.n	800ae3a <TIM_OC1_SetConfig+0xbe>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a1b      	ldr	r2, [pc, #108]	; (800ae8c <TIM_OC1_SetConfig+0x110>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d00b      	beq.n	800ae3a <TIM_OC1_SetConfig+0xbe>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4a1a      	ldr	r2, [pc, #104]	; (800ae90 <TIM_OC1_SetConfig+0x114>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d007      	beq.n	800ae3a <TIM_OC1_SetConfig+0xbe>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a19      	ldr	r2, [pc, #100]	; (800ae94 <TIM_OC1_SetConfig+0x118>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d003      	beq.n	800ae3a <TIM_OC1_SetConfig+0xbe>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4a18      	ldr	r2, [pc, #96]	; (800ae98 <TIM_OC1_SetConfig+0x11c>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d111      	bne.n	800ae5e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	621a      	str	r2, [r3, #32]
}
 800ae78:	bf00      	nop
 800ae7a:	371c      	adds	r7, #28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	fffeff8f 	.word	0xfffeff8f
 800ae88:	40010000 	.word	0x40010000
 800ae8c:	40010400 	.word	0x40010400
 800ae90:	40014000 	.word	0x40014000
 800ae94:	40014400 	.word	0x40014400
 800ae98:	40014800 	.word	0x40014800

0800ae9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b087      	sub	sp, #28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	f023 0210 	bic.w	r2, r3, #16
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	4b34      	ldr	r3, [pc, #208]	; (800af98 <TIM_OC2_SetConfig+0xfc>)
 800aec8:	4013      	ands	r3, r2
 800aeca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	021b      	lsls	r3, r3, #8
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	4313      	orrs	r3, r2
 800aede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	f023 0320 	bic.w	r3, r3, #32
 800aee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	011b      	lsls	r3, r3, #4
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a29      	ldr	r2, [pc, #164]	; (800af9c <TIM_OC2_SetConfig+0x100>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d003      	beq.n	800af04 <TIM_OC2_SetConfig+0x68>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a28      	ldr	r2, [pc, #160]	; (800afa0 <TIM_OC2_SetConfig+0x104>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d10d      	bne.n	800af20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	011b      	lsls	r3, r3, #4
 800af12:	697a      	ldr	r2, [r7, #20]
 800af14:	4313      	orrs	r3, r2
 800af16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a1e      	ldr	r2, [pc, #120]	; (800af9c <TIM_OC2_SetConfig+0x100>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d00f      	beq.n	800af48 <TIM_OC2_SetConfig+0xac>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a1d      	ldr	r2, [pc, #116]	; (800afa0 <TIM_OC2_SetConfig+0x104>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d00b      	beq.n	800af48 <TIM_OC2_SetConfig+0xac>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a1c      	ldr	r2, [pc, #112]	; (800afa4 <TIM_OC2_SetConfig+0x108>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d007      	beq.n	800af48 <TIM_OC2_SetConfig+0xac>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a1b      	ldr	r2, [pc, #108]	; (800afa8 <TIM_OC2_SetConfig+0x10c>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d003      	beq.n	800af48 <TIM_OC2_SetConfig+0xac>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a1a      	ldr	r2, [pc, #104]	; (800afac <TIM_OC2_SetConfig+0x110>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d113      	bne.n	800af70 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	695b      	ldr	r3, [r3, #20]
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	4313      	orrs	r3, r2
 800af62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	693a      	ldr	r2, [r7, #16]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	621a      	str	r2, [r3, #32]
}
 800af8a:	bf00      	nop
 800af8c:	371c      	adds	r7, #28
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	feff8fff 	.word	0xfeff8fff
 800af9c:	40010000 	.word	0x40010000
 800afa0:	40010400 	.word	0x40010400
 800afa4:	40014000 	.word	0x40014000
 800afa8:	40014400 	.word	0x40014400
 800afac:	40014800 	.word	0x40014800

0800afb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b087      	sub	sp, #28
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a1b      	ldr	r3, [r3, #32]
 800afbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f023 0303 	bic.w	r3, r3, #3
 800afe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	4313      	orrs	r3, r2
 800aff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	021b      	lsls	r3, r3, #8
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	4313      	orrs	r3, r2
 800b004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a27      	ldr	r2, [pc, #156]	; (800b0a8 <TIM_OC3_SetConfig+0xf8>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d003      	beq.n	800b016 <TIM_OC3_SetConfig+0x66>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a26      	ldr	r2, [pc, #152]	; (800b0ac <TIM_OC3_SetConfig+0xfc>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d10d      	bne.n	800b032 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b01c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	021b      	lsls	r3, r3, #8
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	4313      	orrs	r3, r2
 800b028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a1c      	ldr	r2, [pc, #112]	; (800b0a8 <TIM_OC3_SetConfig+0xf8>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d00f      	beq.n	800b05a <TIM_OC3_SetConfig+0xaa>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a1b      	ldr	r2, [pc, #108]	; (800b0ac <TIM_OC3_SetConfig+0xfc>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d00b      	beq.n	800b05a <TIM_OC3_SetConfig+0xaa>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a1a      	ldr	r2, [pc, #104]	; (800b0b0 <TIM_OC3_SetConfig+0x100>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d007      	beq.n	800b05a <TIM_OC3_SetConfig+0xaa>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a19      	ldr	r2, [pc, #100]	; (800b0b4 <TIM_OC3_SetConfig+0x104>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d003      	beq.n	800b05a <TIM_OC3_SetConfig+0xaa>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a18      	ldr	r2, [pc, #96]	; (800b0b8 <TIM_OC3_SetConfig+0x108>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d113      	bne.n	800b082 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	011b      	lsls	r3, r3, #4
 800b070:	693a      	ldr	r2, [r7, #16]
 800b072:	4313      	orrs	r3, r2
 800b074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	693a      	ldr	r2, [r7, #16]
 800b07e:	4313      	orrs	r3, r2
 800b080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	685a      	ldr	r2, [r3, #4]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	621a      	str	r2, [r3, #32]
}
 800b09c:	bf00      	nop
 800b09e:	371c      	adds	r7, #28
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	40010000 	.word	0x40010000
 800b0ac:	40010400 	.word	0x40010400
 800b0b0:	40014000 	.word	0x40014000
 800b0b4:	40014400 	.word	0x40014400
 800b0b8:	40014800 	.word	0x40014800

0800b0bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	021b      	lsls	r3, r3, #8
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	031b      	lsls	r3, r3, #12
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	4313      	orrs	r3, r2
 800b112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a18      	ldr	r2, [pc, #96]	; (800b178 <TIM_OC4_SetConfig+0xbc>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d00f      	beq.n	800b13c <TIM_OC4_SetConfig+0x80>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a17      	ldr	r2, [pc, #92]	; (800b17c <TIM_OC4_SetConfig+0xc0>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d00b      	beq.n	800b13c <TIM_OC4_SetConfig+0x80>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a16      	ldr	r2, [pc, #88]	; (800b180 <TIM_OC4_SetConfig+0xc4>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d007      	beq.n	800b13c <TIM_OC4_SetConfig+0x80>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a15      	ldr	r2, [pc, #84]	; (800b184 <TIM_OC4_SetConfig+0xc8>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d003      	beq.n	800b13c <TIM_OC4_SetConfig+0x80>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a14      	ldr	r2, [pc, #80]	; (800b188 <TIM_OC4_SetConfig+0xcc>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d109      	bne.n	800b150 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	695b      	ldr	r3, [r3, #20]
 800b148:	019b      	lsls	r3, r3, #6
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	621a      	str	r2, [r3, #32]
}
 800b16a:	bf00      	nop
 800b16c:	371c      	adds	r7, #28
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	40010000 	.word	0x40010000
 800b17c:	40010400 	.word	0x40010400
 800b180:	40014000 	.word	0x40014000
 800b184:	40014400 	.word	0x40014400
 800b188:	40014800 	.word	0x40014800

0800b18c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b087      	sub	sp, #28
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a1b      	ldr	r3, [r3, #32]
 800b1a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b1cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	041b      	lsls	r3, r3, #16
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a17      	ldr	r2, [pc, #92]	; (800b23c <TIM_OC5_SetConfig+0xb0>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d00f      	beq.n	800b202 <TIM_OC5_SetConfig+0x76>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a16      	ldr	r2, [pc, #88]	; (800b240 <TIM_OC5_SetConfig+0xb4>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d00b      	beq.n	800b202 <TIM_OC5_SetConfig+0x76>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a15      	ldr	r2, [pc, #84]	; (800b244 <TIM_OC5_SetConfig+0xb8>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d007      	beq.n	800b202 <TIM_OC5_SetConfig+0x76>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a14      	ldr	r2, [pc, #80]	; (800b248 <TIM_OC5_SetConfig+0xbc>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d003      	beq.n	800b202 <TIM_OC5_SetConfig+0x76>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a13      	ldr	r2, [pc, #76]	; (800b24c <TIM_OC5_SetConfig+0xc0>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d109      	bne.n	800b216 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b208:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	021b      	lsls	r3, r3, #8
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	4313      	orrs	r3, r2
 800b214:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	621a      	str	r2, [r3, #32]
}
 800b230:	bf00      	nop
 800b232:	371c      	adds	r7, #28
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	40010000 	.word	0x40010000
 800b240:	40010400 	.word	0x40010400
 800b244:	40014000 	.word	0x40014000
 800b248:	40014400 	.word	0x40014400
 800b24c:	40014800 	.word	0x40014800

0800b250 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b250:	b480      	push	{r7}
 800b252:	b087      	sub	sp, #28
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b27e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	021b      	lsls	r3, r3, #8
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	4313      	orrs	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	051b      	lsls	r3, r3, #20
 800b29a:	693a      	ldr	r2, [r7, #16]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a18      	ldr	r2, [pc, #96]	; (800b304 <TIM_OC6_SetConfig+0xb4>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d00f      	beq.n	800b2c8 <TIM_OC6_SetConfig+0x78>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a17      	ldr	r2, [pc, #92]	; (800b308 <TIM_OC6_SetConfig+0xb8>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d00b      	beq.n	800b2c8 <TIM_OC6_SetConfig+0x78>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a16      	ldr	r2, [pc, #88]	; (800b30c <TIM_OC6_SetConfig+0xbc>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d007      	beq.n	800b2c8 <TIM_OC6_SetConfig+0x78>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a15      	ldr	r2, [pc, #84]	; (800b310 <TIM_OC6_SetConfig+0xc0>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d003      	beq.n	800b2c8 <TIM_OC6_SetConfig+0x78>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a14      	ldr	r2, [pc, #80]	; (800b314 <TIM_OC6_SetConfig+0xc4>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d109      	bne.n	800b2dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b2ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	695b      	ldr	r3, [r3, #20]
 800b2d4:	029b      	lsls	r3, r3, #10
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	693a      	ldr	r2, [r7, #16]
 800b2f4:	621a      	str	r2, [r3, #32]
}
 800b2f6:	bf00      	nop
 800b2f8:	371c      	adds	r7, #28
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	40010000 	.word	0x40010000
 800b308:	40010400 	.word	0x40010400
 800b30c:	40014000 	.word	0x40014000
 800b310:	40014400 	.word	0x40014400
 800b314:	40014800 	.word	0x40014800

0800b318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6a1b      	ldr	r3, [r3, #32]
 800b328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6a1b      	ldr	r3, [r3, #32]
 800b32e:	f023 0201 	bic.w	r2, r3, #1
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	011b      	lsls	r3, r3, #4
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f023 030a 	bic.w	r3, r3, #10
 800b354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	693a      	ldr	r2, [r7, #16]
 800b362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	697a      	ldr	r2, [r7, #20]
 800b368:	621a      	str	r2, [r3, #32]
}
 800b36a:	bf00      	nop
 800b36c:	371c      	adds	r7, #28
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b376:	b480      	push	{r7}
 800b378:	b087      	sub	sp, #28
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	60f8      	str	r0, [r7, #12]
 800b37e:	60b9      	str	r1, [r7, #8]
 800b380:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	f023 0210 	bic.w	r2, r3, #16
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6a1b      	ldr	r3, [r3, #32]
 800b398:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b3a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	031b      	lsls	r3, r3, #12
 800b3a6:	697a      	ldr	r2, [r7, #20]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b3b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	011b      	lsls	r3, r3, #4
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	697a      	ldr	r2, [r7, #20]
 800b3c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	621a      	str	r2, [r3, #32]
}
 800b3ca:	bf00      	nop
 800b3cc:	371c      	adds	r7, #28
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
	...

0800b3d8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	4b09      	ldr	r3, [pc, #36]	; (800b410 <TIM_ITRx_SetConfig+0x38>)
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3f0:	683a      	ldr	r2, [r7, #0]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	f043 0307 	orr.w	r3, r3, #7
 800b3fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	609a      	str	r2, [r3, #8]
}
 800b402:	bf00      	nop
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	ffcfff8f 	.word	0xffcfff8f

0800b414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b414:	b480      	push	{r7}
 800b416:	b087      	sub	sp, #28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
 800b420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b42e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	021a      	lsls	r2, r3, #8
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	431a      	orrs	r2, r3
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	4313      	orrs	r3, r2
 800b440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	697a      	ldr	r2, [r7, #20]
 800b446:	609a      	str	r2, [r3, #8]
}
 800b448:	bf00      	nop
 800b44a:	371c      	adds	r7, #28
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	f003 031f 	and.w	r3, r3, #31
 800b466:	2201      	movs	r2, #1
 800b468:	fa02 f303 	lsl.w	r3, r2, r3
 800b46c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6a1a      	ldr	r2, [r3, #32]
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	43db      	mvns	r3, r3
 800b476:	401a      	ands	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6a1a      	ldr	r2, [r3, #32]
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	f003 031f 	and.w	r3, r3, #31
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	fa01 f303 	lsl.w	r3, r1, r3
 800b48c:	431a      	orrs	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	621a      	str	r2, [r3, #32]
}
 800b492:	bf00      	nop
 800b494:	371c      	adds	r7, #28
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
	...

0800b4a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d101      	bne.n	800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	e068      	b.n	800b58a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a2e      	ldr	r2, [pc, #184]	; (800b598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d004      	beq.n	800b4ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a2d      	ldr	r2, [pc, #180]	; (800b59c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d108      	bne.n	800b4fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b4f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b504:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a1e      	ldr	r2, [pc, #120]	; (800b598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d01d      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b52a:	d018      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a1b      	ldr	r2, [pc, #108]	; (800b5a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d013      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a1a      	ldr	r2, [pc, #104]	; (800b5a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d00e      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a18      	ldr	r2, [pc, #96]	; (800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d009      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a13      	ldr	r2, [pc, #76]	; (800b59c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d004      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a14      	ldr	r2, [pc, #80]	; (800b5ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d10c      	bne.n	800b578 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	40010000 	.word	0x40010000
 800b59c:	40010400 	.word	0x40010400
 800b5a0:	40000400 	.word	0x40000400
 800b5a4:	40000800 	.word	0x40000800
 800b5a8:	40000c00 	.word	0x40000c00
 800b5ac:	40001800 	.word	0x40001800

0800b5b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d101      	bne.n	800b5cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b5c8:	2302      	movs	r3, #2
 800b5ca:	e065      	b.n	800b698 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4313      	orrs	r3, r2
 800b60a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	4313      	orrs	r3, r2
 800b618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	695b      	ldr	r3, [r3, #20]
 800b624:	4313      	orrs	r3, r2
 800b626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b632:	4313      	orrs	r3, r2
 800b634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	699b      	ldr	r3, [r3, #24]
 800b640:	041b      	lsls	r3, r3, #16
 800b642:	4313      	orrs	r3, r2
 800b644:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a16      	ldr	r2, [pc, #88]	; (800b6a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d004      	beq.n	800b65a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a14      	ldr	r2, [pc, #80]	; (800b6a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d115      	bne.n	800b686 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b664:	051b      	lsls	r3, r3, #20
 800b666:	4313      	orrs	r3, r2
 800b668:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	69db      	ldr	r3, [r3, #28]
 800b674:	4313      	orrs	r3, r2
 800b676:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	4313      	orrs	r3, r2
 800b684:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3714      	adds	r7, #20
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr
 800b6a4:	40010000 	.word	0x40010000
 800b6a8:	40010400 	.word	0x40010400

0800b6ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d101      	bne.n	800b6fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e042      	b.n	800b780 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b700:	2b00      	cmp	r3, #0
 800b702:	d106      	bne.n	800b712 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7f7 f925 	bl	800295c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2224      	movs	r2, #36	; 0x24
 800b716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f022 0201 	bic.w	r2, r2, #1
 800b728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f82c 	bl	800b788 <UART_SetConfig>
 800b730:	4603      	mov	r3, r0
 800b732:	2b01      	cmp	r3, #1
 800b734:	d101      	bne.n	800b73a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	e022      	b.n	800b780 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d002      	beq.n	800b748 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fd80 	bl	800c248 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	689a      	ldr	r2, [r3, #8]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f042 0201 	orr.w	r2, r2, #1
 800b776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fe07 	bl	800c38c <UART_CheckIdleState>
 800b77e:	4603      	mov	r3, r0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b788:	b5b0      	push	{r4, r5, r7, lr}
 800b78a:	b08e      	sub	sp, #56	; 0x38
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b790:	2300      	movs	r3, #0
 800b792:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	689a      	ldr	r2, [r3, #8]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	431a      	orrs	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	695b      	ldr	r3, [r3, #20]
 800b7a4:	431a      	orrs	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	69db      	ldr	r3, [r3, #28]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	4bbf      	ldr	r3, [pc, #764]	; (800bab4 <UART_SetConfig+0x32c>)
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	6812      	ldr	r2, [r2, #0]
 800b7bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b7be:	430b      	orrs	r3, r1
 800b7c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68da      	ldr	r2, [r3, #12]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	430a      	orrs	r2, r1
 800b7d6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	699b      	ldr	r3, [r3, #24]
 800b7dc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4ab5      	ldr	r2, [pc, #724]	; (800bab8 <UART_SetConfig+0x330>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d004      	beq.n	800b7f2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	689a      	ldr	r2, [r3, #8]
 800b7f8:	4bb0      	ldr	r3, [pc, #704]	; (800babc <UART_SetConfig+0x334>)
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	6812      	ldr	r2, [r2, #0]
 800b800:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b802:	430b      	orrs	r3, r1
 800b804:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80c:	f023 010f 	bic.w	r1, r3, #15
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	430a      	orrs	r2, r1
 800b81a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4aa7      	ldr	r2, [pc, #668]	; (800bac0 <UART_SetConfig+0x338>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d176      	bne.n	800b914 <UART_SetConfig+0x18c>
 800b826:	4ba7      	ldr	r3, [pc, #668]	; (800bac4 <UART_SetConfig+0x33c>)
 800b828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b82a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b82e:	2b28      	cmp	r3, #40	; 0x28
 800b830:	d86c      	bhi.n	800b90c <UART_SetConfig+0x184>
 800b832:	a201      	add	r2, pc, #4	; (adr r2, 800b838 <UART_SetConfig+0xb0>)
 800b834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b838:	0800b8dd 	.word	0x0800b8dd
 800b83c:	0800b90d 	.word	0x0800b90d
 800b840:	0800b90d 	.word	0x0800b90d
 800b844:	0800b90d 	.word	0x0800b90d
 800b848:	0800b90d 	.word	0x0800b90d
 800b84c:	0800b90d 	.word	0x0800b90d
 800b850:	0800b90d 	.word	0x0800b90d
 800b854:	0800b90d 	.word	0x0800b90d
 800b858:	0800b8e5 	.word	0x0800b8e5
 800b85c:	0800b90d 	.word	0x0800b90d
 800b860:	0800b90d 	.word	0x0800b90d
 800b864:	0800b90d 	.word	0x0800b90d
 800b868:	0800b90d 	.word	0x0800b90d
 800b86c:	0800b90d 	.word	0x0800b90d
 800b870:	0800b90d 	.word	0x0800b90d
 800b874:	0800b90d 	.word	0x0800b90d
 800b878:	0800b8ed 	.word	0x0800b8ed
 800b87c:	0800b90d 	.word	0x0800b90d
 800b880:	0800b90d 	.word	0x0800b90d
 800b884:	0800b90d 	.word	0x0800b90d
 800b888:	0800b90d 	.word	0x0800b90d
 800b88c:	0800b90d 	.word	0x0800b90d
 800b890:	0800b90d 	.word	0x0800b90d
 800b894:	0800b90d 	.word	0x0800b90d
 800b898:	0800b8f5 	.word	0x0800b8f5
 800b89c:	0800b90d 	.word	0x0800b90d
 800b8a0:	0800b90d 	.word	0x0800b90d
 800b8a4:	0800b90d 	.word	0x0800b90d
 800b8a8:	0800b90d 	.word	0x0800b90d
 800b8ac:	0800b90d 	.word	0x0800b90d
 800b8b0:	0800b90d 	.word	0x0800b90d
 800b8b4:	0800b90d 	.word	0x0800b90d
 800b8b8:	0800b8fd 	.word	0x0800b8fd
 800b8bc:	0800b90d 	.word	0x0800b90d
 800b8c0:	0800b90d 	.word	0x0800b90d
 800b8c4:	0800b90d 	.word	0x0800b90d
 800b8c8:	0800b90d 	.word	0x0800b90d
 800b8cc:	0800b90d 	.word	0x0800b90d
 800b8d0:	0800b90d 	.word	0x0800b90d
 800b8d4:	0800b90d 	.word	0x0800b90d
 800b8d8:	0800b905 	.word	0x0800b905
 800b8dc:	2301      	movs	r3, #1
 800b8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8e2:	e222      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b8e4:	2304      	movs	r3, #4
 800b8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8ea:	e21e      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b8ec:	2308      	movs	r3, #8
 800b8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8f2:	e21a      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b8f4:	2310      	movs	r3, #16
 800b8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8fa:	e216      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b8fc:	2320      	movs	r3, #32
 800b8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b902:	e212      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b904:	2340      	movs	r3, #64	; 0x40
 800b906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b90a:	e20e      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b90c:	2380      	movs	r3, #128	; 0x80
 800b90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b912:	e20a      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a6b      	ldr	r2, [pc, #428]	; (800bac8 <UART_SetConfig+0x340>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d130      	bne.n	800b980 <UART_SetConfig+0x1f8>
 800b91e:	4b69      	ldr	r3, [pc, #420]	; (800bac4 <UART_SetConfig+0x33c>)
 800b920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b922:	f003 0307 	and.w	r3, r3, #7
 800b926:	2b05      	cmp	r3, #5
 800b928:	d826      	bhi.n	800b978 <UART_SetConfig+0x1f0>
 800b92a:	a201      	add	r2, pc, #4	; (adr r2, 800b930 <UART_SetConfig+0x1a8>)
 800b92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b930:	0800b949 	.word	0x0800b949
 800b934:	0800b951 	.word	0x0800b951
 800b938:	0800b959 	.word	0x0800b959
 800b93c:	0800b961 	.word	0x0800b961
 800b940:	0800b969 	.word	0x0800b969
 800b944:	0800b971 	.word	0x0800b971
 800b948:	2300      	movs	r3, #0
 800b94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b94e:	e1ec      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b950:	2304      	movs	r3, #4
 800b952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b956:	e1e8      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b958:	2308      	movs	r3, #8
 800b95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b95e:	e1e4      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b960:	2310      	movs	r3, #16
 800b962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b966:	e1e0      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b968:	2320      	movs	r3, #32
 800b96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b96e:	e1dc      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b970:	2340      	movs	r3, #64	; 0x40
 800b972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b976:	e1d8      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b978:	2380      	movs	r3, #128	; 0x80
 800b97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b97e:	e1d4      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a51      	ldr	r2, [pc, #324]	; (800bacc <UART_SetConfig+0x344>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d130      	bne.n	800b9ec <UART_SetConfig+0x264>
 800b98a:	4b4e      	ldr	r3, [pc, #312]	; (800bac4 <UART_SetConfig+0x33c>)
 800b98c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b98e:	f003 0307 	and.w	r3, r3, #7
 800b992:	2b05      	cmp	r3, #5
 800b994:	d826      	bhi.n	800b9e4 <UART_SetConfig+0x25c>
 800b996:	a201      	add	r2, pc, #4	; (adr r2, 800b99c <UART_SetConfig+0x214>)
 800b998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99c:	0800b9b5 	.word	0x0800b9b5
 800b9a0:	0800b9bd 	.word	0x0800b9bd
 800b9a4:	0800b9c5 	.word	0x0800b9c5
 800b9a8:	0800b9cd 	.word	0x0800b9cd
 800b9ac:	0800b9d5 	.word	0x0800b9d5
 800b9b0:	0800b9dd 	.word	0x0800b9dd
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ba:	e1b6      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b9bc:	2304      	movs	r3, #4
 800b9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9c2:	e1b2      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b9c4:	2308      	movs	r3, #8
 800b9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ca:	e1ae      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b9cc:	2310      	movs	r3, #16
 800b9ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9d2:	e1aa      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b9d4:	2320      	movs	r3, #32
 800b9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9da:	e1a6      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b9dc:	2340      	movs	r3, #64	; 0x40
 800b9de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9e2:	e1a2      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b9e4:	2380      	movs	r3, #128	; 0x80
 800b9e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ea:	e19e      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a37      	ldr	r2, [pc, #220]	; (800bad0 <UART_SetConfig+0x348>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d130      	bne.n	800ba58 <UART_SetConfig+0x2d0>
 800b9f6:	4b33      	ldr	r3, [pc, #204]	; (800bac4 <UART_SetConfig+0x33c>)
 800b9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9fa:	f003 0307 	and.w	r3, r3, #7
 800b9fe:	2b05      	cmp	r3, #5
 800ba00:	d826      	bhi.n	800ba50 <UART_SetConfig+0x2c8>
 800ba02:	a201      	add	r2, pc, #4	; (adr r2, 800ba08 <UART_SetConfig+0x280>)
 800ba04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba08:	0800ba21 	.word	0x0800ba21
 800ba0c:	0800ba29 	.word	0x0800ba29
 800ba10:	0800ba31 	.word	0x0800ba31
 800ba14:	0800ba39 	.word	0x0800ba39
 800ba18:	0800ba41 	.word	0x0800ba41
 800ba1c:	0800ba49 	.word	0x0800ba49
 800ba20:	2300      	movs	r3, #0
 800ba22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba26:	e180      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800ba28:	2304      	movs	r3, #4
 800ba2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba2e:	e17c      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800ba30:	2308      	movs	r3, #8
 800ba32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba36:	e178      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800ba38:	2310      	movs	r3, #16
 800ba3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba3e:	e174      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800ba40:	2320      	movs	r3, #32
 800ba42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba46:	e170      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800ba48:	2340      	movs	r3, #64	; 0x40
 800ba4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba4e:	e16c      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800ba50:	2380      	movs	r3, #128	; 0x80
 800ba52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba56:	e168      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a1d      	ldr	r2, [pc, #116]	; (800bad4 <UART_SetConfig+0x34c>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d142      	bne.n	800bae8 <UART_SetConfig+0x360>
 800ba62:	4b18      	ldr	r3, [pc, #96]	; (800bac4 <UART_SetConfig+0x33c>)
 800ba64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba66:	f003 0307 	and.w	r3, r3, #7
 800ba6a:	2b05      	cmp	r3, #5
 800ba6c:	d838      	bhi.n	800bae0 <UART_SetConfig+0x358>
 800ba6e:	a201      	add	r2, pc, #4	; (adr r2, 800ba74 <UART_SetConfig+0x2ec>)
 800ba70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba74:	0800ba8d 	.word	0x0800ba8d
 800ba78:	0800ba95 	.word	0x0800ba95
 800ba7c:	0800ba9d 	.word	0x0800ba9d
 800ba80:	0800baa5 	.word	0x0800baa5
 800ba84:	0800baad 	.word	0x0800baad
 800ba88:	0800bad9 	.word	0x0800bad9
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba92:	e14a      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800ba94:	2304      	movs	r3, #4
 800ba96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba9a:	e146      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800ba9c:	2308      	movs	r3, #8
 800ba9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa2:	e142      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800baa4:	2310      	movs	r3, #16
 800baa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baaa:	e13e      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800baac:	2320      	movs	r3, #32
 800baae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab2:	e13a      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bab4:	cfff69f3 	.word	0xcfff69f3
 800bab8:	58000c00 	.word	0x58000c00
 800babc:	11fff4ff 	.word	0x11fff4ff
 800bac0:	40011000 	.word	0x40011000
 800bac4:	58024400 	.word	0x58024400
 800bac8:	40004400 	.word	0x40004400
 800bacc:	40004800 	.word	0x40004800
 800bad0:	40004c00 	.word	0x40004c00
 800bad4:	40005000 	.word	0x40005000
 800bad8:	2340      	movs	r3, #64	; 0x40
 800bada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bade:	e124      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bae0:	2380      	movs	r3, #128	; 0x80
 800bae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bae6:	e120      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4acc      	ldr	r2, [pc, #816]	; (800be20 <UART_SetConfig+0x698>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d176      	bne.n	800bbe0 <UART_SetConfig+0x458>
 800baf2:	4bcc      	ldr	r3, [pc, #816]	; (800be24 <UART_SetConfig+0x69c>)
 800baf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bafa:	2b28      	cmp	r3, #40	; 0x28
 800bafc:	d86c      	bhi.n	800bbd8 <UART_SetConfig+0x450>
 800bafe:	a201      	add	r2, pc, #4	; (adr r2, 800bb04 <UART_SetConfig+0x37c>)
 800bb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb04:	0800bba9 	.word	0x0800bba9
 800bb08:	0800bbd9 	.word	0x0800bbd9
 800bb0c:	0800bbd9 	.word	0x0800bbd9
 800bb10:	0800bbd9 	.word	0x0800bbd9
 800bb14:	0800bbd9 	.word	0x0800bbd9
 800bb18:	0800bbd9 	.word	0x0800bbd9
 800bb1c:	0800bbd9 	.word	0x0800bbd9
 800bb20:	0800bbd9 	.word	0x0800bbd9
 800bb24:	0800bbb1 	.word	0x0800bbb1
 800bb28:	0800bbd9 	.word	0x0800bbd9
 800bb2c:	0800bbd9 	.word	0x0800bbd9
 800bb30:	0800bbd9 	.word	0x0800bbd9
 800bb34:	0800bbd9 	.word	0x0800bbd9
 800bb38:	0800bbd9 	.word	0x0800bbd9
 800bb3c:	0800bbd9 	.word	0x0800bbd9
 800bb40:	0800bbd9 	.word	0x0800bbd9
 800bb44:	0800bbb9 	.word	0x0800bbb9
 800bb48:	0800bbd9 	.word	0x0800bbd9
 800bb4c:	0800bbd9 	.word	0x0800bbd9
 800bb50:	0800bbd9 	.word	0x0800bbd9
 800bb54:	0800bbd9 	.word	0x0800bbd9
 800bb58:	0800bbd9 	.word	0x0800bbd9
 800bb5c:	0800bbd9 	.word	0x0800bbd9
 800bb60:	0800bbd9 	.word	0x0800bbd9
 800bb64:	0800bbc1 	.word	0x0800bbc1
 800bb68:	0800bbd9 	.word	0x0800bbd9
 800bb6c:	0800bbd9 	.word	0x0800bbd9
 800bb70:	0800bbd9 	.word	0x0800bbd9
 800bb74:	0800bbd9 	.word	0x0800bbd9
 800bb78:	0800bbd9 	.word	0x0800bbd9
 800bb7c:	0800bbd9 	.word	0x0800bbd9
 800bb80:	0800bbd9 	.word	0x0800bbd9
 800bb84:	0800bbc9 	.word	0x0800bbc9
 800bb88:	0800bbd9 	.word	0x0800bbd9
 800bb8c:	0800bbd9 	.word	0x0800bbd9
 800bb90:	0800bbd9 	.word	0x0800bbd9
 800bb94:	0800bbd9 	.word	0x0800bbd9
 800bb98:	0800bbd9 	.word	0x0800bbd9
 800bb9c:	0800bbd9 	.word	0x0800bbd9
 800bba0:	0800bbd9 	.word	0x0800bbd9
 800bba4:	0800bbd1 	.word	0x0800bbd1
 800bba8:	2301      	movs	r3, #1
 800bbaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbae:	e0bc      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bbb0:	2304      	movs	r3, #4
 800bbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbb6:	e0b8      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bbb8:	2308      	movs	r3, #8
 800bbba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbbe:	e0b4      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bbc0:	2310      	movs	r3, #16
 800bbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbc6:	e0b0      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bbc8:	2320      	movs	r3, #32
 800bbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbce:	e0ac      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bbd0:	2340      	movs	r3, #64	; 0x40
 800bbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbd6:	e0a8      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bbd8:	2380      	movs	r3, #128	; 0x80
 800bbda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbde:	e0a4      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a90      	ldr	r2, [pc, #576]	; (800be28 <UART_SetConfig+0x6a0>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d130      	bne.n	800bc4c <UART_SetConfig+0x4c4>
 800bbea:	4b8e      	ldr	r3, [pc, #568]	; (800be24 <UART_SetConfig+0x69c>)
 800bbec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbee:	f003 0307 	and.w	r3, r3, #7
 800bbf2:	2b05      	cmp	r3, #5
 800bbf4:	d826      	bhi.n	800bc44 <UART_SetConfig+0x4bc>
 800bbf6:	a201      	add	r2, pc, #4	; (adr r2, 800bbfc <UART_SetConfig+0x474>)
 800bbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfc:	0800bc15 	.word	0x0800bc15
 800bc00:	0800bc1d 	.word	0x0800bc1d
 800bc04:	0800bc25 	.word	0x0800bc25
 800bc08:	0800bc2d 	.word	0x0800bc2d
 800bc0c:	0800bc35 	.word	0x0800bc35
 800bc10:	0800bc3d 	.word	0x0800bc3d
 800bc14:	2300      	movs	r3, #0
 800bc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc1a:	e086      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bc1c:	2304      	movs	r3, #4
 800bc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc22:	e082      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bc24:	2308      	movs	r3, #8
 800bc26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc2a:	e07e      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bc2c:	2310      	movs	r3, #16
 800bc2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc32:	e07a      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bc34:	2320      	movs	r3, #32
 800bc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc3a:	e076      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bc3c:	2340      	movs	r3, #64	; 0x40
 800bc3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc42:	e072      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bc44:	2380      	movs	r3, #128	; 0x80
 800bc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc4a:	e06e      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a76      	ldr	r2, [pc, #472]	; (800be2c <UART_SetConfig+0x6a4>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d130      	bne.n	800bcb8 <UART_SetConfig+0x530>
 800bc56:	4b73      	ldr	r3, [pc, #460]	; (800be24 <UART_SetConfig+0x69c>)
 800bc58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc5a:	f003 0307 	and.w	r3, r3, #7
 800bc5e:	2b05      	cmp	r3, #5
 800bc60:	d826      	bhi.n	800bcb0 <UART_SetConfig+0x528>
 800bc62:	a201      	add	r2, pc, #4	; (adr r2, 800bc68 <UART_SetConfig+0x4e0>)
 800bc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc68:	0800bc81 	.word	0x0800bc81
 800bc6c:	0800bc89 	.word	0x0800bc89
 800bc70:	0800bc91 	.word	0x0800bc91
 800bc74:	0800bc99 	.word	0x0800bc99
 800bc78:	0800bca1 	.word	0x0800bca1
 800bc7c:	0800bca9 	.word	0x0800bca9
 800bc80:	2300      	movs	r3, #0
 800bc82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc86:	e050      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bc88:	2304      	movs	r3, #4
 800bc8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc8e:	e04c      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bc90:	2308      	movs	r3, #8
 800bc92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc96:	e048      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bc98:	2310      	movs	r3, #16
 800bc9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9e:	e044      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bca0:	2320      	movs	r3, #32
 800bca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca6:	e040      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bca8:	2340      	movs	r3, #64	; 0x40
 800bcaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcae:	e03c      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bcb0:	2380      	movs	r3, #128	; 0x80
 800bcb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcb6:	e038      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a5c      	ldr	r2, [pc, #368]	; (800be30 <UART_SetConfig+0x6a8>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d130      	bne.n	800bd24 <UART_SetConfig+0x59c>
 800bcc2:	4b58      	ldr	r3, [pc, #352]	; (800be24 <UART_SetConfig+0x69c>)
 800bcc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcc6:	f003 0307 	and.w	r3, r3, #7
 800bcca:	2b05      	cmp	r3, #5
 800bccc:	d826      	bhi.n	800bd1c <UART_SetConfig+0x594>
 800bcce:	a201      	add	r2, pc, #4	; (adr r2, 800bcd4 <UART_SetConfig+0x54c>)
 800bcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd4:	0800bced 	.word	0x0800bced
 800bcd8:	0800bcf5 	.word	0x0800bcf5
 800bcdc:	0800bcfd 	.word	0x0800bcfd
 800bce0:	0800bd05 	.word	0x0800bd05
 800bce4:	0800bd0d 	.word	0x0800bd0d
 800bce8:	0800bd15 	.word	0x0800bd15
 800bcec:	2302      	movs	r3, #2
 800bcee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcf2:	e01a      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bcf4:	2304      	movs	r3, #4
 800bcf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcfa:	e016      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bcfc:	2308      	movs	r3, #8
 800bcfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd02:	e012      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bd04:	2310      	movs	r3, #16
 800bd06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd0a:	e00e      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bd0c:	2320      	movs	r3, #32
 800bd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd12:	e00a      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bd14:	2340      	movs	r3, #64	; 0x40
 800bd16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd1a:	e006      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bd1c:	2380      	movs	r3, #128	; 0x80
 800bd1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd22:	e002      	b.n	800bd2a <UART_SetConfig+0x5a2>
 800bd24:	2380      	movs	r3, #128	; 0x80
 800bd26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a40      	ldr	r2, [pc, #256]	; (800be30 <UART_SetConfig+0x6a8>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	f040 80ef 	bne.w	800bf14 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd3a:	2b20      	cmp	r3, #32
 800bd3c:	dc46      	bgt.n	800bdcc <UART_SetConfig+0x644>
 800bd3e:	2b02      	cmp	r3, #2
 800bd40:	f2c0 8081 	blt.w	800be46 <UART_SetConfig+0x6be>
 800bd44:	3b02      	subs	r3, #2
 800bd46:	2b1e      	cmp	r3, #30
 800bd48:	d87d      	bhi.n	800be46 <UART_SetConfig+0x6be>
 800bd4a:	a201      	add	r2, pc, #4	; (adr r2, 800bd50 <UART_SetConfig+0x5c8>)
 800bd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd50:	0800bdd3 	.word	0x0800bdd3
 800bd54:	0800be47 	.word	0x0800be47
 800bd58:	0800bddb 	.word	0x0800bddb
 800bd5c:	0800be47 	.word	0x0800be47
 800bd60:	0800be47 	.word	0x0800be47
 800bd64:	0800be47 	.word	0x0800be47
 800bd68:	0800bdeb 	.word	0x0800bdeb
 800bd6c:	0800be47 	.word	0x0800be47
 800bd70:	0800be47 	.word	0x0800be47
 800bd74:	0800be47 	.word	0x0800be47
 800bd78:	0800be47 	.word	0x0800be47
 800bd7c:	0800be47 	.word	0x0800be47
 800bd80:	0800be47 	.word	0x0800be47
 800bd84:	0800be47 	.word	0x0800be47
 800bd88:	0800bdfb 	.word	0x0800bdfb
 800bd8c:	0800be47 	.word	0x0800be47
 800bd90:	0800be47 	.word	0x0800be47
 800bd94:	0800be47 	.word	0x0800be47
 800bd98:	0800be47 	.word	0x0800be47
 800bd9c:	0800be47 	.word	0x0800be47
 800bda0:	0800be47 	.word	0x0800be47
 800bda4:	0800be47 	.word	0x0800be47
 800bda8:	0800be47 	.word	0x0800be47
 800bdac:	0800be47 	.word	0x0800be47
 800bdb0:	0800be47 	.word	0x0800be47
 800bdb4:	0800be47 	.word	0x0800be47
 800bdb8:	0800be47 	.word	0x0800be47
 800bdbc:	0800be47 	.word	0x0800be47
 800bdc0:	0800be47 	.word	0x0800be47
 800bdc4:	0800be47 	.word	0x0800be47
 800bdc8:	0800be39 	.word	0x0800be39
 800bdcc:	2b40      	cmp	r3, #64	; 0x40
 800bdce:	d036      	beq.n	800be3e <UART_SetConfig+0x6b6>
 800bdd0:	e039      	b.n	800be46 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bdd2:	f7fd f9ef 	bl	80091b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800bdd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bdd8:	e03b      	b.n	800be52 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdda:	f107 0314 	add.w	r3, r7, #20
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fd f9fe 	bl	80091e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bde8:	e033      	b.n	800be52 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdea:	f107 0308 	add.w	r3, r7, #8
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7fd fb4a 	bl	8009488 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bdf8:	e02b      	b.n	800be52 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdfa:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <UART_SetConfig+0x69c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 0320 	and.w	r3, r3, #32
 800be02:	2b00      	cmp	r3, #0
 800be04:	d009      	beq.n	800be1a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be06:	4b07      	ldr	r3, [pc, #28]	; (800be24 <UART_SetConfig+0x69c>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	08db      	lsrs	r3, r3, #3
 800be0c:	f003 0303 	and.w	r3, r3, #3
 800be10:	4a08      	ldr	r2, [pc, #32]	; (800be34 <UART_SetConfig+0x6ac>)
 800be12:	fa22 f303 	lsr.w	r3, r2, r3
 800be16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be18:	e01b      	b.n	800be52 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800be1a:	4b06      	ldr	r3, [pc, #24]	; (800be34 <UART_SetConfig+0x6ac>)
 800be1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be1e:	e018      	b.n	800be52 <UART_SetConfig+0x6ca>
 800be20:	40011400 	.word	0x40011400
 800be24:	58024400 	.word	0x58024400
 800be28:	40007800 	.word	0x40007800
 800be2c:	40007c00 	.word	0x40007c00
 800be30:	58000c00 	.word	0x58000c00
 800be34:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be38:	4bc4      	ldr	r3, [pc, #784]	; (800c14c <UART_SetConfig+0x9c4>)
 800be3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be3c:	e009      	b.n	800be52 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be44:	e005      	b.n	800be52 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800be46:	2300      	movs	r3, #0
 800be48:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800be50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800be52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be54:	2b00      	cmp	r3, #0
 800be56:	f000 81da 	beq.w	800c20e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5e:	4abc      	ldr	r2, [pc, #752]	; (800c150 <UART_SetConfig+0x9c8>)
 800be60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be64:	461a      	mov	r2, r3
 800be66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be68:	fbb3 f3f2 	udiv	r3, r3, r2
 800be6c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	4613      	mov	r3, r2
 800be74:	005b      	lsls	r3, r3, #1
 800be76:	4413      	add	r3, r2
 800be78:	6a3a      	ldr	r2, [r7, #32]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d305      	bcc.n	800be8a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be84:	6a3a      	ldr	r2, [r7, #32]
 800be86:	429a      	cmp	r2, r3
 800be88:	d903      	bls.n	800be92 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800be90:	e1bd      	b.n	800c20e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be94:	4618      	mov	r0, r3
 800be96:	f04f 0100 	mov.w	r1, #0
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9e:	4aac      	ldr	r2, [pc, #688]	; (800c150 <UART_SetConfig+0x9c8>)
 800bea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	f04f 0300 	mov.w	r3, #0
 800beaa:	f7f4 fb23 	bl	80004f4 <__aeabi_uldivmod>
 800beae:	4602      	mov	r2, r0
 800beb0:	460b      	mov	r3, r1
 800beb2:	4610      	mov	r0, r2
 800beb4:	4619      	mov	r1, r3
 800beb6:	f04f 0200 	mov.w	r2, #0
 800beba:	f04f 0300 	mov.w	r3, #0
 800bebe:	020b      	lsls	r3, r1, #8
 800bec0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bec4:	0202      	lsls	r2, r0, #8
 800bec6:	6879      	ldr	r1, [r7, #4]
 800bec8:	6849      	ldr	r1, [r1, #4]
 800beca:	0849      	lsrs	r1, r1, #1
 800becc:	4608      	mov	r0, r1
 800bece:	f04f 0100 	mov.w	r1, #0
 800bed2:	1814      	adds	r4, r2, r0
 800bed4:	eb43 0501 	adc.w	r5, r3, r1
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	461a      	mov	r2, r3
 800bede:	f04f 0300 	mov.w	r3, #0
 800bee2:	4620      	mov	r0, r4
 800bee4:	4629      	mov	r1, r5
 800bee6:	f7f4 fb05 	bl	80004f4 <__aeabi_uldivmod>
 800beea:	4602      	mov	r2, r0
 800beec:	460b      	mov	r3, r1
 800beee:	4613      	mov	r3, r2
 800bef0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bef8:	d308      	bcc.n	800bf0c <UART_SetConfig+0x784>
 800befa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf00:	d204      	bcs.n	800bf0c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf08:	60da      	str	r2, [r3, #12]
 800bf0a:	e180      	b.n	800c20e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf12:	e17c      	b.n	800c20e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	69db      	ldr	r3, [r3, #28]
 800bf18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf1c:	f040 80bf 	bne.w	800c09e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800bf20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf24:	2b20      	cmp	r3, #32
 800bf26:	dc49      	bgt.n	800bfbc <UART_SetConfig+0x834>
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	db7c      	blt.n	800c026 <UART_SetConfig+0x89e>
 800bf2c:	2b20      	cmp	r3, #32
 800bf2e:	d87a      	bhi.n	800c026 <UART_SetConfig+0x89e>
 800bf30:	a201      	add	r2, pc, #4	; (adr r2, 800bf38 <UART_SetConfig+0x7b0>)
 800bf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf36:	bf00      	nop
 800bf38:	0800bfc3 	.word	0x0800bfc3
 800bf3c:	0800bfcb 	.word	0x0800bfcb
 800bf40:	0800c027 	.word	0x0800c027
 800bf44:	0800c027 	.word	0x0800c027
 800bf48:	0800bfd3 	.word	0x0800bfd3
 800bf4c:	0800c027 	.word	0x0800c027
 800bf50:	0800c027 	.word	0x0800c027
 800bf54:	0800c027 	.word	0x0800c027
 800bf58:	0800bfe3 	.word	0x0800bfe3
 800bf5c:	0800c027 	.word	0x0800c027
 800bf60:	0800c027 	.word	0x0800c027
 800bf64:	0800c027 	.word	0x0800c027
 800bf68:	0800c027 	.word	0x0800c027
 800bf6c:	0800c027 	.word	0x0800c027
 800bf70:	0800c027 	.word	0x0800c027
 800bf74:	0800c027 	.word	0x0800c027
 800bf78:	0800bff3 	.word	0x0800bff3
 800bf7c:	0800c027 	.word	0x0800c027
 800bf80:	0800c027 	.word	0x0800c027
 800bf84:	0800c027 	.word	0x0800c027
 800bf88:	0800c027 	.word	0x0800c027
 800bf8c:	0800c027 	.word	0x0800c027
 800bf90:	0800c027 	.word	0x0800c027
 800bf94:	0800c027 	.word	0x0800c027
 800bf98:	0800c027 	.word	0x0800c027
 800bf9c:	0800c027 	.word	0x0800c027
 800bfa0:	0800c027 	.word	0x0800c027
 800bfa4:	0800c027 	.word	0x0800c027
 800bfa8:	0800c027 	.word	0x0800c027
 800bfac:	0800c027 	.word	0x0800c027
 800bfb0:	0800c027 	.word	0x0800c027
 800bfb4:	0800c027 	.word	0x0800c027
 800bfb8:	0800c019 	.word	0x0800c019
 800bfbc:	2b40      	cmp	r3, #64	; 0x40
 800bfbe:	d02e      	beq.n	800c01e <UART_SetConfig+0x896>
 800bfc0:	e031      	b.n	800c026 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfc2:	f7fb fcb9 	bl	8007938 <HAL_RCC_GetPCLK1Freq>
 800bfc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bfc8:	e033      	b.n	800c032 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfca:	f7fb fccb 	bl	8007964 <HAL_RCC_GetPCLK2Freq>
 800bfce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bfd0:	e02f      	b.n	800c032 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfd2:	f107 0314 	add.w	r3, r7, #20
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fd f902 	bl	80091e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bfe0:	e027      	b.n	800c032 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfe2:	f107 0308 	add.w	r3, r7, #8
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fd fa4e 	bl	8009488 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bff0:	e01f      	b.n	800c032 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bff2:	4b58      	ldr	r3, [pc, #352]	; (800c154 <UART_SetConfig+0x9cc>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f003 0320 	and.w	r3, r3, #32
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d009      	beq.n	800c012 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bffe:	4b55      	ldr	r3, [pc, #340]	; (800c154 <UART_SetConfig+0x9cc>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	08db      	lsrs	r3, r3, #3
 800c004:	f003 0303 	and.w	r3, r3, #3
 800c008:	4a53      	ldr	r2, [pc, #332]	; (800c158 <UART_SetConfig+0x9d0>)
 800c00a:	fa22 f303 	lsr.w	r3, r2, r3
 800c00e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c010:	e00f      	b.n	800c032 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c012:	4b51      	ldr	r3, [pc, #324]	; (800c158 <UART_SetConfig+0x9d0>)
 800c014:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c016:	e00c      	b.n	800c032 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c018:	4b4c      	ldr	r3, [pc, #304]	; (800c14c <UART_SetConfig+0x9c4>)
 800c01a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c01c:	e009      	b.n	800c032 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c01e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c022:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c024:	e005      	b.n	800c032 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c030:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c034:	2b00      	cmp	r3, #0
 800c036:	f000 80ea 	beq.w	800c20e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03e:	4a44      	ldr	r2, [pc, #272]	; (800c150 <UART_SetConfig+0x9c8>)
 800c040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c044:	461a      	mov	r2, r3
 800c046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c048:	fbb3 f3f2 	udiv	r3, r3, r2
 800c04c:	005a      	lsls	r2, r3, #1
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	085b      	lsrs	r3, r3, #1
 800c054:	441a      	add	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c05e:	b29b      	uxth	r3, r3
 800c060:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c064:	2b0f      	cmp	r3, #15
 800c066:	d916      	bls.n	800c096 <UART_SetConfig+0x90e>
 800c068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c06e:	d212      	bcs.n	800c096 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c072:	b29b      	uxth	r3, r3
 800c074:	f023 030f 	bic.w	r3, r3, #15
 800c078:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07c:	085b      	lsrs	r3, r3, #1
 800c07e:	b29b      	uxth	r3, r3
 800c080:	f003 0307 	and.w	r3, r3, #7
 800c084:	b29a      	uxth	r2, r3
 800c086:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c088:	4313      	orrs	r3, r2
 800c08a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c092:	60da      	str	r2, [r3, #12]
 800c094:	e0bb      	b.n	800c20e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c09c:	e0b7      	b.n	800c20e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c09e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0a2:	2b20      	cmp	r3, #32
 800c0a4:	dc4a      	bgt.n	800c13c <UART_SetConfig+0x9b4>
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f2c0 8086 	blt.w	800c1b8 <UART_SetConfig+0xa30>
 800c0ac:	2b20      	cmp	r3, #32
 800c0ae:	f200 8083 	bhi.w	800c1b8 <UART_SetConfig+0xa30>
 800c0b2:	a201      	add	r2, pc, #4	; (adr r2, 800c0b8 <UART_SetConfig+0x930>)
 800c0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b8:	0800c143 	.word	0x0800c143
 800c0bc:	0800c15d 	.word	0x0800c15d
 800c0c0:	0800c1b9 	.word	0x0800c1b9
 800c0c4:	0800c1b9 	.word	0x0800c1b9
 800c0c8:	0800c165 	.word	0x0800c165
 800c0cc:	0800c1b9 	.word	0x0800c1b9
 800c0d0:	0800c1b9 	.word	0x0800c1b9
 800c0d4:	0800c1b9 	.word	0x0800c1b9
 800c0d8:	0800c175 	.word	0x0800c175
 800c0dc:	0800c1b9 	.word	0x0800c1b9
 800c0e0:	0800c1b9 	.word	0x0800c1b9
 800c0e4:	0800c1b9 	.word	0x0800c1b9
 800c0e8:	0800c1b9 	.word	0x0800c1b9
 800c0ec:	0800c1b9 	.word	0x0800c1b9
 800c0f0:	0800c1b9 	.word	0x0800c1b9
 800c0f4:	0800c1b9 	.word	0x0800c1b9
 800c0f8:	0800c185 	.word	0x0800c185
 800c0fc:	0800c1b9 	.word	0x0800c1b9
 800c100:	0800c1b9 	.word	0x0800c1b9
 800c104:	0800c1b9 	.word	0x0800c1b9
 800c108:	0800c1b9 	.word	0x0800c1b9
 800c10c:	0800c1b9 	.word	0x0800c1b9
 800c110:	0800c1b9 	.word	0x0800c1b9
 800c114:	0800c1b9 	.word	0x0800c1b9
 800c118:	0800c1b9 	.word	0x0800c1b9
 800c11c:	0800c1b9 	.word	0x0800c1b9
 800c120:	0800c1b9 	.word	0x0800c1b9
 800c124:	0800c1b9 	.word	0x0800c1b9
 800c128:	0800c1b9 	.word	0x0800c1b9
 800c12c:	0800c1b9 	.word	0x0800c1b9
 800c130:	0800c1b9 	.word	0x0800c1b9
 800c134:	0800c1b9 	.word	0x0800c1b9
 800c138:	0800c1ab 	.word	0x0800c1ab
 800c13c:	2b40      	cmp	r3, #64	; 0x40
 800c13e:	d037      	beq.n	800c1b0 <UART_SetConfig+0xa28>
 800c140:	e03a      	b.n	800c1b8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c142:	f7fb fbf9 	bl	8007938 <HAL_RCC_GetPCLK1Freq>
 800c146:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c148:	e03c      	b.n	800c1c4 <UART_SetConfig+0xa3c>
 800c14a:	bf00      	nop
 800c14c:	003d0900 	.word	0x003d0900
 800c150:	0800cd2c 	.word	0x0800cd2c
 800c154:	58024400 	.word	0x58024400
 800c158:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c15c:	f7fb fc02 	bl	8007964 <HAL_RCC_GetPCLK2Freq>
 800c160:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c162:	e02f      	b.n	800c1c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c164:	f107 0314 	add.w	r3, r7, #20
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fd f839 	bl	80091e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c172:	e027      	b.n	800c1c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c174:	f107 0308 	add.w	r3, r7, #8
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fd f985 	bl	8009488 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c182:	e01f      	b.n	800c1c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c184:	4b2c      	ldr	r3, [pc, #176]	; (800c238 <UART_SetConfig+0xab0>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 0320 	and.w	r3, r3, #32
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d009      	beq.n	800c1a4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c190:	4b29      	ldr	r3, [pc, #164]	; (800c238 <UART_SetConfig+0xab0>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	08db      	lsrs	r3, r3, #3
 800c196:	f003 0303 	and.w	r3, r3, #3
 800c19a:	4a28      	ldr	r2, [pc, #160]	; (800c23c <UART_SetConfig+0xab4>)
 800c19c:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1a2:	e00f      	b.n	800c1c4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c1a4:	4b25      	ldr	r3, [pc, #148]	; (800c23c <UART_SetConfig+0xab4>)
 800c1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1a8:	e00c      	b.n	800c1c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1aa:	4b25      	ldr	r3, [pc, #148]	; (800c240 <UART_SetConfig+0xab8>)
 800c1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1ae:	e009      	b.n	800c1c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1b6:	e005      	b.n	800c1c4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c1c2:	bf00      	nop
    }

    if (pclk != 0U)
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d021      	beq.n	800c20e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ce:	4a1d      	ldr	r2, [pc, #116]	; (800c244 <UART_SetConfig+0xabc>)
 800c1d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	085b      	lsrs	r3, r3, #1
 800c1e2:	441a      	add	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f2:	2b0f      	cmp	r3, #15
 800c1f4:	d908      	bls.n	800c208 <UART_SetConfig+0xa80>
 800c1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1fc:	d204      	bcs.n	800c208 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c204:	60da      	str	r2, [r3, #12]
 800c206:	e002      	b.n	800c20e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2201      	movs	r2, #1
 800c21a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c22a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3738      	adds	r7, #56	; 0x38
 800c232:	46bd      	mov	sp, r7
 800c234:	bdb0      	pop	{r4, r5, r7, pc}
 800c236:	bf00      	nop
 800c238:	58024400 	.word	0x58024400
 800c23c:	03d09000 	.word	0x03d09000
 800c240:	003d0900 	.word	0x003d0900
 800c244:	0800cd2c 	.word	0x0800cd2c

0800c248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c254:	f003 0301 	and.w	r3, r3, #1
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00a      	beq.n	800c272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	430a      	orrs	r2, r1
 800c270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c276:	f003 0302 	and.w	r3, r3, #2
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00a      	beq.n	800c294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	430a      	orrs	r2, r1
 800c292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c298:	f003 0304 	and.w	r3, r3, #4
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00a      	beq.n	800c2b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	430a      	orrs	r2, r1
 800c2b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ba:	f003 0308 	and.w	r3, r3, #8
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00a      	beq.n	800c2d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2dc:	f003 0310 	and.w	r3, r3, #16
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00a      	beq.n	800c2fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	430a      	orrs	r2, r1
 800c2f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2fe:	f003 0320 	and.w	r3, r3, #32
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00a      	beq.n	800c31c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	430a      	orrs	r2, r1
 800c31a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c324:	2b00      	cmp	r3, #0
 800c326:	d01a      	beq.n	800c35e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	430a      	orrs	r2, r1
 800c33c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c346:	d10a      	bne.n	800c35e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	430a      	orrs	r2, r1
 800c35c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00a      	beq.n	800c380 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	430a      	orrs	r2, r1
 800c37e:	605a      	str	r2, [r3, #4]
  }
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af02      	add	r7, sp, #8
 800c392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c39c:	f7f6 fe08 	bl	8002fb0 <HAL_GetTick>
 800c3a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0308 	and.w	r3, r3, #8
 800c3ac:	2b08      	cmp	r3, #8
 800c3ae:	d10e      	bne.n	800c3ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f82f 	bl	800c422 <UART_WaitOnFlagUntilTimeout>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e025      	b.n	800c41a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b04      	cmp	r3, #4
 800c3da:	d10e      	bne.n	800c3fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 f819 	bl	800c422 <UART_WaitOnFlagUntilTimeout>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d001      	beq.n	800c3fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3f6:	2303      	movs	r3, #3
 800c3f8:	e00f      	b.n	800c41a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2220      	movs	r2, #32
 800c3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2220      	movs	r2, #32
 800c406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b084      	sub	sp, #16
 800c426:	af00      	add	r7, sp, #0
 800c428:	60f8      	str	r0, [r7, #12]
 800c42a:	60b9      	str	r1, [r7, #8]
 800c42c:	603b      	str	r3, [r7, #0]
 800c42e:	4613      	mov	r3, r2
 800c430:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c432:	e062      	b.n	800c4fa <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c43a:	d05e      	beq.n	800c4fa <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c43c:	f7f6 fdb8 	bl	8002fb0 <HAL_GetTick>
 800c440:	4602      	mov	r2, r0
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	69ba      	ldr	r2, [r7, #24]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d302      	bcc.n	800c452 <UART_WaitOnFlagUntilTimeout+0x30>
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d11d      	bne.n	800c48e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c460:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	689a      	ldr	r2, [r3, #8]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f022 0201 	bic.w	r2, r2, #1
 800c470:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2220      	movs	r2, #32
 800c476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2220      	movs	r2, #32
 800c47e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2200      	movs	r2, #0
 800c486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c48a:	2303      	movs	r3, #3
 800c48c:	e045      	b.n	800c51a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0304 	and.w	r3, r3, #4
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d02e      	beq.n	800c4fa <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	69db      	ldr	r3, [r3, #28]
 800c4a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4aa:	d126      	bne.n	800c4fa <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c4c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	689a      	ldr	r2, [r3, #8]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f022 0201 	bic.w	r2, r2, #1
 800c4d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2220      	movs	r2, #32
 800c4da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2220      	movs	r2, #32
 800c4e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2220      	movs	r2, #32
 800c4ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e00f      	b.n	800c51a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	69da      	ldr	r2, [r3, #28]
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	4013      	ands	r3, r2
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	429a      	cmp	r2, r3
 800c508:	bf0c      	ite	eq
 800c50a:	2301      	moveq	r3, #1
 800c50c:	2300      	movne	r3, #0
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	461a      	mov	r2, r3
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	429a      	cmp	r2, r3
 800c516:	d08d      	beq.n	800c434 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c522:	b480      	push	{r7}
 800c524:	b085      	sub	sp, #20
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c530:	2b01      	cmp	r3, #1
 800c532:	d101      	bne.n	800c538 <HAL_UARTEx_DisableFifoMode+0x16>
 800c534:	2302      	movs	r3, #2
 800c536:	e027      	b.n	800c588 <HAL_UARTEx_DisableFifoMode+0x66>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2201      	movs	r2, #1
 800c53c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2224      	movs	r2, #36	; 0x24
 800c544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f022 0201 	bic.w	r2, r2, #1
 800c55e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c566:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2220      	movs	r2, #32
 800c57a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d101      	bne.n	800c5ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	e02d      	b.n	800c608 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2224      	movs	r2, #36	; 0x24
 800c5b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f022 0201 	bic.w	r2, r2, #1
 800c5d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	430a      	orrs	r2, r1
 800c5e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f84f 	bl	800c68c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2220      	movs	r2, #32
 800c5fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c620:	2b01      	cmp	r3, #1
 800c622:	d101      	bne.n	800c628 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c624:	2302      	movs	r3, #2
 800c626:	e02d      	b.n	800c684 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2224      	movs	r2, #36	; 0x24
 800c634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f022 0201 	bic.w	r2, r2, #1
 800c64e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	430a      	orrs	r2, r1
 800c662:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 f811 	bl	800c68c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2220      	movs	r2, #32
 800c676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d108      	bne.n	800c6ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c6ac:	e031      	b.n	800c712 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c6ae:	2310      	movs	r3, #16
 800c6b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c6b2:	2310      	movs	r3, #16
 800c6b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	0e5b      	lsrs	r3, r3, #25
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	f003 0307 	and.w	r3, r3, #7
 800c6c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	0f5b      	lsrs	r3, r3, #29
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	f003 0307 	and.w	r3, r3, #7
 800c6d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6d6:	7bbb      	ldrb	r3, [r7, #14]
 800c6d8:	7b3a      	ldrb	r2, [r7, #12]
 800c6da:	4911      	ldr	r1, [pc, #68]	; (800c720 <UARTEx_SetNbDataToProcess+0x94>)
 800c6dc:	5c8a      	ldrb	r2, [r1, r2]
 800c6de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c6e2:	7b3a      	ldrb	r2, [r7, #12]
 800c6e4:	490f      	ldr	r1, [pc, #60]	; (800c724 <UARTEx_SetNbDataToProcess+0x98>)
 800c6e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
 800c6f6:	7b7a      	ldrb	r2, [r7, #13]
 800c6f8:	4909      	ldr	r1, [pc, #36]	; (800c720 <UARTEx_SetNbDataToProcess+0x94>)
 800c6fa:	5c8a      	ldrb	r2, [r1, r2]
 800c6fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c700:	7b7a      	ldrb	r2, [r7, #13]
 800c702:	4908      	ldr	r1, [pc, #32]	; (800c724 <UARTEx_SetNbDataToProcess+0x98>)
 800c704:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c706:	fb93 f3f2 	sdiv	r3, r3, r2
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c712:	bf00      	nop
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	0800cd44 	.word	0x0800cd44
 800c724:	0800cd4c 	.word	0x0800cd4c

0800c728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c728:	b084      	sub	sp, #16
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b084      	sub	sp, #16
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	f107 001c 	add.w	r0, r7, #28
 800c736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d120      	bne.n	800c782 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	68da      	ldr	r2, [r3, #12]
 800c750:	4b2a      	ldr	r3, [pc, #168]	; (800c7fc <USB_CoreInit+0xd4>)
 800c752:	4013      	ands	r3, r2
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c766:	2b01      	cmp	r3, #1
 800c768:	d105      	bne.n	800c776 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fa60 	bl	800cc3c <USB_CoreReset>
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]
 800c780:	e01a      	b.n	800c7b8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 fa54 	bl	800cc3c <USB_CoreReset>
 800c794:	4603      	mov	r3, r0
 800c796:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d106      	bne.n	800c7ac <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	639a      	str	r2, [r3, #56]	; 0x38
 800c7aa:	e005      	b.n	800c7b8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d116      	bne.n	800c7ec <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c7cc:	4b0c      	ldr	r3, [pc, #48]	; (800c800 <USB_CoreInit+0xd8>)
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	f043 0206 	orr.w	r2, r3, #6
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	f043 0220 	orr.w	r2, r3, #32
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7f8:	b004      	add	sp, #16
 800c7fa:	4770      	bx	lr
 800c7fc:	ffbdffbf 	.word	0xffbdffbf
 800c800:	03ee0000 	.word	0x03ee0000

0800c804 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	f023 0201 	bic.w	r2, r3, #1
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c826:	b580      	push	{r7, lr}
 800c828:	b082      	sub	sp, #8
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	460b      	mov	r3, r1
 800c830:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c83e:	78fb      	ldrb	r3, [r7, #3]
 800c840:	2b01      	cmp	r3, #1
 800c842:	d106      	bne.n	800c852 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	60da      	str	r2, [r3, #12]
 800c850:	e00b      	b.n	800c86a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c852:	78fb      	ldrb	r3, [r7, #3]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d106      	bne.n	800c866 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	60da      	str	r2, [r3, #12]
 800c864:	e001      	b.n	800c86a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	e003      	b.n	800c872 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c86a:	2032      	movs	r0, #50	; 0x32
 800c86c:	f7f6 fbac 	bl	8002fc8 <HAL_Delay>

  return HAL_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
	...

0800c87c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c87c:	b084      	sub	sp, #16
 800c87e:	b580      	push	{r7, lr}
 800c880:	b086      	sub	sp, #24
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
 800c886:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c88a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c88e:	2300      	movs	r3, #0
 800c890:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c896:	2300      	movs	r3, #0
 800c898:	613b      	str	r3, [r7, #16]
 800c89a:	e009      	b.n	800c8b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	3340      	adds	r3, #64	; 0x40
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	4413      	add	r3, r2
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	613b      	str	r3, [r7, #16]
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	2b0e      	cmp	r3, #14
 800c8b4:	d9f2      	bls.n	800c89c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c8b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d11c      	bne.n	800c8f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8ca:	f043 0302 	orr.w	r3, r3, #2
 800c8ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	601a      	str	r2, [r3, #0]
 800c8f4:	e005      	b.n	800c902 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c908:	461a      	mov	r2, r3
 800c90a:	2300      	movs	r3, #0
 800c90c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c914:	4619      	mov	r1, r3
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c91c:	461a      	mov	r2, r3
 800c91e:	680b      	ldr	r3, [r1, #0]
 800c920:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c924:	2b01      	cmp	r3, #1
 800c926:	d10c      	bne.n	800c942 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d104      	bne.n	800c938 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c92e:	2100      	movs	r1, #0
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f949 	bl	800cbc8 <USB_SetDevSpeed>
 800c936:	e008      	b.n	800c94a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c938:	2101      	movs	r1, #1
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f944 	bl	800cbc8 <USB_SetDevSpeed>
 800c940:	e003      	b.n	800c94a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c942:	2103      	movs	r1, #3
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f93f 	bl	800cbc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c94a:	2110      	movs	r1, #16
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f8f3 	bl	800cb38 <USB_FlushTxFifo>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f911 	bl	800cb84 <USB_FlushRxFifo>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d001      	beq.n	800c96c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c972:	461a      	mov	r2, r3
 800c974:	2300      	movs	r3, #0
 800c976:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c97e:	461a      	mov	r2, r3
 800c980:	2300      	movs	r3, #0
 800c982:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c98a:	461a      	mov	r2, r3
 800c98c:	2300      	movs	r3, #0
 800c98e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c990:	2300      	movs	r3, #0
 800c992:	613b      	str	r3, [r7, #16]
 800c994:	e043      	b.n	800ca1e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	015a      	lsls	r2, r3, #5
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4413      	add	r3, r2
 800c99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9ac:	d118      	bne.n	800c9e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10a      	bne.n	800c9ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	015a      	lsls	r2, r3, #5
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	e013      	b.n	800c9f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	015a      	lsls	r2, r3, #5
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c9dc:	6013      	str	r3, [r2, #0]
 800c9de:	e008      	b.n	800c9f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	015a      	lsls	r2, r3, #5
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9fe:	461a      	mov	r2, r3
 800ca00:	2300      	movs	r3, #0
 800ca02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	015a      	lsls	r2, r3, #5
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca10:	461a      	mov	r2, r3
 800ca12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	613b      	str	r3, [r7, #16]
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d3b7      	bcc.n	800c996 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca26:	2300      	movs	r3, #0
 800ca28:	613b      	str	r3, [r7, #16]
 800ca2a:	e043      	b.n	800cab4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	015a      	lsls	r2, r3, #5
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4413      	add	r3, r2
 800ca34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca42:	d118      	bne.n	800ca76 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10a      	bne.n	800ca60 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	015a      	lsls	r2, r3, #5
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	4413      	add	r3, r2
 800ca52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca56:	461a      	mov	r2, r3
 800ca58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca5c:	6013      	str	r3, [r2, #0]
 800ca5e:	e013      	b.n	800ca88 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	015a      	lsls	r2, r3, #5
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	4413      	add	r3, r2
 800ca68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca72:	6013      	str	r3, [r2, #0]
 800ca74:	e008      	b.n	800ca88 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	015a      	lsls	r2, r3, #5
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca82:	461a      	mov	r2, r3
 800ca84:	2300      	movs	r3, #0
 800ca86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	015a      	lsls	r2, r3, #5
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	4413      	add	r3, r2
 800ca90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca94:	461a      	mov	r2, r3
 800ca96:	2300      	movs	r3, #0
 800ca98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	015a      	lsls	r2, r3, #5
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	4413      	add	r3, r2
 800caa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa6:	461a      	mov	r2, r3
 800caa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800caac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	3301      	adds	r3, #1
 800cab2:	613b      	str	r3, [r7, #16]
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	693a      	ldr	r2, [r7, #16]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d3b7      	bcc.n	800ca2c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac2:	691b      	ldr	r3, [r3, #16]
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800caca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cace:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cadc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d105      	bne.n	800caf0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	699b      	ldr	r3, [r3, #24]
 800cae8:	f043 0210 	orr.w	r2, r3, #16
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	699a      	ldr	r2, [r3, #24]
 800caf4:	4b0e      	ldr	r3, [pc, #56]	; (800cb30 <USB_DevInit+0x2b4>)
 800caf6:	4313      	orrs	r3, r2
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d005      	beq.n	800cb0e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	f043 0208 	orr.w	r2, r3, #8
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d105      	bne.n	800cb20 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	699a      	ldr	r2, [r3, #24]
 800cb18:	4b06      	ldr	r3, [pc, #24]	; (800cb34 <USB_DevInit+0x2b8>)
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cb20:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3718      	adds	r7, #24
 800cb26:	46bd      	mov	sp, r7
 800cb28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb2c:	b004      	add	sp, #16
 800cb2e:	4770      	bx	lr
 800cb30:	803c3800 	.word	0x803c3800
 800cb34:	40000004 	.word	0x40000004

0800cb38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cb42:	2300      	movs	r3, #0
 800cb44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	019b      	lsls	r3, r3, #6
 800cb4a:	f043 0220 	orr.w	r2, r3, #32
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	3301      	adds	r3, #1
 800cb56:	60fb      	str	r3, [r7, #12]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	4a09      	ldr	r2, [pc, #36]	; (800cb80 <USB_FlushTxFifo+0x48>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d901      	bls.n	800cb64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cb60:	2303      	movs	r3, #3
 800cb62:	e006      	b.n	800cb72 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	f003 0320 	and.w	r3, r3, #32
 800cb6c:	2b20      	cmp	r3, #32
 800cb6e:	d0f0      	beq.n	800cb52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	00030d40 	.word	0x00030d40

0800cb84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2210      	movs	r2, #16
 800cb94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	4a09      	ldr	r2, [pc, #36]	; (800cbc4 <USB_FlushRxFifo+0x40>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d901      	bls.n	800cba8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cba4:	2303      	movs	r3, #3
 800cba6:	e006      	b.n	800cbb6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	f003 0310 	and.w	r3, r3, #16
 800cbb0:	2b10      	cmp	r3, #16
 800cbb2:	d0f0      	beq.n	800cb96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3714      	adds	r7, #20
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	00030d40 	.word	0x00030d40

0800cbc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	78fb      	ldrb	r3, [r7, #3]
 800cbe2:	68f9      	ldr	r1, [r7, #12]
 800cbe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b085      	sub	sp, #20
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc14:	f023 0303 	bic.w	r3, r3, #3
 800cc18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc28:	f043 0302 	orr.w	r3, r3, #2
 800cc2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cc44:	2300      	movs	r3, #0
 800cc46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	60fb      	str	r3, [r7, #12]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	4a13      	ldr	r2, [pc, #76]	; (800cca0 <USB_CoreReset+0x64>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d901      	bls.n	800cc5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc56:	2303      	movs	r3, #3
 800cc58:	e01b      	b.n	800cc92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	daf2      	bge.n	800cc48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc62:	2300      	movs	r3, #0
 800cc64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	f043 0201 	orr.w	r2, r3, #1
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	3301      	adds	r3, #1
 800cc76:	60fb      	str	r3, [r7, #12]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	4a09      	ldr	r2, [pc, #36]	; (800cca0 <USB_CoreReset+0x64>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d901      	bls.n	800cc84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e006      	b.n	800cc92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	691b      	ldr	r3, [r3, #16]
 800cc88:	f003 0301 	and.w	r3, r3, #1
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d0f0      	beq.n	800cc72 <USB_CoreReset+0x36>

  return HAL_OK;
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	00030d40 	.word	0x00030d40

0800cca4 <__libc_init_array>:
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	4d0d      	ldr	r5, [pc, #52]	; (800ccdc <__libc_init_array+0x38>)
 800cca8:	4c0d      	ldr	r4, [pc, #52]	; (800cce0 <__libc_init_array+0x3c>)
 800ccaa:	1b64      	subs	r4, r4, r5
 800ccac:	10a4      	asrs	r4, r4, #2
 800ccae:	2600      	movs	r6, #0
 800ccb0:	42a6      	cmp	r6, r4
 800ccb2:	d109      	bne.n	800ccc8 <__libc_init_array+0x24>
 800ccb4:	4d0b      	ldr	r5, [pc, #44]	; (800cce4 <__libc_init_array+0x40>)
 800ccb6:	4c0c      	ldr	r4, [pc, #48]	; (800cce8 <__libc_init_array+0x44>)
 800ccb8:	f000 f820 	bl	800ccfc <_init>
 800ccbc:	1b64      	subs	r4, r4, r5
 800ccbe:	10a4      	asrs	r4, r4, #2
 800ccc0:	2600      	movs	r6, #0
 800ccc2:	42a6      	cmp	r6, r4
 800ccc4:	d105      	bne.n	800ccd2 <__libc_init_array+0x2e>
 800ccc6:	bd70      	pop	{r4, r5, r6, pc}
 800ccc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cccc:	4798      	blx	r3
 800ccce:	3601      	adds	r6, #1
 800ccd0:	e7ee      	b.n	800ccb0 <__libc_init_array+0xc>
 800ccd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccd6:	4798      	blx	r3
 800ccd8:	3601      	adds	r6, #1
 800ccda:	e7f2      	b.n	800ccc2 <__libc_init_array+0x1e>
 800ccdc:	0800cd5c 	.word	0x0800cd5c
 800cce0:	0800cd5c 	.word	0x0800cd5c
 800cce4:	0800cd5c 	.word	0x0800cd5c
 800cce8:	0800cd60 	.word	0x0800cd60

0800ccec <memset>:
 800ccec:	4402      	add	r2, r0
 800ccee:	4603      	mov	r3, r0
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d100      	bne.n	800ccf6 <memset+0xa>
 800ccf4:	4770      	bx	lr
 800ccf6:	f803 1b01 	strb.w	r1, [r3], #1
 800ccfa:	e7f9      	b.n	800ccf0 <memset+0x4>

0800ccfc <_init>:
 800ccfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfe:	bf00      	nop
 800cd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd02:	bc08      	pop	{r3}
 800cd04:	469e      	mov	lr, r3
 800cd06:	4770      	bx	lr

0800cd08 <_fini>:
 800cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0a:	bf00      	nop
 800cd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd0e:	bc08      	pop	{r3}
 800cd10:	469e      	mov	lr, r3
 800cd12:	4770      	bx	lr
