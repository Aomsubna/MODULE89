
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c254  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c4ec  0800c4ec  0001c4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c52c  0800c52c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c52c  0800c52c  0001c52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c534  0800c534  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c534  0800c534  0001c534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c538  0800c538  0001c538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800c53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800c54c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800c5ac  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000bc4  240000d0  0800c60c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000c94  0800c60c  00020c94  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f442  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000421f  00000000  00000000  0004f540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a60  00000000  00000000  00053760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001940  00000000  00000000  000551c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000497b  00000000  00000000  00056b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020771  00000000  00000000  0005b47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001816ef  00000000  00000000  0007bbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001fd2db  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000731c  00000000  00000000  001fd330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c4d4 	.word	0x0800c4d4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800c4d4 	.word	0x0800c4d4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <Stepper_Setup>:
#include "math.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 80005d0:	b480      	push	{r7}
 80005d2:	b087      	sub	sp, #28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
 80005dc:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	224c      	movs	r2, #76	; 0x4c
 80005e2:	fb02 f303 	mul.w	r3, r2, r3
 80005e6:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <Stepper_Setup+0x54>)
 80005e8:	4413      	add	r3, r2
 80005ea:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	8c3a      	ldrh	r2, [r7, #32]
 8000608:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000610:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	return SERR_OK;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	371c      	adds	r7, #28
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	240000ec 	.word	0x240000ec

08000628 <Stepper_SetMaxMinPosition>:

stepper_error Stepper_SetMaxMinPosition(int num, int32_t minPos, int32_t maxPos){
 8000628:	b480      	push	{r7}
 800062a:	b087      	sub	sp, #28
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	224c      	movs	r2, #76	; 0x4c
 8000638:	fb02 f303 	mul.w	r3, r2, r3
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <Stepper_SetMaxMinPosition+0x34>)
 800063e:	4413      	add	r3, r2
 8000640:	617b      	str	r3, [r7, #20]
	stepper->minPosition = minPos;
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	621a      	str	r2, [r3, #32]
	stepper->maxPosition = maxPos;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
	return SERR_OK;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	371c      	adds	r7, #28
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	240000ec 	.word	0x240000ec

08000660 <Stepper_updateAcceleration>:

void Stepper_updateAcceleration(stepper_state * stepper){
 8000660:	b480      	push	{r7}
 8000662:	b087      	sub	sp, #28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	float fAccSPS = 0.8f * STEP_CONTROLLER_PERIOD_US * stepper->minSpeed / 1000000.0f;
 8000668:	4b4c      	ldr	r3, [pc, #304]	; (800079c <Stepper_updateAcceleration+0x13c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	ee07 3a90 	vmov	s15, r3
 8000670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000674:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80007a0 <Stepper_updateAcceleration+0x140>
 8000678:	ee27 7a87 	vmul.f32	s14, s15, s14
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	ee07 3a90 	vmov	s15, r3
 8000684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800068c:	eddf 6a45 	vldr	s13, [pc, #276]	; 80007a4 <Stepper_updateAcceleration+0x144>
 8000690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000694:	edc7 7a02 	vstr	s15, [r7, #8]
	if (fAccSPS > 10.0f) {
 8000698:	edd7 7a02 	vldr	s15, [r7, #8]
 800069c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80006a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a8:	dd0b      	ble.n	80006c2 <Stepper_updateAcceleration+0x62>
//		stepper->stepCtrlPrescallerTicks =
	    stepper->stepCtrlPrescaller = 1;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2201      	movs	r2, #1
 80006ae:	639a      	str	r2, [r3, #56]	; 0x38
	    stepper->acceleration = fAccSPS; // In worst case scenario, like 10.99 we will get 10% less (0.99 out of almost 11.00) acceleration
 80006b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80006b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b8:	ee17 2a90 	vmov	r2, s15
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	629a      	str	r2, [r3, #40]	; 0x28

	    // Round up if at upper remainder
	    if (remainder > 0.9f)
	        stepper -> acceleration += 1;
	}
}
 80006c0:	e066      	b.n	8000790 <Stepper_updateAcceleration+0x130>
	    uint32_t prescalerValue = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
	    float prescaledAcc = fAccSPS;
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	613b      	str	r3, [r7, #16]
	    float remainder = prescaledAcc - (uint32_t)prescaledAcc;
 80006ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80006ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80006da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006de:	edc7 7a03 	vstr	s15, [r7, #12]
	    while (prescaledAcc < 0.9f || (0.1f < remainder & remainder < 0.9f)) {
 80006e2:	e016      	b.n	8000712 <Stepper_updateAcceleration+0xb2>
	        prescalerValue++;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	3301      	adds	r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
	        prescaledAcc += fAccSPS;
 80006ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80006ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80006f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f6:	edc7 7a04 	vstr	s15, [r7, #16]
	        remainder = prescaledAcc - (uint32_t)prescaledAcc;
 80006fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80006fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000706:	ed97 7a04 	vldr	s14, [r7, #16]
 800070a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800070e:	edc7 7a03 	vstr	s15, [r7, #12]
	    while (prescaledAcc < 0.9f || (0.1f < remainder & remainder < 0.9f)) {
 8000712:	edd7 7a04 	vldr	s15, [r7, #16]
 8000716:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80007a8 <Stepper_updateAcceleration+0x148>
 800071a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800071e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000722:	d4df      	bmi.n	80006e4 <Stepper_updateAcceleration+0x84>
 8000724:	edd7 7a03 	vldr	s15, [r7, #12]
 8000728:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80007ac <Stepper_updateAcceleration+0x14c>
 800072c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000734:	bfcc      	ite	gt
 8000736:	2301      	movgt	r3, #1
 8000738:	2300      	movle	r3, #0
 800073a:	b2da      	uxtb	r2, r3
 800073c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000740:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80007a8 <Stepper_updateAcceleration+0x148>
 8000744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074c:	bf4c      	ite	mi
 800074e:	2301      	movmi	r3, #1
 8000750:	2300      	movpl	r3, #0
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4013      	ands	r3, r2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1c3      	bne.n	80006e4 <Stepper_updateAcceleration+0x84>
	    stepper->stepCtrlPrescaller = prescalerValue;
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	639a      	str	r2, [r3, #56]	; 0x38
	    stepper -> acceleration = prescaledAcc;
 8000762:	edd7 7a04 	vldr	s15, [r7, #16]
 8000766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800076a:	ee17 2a90 	vmov	r2, s15
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
	    if (remainder > 0.9f)
 8000772:	edd7 7a03 	vldr	s15, [r7, #12]
 8000776:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80007a8 <Stepper_updateAcceleration+0x148>
 800077a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000782:	dc00      	bgt.n	8000786 <Stepper_updateAcceleration+0x126>
}
 8000784:	e004      	b.n	8000790 <Stepper_updateAcceleration+0x130>
	        stepper -> acceleration += 1;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000790:	bf00      	nop
 8000792:	371c      	adds	r7, #28
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	24000a9c 	.word	0x24000a9c
 80007a0:	3f4ccccd 	.word	0x3f4ccccd
 80007a4:	49742400 	.word	0x49742400
 80007a8:	3f666666 	.word	0x3f666666
 80007ac:	3dcccccd 	.word	0x3dcccccd

080007b0 <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 80007b0:	b480      	push	{r7}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d02b      	beq.n	8000818 <Stepper_SetStepTimer+0x68>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d026      	beq.n	8000818 <Stepper_SetStepTimer+0x68>
    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	60fb      	str	r3, [r7, #12]
    uint32_t prescaler = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
    uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSpeed;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <Stepper_SetStepTimer+0x74>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80007de:	fbb3 f3f2 	udiv	r3, r3, r2
 80007e2:	613b      	str	r3, [r7, #16]

    if (timerTicks > 0xFFFF) {
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ea:	d30b      	bcc.n	8000804 <Stepper_SetStepTimer+0x54>
        // calculate the minimum prescaler
        prescaler = timerTicks/0xFFFF;
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <Stepper_SetStepTimer+0x78>)
 80007f0:	fba2 2303 	umull	r2, r3, r2, r3
 80007f4:	0bdb      	lsrs	r3, r3, #15
 80007f6:	617b      	str	r3, [r7, #20]
        timerTicks /= (prescaler + 1);
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	3301      	adds	r3, #1
 80007fc:	693a      	ldr	r2, [r7, #16]
 80007fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000802:	613b      	str	r3, [r7, #16]
    }

    timer -> PSC = prescaler;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	697a      	ldr	r2, [r7, #20]
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
    timer -> ARR = timerTicks;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
    timer -> CCR1 = timerTicks/2; //__HAL_TIM_SET_COMPARE(stepper->STEP_TIMER, stepper->STEP_CHANNEL, timerTicks/2);
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	085a      	lsrs	r2, r3, #1
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8000818:	bf00      	nop
 800081a:	371c      	adds	r7, #28
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	24000aec 	.word	0x24000aec
 8000828:	80008001 	.word	0x80008001

0800082c <Stepper_DefaultState>:
    }
}


//Set to default
stepper_error Stepper_DefaultState(int num){
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	224c      	movs	r2, #76	; 0x4c
 8000838:	fb02 f303 	mul.w	r3, r2, r3
 800083c:	4a34      	ldr	r2, [pc, #208]	; (8000910 <Stepper_DefaultState+0xe4>)
 800083e:	4413      	add	r3, r2
 8000840:	60fb      	str	r3, [r7, #12]
	if(stepper == NULL){
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d107      	bne.n	8000858 <Stepper_DefaultState+0x2c>
		stepper -> number = num;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
		stepper -> status = SS_STOPPED;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8000856:	e008      	b.n	800086a <Stepper_DefaultState+0x3e>
	}
	else if (!(stepper -> status & SS_STOPPED)) {
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800085e:	b2db      	uxtb	r3, r3
 8000860:	b25b      	sxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	db01      	blt.n	800086a <Stepper_DefaultState+0x3e>
		return SERR_MUSTBESTOPPED;
 8000866:	2302      	movs	r3, #2
 8000868:	e04d      	b.n	8000906 <Stepper_DefaultState+0xda>
	}
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2201      	movs	r2, #1
 800086e:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4a28      	ldr	r2, [pc, #160]	; (8000914 <Stepper_DefaultState+0xe8>)
 8000874:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	699a      	ldr	r2, [r3, #24]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = 0;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	635a      	str	r2, [r3, #52]	; 0x34
	stepper -> currentPosition = 0;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2200      	movs	r2, #0
 8000888:	645a      	str	r2, [r3, #68]	; 0x44

	__HAL_TIM_SET_COMPARE(stepper->STEP_TIMER, stepper->STEP_CHANNEL, 0);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d105      	bne.n	800089e <Stepper_DefaultState+0x72>
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2200      	movs	r2, #0
 800089a:	635a      	str	r2, [r3, #52]	; 0x34
 800089c:	e02c      	b.n	80008f8 <Stepper_DefaultState+0xcc>
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	d105      	bne.n	80008b2 <Stepper_DefaultState+0x86>
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	2300      	movs	r3, #0
 80008ae:	6393      	str	r3, [r2, #56]	; 0x38
 80008b0:	e022      	b.n	80008f8 <Stepper_DefaultState+0xcc>
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2b08      	cmp	r3, #8
 80008b8:	d105      	bne.n	80008c6 <Stepper_DefaultState+0x9a>
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	2300      	movs	r3, #0
 80008c2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008c4:	e018      	b.n	80008f8 <Stepper_DefaultState+0xcc>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	2b0c      	cmp	r3, #12
 80008cc:	d105      	bne.n	80008da <Stepper_DefaultState+0xae>
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	2300      	movs	r3, #0
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
 80008d8:	e00e      	b.n	80008f8 <Stepper_DefaultState+0xcc>
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	2b10      	cmp	r3, #16
 80008e0:	d105      	bne.n	80008ee <Stepper_DefaultState+0xc2>
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	2300      	movs	r3, #0
 80008ea:	6593      	str	r3, [r2, #88]	; 0x58
 80008ec:	e004      	b.n	80008f8 <Stepper_DefaultState+0xcc>
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	2300      	movs	r3, #0
 80008f6:	65d3      	str	r3, [r2, #92]	; 0x5c
	Stepper_updateAcceleration(stepper);
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	f7ff feb1 	bl	8000660 <Stepper_updateAcceleration>
	Stepper_SetStepTimer(stepper);
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f7ff ff56 	bl	80007b0 <Stepper_SetStepTimer>

	return SERR_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	240000ec 	.word	0x240000ec
 8000914:	00061a80 	.word	0x00061a80

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f001 ff39 	bl	8002794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f8b5 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f000 fe9f 	bl	8001668 <MX_GPIO_Init>
  MX_BDMA_Init();
 800092a:	f000 fe5d 	bl	80015e8 <MX_BDMA_Init>
  MX_DMA_Init();
 800092e:	f000 fe7b 	bl	8001628 <MX_DMA_Init>
  MX_ETH_Init();
 8000932:	f000 f997 	bl	8000c64 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000936:	f000 fe25 	bl	8001584 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800093a:	f000 fa95 	bl	8000e68 <MX_TIM2_Init>
  MX_TIM3_Init();
 800093e:	f000 fae7 	bl	8000f10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000942:	f000 fb3b 	bl	8000fbc <MX_TIM4_Init>
  MX_TIM1_Init();
 8000946:	f000 fa35 	bl	8000db4 <MX_TIM1_Init>
  MX_SPI3_Init();
 800094a:	f000 f9dd 	bl	8000d08 <MX_SPI3_Init>
  MX_ADC3_Init();
 800094e:	f000 f925 	bl	8000b9c <MX_ADC3_Init>
  MX_TIM5_Init();
 8000952:	f000 fb89 	bl	8001068 <MX_TIM5_Init>
  MX_UART7_Init();
 8000956:	f000 fdc9 	bl	80014ec <MX_UART7_Init>
  MX_TIM12_Init();
 800095a:	f000 fbd5 	bl	8001108 <MX_TIM12_Init>
  MX_TIM13_Init();
 800095e:	f000 fc37 	bl	80011d0 <MX_TIM13_Init>
  MX_TIM16_Init();
 8000962:	f000 fc83 	bl	800126c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000966:	f000 fcfb 	bl	8001360 <MX_TIM17_Init>
  MX_UART5_Init();
 800096a:	f000 fd73 	bl	8001454 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 800096e:	f006 fc2b 	bl	80071c8 <HAL_RCC_GetHCLKFreq>
 8000972:	4603      	mov	r3, r0
 8000974:	4a3d      	ldr	r2, [pc, #244]	; (8000a6c <main+0x154>)
 8000976:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 8000978:	f006 fc26 	bl	80071c8 <HAL_RCC_GetHCLKFreq>
 800097c:	4602      	mov	r2, r0
 800097e:	4b3c      	ldr	r3, [pc, #240]	; (8000a70 <main+0x158>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4a3b      	ldr	r2, [pc, #236]	; (8000a74 <main+0x15c>)
 8000988:	fbb2 f3f3 	udiv	r3, r2, r3
 800098c:	4a3a      	ldr	r2, [pc, #232]	; (8000a78 <main+0x160>)
 800098e:	6013      	str	r3, [r2, #0]

  //htim12 DIR PF5
  //htim13 DIR PF4
  //htim16 DIR PE8
  //htim17 DIR PF10
  Stepper_Setup(1, &htim12, TIM_CHANNEL_2, DIR1_GPIO_Port, DIR1_Pin, 0);
 8000990:	2300      	movs	r3, #0
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	2320      	movs	r3, #32
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <main+0x164>)
 800099a:	2204      	movs	r2, #4
 800099c:	4938      	ldr	r1, [pc, #224]	; (8000a80 <main+0x168>)
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fe16 	bl	80005d0 <Stepper_Setup>
  Stepper_SetMaxMinPosition(1, 0, 3000);
 80009a4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009a8:	2100      	movs	r1, #0
 80009aa:	2001      	movs	r0, #1
 80009ac:	f7ff fe3c 	bl	8000628 <Stepper_SetMaxMinPosition>
  Stepper_Setup(2, &htim13, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 80009b0:	2300      	movs	r3, #0
 80009b2:	9301      	str	r3, [sp, #4]
 80009b4:	2310      	movs	r3, #16
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <main+0x164>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	4931      	ldr	r1, [pc, #196]	; (8000a84 <main+0x16c>)
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff fe06 	bl	80005d0 <Stepper_Setup>
  Stepper_SetMaxMinPosition(2, 0, 3000);
 80009c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009c8:	2100      	movs	r1, #0
 80009ca:	2002      	movs	r0, #2
 80009cc:	f7ff fe2c 	bl	8000628 <Stepper_SetMaxMinPosition>
  Stepper_Setup(3, &htim16, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
 80009d0:	2301      	movs	r3, #1
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <main+0x170>)
 80009dc:	2200      	movs	r2, #0
 80009de:	492b      	ldr	r1, [pc, #172]	; (8000a8c <main+0x174>)
 80009e0:	2003      	movs	r0, #3
 80009e2:	f7ff fdf5 	bl	80005d0 <Stepper_Setup>
  Stepper_SetMaxMinPosition(3, 0, 3000);
 80009e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009ea:	2100      	movs	r1, #0
 80009ec:	2003      	movs	r0, #3
 80009ee:	f7ff fe1b 	bl	8000628 <Stepper_SetMaxMinPosition>
  Stepper_DefaultState(1);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f7ff ff1a 	bl	800082c <Stepper_DefaultState>
  Stepper_DefaultState(2);
 80009f8:	2002      	movs	r0, #2
 80009fa:	f7ff ff17 	bl	800082c <Stepper_DefaultState>
  Stepper_DefaultState(3);
 80009fe:	2003      	movs	r0, #3
 8000a00:	f7ff ff14 	bl	800082c <Stepper_DefaultState>

  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <main+0x168>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68da      	ldr	r2, [r3, #12]
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <main+0x168>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f042 0201 	orr.w	r2, r2, #1
 8000a12:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <main+0x16c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	68da      	ldr	r2, [r3, #12]
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <main+0x16c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 0201 	orr.w	r2, r2, #1
 8000a22:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <main+0x174>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68da      	ldr	r2, [r3, #12]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <main+0x174>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f042 0201 	orr.w	r2, r2, #1
 8000a32:	60da      	str	r2, [r3, #12]

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 8000a34:	480e      	ldr	r0, [pc, #56]	; (8000a70 <main+0x158>)
 8000a36:	f008 ff1d 	bl	8009874 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  Stepper_SetTargetPosition(1, 2000);

	  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4810      	ldr	r0, [pc, #64]	; (8000a80 <main+0x168>)
 8000a3e:	f008 ffeb 	bl	8009a18 <HAL_TIM_PWM_Start>
	  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);//Clock wise rotation
 8000a42:	2201      	movs	r2, #1
 8000a44:	2120      	movs	r1, #32
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <main+0x164>)
 8000a48:	f005 faae 	bl	8005fa8 <HAL_GPIO_WritePin>
	  htim12.Instance -> PSC = 0;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <main+0x168>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
	  htim12.Instance -> ARR = 62500;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <main+0x168>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f24f 4224 	movw	r2, #62500	; 0xf424
 8000a5c:	62da      	str	r2, [r3, #44]	; 0x2c
	  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 31250);
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <main+0x168>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000a66:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000a68:	e7e7      	b.n	8000a3a <main+0x122>
 8000a6a:	bf00      	nop
 8000a6c:	24000aec 	.word	0x24000aec
 8000a70:	240007c4 	.word	0x240007c4
 8000a74:	000f4240 	.word	0x000f4240
 8000a78:	24000a9c 	.word	0x24000a9c
 8000a7c:	58021400 	.word	0x58021400
 8000a80:	24000b3c 	.word	0x24000b3c
 8000a84:	24000a50 	.word	0x24000a50
 8000a88:	58021000 	.word	0x58021000
 8000a8c:	24000c44 	.word	0x24000c44

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09c      	sub	sp, #112	; 0x70
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	224c      	movs	r2, #76	; 0x4c
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f00b fd10 	bl	800c4c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f00b fd0a 	bl	800c4c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f005 fbff 	bl	80062b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <SystemClock_Config+0x100>)
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	4a34      	ldr	r2, [pc, #208]	; (8000b90 <SystemClock_Config+0x100>)
 8000ac0:	f023 0301 	bic.w	r3, r3, #1
 8000ac4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ac6:	4b32      	ldr	r3, [pc, #200]	; (8000b90 <SystemClock_Config+0x100>)
 8000ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <SystemClock_Config+0x104>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad8:	4a2e      	ldr	r2, [pc, #184]	; (8000b94 <SystemClock_Config+0x104>)
 8000ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <SystemClock_Config+0x104>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aec:	bf00      	nop
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <SystemClock_Config+0x104>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000afa:	d1f8      	bne.n	8000aee <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <SystemClock_Config+0x108>)
 8000afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b00:	4a25      	ldr	r2, [pc, #148]	; (8000b98 <SystemClock_Config+0x108>)
 8000b02:	f023 0303 	bic.w	r3, r3, #3
 8000b06:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000b08:	2322      	movs	r3, #34	; 0x22
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b10:	2340      	movs	r3, #64	; 0x40
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b14:	2301      	movs	r3, #1
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b20:	2304      	movs	r3, #4
 8000b22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000b24:	2319      	movs	r3, #25
 8000b26:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b34:	230c      	movs	r3, #12
 8000b36:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4618      	mov	r0, r3
 8000b46:	f005 fbff 	bl	8006348 <HAL_RCC_OscConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b50:	f000 fed0 	bl	80018f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b54:	233f      	movs	r3, #63	; 0x3f
 8000b56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b60:	2308      	movs	r3, #8
 8000b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b68:	2340      	movs	r3, #64	; 0x40
 8000b6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2102      	movs	r1, #2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f005 fff5 	bl	8006b68 <HAL_RCC_ClockConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000b84:	f000 feb6 	bl	80018f4 <Error_Handler>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3770      	adds	r7, #112	; 0x70
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	58000400 	.word	0x58000400
 8000b94:	58024800 	.word	0x58024800
 8000b98:	58024400 	.word	0x58024400

08000b9c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000bb6:	4a2a      	ldr	r2, [pc, #168]	; (8000c60 <MX_ADC3_Init+0xc4>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc6:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bcc:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bd2:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000bd8:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000c12:	f002 f837 	bl	8002c84 <HAL_ADC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000c1c:	f000 fe6a 	bl	80018f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c20:	2301      	movs	r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c24:	2306      	movs	r3, #6
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c30:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c32:	2304      	movs	r3, #4
 8000c34:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <MX_ADC3_Init+0xc0>)
 8000c44:	f002 f9be 	bl	8002fc4 <HAL_ADC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000c4e:	f000 fe51 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240009ec 	.word	0x240009ec
 8000c60:	58026000 	.word	0x58026000

08000c64 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MX_ETH_Init+0x90>)
 8000c6a:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <MX_ETH_Init+0x94>)
 8000c6c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <MX_ETH_Init+0x90>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_ETH_Init+0x90>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_ETH_Init+0x90>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	3302      	adds	r3, #2
 8000c86:	22e1      	movs	r2, #225	; 0xe1
 8000c88:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_ETH_Init+0x90>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	3303      	adds	r3, #3
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_ETH_Init+0x90>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_ETH_Init+0x90>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	3305      	adds	r3, #5
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_ETH_Init+0x90>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_ETH_Init+0x90>)
 8000cb0:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <MX_ETH_Init+0x98>)
 8000cb2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_ETH_Init+0x90>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <MX_ETH_Init+0x9c>)
 8000cb8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_ETH_Init+0x90>)
 8000cbc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cc0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cc2:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <MX_ETH_Init+0x90>)
 8000cc4:	f004 fbaa 	bl	800541c <HAL_ETH_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000cce:	f000 fe11 	bl	80018f4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cd2:	2234      	movs	r2, #52	; 0x34
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	480b      	ldr	r0, [pc, #44]	; (8000d04 <MX_ETH_Init+0xa0>)
 8000cd8:	f00b fbf4 	bl	800c4c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_ETH_Init+0xa0>)
 8000cde:	2221      	movs	r2, #33	; 0x21
 8000ce0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_ETH_Init+0xa0>)
 8000ce4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ce8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_ETH_Init+0xa0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	24000b88 	.word	0x24000b88
 8000cf8:	40028000 	.word	0x40028000
 8000cfc:	24000070 	.word	0x24000070
 8000d00:	24000010 	.word	0x24000010
 8000d04:	24000c10 	.word	0x24000c10

08000d08 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d0e:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <MX_SPI3_Init+0xa8>)
 8000d10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d14:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1a:	4b24      	ldr	r3, [pc, #144]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d22:	2203      	movs	r2, #3
 8000d24:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d38:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_SPI3_Init+0xa4>)
 8000d98:	f008 fbf8 	bl	800958c <HAL_SPI_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000da2:	f000 fda7 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2400085c 	.word	0x2400085c
 8000db0:	40003c00 	.word	0x40003c00

08000db4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	; 0x30
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	2224      	movs	r2, #36	; 0x24
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00b fb7e 	bl	800c4c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	463b      	mov	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <MX_TIM1_Init+0xac>)
 8000dd4:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <MX_TIM1_Init+0xb0>)
 8000dd6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_TIM1_Init+0xac>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <MX_TIM1_Init+0xac>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_TIM1_Init+0xac>)
 8000de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_TIM1_Init+0xac>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df2:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_TIM1_Init+0xac>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_TIM1_Init+0xac>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e06:	2301      	movs	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e16:	2301      	movs	r3, #1
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_TIM1_Init+0xac>)
 8000e2a:	f008 fefd 	bl	8009c28 <HAL_TIM_Encoder_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000e34:	f000 fd5e 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_TIM1_Init+0xac>)
 8000e4a:	f009 ff15 	bl	800ac78 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e54:	f000 fd4e 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	3730      	adds	r7, #48	; 0x30
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	24000aa0 	.word	0x24000aa0
 8000e64:	40010000 	.word	0x40010000

08000e68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	; 0x30
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	2224      	movs	r2, #36	; 0x24
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f00b fb24 	bl	800c4c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_TIM2_Init+0xa4>)
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <MX_TIM2_Init+0xa4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <MX_TIM2_Init+0xa4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <MX_TIM2_Init+0xa4>)
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_TIM2_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_TIM2_Init+0xa4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <MX_TIM2_Init+0xa4>)
 8000eda:	f008 fea5 	bl	8009c28 <HAL_TIM_Encoder_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ee4:	f000 fd06 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_TIM2_Init+0xa4>)
 8000ef6:	f009 febf 	bl	800ac78 <HAL_TIMEx_MasterConfigSynchronization>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f00:	f000 fcf8 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3730      	adds	r7, #48	; 0x30
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	24000af0 	.word	0x24000af0

08000f10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2224      	movs	r2, #36	; 0x24
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f00b fad0 	bl	800c4c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f24:	463b      	mov	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <MX_TIM3_Init+0xa4>)
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <MX_TIM3_Init+0xa8>)
 8000f32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_TIM3_Init+0xa4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <MX_TIM3_Init+0xa4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_TIM3_Init+0xa4>)
 8000f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_TIM3_Init+0xa4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_TIM3_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f54:	2303      	movs	r3, #3
 8000f56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_TIM3_Init+0xa4>)
 8000f80:	f008 fe52 	bl	8009c28 <HAL_TIM_Encoder_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000f8a:	f000 fcb3 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <MX_TIM3_Init+0xa4>)
 8000f9c:	f009 fe6c 	bl	800ac78 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000fa6:	f000 fca5 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	3730      	adds	r7, #48	; 0x30
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	24000810 	.word	0x24000810
 8000fb8:	40000400 	.word	0x40000400

08000fbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	2224      	movs	r2, #36	; 0x24
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f00b fa7a 	bl	800c4c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_TIM4_Init+0xa4>)
 8000fdc:	4a21      	ldr	r2, [pc, #132]	; (8001064 <MX_TIM4_Init+0xa8>)
 8000fde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_TIM4_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_TIM4_Init+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_TIM4_Init+0xa4>)
 8000fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_TIM4_Init+0xa4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_TIM4_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001000:	2303      	movs	r3, #3
 8001002:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001008:	2301      	movs	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001010:	230a      	movs	r3, #10
 8001012:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001018:	2301      	movs	r3, #1
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001020:	230a      	movs	r3, #10
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_TIM4_Init+0xa4>)
 800102c:	f008 fdfc 	bl	8009c28 <HAL_TIM_Encoder_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001036:	f000 fc5d 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <MX_TIM4_Init+0xa4>)
 8001048:	f009 fe16 	bl	800ac78 <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001052:	f000 fc4f 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3730      	adds	r7, #48	; 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	240002ac 	.word	0x240002ac
 8001064:	40000800 	.word	0x40000800

08001068 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_TIM5_Init+0x94>)
 8001088:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <MX_TIM5_Init+0x98>)
 800108a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_TIM5_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_TIM5_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000;
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_TIM5_Init+0x94>)
 800109a:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <MX_TIM5_Init+0x9c>)
 800109c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_TIM5_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_TIM5_Init+0x94>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010aa:	4814      	ldr	r0, [pc, #80]	; (80010fc <MX_TIM5_Init+0x94>)
 80010ac:	f008 fb8b 	bl	80097c6 <HAL_TIM_Base_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80010b6:	f000 fc1d 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4619      	mov	r1, r3
 80010c6:	480d      	ldr	r0, [pc, #52]	; (80010fc <MX_TIM5_Init+0x94>)
 80010c8:	f009 f884 	bl	800a1d4 <HAL_TIM_ConfigClockSource>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80010d2:	f000 fc0f 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <MX_TIM5_Init+0x94>)
 80010e4:	f009 fdc8 	bl	800ac78 <HAL_TIMEx_MasterConfigSynchronization>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80010ee:	f000 fc01 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	240007c4 	.word	0x240007c4
 8001100:	40000c00 	.word	0x40000c00
 8001104:	000186a0 	.word	0x000186a0

08001108 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <MX_TIM12_Init+0xc0>)
 8001130:	4a26      	ldr	r2, [pc, #152]	; (80011cc <MX_TIM12_Init+0xc4>)
 8001132:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <MX_TIM12_Init+0xc0>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <MX_TIM12_Init+0xc0>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_TIM12_Init+0xc0>)
 8001142:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001146:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_TIM12_Init+0xc0>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_TIM12_Init+0xc0>)
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001154:	481c      	ldr	r0, [pc, #112]	; (80011c8 <MX_TIM12_Init+0xc0>)
 8001156:	f008 fb36 	bl	80097c6 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001160:	f000 fbc8 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	4619      	mov	r1, r3
 8001170:	4815      	ldr	r0, [pc, #84]	; (80011c8 <MX_TIM12_Init+0xc0>)
 8001172:	f009 f82f 	bl	800a1d4 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800117c:	f000 fbba 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001180:	4811      	ldr	r0, [pc, #68]	; (80011c8 <MX_TIM12_Init+0xc0>)
 8001182:	f008 fbe7 	bl	8009954 <HAL_TIM_PWM_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800118c:	f000 fbb2 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001190:	2360      	movs	r3, #96	; 0x60
 8001192:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8001194:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001198:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2204      	movs	r2, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4807      	ldr	r0, [pc, #28]	; (80011c8 <MX_TIM12_Init+0xc0>)
 80011aa:	f008 ff03 	bl	8009fb4 <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80011b4:	f000 fb9e 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <MX_TIM12_Init+0xc0>)
 80011ba:	f000 ff93 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	; 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	24000b3c 	.word	0x24000b3c
 80011cc:	40001800 	.word	0x40001800

080011d0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <MX_TIM13_Init+0x94>)
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <MX_TIM13_Init+0x98>)
 80011ec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_TIM13_Init+0x94>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_TIM13_Init+0x94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM13_Init+0x94>)
 80011fc:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001200:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_TIM13_Init+0x94>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_TIM13_Init+0x94>)
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800120e:	4815      	ldr	r0, [pc, #84]	; (8001264 <MX_TIM13_Init+0x94>)
 8001210:	f008 fad9 	bl	80097c6 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800121a:	f000 fb6b 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800121e:	4811      	ldr	r0, [pc, #68]	; (8001264 <MX_TIM13_Init+0x94>)
 8001220:	f008 fb98 	bl	8009954 <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800122a:	f000 fb63 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122e:	2360      	movs	r3, #96	; 0x60
 8001230:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8001232:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001236:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	4619      	mov	r1, r3
 8001246:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_TIM13_Init+0x94>)
 8001248:	f008 feb4 	bl	8009fb4 <HAL_TIM_PWM_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8001252:	f000 fb4f 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <MX_TIM13_Init+0x94>)
 8001258:	f000 ff44 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	24000a50 	.word	0x24000a50
 8001268:	40001c00 	.word	0x40001c00

0800126c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b092      	sub	sp, #72	; 0x48
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001286:	463b      	mov	r3, r7
 8001288:	222c      	movs	r2, #44	; 0x2c
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f00b f919 	bl	800c4c4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <MX_TIM16_Init+0xec>)
 8001294:	4a31      	ldr	r2, [pc, #196]	; (800135c <MX_TIM16_Init+0xf0>)
 8001296:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <MX_TIM16_Init+0xec>)
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <MX_TIM16_Init+0xec>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 80012a4:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MX_TIM16_Init+0xec>)
 80012a6:	f24f 4224 	movw	r2, #62500	; 0xf424
 80012aa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <MX_TIM16_Init+0xec>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <MX_TIM16_Init+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <MX_TIM16_Init+0xec>)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012be:	4826      	ldr	r0, [pc, #152]	; (8001358 <MX_TIM16_Init+0xec>)
 80012c0:	f008 fa81 	bl	80097c6 <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80012ca:	f000 fb13 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80012ce:	4822      	ldr	r0, [pc, #136]	; (8001358 <MX_TIM16_Init+0xec>)
 80012d0:	f008 fb40 	bl	8009954 <HAL_TIM_PWM_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80012da:	f000 fb0b 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012de:	2360      	movs	r3, #96	; 0x60
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 80012e2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	4814      	ldr	r0, [pc, #80]	; (8001358 <MX_TIM16_Init+0xec>)
 8001306:	f008 fe55 	bl	8009fb4 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001310:	f000 faf0 	bl	80018f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_TIM16_Init+0xec>)
 800133c:	f009 fd24 	bl	800ad88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8001346:	f000 fad5 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800134a:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM16_Init+0xec>)
 800134c:	f000 feca 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 8001350:	bf00      	nop
 8001352:	3748      	adds	r7, #72	; 0x48
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	24000c44 	.word	0x24000c44
 800135c:	40014400 	.word	0x40014400

08001360 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b092      	sub	sp, #72	; 0x48
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	222c      	movs	r2, #44	; 0x2c
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f00b f89f 	bl	800c4c4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <MX_TIM17_Init+0xec>)
 8001388:	4a31      	ldr	r2, [pc, #196]	; (8001450 <MX_TIM17_Init+0xf0>)
 800138a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800138c:	4b2f      	ldr	r3, [pc, #188]	; (800144c <MX_TIM17_Init+0xec>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <MX_TIM17_Init+0xec>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <MX_TIM17_Init+0xec>)
 800139a:	f24f 4224 	movw	r2, #62500	; 0xf424
 800139e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <MX_TIM17_Init+0xec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80013a6:	4b29      	ldr	r3, [pc, #164]	; (800144c <MX_TIM17_Init+0xec>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <MX_TIM17_Init+0xec>)
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80013b2:	4826      	ldr	r0, [pc, #152]	; (800144c <MX_TIM17_Init+0xec>)
 80013b4:	f008 fa07 	bl	80097c6 <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80013be:	f000 fa99 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80013c2:	4822      	ldr	r0, [pc, #136]	; (800144c <MX_TIM17_Init+0xec>)
 80013c4:	f008 fac6 	bl	8009954 <HAL_TIM_PWM_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80013ce:	f000 fa91 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d2:	2360      	movs	r3, #96	; 0x60
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 80013d6:	f647 2312 	movw	r3, #31250	; 0x7a12
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013dc:	2300      	movs	r3, #0
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	4814      	ldr	r0, [pc, #80]	; (800144c <MX_TIM17_Init+0xec>)
 80013fa:	f008 fddb 	bl	8009fb4 <HAL_TIM_PWM_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8001404:	f000 fa76 	bl	80018f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800141c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001420:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	4619      	mov	r1, r3
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <MX_TIM17_Init+0xec>)
 8001430:	f009 fcaa 	bl	800ad88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 800143a:	f000 fa5b 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_TIM17_Init+0xec>)
 8001440:	f000 fe50 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 8001444:	bf00      	nop
 8001446:	3748      	adds	r7, #72	; 0x48
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	24000700 	.word	0x24000700
 8001450:	40014800 	.word	0x40014800

08001454 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <MX_UART5_Init+0x90>)
 800145a:	4a23      	ldr	r2, [pc, #140]	; (80014e8 <MX_UART5_Init+0x94>)
 800145c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <MX_UART5_Init+0x90>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <MX_UART5_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_UART5_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_UART5_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_UART5_Init+0x90>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_UART5_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_UART5_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_UART5_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_UART5_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_UART5_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800149c:	4811      	ldr	r0, [pc, #68]	; (80014e4 <MX_UART5_Init+0x90>)
 800149e:	f009 fd0f 	bl	800aec0 <HAL_UART_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80014a8:	f000 fa24 	bl	80018f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_UART5_Init+0x90>)
 80014b0:	f00a fc5c 	bl	800bd6c <HAL_UARTEx_SetTxFifoThreshold>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80014ba:	f000 fa1b 	bl	80018f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014be:	2100      	movs	r1, #0
 80014c0:	4808      	ldr	r0, [pc, #32]	; (80014e4 <MX_UART5_Init+0x90>)
 80014c2:	f00a fc91 	bl	800bde8 <HAL_UARTEx_SetRxFifoThreshold>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80014cc:	f000 fa12 	bl	80018f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_UART5_Init+0x90>)
 80014d2:	f00a fc12 	bl	800bcfa <HAL_UARTEx_DisableFifoMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80014dc:	f000 fa0a 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	240008e4 	.word	0x240008e4
 80014e8:	40005000 	.word	0x40005000

080014ec <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_UART7_Init+0x90>)
 80014f2:	4a23      	ldr	r2, [pc, #140]	; (8001580 <MX_UART7_Init+0x94>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_UART7_Init+0x90>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_UART7_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_UART7_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_UART7_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_UART7_Init+0x90>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_UART7_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_UART7_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_UART7_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_UART7_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_UART7_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <MX_UART7_Init+0x90>)
 8001536:	f009 fcc3 	bl	800aec0 <HAL_UART_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001540:	f000 f9d8 	bl	80018f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001544:	2100      	movs	r1, #0
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_UART7_Init+0x90>)
 8001548:	f00a fc10 	bl	800bd6c <HAL_UARTEx_SetTxFifoThreshold>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001552:	f000 f9cf 	bl	80018f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001556:	2100      	movs	r1, #0
 8001558:	4808      	ldr	r0, [pc, #32]	; (800157c <MX_UART7_Init+0x90>)
 800155a:	f00a fc45 	bl	800bde8 <HAL_UARTEx_SetRxFifoThreshold>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001564:	f000 f9c6 	bl	80018f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_UART7_Init+0x90>)
 800156a:	f00a fbc6 	bl	800bcfa <HAL_UARTEx_DisableFifoMode>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001574:	f000 f9be 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2400021c 	.word	0x2400021c
 8001580:	40007800 	.word	0x40007800

08001584 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800158a:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800158c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001590:	2209      	movs	r2, #9
 8001592:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001596:	2202      	movs	r2, #2
 8001598:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015a2:	2202      	movs	r2, #2
 80015a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015cc:	f004 fd2a 	bl	8006024 <HAL_PCD_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80015d6:	f000 f98d 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	240002f8 	.word	0x240002f8
 80015e4:	40080000 	.word	0x40080000

080015e8 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <MX_BDMA_Init+0x3c>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <MX_BDMA_Init+0x3c>)
 80015f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_BDMA_Init+0x3c>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2081      	movs	r0, #129	; 0x81
 8001612:	f002 fa0c 	bl	8003a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001616:	2081      	movs	r0, #129	; 0x81
 8001618:	f002 fa23 	bl	8003a62 <HAL_NVIC_EnableIRQ>

}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	58024400 	.word	0x58024400

08001628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <MX_DMA_Init+0x3c>)
 8001630:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001634:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <MX_DMA_Init+0x3c>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_DMA_Init+0x3c>)
 8001640:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	200c      	movs	r0, #12
 8001652:	f002 f9ec 	bl	8003a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001656:	200c      	movs	r0, #12
 8001658:	f002 fa03 	bl	8003a62 <HAL_NVIC_EnableIRQ>

}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	58024400 	.word	0x58024400

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08e      	sub	sp, #56	; 0x38
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	4b95      	ldr	r3, [pc, #596]	; (80018d4 <MX_GPIO_Init+0x26c>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001684:	4a93      	ldr	r2, [pc, #588]	; (80018d4 <MX_GPIO_Init+0x26c>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168e:	4b91      	ldr	r3, [pc, #580]	; (80018d4 <MX_GPIO_Init+0x26c>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	623b      	str	r3, [r7, #32]
 800169a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800169c:	4b8d      	ldr	r3, [pc, #564]	; (80018d4 <MX_GPIO_Init+0x26c>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a2:	4a8c      	ldr	r2, [pc, #560]	; (80018d4 <MX_GPIO_Init+0x26c>)
 80016a4:	f043 0320 	orr.w	r3, r3, #32
 80016a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ac:	4b89      	ldr	r3, [pc, #548]	; (80018d4 <MX_GPIO_Init+0x26c>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b2:	f003 0320 	and.w	r3, r3, #32
 80016b6:	61fb      	str	r3, [r7, #28]
 80016b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ba:	4b86      	ldr	r3, [pc, #536]	; (80018d4 <MX_GPIO_Init+0x26c>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c0:	4a84      	ldr	r2, [pc, #528]	; (80018d4 <MX_GPIO_Init+0x26c>)
 80016c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ca:	4b82      	ldr	r3, [pc, #520]	; (80018d4 <MX_GPIO_Init+0x26c>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b7e      	ldr	r3, [pc, #504]	; (80018d4 <MX_GPIO_Init+0x26c>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016de:	4a7d      	ldr	r2, [pc, #500]	; (80018d4 <MX_GPIO_Init+0x26c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e8:	4b7a      	ldr	r3, [pc, #488]	; (80018d4 <MX_GPIO_Init+0x26c>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b77      	ldr	r3, [pc, #476]	; (80018d4 <MX_GPIO_Init+0x26c>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fc:	4a75      	ldr	r2, [pc, #468]	; (80018d4 <MX_GPIO_Init+0x26c>)
 80016fe:	f043 0302 	orr.w	r3, r3, #2
 8001702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001706:	4b73      	ldr	r3, [pc, #460]	; (80018d4 <MX_GPIO_Init+0x26c>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001714:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <MX_GPIO_Init+0x26c>)
 8001716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171a:	4a6e      	ldr	r2, [pc, #440]	; (80018d4 <MX_GPIO_Init+0x26c>)
 800171c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001720:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001724:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <MX_GPIO_Init+0x26c>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001732:	4b68      	ldr	r3, [pc, #416]	; (80018d4 <MX_GPIO_Init+0x26c>)
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001738:	4a66      	ldr	r2, [pc, #408]	; (80018d4 <MX_GPIO_Init+0x26c>)
 800173a:	f043 0310 	orr.w	r3, r3, #16
 800173e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001742:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <MX_GPIO_Init+0x26c>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001750:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <MX_GPIO_Init+0x26c>)
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001756:	4a5f      	ldr	r2, [pc, #380]	; (80018d4 <MX_GPIO_Init+0x26c>)
 8001758:	f043 0308 	orr.w	r3, r3, #8
 800175c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001760:	4b5c      	ldr	r3, [pc, #368]	; (80018d4 <MX_GPIO_Init+0x26c>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001774:	4858      	ldr	r0, [pc, #352]	; (80018d8 <MX_GPIO_Init+0x270>)
 8001776:	f004 fc17 	bl	8005fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	f644 4101 	movw	r1, #19457	; 0x4c01
 8001780:	4856      	ldr	r0, [pc, #344]	; (80018dc <MX_GPIO_Init+0x274>)
 8001782:	f004 fc11 	bl	8005fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800178c:	4854      	ldr	r0, [pc, #336]	; (80018e0 <MX_GPIO_Init+0x278>)
 800178e:	f004 fc0b 	bl	8005fa8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001798:	4852      	ldr	r0, [pc, #328]	; (80018e4 <MX_GPIO_Init+0x27c>)
 800179a:	f004 fc05 	bl	8005fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017a4:	4850      	ldr	r0, [pc, #320]	; (80018e8 <MX_GPIO_Init+0x280>)
 80017a6:	f004 fbff 	bl	8005fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	484b      	ldr	r0, [pc, #300]	; (80018ec <MX_GPIO_Init+0x284>)
 80017c0:	f004 fa42 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin PF9 DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin;
 80017c4:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	483e      	ldr	r0, [pc, #248]	; (80018d8 <MX_GPIO_Init+0x270>)
 80017de:	f004 fa33 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB10 PB11 LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin;
 80017e2:	f644 4301 	movw	r3, #19457	; 0x4c01
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f8:	4619      	mov	r1, r3
 80017fa:	4838      	ldr	r0, [pc, #224]	; (80018dc <MX_GPIO_Init+0x274>)
 80017fc:	f004 fa24 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001800:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001816:	4619      	mov	r1, r3
 8001818:	4831      	ldr	r0, [pc, #196]	; (80018e0 <MX_GPIO_Init+0x278>)
 800181a:	f004 fa15 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|LD2_Pin;
 800181e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	482b      	ldr	r0, [pc, #172]	; (80018e4 <MX_GPIO_Init+0x27c>)
 8001838:	f004 fa06 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800183c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800184e:	2307      	movs	r3, #7
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	4823      	ldr	r0, [pc, #140]	; (80018e8 <MX_GPIO_Init+0x280>)
 800185a:	f004 f9f5 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800185e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	481c      	ldr	r0, [pc, #112]	; (80018e8 <MX_GPIO_Init+0x280>)
 8001878:	f004 f9e6 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800187c:	2304      	movs	r3, #4
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_GPIO_Init+0x288>)
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188c:	4619      	mov	r1, r3
 800188e:	4814      	ldr	r0, [pc, #80]	; (80018e0 <MX_GPIO_Init+0x278>)
 8001890:	f004 f9da 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin
                           PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin
 8001894:	23f8      	movs	r3, #248	; 0xf8
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
                          |PROXIMITY4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_GPIO_Init+0x288>)
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a4:	4619      	mov	r1, r3
 80018a6:	4810      	ldr	r0, [pc, #64]	; (80018e8 <MX_GPIO_Init+0x280>)
 80018a8:	f004 f9ce 	bl	8005c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	200a      	movs	r0, #10
 80018b2:	f002 f8bc 	bl	8003a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018b6:	200a      	movs	r0, #10
 80018b8:	f002 f8d3 	bl	8003a62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2017      	movs	r0, #23
 80018c2:	f002 f8b4 	bl	8003a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018c6:	2017      	movs	r0, #23
 80018c8:	f002 f8cb 	bl	8003a62 <HAL_NVIC_EnableIRQ>

}
 80018cc:	bf00      	nop
 80018ce:	3738      	adds	r7, #56	; 0x38
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	58024400 	.word	0x58024400
 80018d8:	58021400 	.word	0x58021400
 80018dc:	58020400 	.word	0x58020400
 80018e0:	58021800 	.word	0x58021800
 80018e4:	58021000 	.word	0x58021000
 80018e8:	58020c00 	.word	0x58020c00
 80018ec:	58020800 	.word	0x58020800
 80018f0:	11110000 	.word	0x11110000

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fc:	e7fe      	b.n	80018fc <Error_Handler+0x8>
	...

08001900 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_MspInit+0x30>)
 8001908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800190c:	4a08      	ldr	r2, [pc, #32]	; (8001930 <HAL_MspInit+0x30>)
 800190e:	f043 0302 	orr.w	r3, r3, #2
 8001912:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_MspInit+0x30>)
 8001918:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	58024400 	.word	0x58024400

08001934 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0ba      	sub	sp, #232	; 0xe8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	22bc      	movs	r2, #188	; 0xbc
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f00a fdb5 	bl	800c4c4 <memset>
  if(hadc->Instance==ADC3)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a51      	ldr	r2, [pc, #324]	; (8001aa4 <HAL_ADC_MspInit+0x170>)
 8001960:	4293      	cmp	r3, r2
 8001962:	f040 809a 	bne.w	8001a9a <HAL_ADC_MspInit+0x166>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001966:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800196a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 800196c:	2304      	movs	r3, #4
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 9;
 8001970:	2309      	movs	r3, #9
 8001972:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001974:	2302      	movs	r3, #2
 8001976:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001978:	2302      	movs	r3, #2
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 800197c:	2304      	movs	r3, #4
 800197e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001980:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001984:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800198a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 3072;
 800198c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001990:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8001992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001996:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199a:	f107 0318 	add.w	r3, r7, #24
 800199e:	4618      	mov	r0, r3
 80019a0:	f005 fc6e 	bl	8007280 <HAL_RCCEx_PeriphCLKConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80019aa:	f7ff ffa3 	bl	80018f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019ae:	4b3e      	ldr	r3, [pc, #248]	; (8001aa8 <HAL_ADC_MspInit+0x174>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b4:	4a3c      	ldr	r2, [pc, #240]	; (8001aa8 <HAL_ADC_MspInit+0x174>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019be:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <HAL_ADC_MspInit+0x174>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <HAL_ADC_MspInit+0x174>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d2:	4a35      	ldr	r2, [pc, #212]	; (8001aa8 <HAL_ADC_MspInit+0x174>)
 80019d4:	f043 0320 	orr.w	r3, r3, #32
 80019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019dc:	4b32      	ldr	r3, [pc, #200]	; (8001aa8 <HAL_ADC_MspInit+0x174>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_ADC_MspInit+0x174>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <HAL_ADC_MspInit+0x174>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fa:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_ADC_MspInit+0x174>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = Current_3_Pin;
 8001a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a10:	2303      	movs	r3, #3
 8001a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(Current_3_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4822      	ldr	r0, [pc, #136]	; (8001aac <HAL_ADC_MspInit+0x178>)
 8001a24:	f004 f910 	bl	8005c48 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001a28:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001a2c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001a30:	f000 ff86 	bl	8002940 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001a34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001a38:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001a3c:	f000 ff80 	bl	8002940 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_ADC_MspInit+0x17c>)
 8001a42:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <HAL_ADC_MspInit+0x180>)
 8001a44:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_ADC_MspInit+0x17c>)
 8001a48:	2211      	movs	r2, #17
 8001a4a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_ADC_MspInit+0x17c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_ADC_MspInit+0x17c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_ADC_MspInit+0x17c>)
 8001a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <HAL_ADC_MspInit+0x17c>)
 8001a62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a66:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_ADC_MspInit+0x17c>)
 8001a6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a6e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_ADC_MspInit+0x17c>)
 8001a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a76:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_ADC_MspInit+0x17c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001a7e:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <HAL_ADC_MspInit+0x17c>)
 8001a80:	f002 f80a 	bl	8003a98 <HAL_DMA_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_ADC_MspInit+0x15a>
    {
      Error_Handler();
 8001a8a:	f7ff ff33 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_ADC_MspInit+0x17c>)
 8001a92:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_ADC_MspInit+0x17c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	37e8      	adds	r7, #232	; 0xe8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	58026000 	.word	0x58026000
 8001aa8:	58024400 	.word	0x58024400
 8001aac:	58021400 	.word	0x58021400
 8001ab0:	2400074c 	.word	0x2400074c
 8001ab4:	58025408 	.word	0x58025408

08001ab8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08e      	sub	sp, #56	; 0x38
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a59      	ldr	r2, [pc, #356]	; (8001c3c <HAL_ETH_MspInit+0x184>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	f040 80ab 	bne.w	8001c32 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001adc:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001ade:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae2:	4a57      	ldr	r2, [pc, #348]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001aec:	4b54      	ldr	r3, [pc, #336]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001aee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af6:	623b      	str	r3, [r7, #32]
 8001af8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001afa:	4b51      	ldr	r3, [pc, #324]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b00:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001b18:	4b49      	ldr	r3, [pc, #292]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b1e:	4a48      	ldr	r2, [pc, #288]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b28:	4b45      	ldr	r3, [pc, #276]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3c:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b46:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5a:	4a39      	ldr	r2, [pc, #228]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b64:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b78:	4a31      	ldr	r2, [pc, #196]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b7a:	f043 0302 	orr.w	r3, r3, #2
 8001b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b82:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b96:	4a2a      	ldr	r2, [pc, #168]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <HAL_ETH_MspInit+0x188>)
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001bae:	2332      	movs	r3, #50	; 0x32
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bbe:	230b      	movs	r3, #11
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	481e      	ldr	r0, [pc, #120]	; (8001c44 <HAL_ETH_MspInit+0x18c>)
 8001bca:	f004 f83d 	bl	8005c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001bce:	2386      	movs	r3, #134	; 0x86
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bde:	230b      	movs	r3, #11
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be6:	4619      	mov	r1, r3
 8001be8:	4817      	ldr	r0, [pc, #92]	; (8001c48 <HAL_ETH_MspInit+0x190>)
 8001bea:	f004 f82d 	bl	8005c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c00:	230b      	movs	r3, #11
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4810      	ldr	r0, [pc, #64]	; (8001c4c <HAL_ETH_MspInit+0x194>)
 8001c0c:	f004 f81c 	bl	8005c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001c10:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c22:	230b      	movs	r3, #11
 8001c24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4808      	ldr	r0, [pc, #32]	; (8001c50 <HAL_ETH_MspInit+0x198>)
 8001c2e:	f004 f80b 	bl	8005c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001c32:	bf00      	nop
 8001c34:	3738      	adds	r7, #56	; 0x38
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40028000 	.word	0x40028000
 8001c40:	58024400 	.word	0x58024400
 8001c44:	58020800 	.word	0x58020800
 8001c48:	58020000 	.word	0x58020000
 8001c4c:	58020400 	.word	0x58020400
 8001c50:	58021800 	.word	0x58021800

08001c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0ba      	sub	sp, #232	; 0xe8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c6c:	f107 0318 	add.w	r3, r7, #24
 8001c70:	22bc      	movs	r2, #188	; 0xbc
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00a fc25 	bl	800c4c4 <memset>
  if(hspi->Instance==SPI3)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a37      	ldr	r2, [pc, #220]	; (8001d5c <HAL_SPI_MspInit+0x108>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d166      	bne.n	8001d52 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8e:	f107 0318 	add.w	r3, r7, #24
 8001c92:	4618      	mov	r0, r3
 8001c94:	f005 faf4 	bl	8007280 <HAL_RCCEx_PeriphCLKConfig>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001c9e:	f7ff fe29 	bl	80018f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_SPI_MspInit+0x10c>)
 8001ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ca8:	4a2d      	ldr	r2, [pc, #180]	; (8001d60 <HAL_SPI_MspInit+0x10c>)
 8001caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_SPI_MspInit+0x10c>)
 8001cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_SPI_MspInit+0x10c>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc6:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <HAL_SPI_MspInit+0x10c>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd0:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_SPI_MspInit+0x10c>)
 8001cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_SPI_MspInit+0x10c>)
 8001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce4:	4a1e      	ldr	r2, [pc, #120]	; (8001d60 <HAL_SPI_MspInit+0x10c>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <HAL_SPI_MspInit+0x10c>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d14:	2306      	movs	r3, #6
 8001d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4810      	ldr	r0, [pc, #64]	; (8001d64 <HAL_SPI_MspInit+0x110>)
 8001d22:	f003 ff91 	bl	8005c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d40:	2306      	movs	r3, #6
 8001d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4806      	ldr	r0, [pc, #24]	; (8001d68 <HAL_SPI_MspInit+0x114>)
 8001d4e:	f003 ff7b 	bl	8005c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d52:	bf00      	nop
 8001d54:	37e8      	adds	r7, #232	; 0xe8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40003c00 	.word	0x40003c00
 8001d60:	58024400 	.word	0x58024400
 8001d64:	58020000 	.word	0x58020000
 8001d68:	58020800 	.word	0x58020800

08001d6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b090      	sub	sp, #64	; 0x40
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a7c      	ldr	r2, [pc, #496]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x210>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d12f      	bne.n	8001dee <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d8e:	4b7c      	ldr	r3, [pc, #496]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d94:	4a7a      	ldr	r2, [pc, #488]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d9e:	4b78      	ldr	r3, [pc, #480]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dac:	4b74      	ldr	r3, [pc, #464]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db2:	4a73      	ldr	r2, [pc, #460]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001db4:	f043 0310 	orr.w	r3, r3, #16
 8001db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dbc:	4b70      	ldr	r3, [pc, #448]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 8001dca:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de4:	4619      	mov	r1, r3
 8001de6:	4867      	ldr	r0, [pc, #412]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x218>)
 8001de8:	f003 ff2e 	bl	8005c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dec:	e0c2      	b.n	8001f74 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df6:	d14d      	bne.n	8001e94 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df8:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001dfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dfe:	4a60      	ldr	r2, [pc, #384]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e08:	4b5d      	ldr	r3, [pc, #372]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	623b      	str	r3, [r7, #32]
 8001e14:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b5a      	ldr	r3, [pc, #360]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1c:	4a58      	ldr	r2, [pc, #352]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e26:	4b56      	ldr	r3, [pc, #344]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e34:	4b52      	ldr	r3, [pc, #328]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3a:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e44:	4b4e      	ldr	r3, [pc, #312]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 8001e52:	2320      	movs	r3, #32
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e62:	2301      	movs	r3, #1
 8001e64:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4846      	ldr	r0, [pc, #280]	; (8001f88 <HAL_TIM_Encoder_MspInit+0x21c>)
 8001e6e:	f003 feeb 	bl	8005c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 8001e72:	2308      	movs	r3, #8
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e82:	2301      	movs	r3, #1
 8001e84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	483f      	ldr	r0, [pc, #252]	; (8001f8c <HAL_TIM_Encoder_MspInit+0x220>)
 8001e8e:	f003 fedb 	bl	8005c48 <HAL_GPIO_Init>
}
 8001e92:	e06f      	b.n	8001f74 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM3)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a3d      	ldr	r2, [pc, #244]	; (8001f90 <HAL_TIM_Encoder_MspInit+0x224>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d12e      	bne.n	8001efc <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ea4:	4a36      	ldr	r2, [pc, #216]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
 8001eaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eae:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebc:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec2:	4a2f      	ldr	r2, [pc, #188]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 8001eda:	2330      	movs	r3, #48	; 0x30
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eea:	2302      	movs	r3, #2
 8001eec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4825      	ldr	r0, [pc, #148]	; (8001f8c <HAL_TIM_Encoder_MspInit+0x220>)
 8001ef6:	f003 fea7 	bl	8005c48 <HAL_GPIO_Init>
}
 8001efa:	e03b      	b.n	8001f74 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM4)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a24      	ldr	r2, [pc, #144]	; (8001f94 <HAL_TIM_Encoder_MspInit+0x228>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d136      	bne.n	8001f74 <HAL_TIM_Encoder_MspInit+0x208>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f0c:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2a:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001f2c:	f043 0308 	orr.w	r3, r3, #8
 8001f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x214>)
 8001f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 8001f42:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f54:	2302      	movs	r3, #2
 8001f56:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	480e      	ldr	r0, [pc, #56]	; (8001f98 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001f60:	f003 fe72 	bl	8005c48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	201e      	movs	r0, #30
 8001f6a:	f001 fd60 	bl	8003a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f6e:	201e      	movs	r0, #30
 8001f70:	f001 fd77 	bl	8003a62 <HAL_NVIC_EnableIRQ>
}
 8001f74:	bf00      	nop
 8001f76:	3740      	adds	r7, #64	; 0x40
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	58024400 	.word	0x58024400
 8001f84:	58021000 	.word	0x58021000
 8001f88:	58020000 	.word	0x58020000
 8001f8c:	58020400 	.word	0x58020400
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800
 8001f98:	58020c00 	.word	0x58020c00

08001f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a48      	ldr	r2, [pc, #288]	; (80020cc <HAL_TIM_Base_MspInit+0x130>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d117      	bne.n	8001fde <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fae:	4b48      	ldr	r3, [pc, #288]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 8001fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fb4:	4a46      	ldr	r2, [pc, #280]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 8001fb6:	f043 0308 	orr.w	r3, r3, #8
 8001fba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fbe:	4b44      	ldr	r3, [pc, #272]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 8001fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2032      	movs	r0, #50	; 0x32
 8001fd2:	f001 fd2c 	bl	8003a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001fd6:	2032      	movs	r0, #50	; 0x32
 8001fd8:	f001 fd43 	bl	8003a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001fdc:	e072      	b.n	80020c4 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a3c      	ldr	r2, [pc, #240]	; (80020d4 <HAL_TIM_Base_MspInit+0x138>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d117      	bne.n	8002018 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001fe8:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 8001fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fee:	4a38      	ldr	r2, [pc, #224]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 8001ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ff8:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 8001ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	202b      	movs	r0, #43	; 0x2b
 800200c:	f001 fd0f 	bl	8003a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002010:	202b      	movs	r0, #43	; 0x2b
 8002012:	f001 fd26 	bl	8003a62 <HAL_NVIC_EnableIRQ>
}
 8002016:	e055      	b.n	80020c4 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2e      	ldr	r2, [pc, #184]	; (80020d8 <HAL_TIM_Base_MspInit+0x13c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d117      	bne.n	8002052 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002022:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 8002024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002028:	4a29      	ldr	r2, [pc, #164]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 800202a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 8002034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	202c      	movs	r0, #44	; 0x2c
 8002046:	f001 fcf2 	bl	8003a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800204a:	202c      	movs	r0, #44	; 0x2c
 800204c:	f001 fd09 	bl	8003a62 <HAL_NVIC_EnableIRQ>
}
 8002050:	e038      	b.n	80020c4 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a21      	ldr	r2, [pc, #132]	; (80020dc <HAL_TIM_Base_MspInit+0x140>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d117      	bne.n	800208c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800205c:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 800205e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002062:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002068:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 800206e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	2075      	movs	r0, #117	; 0x75
 8002080:	f001 fcd5 	bl	8003a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002084:	2075      	movs	r0, #117	; 0x75
 8002086:	f001 fcec 	bl	8003a62 <HAL_NVIC_EnableIRQ>
}
 800208a:	e01b      	b.n	80020c4 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <HAL_TIM_Base_MspInit+0x144>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d116      	bne.n	80020c4 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 8002098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800209c:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 800209e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_TIM_Base_MspInit+0x134>)
 80020a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	2076      	movs	r0, #118	; 0x76
 80020ba:	f001 fcb8 	bl	8003a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80020be:	2076      	movs	r0, #118	; 0x76
 80020c0:	f001 fccf 	bl	8003a62 <HAL_NVIC_EnableIRQ>
}
 80020c4:	bf00      	nop
 80020c6:	3720      	adds	r7, #32
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40000c00 	.word	0x40000c00
 80020d0:	58024400 	.word	0x58024400
 80020d4:	40001800 	.word	0x40001800
 80020d8:	40001c00 	.word	0x40001c00
 80020dc:	40014400 	.word	0x40014400
 80020e0:	40014800 	.word	0x40014800

080020e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08c      	sub	sp, #48	; 0x30
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a4b      	ldr	r2, [pc, #300]	; (8002230 <HAL_TIM_MspPostInit+0x14c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d120      	bne.n	8002148 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <HAL_TIM_MspPostInit+0x150>)
 8002108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210c:	4a49      	ldr	r2, [pc, #292]	; (8002234 <HAL_TIM_MspPostInit+0x150>)
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_TIM_MspPostInit+0x150>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 8002124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002136:	2302      	movs	r3, #2
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	483d      	ldr	r0, [pc, #244]	; (8002238 <HAL_TIM_MspPostInit+0x154>)
 8002142:	f003 fd81 	bl	8005c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002146:	e06f      	b.n	8002228 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a3b      	ldr	r2, [pc, #236]	; (800223c <HAL_TIM_MspPostInit+0x158>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d11f      	bne.n	8002192 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <HAL_TIM_MspPostInit+0x150>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002158:	4a36      	ldr	r2, [pc, #216]	; (8002234 <HAL_TIM_MspPostInit+0x150>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002162:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_TIM_MspPostInit+0x150>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 8002170:	2340      	movs	r3, #64	; 0x40
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002180:	2309      	movs	r3, #9
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 031c 	add.w	r3, r7, #28
 8002188:	4619      	mov	r1, r3
 800218a:	482d      	ldr	r0, [pc, #180]	; (8002240 <HAL_TIM_MspPostInit+0x15c>)
 800218c:	f003 fd5c 	bl	8005c48 <HAL_GPIO_Init>
}
 8002190:	e04a      	b.n	8002228 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <HAL_TIM_MspPostInit+0x160>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d120      	bne.n	80021de <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_TIM_MspPostInit+0x150>)
 800219e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a2:	4a24      	ldr	r2, [pc, #144]	; (8002234 <HAL_TIM_MspPostInit+0x150>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_TIM_MspPostInit+0x150>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 80021ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80021cc:	2301      	movs	r3, #1
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	4619      	mov	r1, r3
 80021d6:	4818      	ldr	r0, [pc, #96]	; (8002238 <HAL_TIM_MspPostInit+0x154>)
 80021d8:	f003 fd36 	bl	8005c48 <HAL_GPIO_Init>
}
 80021dc:	e024      	b.n	8002228 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a19      	ldr	r2, [pc, #100]	; (8002248 <HAL_TIM_MspPostInit+0x164>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d11f      	bne.n	8002228 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_TIM_MspPostInit+0x150>)
 80021ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_TIM_MspPostInit+0x150>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_TIM_MspPostInit+0x150>)
 80021fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 8002206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002218:	2301      	movs	r3, #1
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	4619      	mov	r1, r3
 8002222:	4805      	ldr	r0, [pc, #20]	; (8002238 <HAL_TIM_MspPostInit+0x154>)
 8002224:	f003 fd10 	bl	8005c48 <HAL_GPIO_Init>
}
 8002228:	bf00      	nop
 800222a:	3730      	adds	r7, #48	; 0x30
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40001800 	.word	0x40001800
 8002234:	58024400 	.word	0x58024400
 8002238:	58020400 	.word	0x58020400
 800223c:	40001c00 	.word	0x40001c00
 8002240:	58020000 	.word	0x58020000
 8002244:	40014400 	.word	0x40014400
 8002248:	40014800 	.word	0x40014800

0800224c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b0ba      	sub	sp, #232	; 0xe8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	22bc      	movs	r2, #188	; 0xbc
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f00a f929 	bl	800c4c4 <memset>
  if(huart->Instance==UART5)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a60      	ldr	r2, [pc, #384]	; (80023f8 <HAL_UART_MspInit+0x1ac>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d143      	bne.n	8002304 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800227c:	2302      	movs	r3, #2
 800227e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002286:	f107 0318 	add.w	r3, r7, #24
 800228a:	4618      	mov	r0, r3
 800228c:	f004 fff8 	bl	8007280 <HAL_RCCEx_PeriphCLKConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002296:	f7ff fb2d 	bl	80018f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800229a:	4b58      	ldr	r3, [pc, #352]	; (80023fc <HAL_UART_MspInit+0x1b0>)
 800229c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a0:	4a56      	ldr	r2, [pc, #344]	; (80023fc <HAL_UART_MspInit+0x1b0>)
 80022a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022aa:	4b54      	ldr	r3, [pc, #336]	; (80023fc <HAL_UART_MspInit+0x1b0>)
 80022ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b8:	4b50      	ldr	r3, [pc, #320]	; (80023fc <HAL_UART_MspInit+0x1b0>)
 80022ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022be:	4a4f      	ldr	r2, [pc, #316]	; (80023fc <HAL_UART_MspInit+0x1b0>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c8:	4b4c      	ldr	r3, [pc, #304]	; (80023fc <HAL_UART_MspInit+0x1b0>)
 80022ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 80022d6:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80022da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80022f0:	230e      	movs	r3, #14
 80022f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022fa:	4619      	mov	r1, r3
 80022fc:	4840      	ldr	r0, [pc, #256]	; (8002400 <HAL_UART_MspInit+0x1b4>)
 80022fe:	f003 fca3 	bl	8005c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8002302:	e074      	b.n	80023ee <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==UART7)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a3e      	ldr	r2, [pc, #248]	; (8002404 <HAL_UART_MspInit+0x1b8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d16f      	bne.n	80023ee <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800230e:	2302      	movs	r3, #2
 8002310:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002312:	2300      	movs	r3, #0
 8002314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002318:	f107 0318 	add.w	r3, r7, #24
 800231c:	4618      	mov	r0, r3
 800231e:	f004 ffaf 	bl	8007280 <HAL_RCCEx_PeriphCLKConfig>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002328:	f7ff fae4 	bl	80018f4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800232c:	4b33      	ldr	r3, [pc, #204]	; (80023fc <HAL_UART_MspInit+0x1b0>)
 800232e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002332:	4a32      	ldr	r2, [pc, #200]	; (80023fc <HAL_UART_MspInit+0x1b0>)
 8002334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002338:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800233c:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <HAL_UART_MspInit+0x1b0>)
 800233e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002342:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <HAL_UART_MspInit+0x1b0>)
 800234c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002350:	4a2a      	ldr	r2, [pc, #168]	; (80023fc <HAL_UART_MspInit+0x1b0>)
 8002352:	f043 0320 	orr.w	r3, r3, #32
 8002356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800235a:	4b28      	ldr	r3, [pc, #160]	; (80023fc <HAL_UART_MspInit+0x1b0>)
 800235c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 8002368:	23c0      	movs	r3, #192	; 0xc0
 800236a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002380:	2307      	movs	r3, #7
 8002382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002386:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800238a:	4619      	mov	r1, r3
 800238c:	481e      	ldr	r0, [pc, #120]	; (8002408 <HAL_UART_MspInit+0x1bc>)
 800238e:	f003 fc5b 	bl	8005c48 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream1;
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <HAL_UART_MspInit+0x1c0>)
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <HAL_UART_MspInit+0x1c4>)
 8002396:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_UART_MspInit+0x1c0>)
 800239a:	224f      	movs	r2, #79	; 0x4f
 800239c:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_UART_MspInit+0x1c0>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_UART_MspInit+0x1c0>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_UART_MspInit+0x1c0>)
 80023ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b0:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_UART_MspInit+0x1c0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_UART_MspInit+0x1c0>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_UART_MspInit+0x1c0>)
 80023c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023c4:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_UART_MspInit+0x1c0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_UART_MspInit+0x1c0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80023d2:	480e      	ldr	r0, [pc, #56]	; (800240c <HAL_UART_MspInit+0x1c0>)
 80023d4:	f001 fb60 	bl	8003a98 <HAL_DMA_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_UART_MspInit+0x196>
      Error_Handler();
 80023de:	f7ff fa89 	bl	80018f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a09      	ldr	r2, [pc, #36]	; (800240c <HAL_UART_MspInit+0x1c0>)
 80023e6:	67da      	str	r2, [r3, #124]	; 0x7c
 80023e8:	4a08      	ldr	r2, [pc, #32]	; (800240c <HAL_UART_MspInit+0x1c0>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023ee:	bf00      	nop
 80023f0:	37e8      	adds	r7, #232	; 0xe8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40005000 	.word	0x40005000
 80023fc:	58024400 	.word	0x58024400
 8002400:	58020400 	.word	0x58020400
 8002404:	40007800 	.word	0x40007800
 8002408:	58021400 	.word	0x58021400
 800240c:	24000974 	.word	0x24000974
 8002410:	40020028 	.word	0x40020028

08002414 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0b8      	sub	sp, #224	; 0xe0
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	22bc      	movs	r2, #188	; 0xbc
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f00a f845 	bl	800c4c4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2f      	ldr	r2, [pc, #188]	; (80024fc <HAL_PCD_MspInit+0xe8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d156      	bne.n	80024f2 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002444:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002448:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800244a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800244e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4618      	mov	r0, r3
 8002458:	f004 ff12 	bl	8007280 <HAL_RCCEx_PeriphCLKConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8002462:	f7ff fa47 	bl	80018f4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002466:	f003 ff5f 	bl	8006328 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246a:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_PCD_MspInit+0xec>)
 800246c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002470:	4a23      	ldr	r2, [pc, #140]	; (8002500 <HAL_PCD_MspInit+0xec>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_PCD_MspInit+0xec>)
 800247c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002488:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800248c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80024a2:	230a      	movs	r3, #10
 80024a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024ac:	4619      	mov	r1, r3
 80024ae:	4815      	ldr	r0, [pc, #84]	; (8002504 <HAL_PCD_MspInit+0xf0>)
 80024b0:	f003 fbca 	bl	8005c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024cc:	4619      	mov	r1, r3
 80024ce:	480d      	ldr	r0, [pc, #52]	; (8002504 <HAL_PCD_MspInit+0xf0>)
 80024d0:	f003 fbba 	bl	8005c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_PCD_MspInit+0xec>)
 80024d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_PCD_MspInit+0xec>)
 80024dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_PCD_MspInit+0xec>)
 80024e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80024f2:	bf00      	nop
 80024f4:	37e0      	adds	r7, #224	; 0xe0
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40080000 	.word	0x40080000
 8002500:	58024400 	.word	0x58024400
 8002504:	58020000 	.word	0x58020000

08002508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800250c:	e7fe      	b.n	800250c <NMI_Handler+0x4>

0800250e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <HardFault_Handler+0x4>

08002514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <MemManage_Handler+0x4>

0800251a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <BusFault_Handler+0x4>

08002520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <UsageFault_Handler+0x4>

08002526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002554:	f000 f990 	bl	8002878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002560:	2010      	movs	r0, #16
 8002562:	f003 fd3a 	bl	8005fda <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <DMA1_Stream1_IRQHandler+0x10>)
 8002572:	f001 fded 	bl	8004150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	24000974 	.word	0x24000974

08002580 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002584:	2020      	movs	r0, #32
 8002586:	f003 fd28 	bl	8005fda <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800258a:	2040      	movs	r0, #64	; 0x40
 800258c:	f003 fd25 	bl	8005fda <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002590:	2080      	movs	r0, #128	; 0x80
 8002592:	f003 fd22 	bl	8005fda <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <TIM4_IRQHandler+0x10>)
 80025a2:	f007 fbe7 	bl	8009d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	240002ac 	.word	0x240002ac

080025b0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80025b6:	f007 fbdd 	bl	8009d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	24000b3c 	.word	0x24000b3c

080025c4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80025ca:	f007 fbd3 	bl	8009d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	24000a50 	.word	0x24000a50

080025d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <TIM5_IRQHandler+0x10>)
 80025de:	f007 fbc9 	bl	8009d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	240007c4 	.word	0x240007c4

080025ec <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <TIM16_IRQHandler+0x10>)
 80025f2:	f007 fbbf 	bl	8009d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	24000c44 	.word	0x24000c44

08002600 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <TIM17_IRQHandler+0x10>)
 8002606:	f007 fbb5 	bl	8009d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	24000700 	.word	0x24000700

08002614 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <BDMA_Channel0_IRQHandler+0x10>)
 800261a:	f001 fd99 	bl	8004150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2400074c 	.word	0x2400074c

08002628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800262c:	4b39      	ldr	r3, [pc, #228]	; (8002714 <SystemInit+0xec>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	4a38      	ldr	r2, [pc, #224]	; (8002714 <SystemInit+0xec>)
 8002634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800263c:	4b36      	ldr	r3, [pc, #216]	; (8002718 <SystemInit+0xf0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	2b06      	cmp	r3, #6
 8002646:	d807      	bhi.n	8002658 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002648:	4b33      	ldr	r3, [pc, #204]	; (8002718 <SystemInit+0xf0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 030f 	bic.w	r3, r3, #15
 8002650:	4a31      	ldr	r2, [pc, #196]	; (8002718 <SystemInit+0xf0>)
 8002652:	f043 0307 	orr.w	r3, r3, #7
 8002656:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002658:	4b30      	ldr	r3, [pc, #192]	; (800271c <SystemInit+0xf4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a2f      	ldr	r2, [pc, #188]	; (800271c <SystemInit+0xf4>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <SystemInit+0xf4>)
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800266a:	4b2c      	ldr	r3, [pc, #176]	; (800271c <SystemInit+0xf4>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	492b      	ldr	r1, [pc, #172]	; (800271c <SystemInit+0xf4>)
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <SystemInit+0xf8>)
 8002672:	4013      	ands	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002676:	4b28      	ldr	r3, [pc, #160]	; (8002718 <SystemInit+0xf0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002682:	4b25      	ldr	r3, [pc, #148]	; (8002718 <SystemInit+0xf0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 030f 	bic.w	r3, r3, #15
 800268a:	4a23      	ldr	r2, [pc, #140]	; (8002718 <SystemInit+0xf0>)
 800268c:	f043 0307 	orr.w	r3, r3, #7
 8002690:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <SystemInit+0xf4>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <SystemInit+0xf4>)
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800269e:	4b1f      	ldr	r3, [pc, #124]	; (800271c <SystemInit+0xf4>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <SystemInit+0xf4>)
 80026a6:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <SystemInit+0xfc>)
 80026a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026aa:	4b1c      	ldr	r3, [pc, #112]	; (800271c <SystemInit+0xf4>)
 80026ac:	4a1e      	ldr	r2, [pc, #120]	; (8002728 <SystemInit+0x100>)
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <SystemInit+0xf4>)
 80026b2:	4a1e      	ldr	r2, [pc, #120]	; (800272c <SystemInit+0x104>)
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026b6:	4b19      	ldr	r3, [pc, #100]	; (800271c <SystemInit+0xf4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026bc:	4b17      	ldr	r3, [pc, #92]	; (800271c <SystemInit+0xf4>)
 80026be:	4a1b      	ldr	r2, [pc, #108]	; (800272c <SystemInit+0x104>)
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026c2:	4b16      	ldr	r3, [pc, #88]	; (800271c <SystemInit+0xf4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <SystemInit+0xf4>)
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <SystemInit+0x104>)
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <SystemInit+0xf4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <SystemInit+0xf4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a10      	ldr	r2, [pc, #64]	; (800271c <SystemInit+0xf4>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <SystemInit+0xf4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <SystemInit+0x108>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <SystemInit+0x10c>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f2:	d202      	bcs.n	80026fa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <SystemInit+0x110>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <SystemInit+0x114>)
 80026fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002700:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <SystemInit+0xec>)
 8002704:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002708:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00
 8002718:	52002000 	.word	0x52002000
 800271c:	58024400 	.word	0x58024400
 8002720:	eaf6ed7f 	.word	0xeaf6ed7f
 8002724:	02020200 	.word	0x02020200
 8002728:	01ff0000 	.word	0x01ff0000
 800272c:	01010280 	.word	0x01010280
 8002730:	5c001000 	.word	0x5c001000
 8002734:	ffff0000 	.word	0xffff0000
 8002738:	51008108 	.word	0x51008108
 800273c:	52004000 	.word	0x52004000

08002740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002778 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002744:	f7ff ff70 	bl	8002628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002748:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800274a:	e003      	b.n	8002754 <LoopCopyDataInit>

0800274c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800274e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002750:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002752:	3104      	adds	r1, #4

08002754 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002754:	480a      	ldr	r0, [pc, #40]	; (8002780 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002758:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800275a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800275c:	d3f6      	bcc.n	800274c <CopyDataInit>
  ldr  r2, =_sbss
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002760:	e002      	b.n	8002768 <LoopFillZerobss>

08002762 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002762:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002764:	f842 3b04 	str.w	r3, [r2], #4

08002768 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800276a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800276c:	d3f9      	bcc.n	8002762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800276e:	f009 fe85 	bl	800c47c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002772:	f7fe f8d1 	bl	8000918 <main>
  bx  lr    
 8002776:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002778:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800277c:	0800c53c 	.word	0x0800c53c
  ldr  r0, =_sdata
 8002780:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002784:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8002788:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 800278c:	24000c94 	.word	0x24000c94

08002790 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002790:	e7fe      	b.n	8002790 <ADC3_IRQHandler>
	...

08002794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800279a:	2003      	movs	r0, #3
 800279c:	f001 f93c 	bl	8003a18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027a0:	f004 fb98 	bl	8006ed4 <HAL_RCC_GetSysClockFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b15      	ldr	r3, [pc, #84]	; (80027fc <HAL_Init+0x68>)
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	4913      	ldr	r1, [pc, #76]	; (8002800 <HAL_Init+0x6c>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
 80027bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_Init+0x68>)
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <HAL_Init+0x6c>)
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
 80027d4:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <HAL_Init+0x70>)
 80027d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027d8:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <HAL_Init+0x74>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027de:	2000      	movs	r0, #0
 80027e0:	f000 f814 	bl	800280c <HAL_InitTick>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e002      	b.n	80027f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027ee:	f7ff f887 	bl	8001900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	58024400 	.word	0x58024400
 8002800:	0800c4ec 	.word	0x0800c4ec
 8002804:	24000004 	.word	0x24000004
 8002808:	24000000 	.word	0x24000000

0800280c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_InitTick+0x60>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e021      	b.n	8002864 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002820:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_InitTick+0x64>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_InitTick+0x60>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	4619      	mov	r1, r3
 800282a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	4618      	mov	r0, r3
 8002838:	f001 f921 	bl	8003a7e <HAL_SYSTICK_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e00e      	b.n	8002864 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b0f      	cmp	r3, #15
 800284a:	d80a      	bhi.n	8002862 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800284c:	2200      	movs	r2, #0
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	f001 f8eb 	bl	8003a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002858:	4a06      	ldr	r2, [pc, #24]	; (8002874 <HAL_InitTick+0x68>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e000      	b.n	8002864 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	2400000c 	.word	0x2400000c
 8002870:	24000000 	.word	0x24000000
 8002874:	24000008 	.word	0x24000008

08002878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_IncTick+0x20>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_IncTick+0x24>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4413      	add	r3, r2
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <HAL_IncTick+0x24>)
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	2400000c 	.word	0x2400000c
 800289c:	24000c90 	.word	0x24000c90

080028a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return uwTick;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_GetTick+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	24000c90 	.word	0x24000c90

080028b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7ff ffee 	bl	80028a0 <HAL_GetTick>
 80028c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d005      	beq.n	80028de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_Delay+0x44>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028de:	bf00      	nop
 80028e0:	f7ff ffde 	bl	80028a0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d8f7      	bhi.n	80028e0 <HAL_Delay+0x28>
  {
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2400000c 	.word	0x2400000c

08002900 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_GetREVID+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0c1b      	lsrs	r3, r3, #16
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	5c001000 	.word	0x5c001000

08002918 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002928:	4904      	ldr	r1, [pc, #16]	; (800293c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	58000400 	.word	0x58000400

08002940 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800294a:	4b07      	ldr	r3, [pc, #28]	; (8002968 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	43db      	mvns	r3, r3
 8002952:	401a      	ands	r2, r3
 8002954:	4904      	ldr	r1, [pc, #16]	; (8002968 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	58000400 	.word	0x58000400

0800296c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	609a      	str	r2, [r3, #8]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	609a      	str	r2, [r3, #8]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3360      	adds	r3, #96	; 0x60
 80029e6:	461a      	mov	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	431a      	orrs	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a08:	bf00      	nop
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	431a      	orrs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	611a      	str	r2, [r3, #16]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b087      	sub	sp, #28
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3360      	adds	r3, #96	; 0x60
 8002a56:	461a      	mov	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	601a      	str	r2, [r3, #0]
  }
}
 8002a70:	bf00      	nop
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3330      	adds	r3, #48	; 0x30
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	4413      	add	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	211f      	movs	r1, #31
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	401a      	ands	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	f003 011f 	and.w	r1, r3, #31
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3314      	adds	r3, #20
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	0e5b      	lsrs	r3, r3, #25
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	4413      	add	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	0d1b      	lsrs	r3, r3, #20
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	2107      	movs	r1, #7
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	401a      	ands	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	0d1b      	lsrs	r3, r3, #20
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b44:	43db      	mvns	r3, r3
 8002b46:	401a      	ands	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0318 	and.w	r3, r3, #24
 8002b4e:	4908      	ldr	r1, [pc, #32]	; (8002b70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b50:	40d9      	lsrs	r1, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	400b      	ands	r3, r1
 8002b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	000fffff 	.word	0x000fffff

08002b74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6093      	str	r3, [r2, #8]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	5fffffc0 	.word	0x5fffffc0

08002b98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bac:	d101      	bne.n	8002bb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	6fffffc0 	.word	0x6fffffc0

08002be8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bfc:	d101      	bne.n	8002c02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <LL_ADC_IsEnabled+0x18>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <LL_ADC_IsEnabled+0x1a>
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d101      	bne.n	8002c4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d101      	bne.n	8002c74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e18e      	b.n	8002fbc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d109      	bne.n	8002cc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7fe fe41 	bl	8001934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff67 	bl	8002b98 <LL_ADC_IsDeepPowerDownEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff4d 	bl	8002b74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff82 	bl	8002be8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d114      	bne.n	8002d14 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ff66 	bl	8002bc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf4:	4b9a      	ldr	r3, [pc, #616]	; (8002f60 <HAL_ADC_Init+0x2dc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	4a9a      	ldr	r2, [pc, #616]	; (8002f64 <HAL_ADC_Init+0x2e0>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	3301      	adds	r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d06:	e002      	b.n	8002d0e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f9      	bne.n	8002d08 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff65 	bl	8002be8 <LL_ADC_IsInternalRegulatorEnabled>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	f043 0210 	orr.w	r2, r3, #16
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff76 	bl	8002c36 <LL_ADC_REG_IsConversionOngoing>
 8002d4a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 8128 	bne.w	8002faa <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 8124 	bne.w	8002faa <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d6a:	f043 0202 	orr.w	r2, r3, #2
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff4a 	bl	8002c10 <LL_ADC_IsEnabled>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d136      	bne.n	8002df0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a78      	ldr	r2, [pc, #480]	; (8002f68 <HAL_ADC_Init+0x2e4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADC_Init+0x112>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a76      	ldr	r2, [pc, #472]	; (8002f6c <HAL_ADC_Init+0x2e8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10e      	bne.n	8002db4 <HAL_ADC_Init+0x130>
 8002d96:	4874      	ldr	r0, [pc, #464]	; (8002f68 <HAL_ADC_Init+0x2e4>)
 8002d98:	f7ff ff3a 	bl	8002c10 <LL_ADC_IsEnabled>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	4873      	ldr	r0, [pc, #460]	; (8002f6c <HAL_ADC_Init+0x2e8>)
 8002da0:	f7ff ff36 	bl	8002c10 <LL_ADC_IsEnabled>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4323      	orrs	r3, r4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e008      	b.n	8002dc6 <HAL_ADC_Init+0x142>
 8002db4:	486e      	ldr	r0, [pc, #440]	; (8002f70 <HAL_ADC_Init+0x2ec>)
 8002db6:	f7ff ff2b 	bl	8002c10 <LL_ADC_IsEnabled>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d012      	beq.n	8002df0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a66      	ldr	r2, [pc, #408]	; (8002f68 <HAL_ADC_Init+0x2e4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d004      	beq.n	8002dde <HAL_ADC_Init+0x15a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a64      	ldr	r2, [pc, #400]	; (8002f6c <HAL_ADC_Init+0x2e8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_Init+0x15e>
 8002dde:	4a65      	ldr	r2, [pc, #404]	; (8002f74 <HAL_ADC_Init+0x2f0>)
 8002de0:	e000      	b.n	8002de4 <HAL_ADC_Init+0x160>
 8002de2:	4a65      	ldr	r2, [pc, #404]	; (8002f78 <HAL_ADC_Init+0x2f4>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4619      	mov	r1, r3
 8002dea:	4610      	mov	r0, r2
 8002dec:	f7ff fdbe 	bl	800296c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002df0:	f7ff fd86 	bl	8002900 <HAL_GetREVID>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d914      	bls.n	8002e28 <HAL_ADC_Init+0x1a4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b10      	cmp	r3, #16
 8002e04:	d110      	bne.n	8002e28 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7d5b      	ldrb	r3, [r3, #21]
 8002e0a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e10:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7f1b      	ldrb	r3, [r3, #28]
 8002e1c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e1e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e20:	f043 030c 	orr.w	r3, r3, #12
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	e00d      	b.n	8002e44 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7d5b      	ldrb	r3, [r3, #21]
 8002e2c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e32:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e38:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7f1b      	ldrb	r3, [r3, #28]
 8002e3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7f1b      	ldrb	r3, [r3, #28]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d106      	bne.n	8002e5a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	045b      	lsls	r3, r3, #17
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <HAL_ADC_Init+0x2f8>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	69b9      	ldr	r1, [r7, #24]
 8002e86:	430b      	orrs	r3, r1
 8002e88:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fed1 	bl	8002c36 <LL_ADC_REG_IsConversionOngoing>
 8002e94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fede 	bl	8002c5c <LL_ADC_INJ_IsConversionOngoing>
 8002ea0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d14a      	bne.n	8002f3e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d147      	bne.n	8002f3e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7d1b      	ldrb	r3, [r3, #20]
 8002eb2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <HAL_ADC_Init+0x2fc>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	69b9      	ldr	r1, [r7, #24]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d11b      	bne.n	8002f12 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <HAL_ADC_Init+0x300>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eee:	3a01      	subs	r2, #1
 8002ef0:	0411      	lsls	r1, r2, #16
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ef6:	4311      	orrs	r1, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002efc:	4311      	orrs	r1, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f02:	430a      	orrs	r2, r1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	611a      	str	r2, [r3, #16]
 8002f10:	e007      	b.n	8002f22 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0201 	bic.w	r2, r2, #1
 8002f20:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fb93 	bl	8003664 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d120      	bne.n	8002f88 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f023 010f 	bic.w	r1, r3, #15
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	1e5a      	subs	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f5e:	e01b      	b.n	8002f98 <HAL_ADC_Init+0x314>
 8002f60:	24000000 	.word	0x24000000
 8002f64:	053e2d63 	.word	0x053e2d63
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40022100 	.word	0x40022100
 8002f70:	58026000 	.word	0x58026000
 8002f74:	40022300 	.word	0x40022300
 8002f78:	58026300 	.word	0x58026300
 8002f7c:	fff0c003 	.word	0xfff0c003
 8002f80:	ffffbffc 	.word	0xffffbffc
 8002f84:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 020f 	bic.w	r2, r2, #15
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f023 0303 	bic.w	r3, r3, #3
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
 8002fa8:	e007      	b.n	8002fba <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	f043 0210 	orr.w	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fba:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3724      	adds	r7, #36	; 0x24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd90      	pop	{r4, r7, pc}

08002fc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b0a1      	sub	sp, #132	; 0x84
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a9d      	ldr	r2, [pc, #628]	; (8003254 <HAL_ADC_ConfigChannel+0x290>)
 8002fde:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x2a>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e321      	b.n	8003632 <HAL_ADC_ConfigChannel+0x66e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fe1b 	bl	8002c36 <LL_ADC_REG_IsConversionOngoing>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 8306 	bne.w	8003614 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003010:	2b00      	cmp	r3, #0
 8003012:	d108      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x62>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	2201      	movs	r2, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	e016      	b.n	8003054 <HAL_ADC_ConfigChannel+0x90>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003034:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003036:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e003      	b.n	800304a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2201      	movs	r2, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	69d1      	ldr	r1, [r2, #28]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	430b      	orrs	r3, r1
 8003060:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	f7ff fd04 	bl	8002a7c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fddc 	bl	8002c36 <LL_ADC_REG_IsConversionOngoing>
 800307e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fde9 	bl	8002c5c <LL_ADC_INJ_IsConversionOngoing>
 800308a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800308c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 80b3 	bne.w	80031fa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 80af 	bne.w	80031fa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f7ff fd13 	bl	8002ad4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030ae:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <HAL_ADC_ConfigChannel+0x294>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80030b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ba:	d10b      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x110>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	e01d      	b.n	8003110 <HAL_ADC_ConfigChannel+0x14c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x136>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	e00a      	b.n	8003110 <HAL_ADC_ConfigChannel+0x14c>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b04      	cmp	r3, #4
 8003118:	d027      	beq.n	800316a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6919      	ldr	r1, [r3, #16]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003128:	f7ff fc54 	bl	80029d4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6919      	ldr	r1, [r3, #16]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	7e5b      	ldrb	r3, [r3, #25]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d102      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x17e>
 800313c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003140:	e000      	b.n	8003144 <HAL_ADC_ConfigChannel+0x180>
 8003142:	2300      	movs	r3, #0
 8003144:	461a      	mov	r2, r3
 8003146:	f7ff fc7e 	bl	8002a46 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6919      	ldr	r1, [r3, #16]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	7e1b      	ldrb	r3, [r3, #24]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d102      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x19c>
 800315a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800315e:	e000      	b.n	8003162 <HAL_ADC_ConfigChannel+0x19e>
 8003160:	2300      	movs	r3, #0
 8003162:	461a      	mov	r2, r3
 8003164:	f7ff fc56 	bl	8002a14 <LL_ADC_SetDataRightShift>
 8003168:	e047      	b.n	80031fa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003170:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	069b      	lsls	r3, r3, #26
 800317a:	429a      	cmp	r2, r3
 800317c:	d107      	bne.n	800318e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800318c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003194:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	069b      	lsls	r3, r3, #26
 800319e:	429a      	cmp	r2, r3
 80031a0:	d107      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031b0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	069b      	lsls	r3, r3, #26
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d107      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031d4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	069b      	lsls	r3, r3, #26
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d107      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031f8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fd06 	bl	8002c10 <LL_ADC_IsEnabled>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 820d 	bne.w	8003626 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	6819      	ldr	r1, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	461a      	mov	r2, r3
 800321a:	f7ff fc87 	bl	8002b2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <HAL_ADC_ConfigChannel+0x290>)
 8003224:	4293      	cmp	r3, r2
 8003226:	f040 8133 	bne.w	8003490 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003236:	2b00      	cmp	r3, #0
 8003238:	d110      	bne.n	800325c <HAL_ADC_ConfigChannel+0x298>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	0e9b      	lsrs	r3, r3, #26
 8003240:	3301      	adds	r3, #1
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2b09      	cmp	r3, #9
 8003248:	bf94      	ite	ls
 800324a:	2301      	movls	r3, #1
 800324c:	2300      	movhi	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e01e      	b.n	8003290 <HAL_ADC_ConfigChannel+0x2cc>
 8003252:	bf00      	nop
 8003254:	47ff0000 	.word	0x47ff0000
 8003258:	5c001000 	.word	0x5c001000
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800326a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800326e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003274:	2320      	movs	r3, #32
 8003276:	e003      	b.n	8003280 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2b09      	cmp	r3, #9
 8003288:	bf94      	ite	ls
 800328a:	2301      	movls	r3, #1
 800328c:	2300      	movhi	r3, #0
 800328e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003290:	2b00      	cmp	r3, #0
 8003292:	d079      	beq.n	8003388 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800329c:	2b00      	cmp	r3, #0
 800329e:	d107      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x2ec>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0e9b      	lsrs	r3, r3, #26
 80032a6:	3301      	adds	r3, #1
 80032a8:	069b      	lsls	r3, r3, #26
 80032aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032ae:	e015      	b.n	80032dc <HAL_ADC_ConfigChannel+0x318>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80032c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80032c8:	2320      	movs	r3, #32
 80032ca:	e003      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80032cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	069b      	lsls	r3, r3, #26
 80032d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x338>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0e9b      	lsrs	r3, r3, #26
 80032ee:	3301      	adds	r3, #1
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	2101      	movs	r1, #1
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	e017      	b.n	800332c <HAL_ADC_ConfigChannel+0x368>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800330e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003314:	2320      	movs	r3, #32
 8003316:	e003      	b.n	8003320 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	3301      	adds	r3, #1
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2101      	movs	r1, #1
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	ea42 0103 	orr.w	r1, r2, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x38e>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	3301      	adds	r3, #1
 8003344:	f003 021f 	and.w	r2, r3, #31
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	051b      	lsls	r3, r3, #20
 8003350:	e018      	b.n	8003384 <HAL_ADC_ConfigChannel+0x3c0>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800336a:	2320      	movs	r3, #32
 800336c:	e003      	b.n	8003376 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	3301      	adds	r3, #1
 8003378:	f003 021f 	and.w	r2, r3, #31
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003384:	430b      	orrs	r3, r1
 8003386:	e07e      	b.n	8003486 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003390:	2b00      	cmp	r3, #0
 8003392:	d107      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x3e0>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0e9b      	lsrs	r3, r3, #26
 800339a:	3301      	adds	r3, #1
 800339c:	069b      	lsls	r3, r3, #26
 800339e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033a2:	e015      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x40c>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80033bc:	2320      	movs	r3, #32
 80033be:	e003      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	069b      	lsls	r3, r3, #26
 80033cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x42c>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	0e9b      	lsrs	r3, r3, #26
 80033e2:	3301      	adds	r3, #1
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2101      	movs	r1, #1
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	e017      	b.n	8003420 <HAL_ADC_ConfigChannel+0x45c>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	61bb      	str	r3, [r7, #24]
  return result;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003408:	2320      	movs	r3, #32
 800340a:	e003      	b.n	8003414 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	3301      	adds	r3, #1
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	2101      	movs	r1, #1
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	ea42 0103 	orr.w	r1, r2, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10d      	bne.n	800344c <HAL_ADC_ConfigChannel+0x488>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0e9b      	lsrs	r3, r3, #26
 8003436:	3301      	adds	r3, #1
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	3b1e      	subs	r3, #30
 8003444:	051b      	lsls	r3, r3, #20
 8003446:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800344a:	e01b      	b.n	8003484 <HAL_ADC_ConfigChannel+0x4c0>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	60fb      	str	r3, [r7, #12]
  return result;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003464:	2320      	movs	r3, #32
 8003466:	e003      	b.n	8003470 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	3301      	adds	r3, #1
 8003472:	f003 021f 	and.w	r2, r3, #31
 8003476:	4613      	mov	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4413      	add	r3, r2
 800347c:	3b1e      	subs	r3, #30
 800347e:	051b      	lsls	r3, r3, #20
 8003480:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003484:	430b      	orrs	r3, r1
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	6892      	ldr	r2, [r2, #8]
 800348a:	4619      	mov	r1, r3
 800348c:	f7ff fb22 	bl	8002ad4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f280 80c6 	bge.w	8003626 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a67      	ldr	r2, [pc, #412]	; (800363c <HAL_ADC_ConfigChannel+0x678>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_ADC_ConfigChannel+0x4ea>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a65      	ldr	r2, [pc, #404]	; (8003640 <HAL_ADC_ConfigChannel+0x67c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x4ee>
 80034ae:	4b65      	ldr	r3, [pc, #404]	; (8003644 <HAL_ADC_ConfigChannel+0x680>)
 80034b0:	e000      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x4f0>
 80034b2:	4b65      	ldr	r3, [pc, #404]	; (8003648 <HAL_ADC_ConfigChannel+0x684>)
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fa7f 	bl	80029b8 <LL_ADC_GetCommonPathInternalCh>
 80034ba:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a5e      	ldr	r2, [pc, #376]	; (800363c <HAL_ADC_ConfigChannel+0x678>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_ADC_ConfigChannel+0x50c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a5d      	ldr	r2, [pc, #372]	; (8003640 <HAL_ADC_ConfigChannel+0x67c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10e      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x52a>
 80034d0:	485a      	ldr	r0, [pc, #360]	; (800363c <HAL_ADC_ConfigChannel+0x678>)
 80034d2:	f7ff fb9d 	bl	8002c10 <LL_ADC_IsEnabled>
 80034d6:	4604      	mov	r4, r0
 80034d8:	4859      	ldr	r0, [pc, #356]	; (8003640 <HAL_ADC_ConfigChannel+0x67c>)
 80034da:	f7ff fb99 	bl	8002c10 <LL_ADC_IsEnabled>
 80034de:	4603      	mov	r3, r0
 80034e0:	4323      	orrs	r3, r4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf0c      	ite	eq
 80034e6:	2301      	moveq	r3, #1
 80034e8:	2300      	movne	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	e008      	b.n	8003500 <HAL_ADC_ConfigChannel+0x53c>
 80034ee:	4857      	ldr	r0, [pc, #348]	; (800364c <HAL_ADC_ConfigChannel+0x688>)
 80034f0:	f7ff fb8e 	bl	8002c10 <LL_ADC_IsEnabled>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d07d      	beq.n	8003600 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a51      	ldr	r2, [pc, #324]	; (8003650 <HAL_ADC_ConfigChannel+0x68c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d130      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x5ac>
 800350e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d12b      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a4b      	ldr	r2, [pc, #300]	; (800364c <HAL_ADC_ConfigChannel+0x688>)
 800351e:	4293      	cmp	r3, r2
 8003520:	f040 8081 	bne.w	8003626 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a44      	ldr	r2, [pc, #272]	; (800363c <HAL_ADC_ConfigChannel+0x678>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_ADC_ConfigChannel+0x574>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a43      	ldr	r2, [pc, #268]	; (8003640 <HAL_ADC_ConfigChannel+0x67c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x578>
 8003538:	4a42      	ldr	r2, [pc, #264]	; (8003644 <HAL_ADC_ConfigChannel+0x680>)
 800353a:	e000      	b.n	800353e <HAL_ADC_ConfigChannel+0x57a>
 800353c:	4a42      	ldr	r2, [pc, #264]	; (8003648 <HAL_ADC_ConfigChannel+0x684>)
 800353e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003540:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f7ff fa23 	bl	8002992 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800354c:	4b41      	ldr	r3, [pc, #260]	; (8003654 <HAL_ADC_ConfigChannel+0x690>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	4a41      	ldr	r2, [pc, #260]	; (8003658 <HAL_ADC_ConfigChannel+0x694>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	3301      	adds	r3, #1
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003560:	e002      	b.n	8003568 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	3b01      	subs	r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f9      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800356e:	e05a      	b.n	8003626 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a39      	ldr	r2, [pc, #228]	; (800365c <HAL_ADC_ConfigChannel+0x698>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d11e      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x5f4>
 800357a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d119      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a30      	ldr	r2, [pc, #192]	; (800364c <HAL_ADC_ConfigChannel+0x688>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d14b      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2a      	ldr	r2, [pc, #168]	; (800363c <HAL_ADC_ConfigChannel+0x678>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_ADC_ConfigChannel+0x5de>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a28      	ldr	r2, [pc, #160]	; (8003640 <HAL_ADC_ConfigChannel+0x67c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x5e2>
 80035a2:	4a28      	ldr	r2, [pc, #160]	; (8003644 <HAL_ADC_ConfigChannel+0x680>)
 80035a4:	e000      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x5e4>
 80035a6:	4a28      	ldr	r2, [pc, #160]	; (8003648 <HAL_ADC_ConfigChannel+0x684>)
 80035a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f7ff f9ee 	bl	8002992 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b6:	e036      	b.n	8003626 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a28      	ldr	r2, [pc, #160]	; (8003660 <HAL_ADC_ConfigChannel+0x69c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d131      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x662>
 80035c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d12c      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1e      	ldr	r2, [pc, #120]	; (800364c <HAL_ADC_ConfigChannel+0x688>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d127      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a18      	ldr	r2, [pc, #96]	; (800363c <HAL_ADC_ConfigChannel+0x678>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x626>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a16      	ldr	r2, [pc, #88]	; (8003640 <HAL_ADC_ConfigChannel+0x67c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x62a>
 80035ea:	4a16      	ldr	r2, [pc, #88]	; (8003644 <HAL_ADC_ConfigChannel+0x680>)
 80035ec:	e000      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x62c>
 80035ee:	4a16      	ldr	r2, [pc, #88]	; (8003648 <HAL_ADC_ConfigChannel+0x684>)
 80035f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f7ff f9ca 	bl	8002992 <LL_ADC_SetCommonPathInternalCh>
 80035fe:	e012      	b.n	8003626 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003612:	e008      	b.n	8003626 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800362e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003632:	4618      	mov	r0, r3
 8003634:	3784      	adds	r7, #132	; 0x84
 8003636:	46bd      	mov	sp, r7
 8003638:	bd90      	pop	{r4, r7, pc}
 800363a:	bf00      	nop
 800363c:	40022000 	.word	0x40022000
 8003640:	40022100 	.word	0x40022100
 8003644:	40022300 	.word	0x40022300
 8003648:	58026300 	.word	0x58026300
 800364c:	58026000 	.word	0x58026000
 8003650:	cb840000 	.word	0xcb840000
 8003654:	24000000 	.word	0x24000000
 8003658:	053e2d63 	.word	0x053e2d63
 800365c:	c7520000 	.word	0xc7520000
 8003660:	cfb80000 	.word	0xcfb80000

08003664 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a79      	ldr	r2, [pc, #484]	; (8003858 <ADC_ConfigureBoostMode+0x1f4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <ADC_ConfigureBoostMode+0x1c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a78      	ldr	r2, [pc, #480]	; (800385c <ADC_ConfigureBoostMode+0x1f8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d109      	bne.n	8003694 <ADC_ConfigureBoostMode+0x30>
 8003680:	4b77      	ldr	r3, [pc, #476]	; (8003860 <ADC_ConfigureBoostMode+0x1fc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e008      	b.n	80036a6 <ADC_ConfigureBoostMode+0x42>
 8003694:	4b73      	ldr	r3, [pc, #460]	; (8003864 <ADC_ConfigureBoostMode+0x200>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d01c      	beq.n	80036e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80036aa:	f003 fd8d 	bl	80071c8 <HAL_RCC_GetHCLKFreq>
 80036ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036b8:	d010      	beq.n	80036dc <ADC_ConfigureBoostMode+0x78>
 80036ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036be:	d871      	bhi.n	80037a4 <ADC_ConfigureBoostMode+0x140>
 80036c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c4:	d002      	beq.n	80036cc <ADC_ConfigureBoostMode+0x68>
 80036c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036ca:	d16b      	bne.n	80037a4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	60fb      	str	r3, [r7, #12]
        break;
 80036da:	e066      	b.n	80037aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	60fb      	str	r3, [r7, #12]
        break;
 80036e2:	e062      	b.n	80037aa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80036e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80036e8:	f004 fd0a 	bl	8008100 <HAL_RCCEx_GetPeriphCLKFreq>
 80036ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80036f6:	d051      	beq.n	800379c <ADC_ConfigureBoostMode+0x138>
 80036f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80036fc:	d854      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x144>
 80036fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003702:	d047      	beq.n	8003794 <ADC_ConfigureBoostMode+0x130>
 8003704:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003708:	d84e      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x144>
 800370a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800370e:	d03d      	beq.n	800378c <ADC_ConfigureBoostMode+0x128>
 8003710:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003714:	d848      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x144>
 8003716:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800371a:	d033      	beq.n	8003784 <ADC_ConfigureBoostMode+0x120>
 800371c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003720:	d842      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x144>
 8003722:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003726:	d029      	beq.n	800377c <ADC_ConfigureBoostMode+0x118>
 8003728:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800372c:	d83c      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x144>
 800372e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003732:	d01a      	beq.n	800376a <ADC_ConfigureBoostMode+0x106>
 8003734:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003738:	d836      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x144>
 800373a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800373e:	d014      	beq.n	800376a <ADC_ConfigureBoostMode+0x106>
 8003740:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003744:	d830      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x144>
 8003746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800374a:	d00e      	beq.n	800376a <ADC_ConfigureBoostMode+0x106>
 800374c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003750:	d82a      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x144>
 8003752:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003756:	d008      	beq.n	800376a <ADC_ConfigureBoostMode+0x106>
 8003758:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800375c:	d824      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x144>
 800375e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003762:	d002      	beq.n	800376a <ADC_ConfigureBoostMode+0x106>
 8003764:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003768:	d11e      	bne.n	80037a8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	0c9b      	lsrs	r3, r3, #18
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	60fb      	str	r3, [r7, #12]
        break;
 800377a:	e016      	b.n	80037aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	60fb      	str	r3, [r7, #12]
        break;
 8003782:	e012      	b.n	80037aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	60fb      	str	r3, [r7, #12]
        break;
 800378a:	e00e      	b.n	80037aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	099b      	lsrs	r3, r3, #6
 8003790:	60fb      	str	r3, [r7, #12]
        break;
 8003792:	e00a      	b.n	80037aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	09db      	lsrs	r3, r3, #7
 8003798:	60fb      	str	r3, [r7, #12]
        break;
 800379a:	e006      	b.n	80037aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	60fb      	str	r3, [r7, #12]
        break;
 80037a2:	e002      	b.n	80037aa <ADC_ConfigureBoostMode+0x146>
        break;
 80037a4:	bf00      	nop
 80037a6:	e000      	b.n	80037aa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80037a8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80037aa:	f7ff f8a9 	bl	8002900 <HAL_GetREVID>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d815      	bhi.n	80037e4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a2b      	ldr	r2, [pc, #172]	; (8003868 <ADC_ConfigureBoostMode+0x204>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d908      	bls.n	80037d2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80037d0:	e03e      	b.n	8003850 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e0:	609a      	str	r2, [r3, #8]
}
 80037e2:	e035      	b.n	8003850 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a1f      	ldr	r2, [pc, #124]	; (800386c <ADC_ConfigureBoostMode+0x208>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d808      	bhi.n	8003804 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003800:	609a      	str	r2, [r3, #8]
}
 8003802:	e025      	b.n	8003850 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <ADC_ConfigureBoostMode+0x20c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d80a      	bhi.n	8003822 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	e016      	b.n	8003850 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <ADC_ConfigureBoostMode+0x210>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d80a      	bhi.n	8003840 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383c:	609a      	str	r2, [r3, #8]
}
 800383e:	e007      	b.n	8003850 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800384e:	609a      	str	r2, [r3, #8]
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40022000 	.word	0x40022000
 800385c:	40022100 	.word	0x40022100
 8003860:	40022300 	.word	0x40022300
 8003864:	58026300 	.word	0x58026300
 8003868:	01312d00 	.word	0x01312d00
 800386c:	005f5e10 	.word	0x005f5e10
 8003870:	00bebc20 	.word	0x00bebc20
 8003874:	017d7840 	.word	0x017d7840

08003878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <__NVIC_SetPriorityGrouping+0x40>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003894:	4013      	ands	r3, r2
 8003896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <__NVIC_SetPriorityGrouping+0x44>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038a6:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <__NVIC_SetPriorityGrouping+0x40>)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	60d3      	str	r3, [r2, #12]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000ed00 	.word	0xe000ed00
 80038bc:	05fa0000 	.word	0x05fa0000

080038c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <__NVIC_GetPriorityGrouping+0x18>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	f003 0307 	and.w	r3, r3, #7
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	db0b      	blt.n	8003906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	f003 021f 	and.w	r2, r3, #31
 80038f4:	4907      	ldr	r1, [pc, #28]	; (8003914 <__NVIC_EnableIRQ+0x38>)
 80038f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2001      	movs	r0, #1
 80038fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	e000e100 	.word	0xe000e100

08003918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003928:	2b00      	cmp	r3, #0
 800392a:	db0a      	blt.n	8003942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	490c      	ldr	r1, [pc, #48]	; (8003964 <__NVIC_SetPriority+0x4c>)
 8003932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003936:	0112      	lsls	r2, r2, #4
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	440b      	add	r3, r1
 800393c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003940:	e00a      	b.n	8003958 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4908      	ldr	r1, [pc, #32]	; (8003968 <__NVIC_SetPriority+0x50>)
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	3b04      	subs	r3, #4
 8003950:	0112      	lsls	r2, r2, #4
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	440b      	add	r3, r1
 8003956:	761a      	strb	r2, [r3, #24]
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000e100 	.word	0xe000e100
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	; 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f1c3 0307 	rsb	r3, r3, #7
 8003986:	2b04      	cmp	r3, #4
 8003988:	bf28      	it	cs
 800398a:	2304      	movcs	r3, #4
 800398c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3304      	adds	r3, #4
 8003992:	2b06      	cmp	r3, #6
 8003994:	d902      	bls.n	800399c <NVIC_EncodePriority+0x30>
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3b03      	subs	r3, #3
 800399a:	e000      	b.n	800399e <NVIC_EncodePriority+0x32>
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	401a      	ands	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b4:	f04f 31ff 	mov.w	r1, #4294967295
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	43d9      	mvns	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c4:	4313      	orrs	r3, r2
         );
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e4:	d301      	bcc.n	80039ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039e6:	2301      	movs	r3, #1
 80039e8:	e00f      	b.n	8003a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ea:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <SysTick_Config+0x40>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039f2:	210f      	movs	r1, #15
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	f7ff ff8e 	bl	8003918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <SysTick_Config+0x40>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a02:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <SysTick_Config+0x40>)
 8003a04:	2207      	movs	r2, #7
 8003a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	e000e010 	.word	0xe000e010

08003a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ff29 	bl	8003878 <__NVIC_SetPriorityGrouping>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b086      	sub	sp, #24
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
 8003a3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a3c:	f7ff ff40 	bl	80038c0 <__NVIC_GetPriorityGrouping>
 8003a40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	6978      	ldr	r0, [r7, #20]
 8003a48:	f7ff ff90 	bl	800396c <NVIC_EncodePriority>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff ff5f 	bl	8003918 <__NVIC_SetPriority>
}
 8003a5a:	bf00      	nop
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	4603      	mov	r3, r0
 8003a6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff ff33 	bl	80038dc <__NVIC_EnableIRQ>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ffa4 	bl	80039d4 <SysTick_Config>
 8003a8c:	4603      	mov	r3, r0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003aa0:	f7fe fefe 	bl	80028a0 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e316      	b.n	80040de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a66      	ldr	r2, [pc, #408]	; (8003c50 <HAL_DMA_Init+0x1b8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d04a      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a65      	ldr	r2, [pc, #404]	; (8003c54 <HAL_DMA_Init+0x1bc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d045      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a63      	ldr	r2, [pc, #396]	; (8003c58 <HAL_DMA_Init+0x1c0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d040      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a62      	ldr	r2, [pc, #392]	; (8003c5c <HAL_DMA_Init+0x1c4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d03b      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a60      	ldr	r2, [pc, #384]	; (8003c60 <HAL_DMA_Init+0x1c8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d036      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a5f      	ldr	r2, [pc, #380]	; (8003c64 <HAL_DMA_Init+0x1cc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d031      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a5d      	ldr	r2, [pc, #372]	; (8003c68 <HAL_DMA_Init+0x1d0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d02c      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a5c      	ldr	r2, [pc, #368]	; (8003c6c <HAL_DMA_Init+0x1d4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d027      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a5a      	ldr	r2, [pc, #360]	; (8003c70 <HAL_DMA_Init+0x1d8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d022      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a59      	ldr	r2, [pc, #356]	; (8003c74 <HAL_DMA_Init+0x1dc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d01d      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a57      	ldr	r2, [pc, #348]	; (8003c78 <HAL_DMA_Init+0x1e0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a56      	ldr	r2, [pc, #344]	; (8003c7c <HAL_DMA_Init+0x1e4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a54      	ldr	r2, [pc, #336]	; (8003c80 <HAL_DMA_Init+0x1e8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a53      	ldr	r2, [pc, #332]	; (8003c84 <HAL_DMA_Init+0x1ec>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a51      	ldr	r2, [pc, #324]	; (8003c88 <HAL_DMA_Init+0x1f0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_DMA_Init+0xb8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a50      	ldr	r2, [pc, #320]	; (8003c8c <HAL_DMA_Init+0x1f4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_DMA_Init+0xbc>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_DMA_Init+0xbe>
 8003b54:	2300      	movs	r3, #0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 813b 	beq.w	8003dd2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a37      	ldr	r2, [pc, #220]	; (8003c50 <HAL_DMA_Init+0x1b8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d04a      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a36      	ldr	r2, [pc, #216]	; (8003c54 <HAL_DMA_Init+0x1bc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d045      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a34      	ldr	r2, [pc, #208]	; (8003c58 <HAL_DMA_Init+0x1c0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d040      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a33      	ldr	r2, [pc, #204]	; (8003c5c <HAL_DMA_Init+0x1c4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d03b      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a31      	ldr	r2, [pc, #196]	; (8003c60 <HAL_DMA_Init+0x1c8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d036      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a30      	ldr	r2, [pc, #192]	; (8003c64 <HAL_DMA_Init+0x1cc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d031      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2e      	ldr	r2, [pc, #184]	; (8003c68 <HAL_DMA_Init+0x1d0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d02c      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2d      	ldr	r2, [pc, #180]	; (8003c6c <HAL_DMA_Init+0x1d4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d027      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2b      	ldr	r2, [pc, #172]	; (8003c70 <HAL_DMA_Init+0x1d8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d022      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2a      	ldr	r2, [pc, #168]	; (8003c74 <HAL_DMA_Init+0x1dc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d01d      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a28      	ldr	r2, [pc, #160]	; (8003c78 <HAL_DMA_Init+0x1e0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d018      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a27      	ldr	r2, [pc, #156]	; (8003c7c <HAL_DMA_Init+0x1e4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d013      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <HAL_DMA_Init+0x1e8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00e      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a24      	ldr	r2, [pc, #144]	; (8003c84 <HAL_DMA_Init+0x1ec>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d009      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <HAL_DMA_Init+0x1f0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <HAL_DMA_Init+0x174>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a21      	ldr	r2, [pc, #132]	; (8003c8c <HAL_DMA_Init+0x1f4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d108      	bne.n	8003c1e <HAL_DMA_Init+0x186>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0201 	bic.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e007      	b.n	8003c2e <HAL_DMA_Init+0x196>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c2e:	e02f      	b.n	8003c90 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c30:	f7fe fe36 	bl	80028a0 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d928      	bls.n	8003c90 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2203      	movs	r2, #3
 8003c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e246      	b.n	80040de <HAL_DMA_Init+0x646>
 8003c50:	40020010 	.word	0x40020010
 8003c54:	40020028 	.word	0x40020028
 8003c58:	40020040 	.word	0x40020040
 8003c5c:	40020058 	.word	0x40020058
 8003c60:	40020070 	.word	0x40020070
 8003c64:	40020088 	.word	0x40020088
 8003c68:	400200a0 	.word	0x400200a0
 8003c6c:	400200b8 	.word	0x400200b8
 8003c70:	40020410 	.word	0x40020410
 8003c74:	40020428 	.word	0x40020428
 8003c78:	40020440 	.word	0x40020440
 8003c7c:	40020458 	.word	0x40020458
 8003c80:	40020470 	.word	0x40020470
 8003c84:	40020488 	.word	0x40020488
 8003c88:	400204a0 	.word	0x400204a0
 8003c8c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1c8      	bne.n	8003c30 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4b83      	ldr	r3, [pc, #524]	; (8003eb8 <HAL_DMA_Init+0x420>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003cb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d107      	bne.n	8003cf4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	4313      	orrs	r3, r2
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003cf4:	4b71      	ldr	r3, [pc, #452]	; (8003ebc <HAL_DMA_Init+0x424>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4b71      	ldr	r3, [pc, #452]	; (8003ec0 <HAL_DMA_Init+0x428>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d00:	d328      	bcc.n	8003d54 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b28      	cmp	r3, #40	; 0x28
 8003d08:	d903      	bls.n	8003d12 <HAL_DMA_Init+0x27a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d10:	d917      	bls.n	8003d42 <HAL_DMA_Init+0x2aa>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b3e      	cmp	r3, #62	; 0x3e
 8003d18:	d903      	bls.n	8003d22 <HAL_DMA_Init+0x28a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b42      	cmp	r3, #66	; 0x42
 8003d20:	d90f      	bls.n	8003d42 <HAL_DMA_Init+0x2aa>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b46      	cmp	r3, #70	; 0x46
 8003d28:	d903      	bls.n	8003d32 <HAL_DMA_Init+0x29a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b48      	cmp	r3, #72	; 0x48
 8003d30:	d907      	bls.n	8003d42 <HAL_DMA_Init+0x2aa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b4e      	cmp	r3, #78	; 0x4e
 8003d38:	d905      	bls.n	8003d46 <HAL_DMA_Init+0x2ae>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b52      	cmp	r3, #82	; 0x52
 8003d40:	d801      	bhi.n	8003d46 <HAL_DMA_Init+0x2ae>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_DMA_Init+0x2b0>
 8003d46:	2300      	movs	r3, #0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d52:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f023 0307 	bic.w	r3, r3, #7
 8003d6a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d117      	bne.n	8003dae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00e      	beq.n	8003dae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f001 f9b9 	bl	8005108 <DMA_CheckFifoParam>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2240      	movs	r2, #64	; 0x40
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e197      	b.n	80040de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f001 f8f4 	bl	8004fa4 <DMA_CalcBaseAndBitshift>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	223f      	movs	r2, #63	; 0x3f
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	e0cd      	b.n	8003f6e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a3b      	ldr	r2, [pc, #236]	; (8003ec4 <HAL_DMA_Init+0x42c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d022      	beq.n	8003e22 <HAL_DMA_Init+0x38a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a39      	ldr	r2, [pc, #228]	; (8003ec8 <HAL_DMA_Init+0x430>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01d      	beq.n	8003e22 <HAL_DMA_Init+0x38a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a38      	ldr	r2, [pc, #224]	; (8003ecc <HAL_DMA_Init+0x434>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d018      	beq.n	8003e22 <HAL_DMA_Init+0x38a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a36      	ldr	r2, [pc, #216]	; (8003ed0 <HAL_DMA_Init+0x438>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_DMA_Init+0x38a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a35      	ldr	r2, [pc, #212]	; (8003ed4 <HAL_DMA_Init+0x43c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00e      	beq.n	8003e22 <HAL_DMA_Init+0x38a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a33      	ldr	r2, [pc, #204]	; (8003ed8 <HAL_DMA_Init+0x440>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_DMA_Init+0x38a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a32      	ldr	r2, [pc, #200]	; (8003edc <HAL_DMA_Init+0x444>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d004      	beq.n	8003e22 <HAL_DMA_Init+0x38a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a30      	ldr	r2, [pc, #192]	; (8003ee0 <HAL_DMA_Init+0x448>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_DMA_Init+0x38e>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_DMA_Init+0x390>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8097 	beq.w	8003f5c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a24      	ldr	r2, [pc, #144]	; (8003ec4 <HAL_DMA_Init+0x42c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d021      	beq.n	8003e7c <HAL_DMA_Init+0x3e4>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a22      	ldr	r2, [pc, #136]	; (8003ec8 <HAL_DMA_Init+0x430>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01c      	beq.n	8003e7c <HAL_DMA_Init+0x3e4>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a21      	ldr	r2, [pc, #132]	; (8003ecc <HAL_DMA_Init+0x434>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d017      	beq.n	8003e7c <HAL_DMA_Init+0x3e4>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <HAL_DMA_Init+0x438>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d012      	beq.n	8003e7c <HAL_DMA_Init+0x3e4>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ed4 <HAL_DMA_Init+0x43c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00d      	beq.n	8003e7c <HAL_DMA_Init+0x3e4>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <HAL_DMA_Init+0x440>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d008      	beq.n	8003e7c <HAL_DMA_Init+0x3e4>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	; (8003edc <HAL_DMA_Init+0x444>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <HAL_DMA_Init+0x3e4>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_DMA_Init+0x448>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2202      	movs	r2, #2
 8003e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_DMA_Init+0x44c>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d020      	beq.n	8003ee8 <HAL_DMA_Init+0x450>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b80      	cmp	r3, #128	; 0x80
 8003eac:	d102      	bne.n	8003eb4 <HAL_DMA_Init+0x41c>
 8003eae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003eb2:	e01a      	b.n	8003eea <HAL_DMA_Init+0x452>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e018      	b.n	8003eea <HAL_DMA_Init+0x452>
 8003eb8:	fe10803f 	.word	0xfe10803f
 8003ebc:	5c001000 	.word	0x5c001000
 8003ec0:	ffff0000 	.word	0xffff0000
 8003ec4:	58025408 	.word	0x58025408
 8003ec8:	5802541c 	.word	0x5802541c
 8003ecc:	58025430 	.word	0x58025430
 8003ed0:	58025444 	.word	0x58025444
 8003ed4:	58025458 	.word	0x58025458
 8003ed8:	5802546c 	.word	0x5802546c
 8003edc:	58025480 	.word	0x58025480
 8003ee0:	58025494 	.word	0x58025494
 8003ee4:	fffe000f 	.word	0xfffe000f
 8003ee8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68d2      	ldr	r2, [r2, #12]
 8003eee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ef0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ef8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f18:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b6e      	ldr	r3, [pc, #440]	; (80040e8 <HAL_DMA_Init+0x650>)
 8003f30:	4413      	add	r3, r2
 8003f32:	4a6e      	ldr	r2, [pc, #440]	; (80040ec <HAL_DMA_Init+0x654>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	009a      	lsls	r2, r3, #2
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f001 f82f 	bl	8004fa4 <DMA_CalcBaseAndBitshift>
 8003f46:	4603      	mov	r3, r0
 8003f48:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2201      	movs	r2, #1
 8003f54:	409a      	lsls	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	e008      	b.n	8003f6e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2240      	movs	r2, #64	; 0x40
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2203      	movs	r2, #3
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0b7      	b.n	80040de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a5f      	ldr	r2, [pc, #380]	; (80040f0 <HAL_DMA_Init+0x658>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d072      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a5d      	ldr	r2, [pc, #372]	; (80040f4 <HAL_DMA_Init+0x65c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d06d      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a5c      	ldr	r2, [pc, #368]	; (80040f8 <HAL_DMA_Init+0x660>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d068      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a5a      	ldr	r2, [pc, #360]	; (80040fc <HAL_DMA_Init+0x664>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d063      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a59      	ldr	r2, [pc, #356]	; (8004100 <HAL_DMA_Init+0x668>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d05e      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a57      	ldr	r2, [pc, #348]	; (8004104 <HAL_DMA_Init+0x66c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d059      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a56      	ldr	r2, [pc, #344]	; (8004108 <HAL_DMA_Init+0x670>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d054      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a54      	ldr	r2, [pc, #336]	; (800410c <HAL_DMA_Init+0x674>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d04f      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a53      	ldr	r2, [pc, #332]	; (8004110 <HAL_DMA_Init+0x678>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d04a      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a51      	ldr	r2, [pc, #324]	; (8004114 <HAL_DMA_Init+0x67c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d045      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a50      	ldr	r2, [pc, #320]	; (8004118 <HAL_DMA_Init+0x680>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d040      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a4e      	ldr	r2, [pc, #312]	; (800411c <HAL_DMA_Init+0x684>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d03b      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a4d      	ldr	r2, [pc, #308]	; (8004120 <HAL_DMA_Init+0x688>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d036      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a4b      	ldr	r2, [pc, #300]	; (8004124 <HAL_DMA_Init+0x68c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d031      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a4a      	ldr	r2, [pc, #296]	; (8004128 <HAL_DMA_Init+0x690>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d02c      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a48      	ldr	r2, [pc, #288]	; (800412c <HAL_DMA_Init+0x694>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d027      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a47      	ldr	r2, [pc, #284]	; (8004130 <HAL_DMA_Init+0x698>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d022      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a45      	ldr	r2, [pc, #276]	; (8004134 <HAL_DMA_Init+0x69c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01d      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a44      	ldr	r2, [pc, #272]	; (8004138 <HAL_DMA_Init+0x6a0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a42      	ldr	r2, [pc, #264]	; (800413c <HAL_DMA_Init+0x6a4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a41      	ldr	r2, [pc, #260]	; (8004140 <HAL_DMA_Init+0x6a8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a3f      	ldr	r2, [pc, #252]	; (8004144 <HAL_DMA_Init+0x6ac>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a3e      	ldr	r2, [pc, #248]	; (8004148 <HAL_DMA_Init+0x6b0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <HAL_DMA_Init+0x5c6>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a3c      	ldr	r2, [pc, #240]	; (800414c <HAL_DMA_Init+0x6b4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d101      	bne.n	8004062 <HAL_DMA_Init+0x5ca>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <HAL_DMA_Init+0x5cc>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d032      	beq.n	80040ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f001 f8c9 	bl	8005200 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b80      	cmp	r3, #128	; 0x80
 8004074:	d102      	bne.n	800407c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004090:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d010      	beq.n	80040bc <HAL_DMA_Init+0x624>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d80c      	bhi.n	80040bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f001 f946 	bl	8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	e008      	b.n	80040ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	a7fdabf8 	.word	0xa7fdabf8
 80040ec:	cccccccd 	.word	0xcccccccd
 80040f0:	40020010 	.word	0x40020010
 80040f4:	40020028 	.word	0x40020028
 80040f8:	40020040 	.word	0x40020040
 80040fc:	40020058 	.word	0x40020058
 8004100:	40020070 	.word	0x40020070
 8004104:	40020088 	.word	0x40020088
 8004108:	400200a0 	.word	0x400200a0
 800410c:	400200b8 	.word	0x400200b8
 8004110:	40020410 	.word	0x40020410
 8004114:	40020428 	.word	0x40020428
 8004118:	40020440 	.word	0x40020440
 800411c:	40020458 	.word	0x40020458
 8004120:	40020470 	.word	0x40020470
 8004124:	40020488 	.word	0x40020488
 8004128:	400204a0 	.word	0x400204a0
 800412c:	400204b8 	.word	0x400204b8
 8004130:	58025408 	.word	0x58025408
 8004134:	5802541c 	.word	0x5802541c
 8004138:	58025430 	.word	0x58025430
 800413c:	58025444 	.word	0x58025444
 8004140:	58025458 	.word	0x58025458
 8004144:	5802546c 	.word	0x5802546c
 8004148:	58025480 	.word	0x58025480
 800414c:	58025494 	.word	0x58025494

08004150 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	; 0x28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800415c:	4b67      	ldr	r3, [pc, #412]	; (80042fc <HAL_DMA_IRQHandler+0x1ac>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a67      	ldr	r2, [pc, #412]	; (8004300 <HAL_DMA_IRQHandler+0x1b0>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	0a9b      	lsrs	r3, r3, #10
 8004168:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004174:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a5f      	ldr	r2, [pc, #380]	; (8004304 <HAL_DMA_IRQHandler+0x1b4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d04a      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a5d      	ldr	r2, [pc, #372]	; (8004308 <HAL_DMA_IRQHandler+0x1b8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d045      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a5c      	ldr	r2, [pc, #368]	; (800430c <HAL_DMA_IRQHandler+0x1bc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d040      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a5a      	ldr	r2, [pc, #360]	; (8004310 <HAL_DMA_IRQHandler+0x1c0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d03b      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a59      	ldr	r2, [pc, #356]	; (8004314 <HAL_DMA_IRQHandler+0x1c4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d036      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a57      	ldr	r2, [pc, #348]	; (8004318 <HAL_DMA_IRQHandler+0x1c8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d031      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a56      	ldr	r2, [pc, #344]	; (800431c <HAL_DMA_IRQHandler+0x1cc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d02c      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a54      	ldr	r2, [pc, #336]	; (8004320 <HAL_DMA_IRQHandler+0x1d0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d027      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a53      	ldr	r2, [pc, #332]	; (8004324 <HAL_DMA_IRQHandler+0x1d4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d022      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a51      	ldr	r2, [pc, #324]	; (8004328 <HAL_DMA_IRQHandler+0x1d8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01d      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a50      	ldr	r2, [pc, #320]	; (800432c <HAL_DMA_IRQHandler+0x1dc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d018      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a4e      	ldr	r2, [pc, #312]	; (8004330 <HAL_DMA_IRQHandler+0x1e0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a4d      	ldr	r2, [pc, #308]	; (8004334 <HAL_DMA_IRQHandler+0x1e4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00e      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a4b      	ldr	r2, [pc, #300]	; (8004338 <HAL_DMA_IRQHandler+0x1e8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a4a      	ldr	r2, [pc, #296]	; (800433c <HAL_DMA_IRQHandler+0x1ec>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_DMA_IRQHandler+0xd2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a48      	ldr	r2, [pc, #288]	; (8004340 <HAL_DMA_IRQHandler+0x1f0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_DMA_IRQHandler+0xd6>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_DMA_IRQHandler+0xd8>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 842b 	beq.w	8004a84 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2208      	movs	r2, #8
 8004238:	409a      	lsls	r2, r3
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80a2 	beq.w	8004388 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2e      	ldr	r2, [pc, #184]	; (8004304 <HAL_DMA_IRQHandler+0x1b4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d04a      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2d      	ldr	r2, [pc, #180]	; (8004308 <HAL_DMA_IRQHandler+0x1b8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d045      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2b      	ldr	r2, [pc, #172]	; (800430c <HAL_DMA_IRQHandler+0x1bc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d040      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2a      	ldr	r2, [pc, #168]	; (8004310 <HAL_DMA_IRQHandler+0x1c0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d03b      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a28      	ldr	r2, [pc, #160]	; (8004314 <HAL_DMA_IRQHandler+0x1c4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d036      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a27      	ldr	r2, [pc, #156]	; (8004318 <HAL_DMA_IRQHandler+0x1c8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d031      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a25      	ldr	r2, [pc, #148]	; (800431c <HAL_DMA_IRQHandler+0x1cc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02c      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a24      	ldr	r2, [pc, #144]	; (8004320 <HAL_DMA_IRQHandler+0x1d0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d027      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a22      	ldr	r2, [pc, #136]	; (8004324 <HAL_DMA_IRQHandler+0x1d4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d022      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a21      	ldr	r2, [pc, #132]	; (8004328 <HAL_DMA_IRQHandler+0x1d8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d01d      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_DMA_IRQHandler+0x1dc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d018      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <HAL_DMA_IRQHandler+0x1e0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_DMA_IRQHandler+0x1e4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00e      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <HAL_DMA_IRQHandler+0x1e8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a19      	ldr	r2, [pc, #100]	; (800433c <HAL_DMA_IRQHandler+0x1ec>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x194>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a18      	ldr	r2, [pc, #96]	; (8004340 <HAL_DMA_IRQHandler+0x1f0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d12f      	bne.n	8004344 <HAL_DMA_IRQHandler+0x1f4>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bf14      	ite	ne
 80042f2:	2301      	movne	r3, #1
 80042f4:	2300      	moveq	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	e02e      	b.n	8004358 <HAL_DMA_IRQHandler+0x208>
 80042fa:	bf00      	nop
 80042fc:	24000000 	.word	0x24000000
 8004300:	1b4e81b5 	.word	0x1b4e81b5
 8004304:	40020010 	.word	0x40020010
 8004308:	40020028 	.word	0x40020028
 800430c:	40020040 	.word	0x40020040
 8004310:	40020058 	.word	0x40020058
 8004314:	40020070 	.word	0x40020070
 8004318:	40020088 	.word	0x40020088
 800431c:	400200a0 	.word	0x400200a0
 8004320:	400200b8 	.word	0x400200b8
 8004324:	40020410 	.word	0x40020410
 8004328:	40020428 	.word	0x40020428
 800432c:	40020440 	.word	0x40020440
 8004330:	40020458 	.word	0x40020458
 8004334:	40020470 	.word	0x40020470
 8004338:	40020488 	.word	0x40020488
 800433c:	400204a0 	.word	0x400204a0
 8004340:	400204b8 	.word	0x400204b8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	bf14      	ite	ne
 8004352:	2301      	movne	r3, #1
 8004354:	2300      	moveq	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d015      	beq.n	8004388 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0204 	bic.w	r2, r2, #4
 800436a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	2208      	movs	r2, #8
 8004376:	409a      	lsls	r2, r3
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f043 0201 	orr.w	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d06e      	beq.n	800447c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a69      	ldr	r2, [pc, #420]	; (8004548 <HAL_DMA_IRQHandler+0x3f8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d04a      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a67      	ldr	r2, [pc, #412]	; (800454c <HAL_DMA_IRQHandler+0x3fc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d045      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a66      	ldr	r2, [pc, #408]	; (8004550 <HAL_DMA_IRQHandler+0x400>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d040      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a64      	ldr	r2, [pc, #400]	; (8004554 <HAL_DMA_IRQHandler+0x404>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d03b      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a63      	ldr	r2, [pc, #396]	; (8004558 <HAL_DMA_IRQHandler+0x408>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d036      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a61      	ldr	r2, [pc, #388]	; (800455c <HAL_DMA_IRQHandler+0x40c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d031      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a60      	ldr	r2, [pc, #384]	; (8004560 <HAL_DMA_IRQHandler+0x410>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d02c      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a5e      	ldr	r2, [pc, #376]	; (8004564 <HAL_DMA_IRQHandler+0x414>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d027      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a5d      	ldr	r2, [pc, #372]	; (8004568 <HAL_DMA_IRQHandler+0x418>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5b      	ldr	r2, [pc, #364]	; (800456c <HAL_DMA_IRQHandler+0x41c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01d      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a5a      	ldr	r2, [pc, #360]	; (8004570 <HAL_DMA_IRQHandler+0x420>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a58      	ldr	r2, [pc, #352]	; (8004574 <HAL_DMA_IRQHandler+0x424>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a57      	ldr	r2, [pc, #348]	; (8004578 <HAL_DMA_IRQHandler+0x428>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a55      	ldr	r2, [pc, #340]	; (800457c <HAL_DMA_IRQHandler+0x42c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a54      	ldr	r2, [pc, #336]	; (8004580 <HAL_DMA_IRQHandler+0x430>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_DMA_IRQHandler+0x2ee>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a52      	ldr	r2, [pc, #328]	; (8004584 <HAL_DMA_IRQHandler+0x434>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10a      	bne.n	8004454 <HAL_DMA_IRQHandler+0x304>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e003      	b.n	800445c <HAL_DMA_IRQHandler+0x30c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00d      	beq.n	800447c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2201      	movs	r2, #1
 800446a:	409a      	lsls	r2, r3
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004474:	f043 0202 	orr.w	r2, r3, #2
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	2204      	movs	r2, #4
 8004486:	409a      	lsls	r2, r3
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 808f 	beq.w	80045b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2c      	ldr	r2, [pc, #176]	; (8004548 <HAL_DMA_IRQHandler+0x3f8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d04a      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a2a      	ldr	r2, [pc, #168]	; (800454c <HAL_DMA_IRQHandler+0x3fc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d045      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a29      	ldr	r2, [pc, #164]	; (8004550 <HAL_DMA_IRQHandler+0x400>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d040      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a27      	ldr	r2, [pc, #156]	; (8004554 <HAL_DMA_IRQHandler+0x404>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d03b      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a26      	ldr	r2, [pc, #152]	; (8004558 <HAL_DMA_IRQHandler+0x408>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d036      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a24      	ldr	r2, [pc, #144]	; (800455c <HAL_DMA_IRQHandler+0x40c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d031      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a23      	ldr	r2, [pc, #140]	; (8004560 <HAL_DMA_IRQHandler+0x410>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d02c      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a21      	ldr	r2, [pc, #132]	; (8004564 <HAL_DMA_IRQHandler+0x414>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d027      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a20      	ldr	r2, [pc, #128]	; (8004568 <HAL_DMA_IRQHandler+0x418>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d022      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1e      	ldr	r2, [pc, #120]	; (800456c <HAL_DMA_IRQHandler+0x41c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01d      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1d      	ldr	r2, [pc, #116]	; (8004570 <HAL_DMA_IRQHandler+0x420>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d018      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <HAL_DMA_IRQHandler+0x424>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1a      	ldr	r2, [pc, #104]	; (8004578 <HAL_DMA_IRQHandler+0x428>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00e      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a18      	ldr	r2, [pc, #96]	; (800457c <HAL_DMA_IRQHandler+0x42c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a17      	ldr	r2, [pc, #92]	; (8004580 <HAL_DMA_IRQHandler+0x430>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_DMA_IRQHandler+0x3e2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a15      	ldr	r2, [pc, #84]	; (8004584 <HAL_DMA_IRQHandler+0x434>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d12a      	bne.n	8004588 <HAL_DMA_IRQHandler+0x438>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	bf14      	ite	ne
 8004540:	2301      	movne	r3, #1
 8004542:	2300      	moveq	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e023      	b.n	8004590 <HAL_DMA_IRQHandler+0x440>
 8004548:	40020010 	.word	0x40020010
 800454c:	40020028 	.word	0x40020028
 8004550:	40020040 	.word	0x40020040
 8004554:	40020058 	.word	0x40020058
 8004558:	40020070 	.word	0x40020070
 800455c:	40020088 	.word	0x40020088
 8004560:	400200a0 	.word	0x400200a0
 8004564:	400200b8 	.word	0x400200b8
 8004568:	40020410 	.word	0x40020410
 800456c:	40020428 	.word	0x40020428
 8004570:	40020440 	.word	0x40020440
 8004574:	40020458 	.word	0x40020458
 8004578:	40020470 	.word	0x40020470
 800457c:	40020488 	.word	0x40020488
 8004580:	400204a0 	.word	0x400204a0
 8004584:	400204b8 	.word	0x400204b8
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	2204      	movs	r2, #4
 800459e:	409a      	lsls	r2, r3
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	f043 0204 	orr.w	r2, r3, #4
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	2210      	movs	r2, #16
 80045ba:	409a      	lsls	r2, r3
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80a6 	beq.w	8004712 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a85      	ldr	r2, [pc, #532]	; (80047e0 <HAL_DMA_IRQHandler+0x690>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d04a      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a83      	ldr	r2, [pc, #524]	; (80047e4 <HAL_DMA_IRQHandler+0x694>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d045      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a82      	ldr	r2, [pc, #520]	; (80047e8 <HAL_DMA_IRQHandler+0x698>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d040      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a80      	ldr	r2, [pc, #512]	; (80047ec <HAL_DMA_IRQHandler+0x69c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d03b      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a7f      	ldr	r2, [pc, #508]	; (80047f0 <HAL_DMA_IRQHandler+0x6a0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d036      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a7d      	ldr	r2, [pc, #500]	; (80047f4 <HAL_DMA_IRQHandler+0x6a4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d031      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a7c      	ldr	r2, [pc, #496]	; (80047f8 <HAL_DMA_IRQHandler+0x6a8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d02c      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a7a      	ldr	r2, [pc, #488]	; (80047fc <HAL_DMA_IRQHandler+0x6ac>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d027      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a79      	ldr	r2, [pc, #484]	; (8004800 <HAL_DMA_IRQHandler+0x6b0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d022      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a77      	ldr	r2, [pc, #476]	; (8004804 <HAL_DMA_IRQHandler+0x6b4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01d      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a76      	ldr	r2, [pc, #472]	; (8004808 <HAL_DMA_IRQHandler+0x6b8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d018      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a74      	ldr	r2, [pc, #464]	; (800480c <HAL_DMA_IRQHandler+0x6bc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a73      	ldr	r2, [pc, #460]	; (8004810 <HAL_DMA_IRQHandler+0x6c0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00e      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a71      	ldr	r2, [pc, #452]	; (8004814 <HAL_DMA_IRQHandler+0x6c4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a70      	ldr	r2, [pc, #448]	; (8004818 <HAL_DMA_IRQHandler+0x6c8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_DMA_IRQHandler+0x516>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a6e      	ldr	r2, [pc, #440]	; (800481c <HAL_DMA_IRQHandler+0x6cc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d10a      	bne.n	800467c <HAL_DMA_IRQHandler+0x52c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf14      	ite	ne
 8004674:	2301      	movne	r3, #1
 8004676:	2300      	moveq	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	e009      	b.n	8004690 <HAL_DMA_IRQHandler+0x540>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	bf14      	ite	ne
 800468a:	2301      	movne	r3, #1
 800468c:	2300      	moveq	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d03e      	beq.n	8004712 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	2210      	movs	r2, #16
 800469e:	409a      	lsls	r2, r3
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d018      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d108      	bne.n	80046d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d024      	beq.n	8004712 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
 80046d0:	e01f      	b.n	8004712 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01b      	beq.n	8004712 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3
 80046e2:	e016      	b.n	8004712 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0208 	bic.w	r2, r2, #8
 8004700:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	2220      	movs	r2, #32
 800471c:	409a      	lsls	r2, r3
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	4013      	ands	r3, r2
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8110 	beq.w	8004948 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2c      	ldr	r2, [pc, #176]	; (80047e0 <HAL_DMA_IRQHandler+0x690>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d04a      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2b      	ldr	r2, [pc, #172]	; (80047e4 <HAL_DMA_IRQHandler+0x694>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d045      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a29      	ldr	r2, [pc, #164]	; (80047e8 <HAL_DMA_IRQHandler+0x698>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d040      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a28      	ldr	r2, [pc, #160]	; (80047ec <HAL_DMA_IRQHandler+0x69c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d03b      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a26      	ldr	r2, [pc, #152]	; (80047f0 <HAL_DMA_IRQHandler+0x6a0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d036      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a25      	ldr	r2, [pc, #148]	; (80047f4 <HAL_DMA_IRQHandler+0x6a4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d031      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <HAL_DMA_IRQHandler+0x6a8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d02c      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a22      	ldr	r2, [pc, #136]	; (80047fc <HAL_DMA_IRQHandler+0x6ac>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d027      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a20      	ldr	r2, [pc, #128]	; (8004800 <HAL_DMA_IRQHandler+0x6b0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d022      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <HAL_DMA_IRQHandler+0x6b4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d01d      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <HAL_DMA_IRQHandler+0x6b8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d018      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1c      	ldr	r2, [pc, #112]	; (800480c <HAL_DMA_IRQHandler+0x6bc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1a      	ldr	r2, [pc, #104]	; (8004810 <HAL_DMA_IRQHandler+0x6c0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a19      	ldr	r2, [pc, #100]	; (8004814 <HAL_DMA_IRQHandler+0x6c4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d009      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a17      	ldr	r2, [pc, #92]	; (8004818 <HAL_DMA_IRQHandler+0x6c8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x678>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a16      	ldr	r2, [pc, #88]	; (800481c <HAL_DMA_IRQHandler+0x6cc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d12b      	bne.n	8004820 <HAL_DMA_IRQHandler+0x6d0>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bf14      	ite	ne
 80047d6:	2301      	movne	r3, #1
 80047d8:	2300      	moveq	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	e02a      	b.n	8004834 <HAL_DMA_IRQHandler+0x6e4>
 80047de:	bf00      	nop
 80047e0:	40020010 	.word	0x40020010
 80047e4:	40020028 	.word	0x40020028
 80047e8:	40020040 	.word	0x40020040
 80047ec:	40020058 	.word	0x40020058
 80047f0:	40020070 	.word	0x40020070
 80047f4:	40020088 	.word	0x40020088
 80047f8:	400200a0 	.word	0x400200a0
 80047fc:	400200b8 	.word	0x400200b8
 8004800:	40020410 	.word	0x40020410
 8004804:	40020428 	.word	0x40020428
 8004808:	40020440 	.word	0x40020440
 800480c:	40020458 	.word	0x40020458
 8004810:	40020470 	.word	0x40020470
 8004814:	40020488 	.word	0x40020488
 8004818:	400204a0 	.word	0x400204a0
 800481c:	400204b8 	.word	0x400204b8
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8087 	beq.w	8004948 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2220      	movs	r2, #32
 8004844:	409a      	lsls	r2, r3
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b04      	cmp	r3, #4
 8004854:	d139      	bne.n	80048ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0216 	bic.w	r2, r2, #22
 8004864:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004874:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d103      	bne.n	8004886 <HAL_DMA_IRQHandler+0x736>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0208 	bic.w	r2, r2, #8
 8004894:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	223f      	movs	r2, #63	; 0x3f
 80048a0:	409a      	lsls	r2, r3
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 834a 	beq.w	8004f54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	4798      	blx	r3
          }
          return;
 80048c8:	e344      	b.n	8004f54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d018      	beq.n	800490a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d108      	bne.n	80048f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d02c      	beq.n	8004948 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	4798      	blx	r3
 80048f6:	e027      	b.n	8004948 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d023      	beq.n	8004948 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4798      	blx	r3
 8004908:	e01e      	b.n	8004948 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10f      	bne.n	8004938 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0210 	bic.w	r2, r2, #16
 8004926:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8306 	beq.w	8004f5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8088 	beq.w	8004a70 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2204      	movs	r2, #4
 8004964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a7a      	ldr	r2, [pc, #488]	; (8004b58 <HAL_DMA_IRQHandler+0xa08>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d04a      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a79      	ldr	r2, [pc, #484]	; (8004b5c <HAL_DMA_IRQHandler+0xa0c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d045      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a77      	ldr	r2, [pc, #476]	; (8004b60 <HAL_DMA_IRQHandler+0xa10>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d040      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a76      	ldr	r2, [pc, #472]	; (8004b64 <HAL_DMA_IRQHandler+0xa14>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d03b      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a74      	ldr	r2, [pc, #464]	; (8004b68 <HAL_DMA_IRQHandler+0xa18>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d036      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a73      	ldr	r2, [pc, #460]	; (8004b6c <HAL_DMA_IRQHandler+0xa1c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d031      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a71      	ldr	r2, [pc, #452]	; (8004b70 <HAL_DMA_IRQHandler+0xa20>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d02c      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a70      	ldr	r2, [pc, #448]	; (8004b74 <HAL_DMA_IRQHandler+0xa24>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d027      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a6e      	ldr	r2, [pc, #440]	; (8004b78 <HAL_DMA_IRQHandler+0xa28>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d022      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a6d      	ldr	r2, [pc, #436]	; (8004b7c <HAL_DMA_IRQHandler+0xa2c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d01d      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a6b      	ldr	r2, [pc, #428]	; (8004b80 <HAL_DMA_IRQHandler+0xa30>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d018      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a6a      	ldr	r2, [pc, #424]	; (8004b84 <HAL_DMA_IRQHandler+0xa34>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d013      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a68      	ldr	r2, [pc, #416]	; (8004b88 <HAL_DMA_IRQHandler+0xa38>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00e      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a67      	ldr	r2, [pc, #412]	; (8004b8c <HAL_DMA_IRQHandler+0xa3c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d009      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a65      	ldr	r2, [pc, #404]	; (8004b90 <HAL_DMA_IRQHandler+0xa40>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x8b8>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a64      	ldr	r2, [pc, #400]	; (8004b94 <HAL_DMA_IRQHandler+0xa44>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d108      	bne.n	8004a1a <HAL_DMA_IRQHandler+0x8ca>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	e007      	b.n	8004a2a <HAL_DMA_IRQHandler+0x8da>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d307      	bcc.n	8004a46 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f2      	bne.n	8004a2a <HAL_DMA_IRQHandler+0x8da>
 8004a44:	e000      	b.n	8004a48 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a46:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d004      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2203      	movs	r2, #3
 8004a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a66:	e003      	b.n	8004a70 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8272 	beq.w	8004f5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
 8004a82:	e26c      	b.n	8004f5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a43      	ldr	r2, [pc, #268]	; (8004b98 <HAL_DMA_IRQHandler+0xa48>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d022      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x984>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a42      	ldr	r2, [pc, #264]	; (8004b9c <HAL_DMA_IRQHandler+0xa4c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d01d      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x984>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a40      	ldr	r2, [pc, #256]	; (8004ba0 <HAL_DMA_IRQHandler+0xa50>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d018      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x984>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a3f      	ldr	r2, [pc, #252]	; (8004ba4 <HAL_DMA_IRQHandler+0xa54>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x984>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3d      	ldr	r2, [pc, #244]	; (8004ba8 <HAL_DMA_IRQHandler+0xa58>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x984>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3c      	ldr	r2, [pc, #240]	; (8004bac <HAL_DMA_IRQHandler+0xa5c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x984>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a3a      	ldr	r2, [pc, #232]	; (8004bb0 <HAL_DMA_IRQHandler+0xa60>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x984>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a39      	ldr	r2, [pc, #228]	; (8004bb4 <HAL_DMA_IRQHandler+0xa64>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d101      	bne.n	8004ad8 <HAL_DMA_IRQHandler+0x988>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <HAL_DMA_IRQHandler+0x98a>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 823f 	beq.w	8004f5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2204      	movs	r2, #4
 8004af2:	409a      	lsls	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80cd 	beq.w	8004c98 <HAL_DMA_IRQHandler+0xb48>
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80c7 	beq.w	8004c98 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	2204      	movs	r2, #4
 8004b14:	409a      	lsls	r2, r3
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d049      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 8210 	beq.w	8004f58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b40:	e20a      	b.n	8004f58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 8206 	beq.w	8004f58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b54:	e200      	b.n	8004f58 <HAL_DMA_IRQHandler+0xe08>
 8004b56:	bf00      	nop
 8004b58:	40020010 	.word	0x40020010
 8004b5c:	40020028 	.word	0x40020028
 8004b60:	40020040 	.word	0x40020040
 8004b64:	40020058 	.word	0x40020058
 8004b68:	40020070 	.word	0x40020070
 8004b6c:	40020088 	.word	0x40020088
 8004b70:	400200a0 	.word	0x400200a0
 8004b74:	400200b8 	.word	0x400200b8
 8004b78:	40020410 	.word	0x40020410
 8004b7c:	40020428 	.word	0x40020428
 8004b80:	40020440 	.word	0x40020440
 8004b84:	40020458 	.word	0x40020458
 8004b88:	40020470 	.word	0x40020470
 8004b8c:	40020488 	.word	0x40020488
 8004b90:	400204a0 	.word	0x400204a0
 8004b94:	400204b8 	.word	0x400204b8
 8004b98:	58025408 	.word	0x58025408
 8004b9c:	5802541c 	.word	0x5802541c
 8004ba0:	58025430 	.word	0x58025430
 8004ba4:	58025444 	.word	0x58025444
 8004ba8:	58025458 	.word	0x58025458
 8004bac:	5802546c 	.word	0x5802546c
 8004bb0:	58025480 	.word	0x58025480
 8004bb4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d160      	bne.n	8004c84 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a8c      	ldr	r2, [pc, #560]	; (8004df8 <HAL_DMA_IRQHandler+0xca8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d04a      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a8a      	ldr	r2, [pc, #552]	; (8004dfc <HAL_DMA_IRQHandler+0xcac>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d045      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a89      	ldr	r2, [pc, #548]	; (8004e00 <HAL_DMA_IRQHandler+0xcb0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d040      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a87      	ldr	r2, [pc, #540]	; (8004e04 <HAL_DMA_IRQHandler+0xcb4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d03b      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a86      	ldr	r2, [pc, #536]	; (8004e08 <HAL_DMA_IRQHandler+0xcb8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d036      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a84      	ldr	r2, [pc, #528]	; (8004e0c <HAL_DMA_IRQHandler+0xcbc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d031      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a83      	ldr	r2, [pc, #524]	; (8004e10 <HAL_DMA_IRQHandler+0xcc0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d02c      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a81      	ldr	r2, [pc, #516]	; (8004e14 <HAL_DMA_IRQHandler+0xcc4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d027      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a80      	ldr	r2, [pc, #512]	; (8004e18 <HAL_DMA_IRQHandler+0xcc8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d022      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a7e      	ldr	r2, [pc, #504]	; (8004e1c <HAL_DMA_IRQHandler+0xccc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01d      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a7d      	ldr	r2, [pc, #500]	; (8004e20 <HAL_DMA_IRQHandler+0xcd0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d018      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a7b      	ldr	r2, [pc, #492]	; (8004e24 <HAL_DMA_IRQHandler+0xcd4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a7a      	ldr	r2, [pc, #488]	; (8004e28 <HAL_DMA_IRQHandler+0xcd8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a78      	ldr	r2, [pc, #480]	; (8004e2c <HAL_DMA_IRQHandler+0xcdc>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a77      	ldr	r2, [pc, #476]	; (8004e30 <HAL_DMA_IRQHandler+0xce0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xb12>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a75      	ldr	r2, [pc, #468]	; (8004e34 <HAL_DMA_IRQHandler+0xce4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d108      	bne.n	8004c74 <HAL_DMA_IRQHandler+0xb24>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0208 	bic.w	r2, r2, #8
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	e007      	b.n	8004c84 <HAL_DMA_IRQHandler+0xb34>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0204 	bic.w	r2, r2, #4
 8004c82:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8165 	beq.w	8004f58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c96:	e15f      	b.n	8004f58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80c5 	beq.w	8004e38 <HAL_DMA_IRQHandler+0xce8>
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 80bf 	beq.w	8004e38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	409a      	lsls	r2, r3
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d018      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 813a 	beq.w	8004f5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cf0:	e134      	b.n	8004f5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 8130 	beq.w	8004f5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d04:	e12a      	b.n	8004f5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d168      	bne.n	8004de2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a38      	ldr	r2, [pc, #224]	; (8004df8 <HAL_DMA_IRQHandler+0xca8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d04a      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a37      	ldr	r2, [pc, #220]	; (8004dfc <HAL_DMA_IRQHandler+0xcac>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d045      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a35      	ldr	r2, [pc, #212]	; (8004e00 <HAL_DMA_IRQHandler+0xcb0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d040      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a34      	ldr	r2, [pc, #208]	; (8004e04 <HAL_DMA_IRQHandler+0xcb4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d03b      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a32      	ldr	r2, [pc, #200]	; (8004e08 <HAL_DMA_IRQHandler+0xcb8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d036      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a31      	ldr	r2, [pc, #196]	; (8004e0c <HAL_DMA_IRQHandler+0xcbc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d031      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a2f      	ldr	r2, [pc, #188]	; (8004e10 <HAL_DMA_IRQHandler+0xcc0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d02c      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2e      	ldr	r2, [pc, #184]	; (8004e14 <HAL_DMA_IRQHandler+0xcc4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d027      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2c      	ldr	r2, [pc, #176]	; (8004e18 <HAL_DMA_IRQHandler+0xcc8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d022      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2b      	ldr	r2, [pc, #172]	; (8004e1c <HAL_DMA_IRQHandler+0xccc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d01d      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a29      	ldr	r2, [pc, #164]	; (8004e20 <HAL_DMA_IRQHandler+0xcd0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d018      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a28      	ldr	r2, [pc, #160]	; (8004e24 <HAL_DMA_IRQHandler+0xcd4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a26      	ldr	r2, [pc, #152]	; (8004e28 <HAL_DMA_IRQHandler+0xcd8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00e      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a25      	ldr	r2, [pc, #148]	; (8004e2c <HAL_DMA_IRQHandler+0xcdc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d009      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a23      	ldr	r2, [pc, #140]	; (8004e30 <HAL_DMA_IRQHandler+0xce0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_DMA_IRQHandler+0xc60>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a22      	ldr	r2, [pc, #136]	; (8004e34 <HAL_DMA_IRQHandler+0xce4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d108      	bne.n	8004dc2 <HAL_DMA_IRQHandler+0xc72>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0214 	bic.w	r2, r2, #20
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e007      	b.n	8004dd2 <HAL_DMA_IRQHandler+0xc82>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 020a 	bic.w	r2, r2, #10
 8004dd0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80b8 	beq.w	8004f5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004df4:	e0b2      	b.n	8004f5c <HAL_DMA_IRQHandler+0xe0c>
 8004df6:	bf00      	nop
 8004df8:	40020010 	.word	0x40020010
 8004dfc:	40020028 	.word	0x40020028
 8004e00:	40020040 	.word	0x40020040
 8004e04:	40020058 	.word	0x40020058
 8004e08:	40020070 	.word	0x40020070
 8004e0c:	40020088 	.word	0x40020088
 8004e10:	400200a0 	.word	0x400200a0
 8004e14:	400200b8 	.word	0x400200b8
 8004e18:	40020410 	.word	0x40020410
 8004e1c:	40020428 	.word	0x40020428
 8004e20:	40020440 	.word	0x40020440
 8004e24:	40020458 	.word	0x40020458
 8004e28:	40020470 	.word	0x40020470
 8004e2c:	40020488 	.word	0x40020488
 8004e30:	400204a0 	.word	0x400204a0
 8004e34:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	2208      	movs	r2, #8
 8004e42:	409a      	lsls	r2, r3
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	4013      	ands	r3, r2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8088 	beq.w	8004f5e <HAL_DMA_IRQHandler+0xe0e>
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8082 	beq.w	8004f5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a41      	ldr	r2, [pc, #260]	; (8004f64 <HAL_DMA_IRQHandler+0xe14>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d04a      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a3f      	ldr	r2, [pc, #252]	; (8004f68 <HAL_DMA_IRQHandler+0xe18>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d045      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a3e      	ldr	r2, [pc, #248]	; (8004f6c <HAL_DMA_IRQHandler+0xe1c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d040      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a3c      	ldr	r2, [pc, #240]	; (8004f70 <HAL_DMA_IRQHandler+0xe20>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d03b      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a3b      	ldr	r2, [pc, #236]	; (8004f74 <HAL_DMA_IRQHandler+0xe24>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d036      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a39      	ldr	r2, [pc, #228]	; (8004f78 <HAL_DMA_IRQHandler+0xe28>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d031      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a38      	ldr	r2, [pc, #224]	; (8004f7c <HAL_DMA_IRQHandler+0xe2c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d02c      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a36      	ldr	r2, [pc, #216]	; (8004f80 <HAL_DMA_IRQHandler+0xe30>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d027      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a35      	ldr	r2, [pc, #212]	; (8004f84 <HAL_DMA_IRQHandler+0xe34>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d022      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a33      	ldr	r2, [pc, #204]	; (8004f88 <HAL_DMA_IRQHandler+0xe38>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d01d      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a32      	ldr	r2, [pc, #200]	; (8004f8c <HAL_DMA_IRQHandler+0xe3c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d018      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a30      	ldr	r2, [pc, #192]	; (8004f90 <HAL_DMA_IRQHandler+0xe40>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a2f      	ldr	r2, [pc, #188]	; (8004f94 <HAL_DMA_IRQHandler+0xe44>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00e      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a2d      	ldr	r2, [pc, #180]	; (8004f98 <HAL_DMA_IRQHandler+0xe48>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d009      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a2c      	ldr	r2, [pc, #176]	; (8004f9c <HAL_DMA_IRQHandler+0xe4c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d004      	beq.n	8004efa <HAL_DMA_IRQHandler+0xdaa>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a2a      	ldr	r2, [pc, #168]	; (8004fa0 <HAL_DMA_IRQHandler+0xe50>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d108      	bne.n	8004f0c <HAL_DMA_IRQHandler+0xdbc>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 021c 	bic.w	r2, r2, #28
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e007      	b.n	8004f1c <HAL_DMA_IRQHandler+0xdcc>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 020e 	bic.w	r2, r2, #14
 8004f1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	2201      	movs	r2, #1
 8004f26:	409a      	lsls	r2, r3
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	4798      	blx	r3
 8004f52:	e004      	b.n	8004f5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004f54:	bf00      	nop
 8004f56:	e002      	b.n	8004f5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f58:	bf00      	nop
 8004f5a:	e000      	b.n	8004f5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f5e:	3728      	adds	r7, #40	; 0x28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40020010 	.word	0x40020010
 8004f68:	40020028 	.word	0x40020028
 8004f6c:	40020040 	.word	0x40020040
 8004f70:	40020058 	.word	0x40020058
 8004f74:	40020070 	.word	0x40020070
 8004f78:	40020088 	.word	0x40020088
 8004f7c:	400200a0 	.word	0x400200a0
 8004f80:	400200b8 	.word	0x400200b8
 8004f84:	40020410 	.word	0x40020410
 8004f88:	40020428 	.word	0x40020428
 8004f8c:	40020440 	.word	0x40020440
 8004f90:	40020458 	.word	0x40020458
 8004f94:	40020470 	.word	0x40020470
 8004f98:	40020488 	.word	0x40020488
 8004f9c:	400204a0 	.word	0x400204a0
 8004fa0:	400204b8 	.word	0x400204b8

08004fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a42      	ldr	r2, [pc, #264]	; (80050bc <DMA_CalcBaseAndBitshift+0x118>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d04a      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a41      	ldr	r2, [pc, #260]	; (80050c0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d045      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a3f      	ldr	r2, [pc, #252]	; (80050c4 <DMA_CalcBaseAndBitshift+0x120>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d040      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a3e      	ldr	r2, [pc, #248]	; (80050c8 <DMA_CalcBaseAndBitshift+0x124>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d03b      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a3c      	ldr	r2, [pc, #240]	; (80050cc <DMA_CalcBaseAndBitshift+0x128>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d036      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a3b      	ldr	r2, [pc, #236]	; (80050d0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d031      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a39      	ldr	r2, [pc, #228]	; (80050d4 <DMA_CalcBaseAndBitshift+0x130>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d02c      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a38      	ldr	r2, [pc, #224]	; (80050d8 <DMA_CalcBaseAndBitshift+0x134>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d027      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a36      	ldr	r2, [pc, #216]	; (80050dc <DMA_CalcBaseAndBitshift+0x138>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d022      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a35      	ldr	r2, [pc, #212]	; (80050e0 <DMA_CalcBaseAndBitshift+0x13c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d01d      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a33      	ldr	r2, [pc, #204]	; (80050e4 <DMA_CalcBaseAndBitshift+0x140>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d018      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a32      	ldr	r2, [pc, #200]	; (80050e8 <DMA_CalcBaseAndBitshift+0x144>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d013      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a30      	ldr	r2, [pc, #192]	; (80050ec <DMA_CalcBaseAndBitshift+0x148>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00e      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2f      	ldr	r2, [pc, #188]	; (80050f0 <DMA_CalcBaseAndBitshift+0x14c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d009      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a2d      	ldr	r2, [pc, #180]	; (80050f4 <DMA_CalcBaseAndBitshift+0x150>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <DMA_CalcBaseAndBitshift+0xa8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a2c      	ldr	r2, [pc, #176]	; (80050f8 <DMA_CalcBaseAndBitshift+0x154>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d101      	bne.n	8005050 <DMA_CalcBaseAndBitshift+0xac>
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <DMA_CalcBaseAndBitshift+0xae>
 8005050:	2300      	movs	r3, #0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d024      	beq.n	80050a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	3b10      	subs	r3, #16
 800505e:	4a27      	ldr	r2, [pc, #156]	; (80050fc <DMA_CalcBaseAndBitshift+0x158>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	4a24      	ldr	r2, [pc, #144]	; (8005100 <DMA_CalcBaseAndBitshift+0x15c>)
 8005070:	5cd3      	ldrb	r3, [r2, r3]
 8005072:	461a      	mov	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d908      	bls.n	8005090 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	4b1f      	ldr	r3, [pc, #124]	; (8005104 <DMA_CalcBaseAndBitshift+0x160>)
 8005086:	4013      	ands	r3, r2
 8005088:	1d1a      	adds	r2, r3, #4
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	659a      	str	r2, [r3, #88]	; 0x58
 800508e:	e00d      	b.n	80050ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <DMA_CalcBaseAndBitshift+0x160>)
 8005098:	4013      	ands	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6593      	str	r3, [r2, #88]	; 0x58
 800509e:	e005      	b.n	80050ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40020010 	.word	0x40020010
 80050c0:	40020028 	.word	0x40020028
 80050c4:	40020040 	.word	0x40020040
 80050c8:	40020058 	.word	0x40020058
 80050cc:	40020070 	.word	0x40020070
 80050d0:	40020088 	.word	0x40020088
 80050d4:	400200a0 	.word	0x400200a0
 80050d8:	400200b8 	.word	0x400200b8
 80050dc:	40020410 	.word	0x40020410
 80050e0:	40020428 	.word	0x40020428
 80050e4:	40020440 	.word	0x40020440
 80050e8:	40020458 	.word	0x40020458
 80050ec:	40020470 	.word	0x40020470
 80050f0:	40020488 	.word	0x40020488
 80050f4:	400204a0 	.word	0x400204a0
 80050f8:	400204b8 	.word	0x400204b8
 80050fc:	aaaaaaab 	.word	0xaaaaaaab
 8005100:	0800c4fc 	.word	0x0800c4fc
 8005104:	fffffc00 	.word	0xfffffc00

08005108 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d120      	bne.n	800515e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	2b03      	cmp	r3, #3
 8005122:	d858      	bhi.n	80051d6 <DMA_CheckFifoParam+0xce>
 8005124:	a201      	add	r2, pc, #4	; (adr r2, 800512c <DMA_CheckFifoParam+0x24>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	0800513d 	.word	0x0800513d
 8005130:	0800514f 	.word	0x0800514f
 8005134:	0800513d 	.word	0x0800513d
 8005138:	080051d7 	.word	0x080051d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d048      	beq.n	80051da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800514c:	e045      	b.n	80051da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005156:	d142      	bne.n	80051de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800515c:	e03f      	b.n	80051de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005166:	d123      	bne.n	80051b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	2b03      	cmp	r3, #3
 800516e:	d838      	bhi.n	80051e2 <DMA_CheckFifoParam+0xda>
 8005170:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <DMA_CheckFifoParam+0x70>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	08005189 	.word	0x08005189
 800517c:	0800518f 	.word	0x0800518f
 8005180:	08005189 	.word	0x08005189
 8005184:	080051a1 	.word	0x080051a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	73fb      	strb	r3, [r7, #15]
        break;
 800518c:	e030      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d025      	beq.n	80051e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800519e:	e022      	b.n	80051e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051a8:	d11f      	bne.n	80051ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051ae:	e01c      	b.n	80051ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d902      	bls.n	80051be <DMA_CheckFifoParam+0xb6>
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d003      	beq.n	80051c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80051bc:	e018      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	73fb      	strb	r3, [r7, #15]
        break;
 80051c2:	e015      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00e      	beq.n	80051ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
    break;
 80051d4:	e00b      	b.n	80051ee <DMA_CheckFifoParam+0xe6>
        break;
 80051d6:	bf00      	nop
 80051d8:	e00a      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
        break;
 80051da:	bf00      	nop
 80051dc:	e008      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
        break;
 80051de:	bf00      	nop
 80051e0:	e006      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
        break;
 80051e2:	bf00      	nop
 80051e4:	e004      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
        break;
 80051e6:	bf00      	nop
 80051e8:	e002      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
        break;
 80051ea:	bf00      	nop
 80051ec:	e000      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
    break;
 80051ee:	bf00      	nop
    }
  }

  return status;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop

08005200 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a38      	ldr	r2, [pc, #224]	; (80052f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d022      	beq.n	800525e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a36      	ldr	r2, [pc, #216]	; (80052f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01d      	beq.n	800525e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a35      	ldr	r2, [pc, #212]	; (80052fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d018      	beq.n	800525e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a33      	ldr	r2, [pc, #204]	; (8005300 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a32      	ldr	r2, [pc, #200]	; (8005304 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a30      	ldr	r2, [pc, #192]	; (8005308 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a2f      	ldr	r2, [pc, #188]	; (800530c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a2d      	ldr	r2, [pc, #180]	; (8005310 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d101      	bne.n	8005262 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01a      	beq.n	800529e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	3b08      	subs	r3, #8
 8005270:	4a28      	ldr	r2, [pc, #160]	; (8005314 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	091b      	lsrs	r3, r3, #4
 8005278:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4b26      	ldr	r3, [pc, #152]	; (8005318 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	461a      	mov	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a24      	ldr	r2, [pc, #144]	; (800531c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800528c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	2201      	movs	r2, #1
 8005296:	409a      	lsls	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800529c:	e024      	b.n	80052e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	3b10      	subs	r3, #16
 80052a6:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4a1c      	ldr	r2, [pc, #112]	; (8005324 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d806      	bhi.n	80052c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4a1b      	ldr	r2, [pc, #108]	; (8005328 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d902      	bls.n	80052c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3308      	adds	r3, #8
 80052c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4b18      	ldr	r3, [pc, #96]	; (800532c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	461a      	mov	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a16      	ldr	r2, [pc, #88]	; (8005330 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80052d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	2201      	movs	r2, #1
 80052e2:	409a      	lsls	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	58025408 	.word	0x58025408
 80052f8:	5802541c 	.word	0x5802541c
 80052fc:	58025430 	.word	0x58025430
 8005300:	58025444 	.word	0x58025444
 8005304:	58025458 	.word	0x58025458
 8005308:	5802546c 	.word	0x5802546c
 800530c:	58025480 	.word	0x58025480
 8005310:	58025494 	.word	0x58025494
 8005314:	cccccccd 	.word	0xcccccccd
 8005318:	16009600 	.word	0x16009600
 800531c:	58025880 	.word	0x58025880
 8005320:	aaaaaaab 	.word	0xaaaaaaab
 8005324:	400204b8 	.word	0x400204b8
 8005328:	4002040f 	.word	0x4002040f
 800532c:	10008200 	.word	0x10008200
 8005330:	40020880 	.word	0x40020880

08005334 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d04a      	beq.n	80053e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b08      	cmp	r3, #8
 800534e:	d847      	bhi.n	80053e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a25      	ldr	r2, [pc, #148]	; (80053ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d022      	beq.n	80053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a24      	ldr	r2, [pc, #144]	; (80053f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d01d      	beq.n	80053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d018      	beq.n	80053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a21      	ldr	r2, [pc, #132]	; (80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d013      	beq.n	80053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00e      	beq.n	80053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1e      	ldr	r2, [pc, #120]	; (8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d009      	beq.n	80053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1c      	ldr	r2, [pc, #112]	; (8005404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d101      	bne.n	80053a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80053a4:	2300      	movs	r3, #0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4b17      	ldr	r3, [pc, #92]	; (800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	461a      	mov	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a15      	ldr	r2, [pc, #84]	; (8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80053bc:	671a      	str	r2, [r3, #112]	; 0x70
 80053be:	e009      	b.n	80053d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4b14      	ldr	r3, [pc, #80]	; (8005414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	461a      	mov	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a11      	ldr	r2, [pc, #68]	; (8005418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80053d2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	2201      	movs	r2, #1
 80053da:	409a      	lsls	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	58025408 	.word	0x58025408
 80053f0:	5802541c 	.word	0x5802541c
 80053f4:	58025430 	.word	0x58025430
 80053f8:	58025444 	.word	0x58025444
 80053fc:	58025458 	.word	0x58025458
 8005400:	5802546c 	.word	0x5802546c
 8005404:	58025480 	.word	0x58025480
 8005408:	58025494 	.word	0x58025494
 800540c:	1600963f 	.word	0x1600963f
 8005410:	58025940 	.word	0x58025940
 8005414:	1000823f 	.word	0x1000823f
 8005418:	40020940 	.word	0x40020940

0800541c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e0c6      	b.n	80055bc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fc fb3e 	bl	8001ab8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2223      	movs	r2, #35	; 0x23
 8005440:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005442:	4b60      	ldr	r3, [pc, #384]	; (80055c4 <HAL_ETH_Init+0x1a8>)
 8005444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005448:	4a5e      	ldr	r2, [pc, #376]	; (80055c4 <HAL_ETH_Init+0x1a8>)
 800544a:	f043 0302 	orr.w	r3, r3, #2
 800544e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005452:	4b5c      	ldr	r3, [pc, #368]	; (80055c4 <HAL_ETH_Init+0x1a8>)
 8005454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	60bb      	str	r3, [r7, #8]
 800545e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	7a1b      	ldrb	r3, [r3, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d103      	bne.n	8005470 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005468:	2000      	movs	r0, #0
 800546a:	f7fd fa55 	bl	8002918 <HAL_SYSCFG_ETHInterfaceSelect>
 800546e:	e003      	b.n	8005478 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005470:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005474:	f7fd fa50 	bl	8002918 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800548e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005490:	f7fd fa06 	bl	80028a0 <HAL_GetTick>
 8005494:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005496:	e00f      	b.n	80054b8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005498:	f7fd fa02 	bl	80028a0 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80054a6:	d907      	bls.n	80054b8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2204      	movs	r2, #4
 80054ac:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	22e0      	movs	r2, #224	; 0xe0
 80054b2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e081      	b.n	80055bc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e6      	bne.n	8005498 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fac0 	bl	8005a50 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80054d0:	f001 fe7a 	bl	80071c8 <HAL_RCC_GetHCLKFreq>
 80054d4:	4603      	mov	r3, r0
 80054d6:	4a3c      	ldr	r2, [pc, #240]	; (80055c8 <HAL_ETH_Init+0x1ac>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	0c9a      	lsrs	r2, r3, #18
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3a01      	subs	r2, #1
 80054e4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fa13 	bl	8005914 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005504:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005508:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	22e0      	movs	r2, #224	; 0xe0
 8005520:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e04a      	b.n	80055bc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	f241 1308 	movw	r3, #4360	; 0x1108
 800552e:	4413      	add	r3, r2
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b26      	ldr	r3, [pc, #152]	; (80055cc <HAL_ETH_Init+0x1b0>)
 8005534:	4013      	ands	r3, r2
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6952      	ldr	r2, [r2, #20]
 800553a:	0052      	lsls	r2, r2, #1
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	6809      	ldr	r1, [r1, #0]
 8005540:	431a      	orrs	r2, r3
 8005542:	f241 1308 	movw	r3, #4360	; 0x1108
 8005546:	440b      	add	r3, r1
 8005548:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fad8 	bl	8005b00 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fb1c 	bl	8005b8e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	3305      	adds	r3, #5
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	021a      	lsls	r2, r3, #8
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	3304      	adds	r3, #4
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	4619      	mov	r1, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	3303      	adds	r3, #3
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	061a      	lsls	r2, r3, #24
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	3302      	adds	r3, #2
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	041b      	lsls	r3, r3, #16
 8005588:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	3301      	adds	r3, #1
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005594:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80055a2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80055a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2210      	movs	r2, #16
 80055b2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2210      	movs	r2, #16
 80055b8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	58024400 	.word	0x58024400
 80055c8:	431bde83 	.word	0x431bde83
 80055cc:	ffff8001 	.word	0xffff8001

080055d0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80055e2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	791b      	ldrb	r3, [r3, #4]
 80055e8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80055ea:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	7b1b      	ldrb	r3, [r3, #12]
 80055f0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80055f2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	7b5b      	ldrb	r3, [r3, #13]
 80055f8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80055fa:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	7b9b      	ldrb	r3, [r3, #14]
 8005600:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005602:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	7bdb      	ldrb	r3, [r3, #15]
 8005608:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800560a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	7c12      	ldrb	r2, [r2, #16]
 8005610:	2a00      	cmp	r2, #0
 8005612:	d102      	bne.n	800561a <ETH_SetMACConfig+0x4a>
 8005614:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005618:	e000      	b.n	800561c <ETH_SetMACConfig+0x4c>
 800561a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800561c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	7c52      	ldrb	r2, [r2, #17]
 8005622:	2a00      	cmp	r2, #0
 8005624:	d102      	bne.n	800562c <ETH_SetMACConfig+0x5c>
 8005626:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800562a:	e000      	b.n	800562e <ETH_SetMACConfig+0x5e>
 800562c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800562e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	7c9b      	ldrb	r3, [r3, #18]
 8005634:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005636:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800563c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005642:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	7f1b      	ldrb	r3, [r3, #28]
 8005648:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800564a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	7f5b      	ldrb	r3, [r3, #29]
 8005650:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005652:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	7f92      	ldrb	r2, [r2, #30]
 8005658:	2a00      	cmp	r2, #0
 800565a:	d102      	bne.n	8005662 <ETH_SetMACConfig+0x92>
 800565c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005660:	e000      	b.n	8005664 <ETH_SetMACConfig+0x94>
 8005662:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005664:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	7fdb      	ldrb	r3, [r3, #31]
 800566a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800566c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005674:	2a00      	cmp	r2, #0
 8005676:	d102      	bne.n	800567e <ETH_SetMACConfig+0xae>
 8005678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800567c:	e000      	b.n	8005680 <ETH_SetMACConfig+0xb0>
 800567e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005680:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005686:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800568e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005690:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4b56      	ldr	r3, [pc, #344]	; (80057fc <ETH_SetMACConfig+0x22c>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6812      	ldr	r2, [r2, #0]
 80056a8:	68f9      	ldr	r1, [r7, #12]
 80056aa:	430b      	orrs	r3, r1
 80056ac:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056ba:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80056bc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056c4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80056c6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80056ce:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80056d0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80056d8:	2a00      	cmp	r2, #0
 80056da:	d102      	bne.n	80056e2 <ETH_SetMACConfig+0x112>
 80056dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056e0:	e000      	b.n	80056e4 <ETH_SetMACConfig+0x114>
 80056e2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80056e4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	4b42      	ldr	r3, [pc, #264]	; (8005800 <ETH_SetMACConfig+0x230>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	68f9      	ldr	r1, [r7, #12]
 80056fe:	430b      	orrs	r3, r1
 8005700:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005708:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	4b3a      	ldr	r3, [pc, #232]	; (8005804 <ETH_SetMACConfig+0x234>)
 800571a:	4013      	ands	r3, r2
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	68f9      	ldr	r1, [r7, #12]
 8005722:	430b      	orrs	r3, r1
 8005724:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800572c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005732:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800573a:	2a00      	cmp	r2, #0
 800573c:	d101      	bne.n	8005742 <ETH_SetMACConfig+0x172>
 800573e:	2280      	movs	r2, #128	; 0x80
 8005740:	e000      	b.n	8005744 <ETH_SetMACConfig+0x174>
 8005742:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005744:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005756:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800575a:	4013      	ands	r3, r2
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	68f9      	ldr	r1, [r7, #12]
 8005762:	430b      	orrs	r3, r1
 8005764:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800576c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005774:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005782:	f023 0103 	bic.w	r1, r3, #3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	430a      	orrs	r2, r1
 800578e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800579a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80057b6:	2a00      	cmp	r2, #0
 80057b8:	d101      	bne.n	80057be <ETH_SetMACConfig+0x1ee>
 80057ba:	2240      	movs	r2, #64	; 0x40
 80057bc:	e000      	b.n	80057c0 <ETH_SetMACConfig+0x1f0>
 80057be:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80057c0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80057c8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80057ca:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80057d2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80057e0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	00048083 	.word	0x00048083
 8005800:	c0f88000 	.word	0xc0f88000
 8005804:	fffffef0 	.word	0xfffffef0

08005808 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b38      	ldr	r3, [pc, #224]	; (8005900 <ETH_SetDMAConfig+0xf8>)
 800581e:	4013      	ands	r3, r2
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	6809      	ldr	r1, [r1, #0]
 8005828:	431a      	orrs	r2, r3
 800582a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800582e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	791b      	ldrb	r3, [r3, #4]
 8005834:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800583a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	7b1b      	ldrb	r3, [r3, #12]
 8005840:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	f241 0304 	movw	r3, #4100	; 0x1004
 800584e:	4413      	add	r3, r2
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b2c      	ldr	r3, [pc, #176]	; (8005904 <ETH_SetDMAConfig+0xfc>)
 8005854:	4013      	ands	r3, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6811      	ldr	r1, [r2, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	431a      	orrs	r2, r3
 800585e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005862:	440b      	add	r3, r1
 8005864:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	7b5b      	ldrb	r3, [r3, #13]
 800586a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4b22      	ldr	r3, [pc, #136]	; (8005908 <ETH_SetDMAConfig+0x100>)
 8005880:	4013      	ands	r3, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6811      	ldr	r1, [r2, #0]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	431a      	orrs	r2, r3
 800588a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800588e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	7d1b      	ldrb	r3, [r3, #20]
 8005898:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800589a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	7f5b      	ldrb	r3, [r3, #29]
 80058a0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	f241 1304 	movw	r3, #4356	; 0x1104
 80058ae:	4413      	add	r3, r2
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4b16      	ldr	r3, [pc, #88]	; (800590c <ETH_SetDMAConfig+0x104>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6811      	ldr	r1, [r2, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	431a      	orrs	r2, r3
 80058be:	f241 1304 	movw	r3, #4356	; 0x1104
 80058c2:	440b      	add	r3, r1
 80058c4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	7f1b      	ldrb	r3, [r3, #28]
 80058ca:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	f241 1308 	movw	r3, #4360	; 0x1108
 80058dc:	4413      	add	r3, r2
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <ETH_SetDMAConfig+0x108>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6811      	ldr	r1, [r2, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	f241 1308 	movw	r3, #4360	; 0x1108
 80058f0:	440b      	add	r3, r1
 80058f2:	601a      	str	r2, [r3, #0]
}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	ffff87fd 	.word	0xffff87fd
 8005904:	ffff2ffe 	.word	0xffff2ffe
 8005908:	fffec000 	.word	0xfffec000
 800590c:	ffc0efef 	.word	0xffc0efef
 8005910:	7fc0ffff 	.word	0x7fc0ffff

08005914 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b0a4      	sub	sp, #144	; 0x90
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800591c:	2301      	movs	r3, #1
 800591e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005922:	2300      	movs	r3, #0
 8005924:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005926:	2300      	movs	r3, #0
 8005928:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800592c:	2300      	movs	r3, #0
 800592e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005944:	2300      	movs	r3, #0
 8005946:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005954:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005956:	2300      	movs	r3, #0
 8005958:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800595c:	2300      	movs	r3, #0
 800595e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005960:	2300      	movs	r3, #0
 8005962:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005966:	2300      	movs	r3, #0
 8005968:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800596c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005970:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005972:	2300      	movs	r3, #0
 8005974:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005978:	2300      	movs	r3, #0
 800597a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800597c:	2301      	movs	r3, #1
 800597e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005982:	2300      	movs	r3, #0
 8005984:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005988:	2300      	movs	r3, #0
 800598a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800598e:	2300      	movs	r3, #0
 8005990:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005992:	2300      	movs	r3, #0
 8005994:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005996:	2300      	movs	r3, #0
 8005998:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800599a:	2300      	movs	r3, #0
 800599c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80059ac:	2320      	movs	r3, #32
 80059ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80059be:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80059c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059c8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80059ca:	2300      	movs	r3, #0
 80059cc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80059d0:	2302      	movs	r3, #2
 80059d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80059dc:	2300      	movs	r3, #0
 80059de:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80059e8:	2301      	movs	r3, #1
 80059ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80059ee:	2300      	movs	r3, #0
 80059f0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80059f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff fde6 	bl	80055d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005a1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a22:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005a28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a2c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005a34:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005a3a:	f107 0308 	add.w	r3, r7, #8
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff fee1 	bl	8005808 <ETH_SetDMAConfig>
}
 8005a46:	bf00      	nop
 8005a48:	3790      	adds	r7, #144	; 0x90
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005a6a:	f001 fbad 	bl	80071c8 <HAL_RCC_GetHCLKFreq>
 8005a6e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4a1e      	ldr	r2, [pc, #120]	; (8005aec <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d908      	bls.n	8005a8a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d804      	bhi.n	8005a8a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	e027      	b.n	8005ada <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	4a18      	ldr	r2, [pc, #96]	; (8005af0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d908      	bls.n	8005aa4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	4a17      	ldr	r2, [pc, #92]	; (8005af4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d204      	bcs.n	8005aa4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	e01a      	b.n	8005ada <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d303      	bcc.n	8005ab4 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4a12      	ldr	r2, [pc, #72]	; (8005af8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d911      	bls.n	8005ad8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4a10      	ldr	r2, [pc, #64]	; (8005af8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d908      	bls.n	8005ace <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4a0f      	ldr	r2, [pc, #60]	; (8005afc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d804      	bhi.n	8005ace <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e005      	b.n	8005ada <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	e000      	b.n	8005ada <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005ad8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005ae4:	bf00      	nop
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	01312cff 	.word	0x01312cff
 8005af0:	02160ebf 	.word	0x02160ebf
 8005af4:	03938700 	.word	0x03938700
 8005af8:	05f5e0ff 	.word	0x05f5e0ff
 8005afc:	08f0d17f 	.word	0x08f0d17f

08005b00 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e01d      	b.n	8005b4a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68d9      	ldr	r1, [r3, #12]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4613      	mov	r3, r2
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	4413      	add	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	440b      	add	r3, r1
 8005b1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2200      	movs	r2, #0
 8005b36:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	3206      	adds	r2, #6
 8005b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d9de      	bls.n	8005b0e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	f241 132c 	movw	r3, #4396	; 0x112c
 8005b5e:	4413      	add	r3, r2
 8005b60:	2203      	movs	r2, #3
 8005b62:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68d9      	ldr	r1, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	f241 1314 	movw	r3, #4372	; 0x1114
 8005b70:	4413      	add	r3, r2
 8005b72:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005b80:	601a      	str	r2, [r3, #0]
}
 8005b82:	bf00      	nop
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	e024      	b.n	8005be6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6919      	ldr	r1, [r3, #16]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	4413      	add	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	440b      	add	r3, r1
 8005bac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3310      	adds	r3, #16
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d9d7      	bls.n	8005b9c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	f241 1330 	movw	r3, #4400	; 0x1130
 8005c12:	4413      	add	r3, r2
 8005c14:	2203      	movs	r2, #3
 8005c16:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6919      	ldr	r1, [r3, #16]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	f241 131c 	movw	r3, #4380	; 0x111c
 8005c24:	4413      	add	r3, r2
 8005c26:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	f241 1328 	movw	r3, #4392	; 0x1128
 8005c38:	4413      	add	r3, r2
 8005c3a:	6019      	str	r1, [r3, #0]
}
 8005c3c:	bf00      	nop
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b089      	sub	sp, #36	; 0x24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c56:	4b89      	ldr	r3, [pc, #548]	; (8005e7c <HAL_GPIO_Init+0x234>)
 8005c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c5a:	e194      	b.n	8005f86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	2101      	movs	r1, #1
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	fa01 f303 	lsl.w	r3, r1, r3
 8005c68:	4013      	ands	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8186 	beq.w	8005f80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d00b      	beq.n	8005c94 <HAL_GPIO_Init+0x4c>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d007      	beq.n	8005c94 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c88:	2b11      	cmp	r3, #17
 8005c8a:	d003      	beq.n	8005c94 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b12      	cmp	r3, #18
 8005c92:	d130      	bne.n	8005cf6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cca:	2201      	movs	r2, #1
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	091b      	lsrs	r3, r3, #4
 8005ce0:	f003 0201 	and.w	r2, r3, #1
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	2203      	movs	r2, #3
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	43db      	mvns	r3, r3
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d003      	beq.n	8005d36 <HAL_GPIO_Init+0xee>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b12      	cmp	r3, #18
 8005d34:	d123      	bne.n	8005d7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	08da      	lsrs	r2, r3, #3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3208      	adds	r2, #8
 8005d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	220f      	movs	r2, #15
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43db      	mvns	r3, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4013      	ands	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	08da      	lsrs	r2, r3, #3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3208      	adds	r2, #8
 8005d78:	69b9      	ldr	r1, [r7, #24]
 8005d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	2203      	movs	r2, #3
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4013      	ands	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f003 0203 	and.w	r2, r3, #3
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 80e0 	beq.w	8005f80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dc0:	4b2f      	ldr	r3, [pc, #188]	; (8005e80 <HAL_GPIO_Init+0x238>)
 8005dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dc6:	4a2e      	ldr	r2, [pc, #184]	; (8005e80 <HAL_GPIO_Init+0x238>)
 8005dc8:	f043 0302 	orr.w	r3, r3, #2
 8005dcc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005dd0:	4b2b      	ldr	r3, [pc, #172]	; (8005e80 <HAL_GPIO_Init+0x238>)
 8005dd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dde:	4a29      	ldr	r2, [pc, #164]	; (8005e84 <HAL_GPIO_Init+0x23c>)
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	089b      	lsrs	r3, r3, #2
 8005de4:	3302      	adds	r3, #2
 8005de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	220f      	movs	r2, #15
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a20      	ldr	r2, [pc, #128]	; (8005e88 <HAL_GPIO_Init+0x240>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d052      	beq.n	8005eb0 <HAL_GPIO_Init+0x268>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1f      	ldr	r2, [pc, #124]	; (8005e8c <HAL_GPIO_Init+0x244>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d031      	beq.n	8005e76 <HAL_GPIO_Init+0x22e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <HAL_GPIO_Init+0x248>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d02b      	beq.n	8005e72 <HAL_GPIO_Init+0x22a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <HAL_GPIO_Init+0x24c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d025      	beq.n	8005e6e <HAL_GPIO_Init+0x226>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a1c      	ldr	r2, [pc, #112]	; (8005e98 <HAL_GPIO_Init+0x250>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d01f      	beq.n	8005e6a <HAL_GPIO_Init+0x222>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1b      	ldr	r2, [pc, #108]	; (8005e9c <HAL_GPIO_Init+0x254>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d019      	beq.n	8005e66 <HAL_GPIO_Init+0x21e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a1a      	ldr	r2, [pc, #104]	; (8005ea0 <HAL_GPIO_Init+0x258>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <HAL_GPIO_Init+0x21a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a19      	ldr	r2, [pc, #100]	; (8005ea4 <HAL_GPIO_Init+0x25c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00d      	beq.n	8005e5e <HAL_GPIO_Init+0x216>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a18      	ldr	r2, [pc, #96]	; (8005ea8 <HAL_GPIO_Init+0x260>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d007      	beq.n	8005e5a <HAL_GPIO_Init+0x212>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a17      	ldr	r2, [pc, #92]	; (8005eac <HAL_GPIO_Init+0x264>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d101      	bne.n	8005e56 <HAL_GPIO_Init+0x20e>
 8005e52:	2309      	movs	r3, #9
 8005e54:	e02d      	b.n	8005eb2 <HAL_GPIO_Init+0x26a>
 8005e56:	230a      	movs	r3, #10
 8005e58:	e02b      	b.n	8005eb2 <HAL_GPIO_Init+0x26a>
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	e029      	b.n	8005eb2 <HAL_GPIO_Init+0x26a>
 8005e5e:	2307      	movs	r3, #7
 8005e60:	e027      	b.n	8005eb2 <HAL_GPIO_Init+0x26a>
 8005e62:	2306      	movs	r3, #6
 8005e64:	e025      	b.n	8005eb2 <HAL_GPIO_Init+0x26a>
 8005e66:	2305      	movs	r3, #5
 8005e68:	e023      	b.n	8005eb2 <HAL_GPIO_Init+0x26a>
 8005e6a:	2304      	movs	r3, #4
 8005e6c:	e021      	b.n	8005eb2 <HAL_GPIO_Init+0x26a>
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e01f      	b.n	8005eb2 <HAL_GPIO_Init+0x26a>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e01d      	b.n	8005eb2 <HAL_GPIO_Init+0x26a>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e01b      	b.n	8005eb2 <HAL_GPIO_Init+0x26a>
 8005e7a:	bf00      	nop
 8005e7c:	58000080 	.word	0x58000080
 8005e80:	58024400 	.word	0x58024400
 8005e84:	58000400 	.word	0x58000400
 8005e88:	58020000 	.word	0x58020000
 8005e8c:	58020400 	.word	0x58020400
 8005e90:	58020800 	.word	0x58020800
 8005e94:	58020c00 	.word	0x58020c00
 8005e98:	58021000 	.word	0x58021000
 8005e9c:	58021400 	.word	0x58021400
 8005ea0:	58021800 	.word	0x58021800
 8005ea4:	58021c00 	.word	0x58021c00
 8005ea8:	58022000 	.word	0x58022000
 8005eac:	58022400 	.word	0x58022400
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	f002 0203 	and.w	r2, r2, #3
 8005eb8:	0092      	lsls	r2, r2, #2
 8005eba:	4093      	lsls	r3, r2
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ec2:	4938      	ldr	r1, [pc, #224]	; (8005fa4 <HAL_GPIO_Init+0x35c>)
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	089b      	lsrs	r3, r3, #2
 8005ec8:	3302      	adds	r3, #2
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	4013      	ands	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	43db      	mvns	r3, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4013      	ands	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4013      	ands	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4013      	ands	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	3301      	adds	r3, #1
 8005f84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f47f ae63 	bne.w	8005c5c <HAL_GPIO_Init+0x14>
  }
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	3724      	adds	r7, #36	; 0x24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	58000400 	.word	0x58000400

08005fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	807b      	strh	r3, [r7, #2]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fb8:	787b      	ldrb	r3, [r7, #1]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fbe:	887a      	ldrh	r2, [r7, #2]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005fc4:	e003      	b.n	8005fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005fc6:	887b      	ldrh	r3, [r7, #2]
 8005fc8:	041a      	lsls	r2, r3, #16
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	619a      	str	r2, [r3, #24]
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005fec:	88fb      	ldrh	r3, [r7, #6]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d008      	beq.n	8006006 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ff8:	88fb      	ldrh	r3, [r7, #6]
 8005ffa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ffe:	88fb      	ldrh	r3, [r7, #6]
 8006000:	4618      	mov	r0, r3
 8006002:	f000 f804 	bl	800600e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	4603      	mov	r3, r0
 8006016:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006026:	b08f      	sub	sp, #60	; 0x3c
 8006028:	af0a      	add	r7, sp, #40	; 0x28
 800602a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e116      	b.n	8006264 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7fc f9df 	bl	8002414 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2203      	movs	r2, #3
 800605a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006066:	2b00      	cmp	r3, #0
 8006068:	d102      	bne.n	8006070 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f005 ffb1 	bl	800bfdc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	687e      	ldr	r6, [r7, #4]
 8006082:	466d      	mov	r5, sp
 8006084:	f106 0410 	add.w	r4, r6, #16
 8006088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800608a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800608c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800608e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006090:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006094:	e885 0003 	stmia.w	r5, {r0, r1}
 8006098:	1d33      	adds	r3, r6, #4
 800609a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800609c:	6838      	ldr	r0, [r7, #0]
 800609e:	f005 ff2f 	bl	800bf00 <USB_CoreInit>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e0d7      	b.n	8006264 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f005 ff9f 	bl	800bffe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060c0:	2300      	movs	r3, #0
 80060c2:	73fb      	strb	r3, [r7, #15]
 80060c4:	e04a      	b.n	800615c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060c6:	7bfa      	ldrb	r2, [r7, #15]
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	4613      	mov	r3, r2
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	1a9b      	subs	r3, r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	333d      	adds	r3, #61	; 0x3d
 80060d6:	2201      	movs	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060da:	7bfa      	ldrb	r2, [r7, #15]
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	333c      	adds	r3, #60	; 0x3c
 80060ea:	7bfa      	ldrb	r2, [r7, #15]
 80060ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	b298      	uxth	r0, r3
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	1a9b      	subs	r3, r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	3342      	adds	r3, #66	; 0x42
 8006102:	4602      	mov	r2, r0
 8006104:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006106:	7bfa      	ldrb	r2, [r7, #15]
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	440b      	add	r3, r1
 8006114:	333f      	adds	r3, #63	; 0x3f
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800611a:	7bfa      	ldrb	r2, [r7, #15]
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	3344      	adds	r3, #68	; 0x44
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800612e:	7bfa      	ldrb	r2, [r7, #15]
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	3348      	adds	r3, #72	; 0x48
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006142:	7bfa      	ldrb	r2, [r7, #15]
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	4613      	mov	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	1a9b      	subs	r3, r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	440b      	add	r3, r1
 8006150:	3350      	adds	r3, #80	; 0x50
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006156:	7bfb      	ldrb	r3, [r7, #15]
 8006158:	3301      	adds	r3, #1
 800615a:	73fb      	strb	r3, [r7, #15]
 800615c:	7bfa      	ldrb	r2, [r7, #15]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	429a      	cmp	r2, r3
 8006164:	d3af      	bcc.n	80060c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006166:	2300      	movs	r3, #0
 8006168:	73fb      	strb	r3, [r7, #15]
 800616a:	e044      	b.n	80061f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800616c:	7bfa      	ldrb	r2, [r7, #15]
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006182:	7bfa      	ldrb	r2, [r7, #15]
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	4613      	mov	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	1a9b      	subs	r3, r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	440b      	add	r3, r1
 8006190:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006194:	7bfa      	ldrb	r2, [r7, #15]
 8006196:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006198:	7bfa      	ldrb	r2, [r7, #15]
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80061aa:	2200      	movs	r2, #0
 80061ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061ae:	7bfa      	ldrb	r2, [r7, #15]
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	1a9b      	subs	r3, r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	440b      	add	r3, r1
 80061bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80061c4:	7bfa      	ldrb	r2, [r7, #15]
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061da:	7bfa      	ldrb	r2, [r7, #15]
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	1a9b      	subs	r3, r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	3301      	adds	r3, #1
 80061f4:	73fb      	strb	r3, [r7, #15]
 80061f6:	7bfa      	ldrb	r2, [r7, #15]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d3b5      	bcc.n	800616c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	603b      	str	r3, [r7, #0]
 8006206:	687e      	ldr	r6, [r7, #4]
 8006208:	466d      	mov	r5, sp
 800620a:	f106 0410 	add.w	r4, r6, #16
 800620e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006216:	e894 0003 	ldmia.w	r4, {r0, r1}
 800621a:	e885 0003 	stmia.w	r5, {r0, r1}
 800621e:	1d33      	adds	r3, r6, #4
 8006220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006222:	6838      	ldr	r0, [r7, #0]
 8006224:	f005 ff16 	bl	800c054 <USB_DevInit>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2202      	movs	r2, #2
 8006232:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e014      	b.n	8006264 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	2b01      	cmp	r3, #1
 8006250:	d102      	bne.n	8006258 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f80a 	bl	800626c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f006 f8b8 	bl	800c3d2 <USB_DevDisconnect>

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800626c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800629a:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800629c:	4313      	orrs	r3, r2
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	10000003 	.word	0x10000003

080062b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80062bc:	4b19      	ldr	r3, [pc, #100]	; (8006324 <HAL_PWREx_ConfigSupply+0x70>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d00a      	beq.n	80062de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80062c8:	4b16      	ldr	r3, [pc, #88]	; (8006324 <HAL_PWREx_ConfigSupply+0x70>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d001      	beq.n	80062da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e01f      	b.n	800631a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	e01d      	b.n	800631a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80062de:	4b11      	ldr	r3, [pc, #68]	; (8006324 <HAL_PWREx_ConfigSupply+0x70>)
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f023 0207 	bic.w	r2, r3, #7
 80062e6:	490f      	ldr	r1, [pc, #60]	; (8006324 <HAL_PWREx_ConfigSupply+0x70>)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80062ee:	f7fc fad7 	bl	80028a0 <HAL_GetTick>
 80062f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062f4:	e009      	b.n	800630a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062f6:	f7fc fad3 	bl	80028a0 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006304:	d901      	bls.n	800630a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e007      	b.n	800631a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800630a:	4b06      	ldr	r3, [pc, #24]	; (8006324 <HAL_PWREx_ConfigSupply+0x70>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006316:	d1ee      	bne.n	80062f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	58024800 	.word	0x58024800

08006328 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	4a04      	ldr	r2, [pc, #16]	; (8006344 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006336:	60d3      	str	r3, [r2, #12]
}
 8006338:	bf00      	nop
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	58024800 	.word	0x58024800

08006348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08c      	sub	sp, #48	; 0x30
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e3ff      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 8087 	beq.w	8006476 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006368:	4b99      	ldr	r3, [pc, #612]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006372:	4b97      	ldr	r3, [pc, #604]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	2b10      	cmp	r3, #16
 800637c:	d007      	beq.n	800638e <HAL_RCC_OscConfig+0x46>
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	2b18      	cmp	r3, #24
 8006382:	d110      	bne.n	80063a6 <HAL_RCC_OscConfig+0x5e>
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d10b      	bne.n	80063a6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800638e:	4b90      	ldr	r3, [pc, #576]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d06c      	beq.n	8006474 <HAL_RCC_OscConfig+0x12c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d168      	bne.n	8006474 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e3d9      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ae:	d106      	bne.n	80063be <HAL_RCC_OscConfig+0x76>
 80063b0:	4b87      	ldr	r3, [pc, #540]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a86      	ldr	r2, [pc, #536]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80063b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	e02e      	b.n	800641c <HAL_RCC_OscConfig+0xd4>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10c      	bne.n	80063e0 <HAL_RCC_OscConfig+0x98>
 80063c6:	4b82      	ldr	r3, [pc, #520]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a81      	ldr	r2, [pc, #516]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80063cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	4b7f      	ldr	r3, [pc, #508]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a7e      	ldr	r2, [pc, #504]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80063d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	e01d      	b.n	800641c <HAL_RCC_OscConfig+0xd4>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063e8:	d10c      	bne.n	8006404 <HAL_RCC_OscConfig+0xbc>
 80063ea:	4b79      	ldr	r3, [pc, #484]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a78      	ldr	r2, [pc, #480]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80063f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	4b76      	ldr	r3, [pc, #472]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a75      	ldr	r2, [pc, #468]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80063fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	e00b      	b.n	800641c <HAL_RCC_OscConfig+0xd4>
 8006404:	4b72      	ldr	r3, [pc, #456]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a71      	ldr	r2, [pc, #452]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 800640a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	4b6f      	ldr	r3, [pc, #444]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a6e      	ldr	r2, [pc, #440]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800641a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d013      	beq.n	800644c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006424:	f7fc fa3c 	bl	80028a0 <HAL_GetTick>
 8006428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800642c:	f7fc fa38 	bl	80028a0 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b64      	cmp	r3, #100	; 0x64
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e38d      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800643e:	4b64      	ldr	r3, [pc, #400]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0f0      	beq.n	800642c <HAL_RCC_OscConfig+0xe4>
 800644a:	e014      	b.n	8006476 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644c:	f7fc fa28 	bl	80028a0 <HAL_GetTick>
 8006450:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006454:	f7fc fa24 	bl	80028a0 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b64      	cmp	r3, #100	; 0x64
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e379      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006466:	4b5a      	ldr	r3, [pc, #360]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f0      	bne.n	8006454 <HAL_RCC_OscConfig+0x10c>
 8006472:	e000      	b.n	8006476 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 80ae 	beq.w	80065e0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006484:	4b52      	ldr	r3, [pc, #328]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800648c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800648e:	4b50      	ldr	r3, [pc, #320]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <HAL_RCC_OscConfig+0x162>
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	2b18      	cmp	r3, #24
 800649e:	d13a      	bne.n	8006516 <HAL_RCC_OscConfig+0x1ce>
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d135      	bne.n	8006516 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064aa:	4b49      	ldr	r3, [pc, #292]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <HAL_RCC_OscConfig+0x17a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e34b      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c2:	f7fc fa1d 	bl	8002900 <HAL_GetREVID>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d817      	bhi.n	8006500 <HAL_RCC_OscConfig+0x1b8>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	d108      	bne.n	80064ea <HAL_RCC_OscConfig+0x1a2>
 80064d8:	4b3d      	ldr	r3, [pc, #244]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80064e0:	4a3b      	ldr	r2, [pc, #236]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80064e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064e8:	e07a      	b.n	80065e0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ea:	4b39      	ldr	r3, [pc, #228]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	031b      	lsls	r3, r3, #12
 80064f8:	4935      	ldr	r1, [pc, #212]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064fe:	e06f      	b.n	80065e0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006500:	4b33      	ldr	r3, [pc, #204]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	061b      	lsls	r3, r3, #24
 800650e:	4930      	ldr	r1, [pc, #192]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006510:	4313      	orrs	r3, r2
 8006512:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006514:	e064      	b.n	80065e0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d045      	beq.n	80065aa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800651e:	4b2c      	ldr	r3, [pc, #176]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f023 0219 	bic.w	r2, r3, #25
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	4929      	ldr	r1, [pc, #164]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 800652c:	4313      	orrs	r3, r2
 800652e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006530:	f7fc f9b6 	bl	80028a0 <HAL_GetTick>
 8006534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006538:	f7fc f9b2 	bl	80028a0 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e307      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800654a:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f0      	beq.n	8006538 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006556:	f7fc f9d3 	bl	8002900 <HAL_GetREVID>
 800655a:	4603      	mov	r3, r0
 800655c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006560:	4293      	cmp	r3, r2
 8006562:	d817      	bhi.n	8006594 <HAL_RCC_OscConfig+0x24c>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	2b40      	cmp	r3, #64	; 0x40
 800656a:	d108      	bne.n	800657e <HAL_RCC_OscConfig+0x236>
 800656c:	4b18      	ldr	r3, [pc, #96]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006574:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800657a:	6053      	str	r3, [r2, #4]
 800657c:	e030      	b.n	80065e0 <HAL_RCC_OscConfig+0x298>
 800657e:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	031b      	lsls	r3, r3, #12
 800658c:	4910      	ldr	r1, [pc, #64]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 800658e:	4313      	orrs	r3, r2
 8006590:	604b      	str	r3, [r1, #4]
 8006592:	e025      	b.n	80065e0 <HAL_RCC_OscConfig+0x298>
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	061b      	lsls	r3, r3, #24
 80065a2:	490b      	ldr	r1, [pc, #44]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	604b      	str	r3, [r1, #4]
 80065a8:	e01a      	b.n	80065e0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065aa:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a08      	ldr	r2, [pc, #32]	; (80065d0 <HAL_RCC_OscConfig+0x288>)
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b6:	f7fc f973 	bl	80028a0 <HAL_GetTick>
 80065ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065bc:	e00a      	b.n	80065d4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065be:	f7fc f96f 	bl	80028a0 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d903      	bls.n	80065d4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e2c4      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
 80065d0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065d4:	4ba4      	ldr	r3, [pc, #656]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ee      	bne.n	80065be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80a9 	beq.w	8006740 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ee:	4b9e      	ldr	r3, [pc, #632]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065f8:	4b9b      	ldr	r3, [pc, #620]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2b08      	cmp	r3, #8
 8006602:	d007      	beq.n	8006614 <HAL_RCC_OscConfig+0x2cc>
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	2b18      	cmp	r3, #24
 8006608:	d13a      	bne.n	8006680 <HAL_RCC_OscConfig+0x338>
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	2b01      	cmp	r3, #1
 8006612:	d135      	bne.n	8006680 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006614:	4b94      	ldr	r3, [pc, #592]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <HAL_RCC_OscConfig+0x2e4>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	2b80      	cmp	r3, #128	; 0x80
 8006626:	d001      	beq.n	800662c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e296      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800662c:	f7fc f968 	bl	8002900 <HAL_GetREVID>
 8006630:	4603      	mov	r3, r0
 8006632:	f241 0203 	movw	r2, #4099	; 0x1003
 8006636:	4293      	cmp	r3, r2
 8006638:	d817      	bhi.n	800666a <HAL_RCC_OscConfig+0x322>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	2b20      	cmp	r3, #32
 8006640:	d108      	bne.n	8006654 <HAL_RCC_OscConfig+0x30c>
 8006642:	4b89      	ldr	r3, [pc, #548]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800664a:	4a87      	ldr	r2, [pc, #540]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 800664c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006650:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006652:	e075      	b.n	8006740 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006654:	4b84      	ldr	r3, [pc, #528]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	069b      	lsls	r3, r3, #26
 8006662:	4981      	ldr	r1, [pc, #516]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 8006664:	4313      	orrs	r3, r2
 8006666:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006668:	e06a      	b.n	8006740 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800666a:	4b7f      	ldr	r3, [pc, #508]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	061b      	lsls	r3, r3, #24
 8006678:	497b      	ldr	r1, [pc, #492]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 800667a:	4313      	orrs	r3, r2
 800667c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800667e:	e05f      	b.n	8006740 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d042      	beq.n	800670e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006688:	4b77      	ldr	r3, [pc, #476]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a76      	ldr	r2, [pc, #472]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 800668e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006694:	f7fc f904 	bl	80028a0 <HAL_GetTick>
 8006698:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800669c:	f7fc f900 	bl	80028a0 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e255      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066ae:	4b6e      	ldr	r3, [pc, #440]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0f0      	beq.n	800669c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066ba:	f7fc f921 	bl	8002900 <HAL_GetREVID>
 80066be:	4603      	mov	r3, r0
 80066c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d817      	bhi.n	80066f8 <HAL_RCC_OscConfig+0x3b0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d108      	bne.n	80066e2 <HAL_RCC_OscConfig+0x39a>
 80066d0:	4b65      	ldr	r3, [pc, #404]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80066d8:	4a63      	ldr	r2, [pc, #396]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80066da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066de:	6053      	str	r3, [r2, #4]
 80066e0:	e02e      	b.n	8006740 <HAL_RCC_OscConfig+0x3f8>
 80066e2:	4b61      	ldr	r3, [pc, #388]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	069b      	lsls	r3, r3, #26
 80066f0:	495d      	ldr	r1, [pc, #372]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	604b      	str	r3, [r1, #4]
 80066f6:	e023      	b.n	8006740 <HAL_RCC_OscConfig+0x3f8>
 80066f8:	4b5b      	ldr	r3, [pc, #364]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	061b      	lsls	r3, r3, #24
 8006706:	4958      	ldr	r1, [pc, #352]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 8006708:	4313      	orrs	r3, r2
 800670a:	60cb      	str	r3, [r1, #12]
 800670c:	e018      	b.n	8006740 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800670e:	4b56      	ldr	r3, [pc, #344]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a55      	ldr	r2, [pc, #340]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 8006714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671a:	f7fc f8c1 	bl	80028a0 <HAL_GetTick>
 800671e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006722:	f7fc f8bd 	bl	80028a0 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e212      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006734:	4b4c      	ldr	r3, [pc, #304]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1f0      	bne.n	8006722 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d036      	beq.n	80067ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d019      	beq.n	8006788 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006754:	4b44      	ldr	r3, [pc, #272]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 8006756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006758:	4a43      	ldr	r2, [pc, #268]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 800675a:	f043 0301 	orr.w	r3, r3, #1
 800675e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006760:	f7fc f89e 	bl	80028a0 <HAL_GetTick>
 8006764:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006768:	f7fc f89a 	bl	80028a0 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e1ef      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800677a:	4b3b      	ldr	r3, [pc, #236]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 800677c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f0      	beq.n	8006768 <HAL_RCC_OscConfig+0x420>
 8006786:	e018      	b.n	80067ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006788:	4b37      	ldr	r3, [pc, #220]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 800678a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678c:	4a36      	ldr	r2, [pc, #216]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 800678e:	f023 0301 	bic.w	r3, r3, #1
 8006792:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006794:	f7fc f884 	bl	80028a0 <HAL_GetTick>
 8006798:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800679c:	f7fc f880 	bl	80028a0 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e1d5      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067ae:	4b2e      	ldr	r3, [pc, #184]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80067b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1f0      	bne.n	800679c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0320 	and.w	r3, r3, #32
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d036      	beq.n	8006834 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d019      	beq.n	8006802 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067ce:	4b26      	ldr	r3, [pc, #152]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a25      	ldr	r2, [pc, #148]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80067d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067da:	f7fc f861 	bl	80028a0 <HAL_GetTick>
 80067de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067e0:	e008      	b.n	80067f4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80067e2:	f7fc f85d 	bl	80028a0 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d901      	bls.n	80067f4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e1b2      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067f4:	4b1c      	ldr	r3, [pc, #112]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0f0      	beq.n	80067e2 <HAL_RCC_OscConfig+0x49a>
 8006800:	e018      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006802:	4b19      	ldr	r3, [pc, #100]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a18      	ldr	r2, [pc, #96]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 8006808:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800680c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800680e:	f7fc f847 	bl	80028a0 <HAL_GetTick>
 8006812:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006814:	e008      	b.n	8006828 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006816:	f7fc f843 	bl	80028a0 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e198      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006828:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <HAL_RCC_OscConfig+0x520>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1f0      	bne.n	8006816 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 8085 	beq.w	800694c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006842:	4b0a      	ldr	r3, [pc, #40]	; (800686c <HAL_RCC_OscConfig+0x524>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a09      	ldr	r2, [pc, #36]	; (800686c <HAL_RCC_OscConfig+0x524>)
 8006848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800684c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800684e:	f7fc f827 	bl	80028a0 <HAL_GetTick>
 8006852:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006854:	e00c      	b.n	8006870 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006856:	f7fc f823 	bl	80028a0 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b64      	cmp	r3, #100	; 0x64
 8006862:	d905      	bls.n	8006870 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e178      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
 8006868:	58024400 	.word	0x58024400
 800686c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006870:	4b96      	ldr	r3, [pc, #600]	; (8006acc <HAL_RCC_OscConfig+0x784>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0ec      	beq.n	8006856 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d106      	bne.n	8006892 <HAL_RCC_OscConfig+0x54a>
 8006884:	4b92      	ldr	r3, [pc, #584]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006888:	4a91      	ldr	r2, [pc, #580]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 800688a:	f043 0301 	orr.w	r3, r3, #1
 800688e:	6713      	str	r3, [r2, #112]	; 0x70
 8006890:	e02d      	b.n	80068ee <HAL_RCC_OscConfig+0x5a6>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10c      	bne.n	80068b4 <HAL_RCC_OscConfig+0x56c>
 800689a:	4b8d      	ldr	r3, [pc, #564]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	4a8c      	ldr	r2, [pc, #560]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80068a0:	f023 0301 	bic.w	r3, r3, #1
 80068a4:	6713      	str	r3, [r2, #112]	; 0x70
 80068a6:	4b8a      	ldr	r3, [pc, #552]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068aa:	4a89      	ldr	r2, [pc, #548]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80068ac:	f023 0304 	bic.w	r3, r3, #4
 80068b0:	6713      	str	r3, [r2, #112]	; 0x70
 80068b2:	e01c      	b.n	80068ee <HAL_RCC_OscConfig+0x5a6>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d10c      	bne.n	80068d6 <HAL_RCC_OscConfig+0x58e>
 80068bc:	4b84      	ldr	r3, [pc, #528]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80068be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c0:	4a83      	ldr	r2, [pc, #524]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80068c2:	f043 0304 	orr.w	r3, r3, #4
 80068c6:	6713      	str	r3, [r2, #112]	; 0x70
 80068c8:	4b81      	ldr	r3, [pc, #516]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	4a80      	ldr	r2, [pc, #512]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80068ce:	f043 0301 	orr.w	r3, r3, #1
 80068d2:	6713      	str	r3, [r2, #112]	; 0x70
 80068d4:	e00b      	b.n	80068ee <HAL_RCC_OscConfig+0x5a6>
 80068d6:	4b7e      	ldr	r3, [pc, #504]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	4a7d      	ldr	r2, [pc, #500]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	6713      	str	r3, [r2, #112]	; 0x70
 80068e2:	4b7b      	ldr	r3, [pc, #492]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e6:	4a7a      	ldr	r2, [pc, #488]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80068e8:	f023 0304 	bic.w	r3, r3, #4
 80068ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d015      	beq.n	8006922 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f6:	f7fb ffd3 	bl	80028a0 <HAL_GetTick>
 80068fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068fc:	e00a      	b.n	8006914 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068fe:	f7fb ffcf 	bl	80028a0 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f241 3288 	movw	r2, #5000	; 0x1388
 800690c:	4293      	cmp	r3, r2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e122      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006914:	4b6e      	ldr	r3, [pc, #440]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0ee      	beq.n	80068fe <HAL_RCC_OscConfig+0x5b6>
 8006920:	e014      	b.n	800694c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006922:	f7fb ffbd 	bl	80028a0 <HAL_GetTick>
 8006926:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006928:	e00a      	b.n	8006940 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800692a:	f7fb ffb9 	bl	80028a0 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	f241 3288 	movw	r2, #5000	; 0x1388
 8006938:	4293      	cmp	r3, r2
 800693a:	d901      	bls.n	8006940 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e10c      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006940:	4b63      	ldr	r3, [pc, #396]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1ee      	bne.n	800692a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 8101 	beq.w	8006b58 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006956:	4b5e      	ldr	r3, [pc, #376]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800695e:	2b18      	cmp	r3, #24
 8006960:	f000 80bc 	beq.w	8006adc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	2b02      	cmp	r3, #2
 800696a:	f040 8095 	bne.w	8006a98 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800696e:	4b58      	ldr	r3, [pc, #352]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a57      	ldr	r2, [pc, #348]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697a:	f7fb ff91 	bl	80028a0 <HAL_GetTick>
 800697e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006982:	f7fb ff8d 	bl	80028a0 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e0e2      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006994:	4b4e      	ldr	r3, [pc, #312]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1f0      	bne.n	8006982 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069a0:	4b4b      	ldr	r3, [pc, #300]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80069a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069a4:	4b4b      	ldr	r3, [pc, #300]	; (8006ad4 <HAL_RCC_OscConfig+0x78c>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80069b0:	0112      	lsls	r2, r2, #4
 80069b2:	430a      	orrs	r2, r1
 80069b4:	4946      	ldr	r1, [pc, #280]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	628b      	str	r3, [r1, #40]	; 0x28
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	3b01      	subs	r3, #1
 80069c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c8:	3b01      	subs	r3, #1
 80069ca:	025b      	lsls	r3, r3, #9
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	3b01      	subs	r3, #1
 80069d6:	041b      	lsls	r3, r3, #16
 80069d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e2:	3b01      	subs	r3, #1
 80069e4:	061b      	lsls	r3, r3, #24
 80069e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069ea:	4939      	ldr	r1, [pc, #228]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80069f0:	4b37      	ldr	r3, [pc, #220]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	4a36      	ldr	r2, [pc, #216]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80069f6:	f023 0301 	bic.w	r3, r3, #1
 80069fa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80069fc:	4b34      	ldr	r3, [pc, #208]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 80069fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a00:	4b35      	ldr	r3, [pc, #212]	; (8006ad8 <HAL_RCC_OscConfig+0x790>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a08:	00d2      	lsls	r2, r2, #3
 8006a0a:	4931      	ldr	r1, [pc, #196]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a10:	4b2f      	ldr	r3, [pc, #188]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	f023 020c 	bic.w	r2, r3, #12
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	492c      	ldr	r1, [pc, #176]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a22:	4b2b      	ldr	r3, [pc, #172]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a26:	f023 0202 	bic.w	r2, r3, #2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	4928      	ldr	r1, [pc, #160]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a34:	4b26      	ldr	r3, [pc, #152]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	4a25      	ldr	r2, [pc, #148]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a40:	4b23      	ldr	r3, [pc, #140]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	4a22      	ldr	r2, [pc, #136]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a4c:	4b20      	ldr	r3, [pc, #128]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	4a1f      	ldr	r2, [pc, #124]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006a58:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	4a1c      	ldr	r2, [pc, #112]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a5e:	f043 0301 	orr.w	r3, r3, #1
 8006a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a64:	4b1a      	ldr	r3, [pc, #104]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a19      	ldr	r2, [pc, #100]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a70:	f7fb ff16 	bl	80028a0 <HAL_GetTick>
 8006a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a78:	f7fb ff12 	bl	80028a0 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e067      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a8a:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0f0      	beq.n	8006a78 <HAL_RCC_OscConfig+0x730>
 8006a96:	e05f      	b.n	8006b58 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a98:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a0c      	ldr	r2, [pc, #48]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa4:	f7fb fefc 	bl	80028a0 <HAL_GetTick>
 8006aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aac:	f7fb fef8 	bl	80028a0 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e04d      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006abe:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <HAL_RCC_OscConfig+0x788>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f0      	bne.n	8006aac <HAL_RCC_OscConfig+0x764>
 8006aca:	e045      	b.n	8006b58 <HAL_RCC_OscConfig+0x810>
 8006acc:	58024800 	.word	0x58024800
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	fffffc0c 	.word	0xfffffc0c
 8006ad8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006adc:	4b21      	ldr	r3, [pc, #132]	; (8006b64 <HAL_RCC_OscConfig+0x81c>)
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ae2:	4b20      	ldr	r3, [pc, #128]	; (8006b64 <HAL_RCC_OscConfig+0x81c>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d031      	beq.n	8006b54 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f003 0203 	and.w	r2, r3, #3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d12a      	bne.n	8006b54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d122      	bne.n	8006b54 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d11a      	bne.n	8006b54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	0a5b      	lsrs	r3, r3, #9
 8006b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d111      	bne.n	8006b54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	0c1b      	lsrs	r3, r3, #16
 8006b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d108      	bne.n	8006b54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	0e1b      	lsrs	r3, r3, #24
 8006b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d001      	beq.n	8006b58 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e000      	b.n	8006b5a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3730      	adds	r7, #48	; 0x30
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	58024400 	.word	0x58024400

08006b68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e19c      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b7c:	4b8a      	ldr	r3, [pc, #552]	; (8006da8 <HAL_RCC_ClockConfig+0x240>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d910      	bls.n	8006bac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b8a:	4b87      	ldr	r3, [pc, #540]	; (8006da8 <HAL_RCC_ClockConfig+0x240>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f023 020f 	bic.w	r2, r3, #15
 8006b92:	4985      	ldr	r1, [pc, #532]	; (8006da8 <HAL_RCC_ClockConfig+0x240>)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b9a:	4b83      	ldr	r3, [pc, #524]	; (8006da8 <HAL_RCC_ClockConfig+0x240>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d001      	beq.n	8006bac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e184      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d010      	beq.n	8006bda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	4b7b      	ldr	r3, [pc, #492]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d908      	bls.n	8006bda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bc8:	4b78      	ldr	r3, [pc, #480]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	4975      	ldr	r1, [pc, #468]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d010      	beq.n	8006c08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695a      	ldr	r2, [r3, #20]
 8006bea:	4b70      	ldr	r3, [pc, #448]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d908      	bls.n	8006c08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bf6:	4b6d      	ldr	r3, [pc, #436]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	496a      	ldr	r1, [pc, #424]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d010      	beq.n	8006c36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699a      	ldr	r2, [r3, #24]
 8006c18:	4b64      	ldr	r3, [pc, #400]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d908      	bls.n	8006c36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c24:	4b61      	ldr	r3, [pc, #388]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	495e      	ldr	r1, [pc, #376]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d010      	beq.n	8006c64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69da      	ldr	r2, [r3, #28]
 8006c46:	4b59      	ldr	r3, [pc, #356]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d908      	bls.n	8006c64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006c52:	4b56      	ldr	r3, [pc, #344]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	4953      	ldr	r1, [pc, #332]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d010      	beq.n	8006c92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	4b4d      	ldr	r3, [pc, #308]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	f003 030f 	and.w	r3, r3, #15
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d908      	bls.n	8006c92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c80:	4b4a      	ldr	r3, [pc, #296]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	f023 020f 	bic.w	r2, r3, #15
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	4947      	ldr	r1, [pc, #284]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d055      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c9e:	4b43      	ldr	r3, [pc, #268]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	4940      	ldr	r1, [pc, #256]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d107      	bne.n	8006cc8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cb8:	4b3c      	ldr	r3, [pc, #240]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d121      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e0f6      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d107      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cd0:	4b36      	ldr	r3, [pc, #216]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d115      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e0ea      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d107      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ce8:	4b30      	ldr	r3, [pc, #192]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d109      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e0de      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cf8:	4b2c      	ldr	r3, [pc, #176]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0d6      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d08:	4b28      	ldr	r3, [pc, #160]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f023 0207 	bic.w	r2, r3, #7
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4925      	ldr	r1, [pc, #148]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d1a:	f7fb fdc1 	bl	80028a0 <HAL_GetTick>
 8006d1e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d20:	e00a      	b.n	8006d38 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d22:	f7fb fdbd 	bl	80028a0 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e0be      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d38:	4b1c      	ldr	r3, [pc, #112]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d1eb      	bne.n	8006d22 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d010      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	4b14      	ldr	r3, [pc, #80]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d208      	bcs.n	8006d78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d66:	4b11      	ldr	r3, [pc, #68]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	f023 020f 	bic.w	r2, r3, #15
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	490e      	ldr	r1, [pc, #56]	; (8006dac <HAL_RCC_ClockConfig+0x244>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d78:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <HAL_RCC_ClockConfig+0x240>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d214      	bcs.n	8006db0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d86:	4b08      	ldr	r3, [pc, #32]	; (8006da8 <HAL_RCC_ClockConfig+0x240>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f023 020f 	bic.w	r2, r3, #15
 8006d8e:	4906      	ldr	r1, [pc, #24]	; (8006da8 <HAL_RCC_ClockConfig+0x240>)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d96:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <HAL_RCC_ClockConfig+0x240>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d005      	beq.n	8006db0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e086      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x34e>
 8006da8:	52002000 	.word	0x52002000
 8006dac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d010      	beq.n	8006dde <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	4b3f      	ldr	r3, [pc, #252]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d208      	bcs.n	8006dde <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dcc:	4b3c      	ldr	r3, [pc, #240]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	4939      	ldr	r1, [pc, #228]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d010      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	695a      	ldr	r2, [r3, #20]
 8006dee:	4b34      	ldr	r3, [pc, #208]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d208      	bcs.n	8006e0c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006dfa:	4b31      	ldr	r3, [pc, #196]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	492e      	ldr	r1, [pc, #184]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d010      	beq.n	8006e3a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	699a      	ldr	r2, [r3, #24]
 8006e1c:	4b28      	ldr	r3, [pc, #160]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d208      	bcs.n	8006e3a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e28:	4b25      	ldr	r3, [pc, #148]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	4922      	ldr	r1, [pc, #136]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d010      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69da      	ldr	r2, [r3, #28]
 8006e4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d208      	bcs.n	8006e68 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e56:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	4917      	ldr	r1, [pc, #92]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e68:	f000 f834 	bl	8006ed4 <HAL_RCC_GetSysClockFreq>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	4b14      	ldr	r3, [pc, #80]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	0a1b      	lsrs	r3, r3, #8
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	4912      	ldr	r1, [pc, #72]	; (8006ec4 <HAL_RCC_ClockConfig+0x35c>)
 8006e7a:	5ccb      	ldrb	r3, [r1, r3]
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
 8006e84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e86:	4b0e      	ldr	r3, [pc, #56]	; (8006ec0 <HAL_RCC_ClockConfig+0x358>)
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f003 030f 	and.w	r3, r3, #15
 8006e8e:	4a0d      	ldr	r2, [pc, #52]	; (8006ec4 <HAL_RCC_ClockConfig+0x35c>)
 8006e90:	5cd3      	ldrb	r3, [r2, r3]
 8006e92:	f003 031f 	and.w	r3, r3, #31
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9c:	4a0a      	ldr	r2, [pc, #40]	; (8006ec8 <HAL_RCC_ClockConfig+0x360>)
 8006e9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ea0:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <HAL_RCC_ClockConfig+0x364>)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006ea6:	4b0a      	ldr	r3, [pc, #40]	; (8006ed0 <HAL_RCC_ClockConfig+0x368>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fb fcae 	bl	800280c <HAL_InitTick>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	58024400 	.word	0x58024400
 8006ec4:	0800c4ec 	.word	0x0800c4ec
 8006ec8:	24000004 	.word	0x24000004
 8006ecc:	24000000 	.word	0x24000000
 8006ed0:	24000008 	.word	0x24000008

08006ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b089      	sub	sp, #36	; 0x24
 8006ed8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eda:	4bb3      	ldr	r3, [pc, #716]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ee2:	2b18      	cmp	r3, #24
 8006ee4:	f200 8155 	bhi.w	8007192 <HAL_RCC_GetSysClockFreq+0x2be>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f55 	.word	0x08006f55
 8006ef4:	08007193 	.word	0x08007193
 8006ef8:	08007193 	.word	0x08007193
 8006efc:	08007193 	.word	0x08007193
 8006f00:	08007193 	.word	0x08007193
 8006f04:	08007193 	.word	0x08007193
 8006f08:	08007193 	.word	0x08007193
 8006f0c:	08007193 	.word	0x08007193
 8006f10:	08006f7b 	.word	0x08006f7b
 8006f14:	08007193 	.word	0x08007193
 8006f18:	08007193 	.word	0x08007193
 8006f1c:	08007193 	.word	0x08007193
 8006f20:	08007193 	.word	0x08007193
 8006f24:	08007193 	.word	0x08007193
 8006f28:	08007193 	.word	0x08007193
 8006f2c:	08007193 	.word	0x08007193
 8006f30:	08006f81 	.word	0x08006f81
 8006f34:	08007193 	.word	0x08007193
 8006f38:	08007193 	.word	0x08007193
 8006f3c:	08007193 	.word	0x08007193
 8006f40:	08007193 	.word	0x08007193
 8006f44:	08007193 	.word	0x08007193
 8006f48:	08007193 	.word	0x08007193
 8006f4c:	08007193 	.word	0x08007193
 8006f50:	08006f87 	.word	0x08006f87
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f54:	4b94      	ldr	r3, [pc, #592]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d009      	beq.n	8006f74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f60:	4b91      	ldr	r3, [pc, #580]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	08db      	lsrs	r3, r3, #3
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	4a90      	ldr	r2, [pc, #576]	; (80071ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006f72:	e111      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f74:	4b8d      	ldr	r3, [pc, #564]	; (80071ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f76:	61bb      	str	r3, [r7, #24]
    break;
 8006f78:	e10e      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006f7a:	4b8d      	ldr	r3, [pc, #564]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f7c:	61bb      	str	r3, [r7, #24]
    break;
 8006f7e:	e10b      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006f80:	4b8c      	ldr	r3, [pc, #560]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f82:	61bb      	str	r3, [r7, #24]
    break;
 8006f84:	e108      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f86:	4b88      	ldr	r3, [pc, #544]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f90:	4b85      	ldr	r3, [pc, #532]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	091b      	lsrs	r3, r3, #4
 8006f96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f9a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f9c:	4b82      	ldr	r3, [pc, #520]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006fa6:	4b80      	ldr	r3, [pc, #512]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006faa:	08db      	lsrs	r3, r3, #3
 8006fac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	fb02 f303 	mul.w	r3, r2, r3
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80e1 	beq.w	800718c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	f000 8083 	beq.w	80070d8 <HAL_RCC_GetSysClockFreq+0x204>
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	f200 80a1 	bhi.w	800711c <HAL_RCC_GetSysClockFreq+0x248>
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <HAL_RCC_GetSysClockFreq+0x114>
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d056      	beq.n	8007094 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006fe6:	e099      	b.n	800711c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fe8:	4b6f      	ldr	r3, [pc, #444]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0320 	and.w	r3, r3, #32
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d02d      	beq.n	8007050 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ff4:	4b6c      	ldr	r3, [pc, #432]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	08db      	lsrs	r3, r3, #3
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	4a6b      	ldr	r2, [pc, #428]	; (80071ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007000:	fa22 f303 	lsr.w	r3, r2, r3
 8007004:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	ee07 3a90 	vmov	s15, r3
 800700c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701e:	4b62      	ldr	r3, [pc, #392]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007032:	eddf 5a61 	vldr	s11, [pc, #388]	; 80071b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800704e:	e087      	b.n	8007160 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80071bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800705e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007062:	4b51      	ldr	r3, [pc, #324]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007072:	ed97 6a02 	vldr	s12, [r7, #8]
 8007076:	eddf 5a50 	vldr	s11, [pc, #320]	; 80071b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800707a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007092:	e065      	b.n	8007160 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80071c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80070a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a6:	4b40      	ldr	r3, [pc, #256]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80071b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d6:	e043      	b.n	8007160 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80071c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80070e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ea:	4b2f      	ldr	r3, [pc, #188]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80070fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80071b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800710e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800711a:	e021      	b.n	8007160 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007126:	eddf 6a26 	vldr	s13, [pc, #152]	; 80071c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800712a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712e:	4b1e      	ldr	r3, [pc, #120]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007142:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80071b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800715e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007160:	4b11      	ldr	r3, [pc, #68]	; (80071a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	0a5b      	lsrs	r3, r3, #9
 8007166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800716a:	3301      	adds	r3, #1
 800716c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	ee07 3a90 	vmov	s15, r3
 8007174:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007178:	edd7 6a07 	vldr	s13, [r7, #28]
 800717c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007184:	ee17 3a90 	vmov	r3, s15
 8007188:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800718a:	e005      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	61bb      	str	r3, [r7, #24]
    break;
 8007190:	e002      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007192:	4b07      	ldr	r3, [pc, #28]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007194:	61bb      	str	r3, [r7, #24]
    break;
 8007196:	bf00      	nop
  }

  return sysclockfreq;
 8007198:	69bb      	ldr	r3, [r7, #24]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3724      	adds	r7, #36	; 0x24
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	58024400 	.word	0x58024400
 80071ac:	03d09000 	.word	0x03d09000
 80071b0:	003d0900 	.word	0x003d0900
 80071b4:	02dc6c00 	.word	0x02dc6c00
 80071b8:	46000000 	.word	0x46000000
 80071bc:	4c742400 	.word	0x4c742400
 80071c0:	4a742400 	.word	0x4a742400
 80071c4:	4c371b00 	.word	0x4c371b00

080071c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80071ce:	f7ff fe81 	bl	8006ed4 <HAL_RCC_GetSysClockFreq>
 80071d2:	4602      	mov	r2, r0
 80071d4:	4b10      	ldr	r3, [pc, #64]	; (8007218 <HAL_RCC_GetHCLKFreq+0x50>)
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	0a1b      	lsrs	r3, r3, #8
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	490f      	ldr	r1, [pc, #60]	; (800721c <HAL_RCC_GetHCLKFreq+0x54>)
 80071e0:	5ccb      	ldrb	r3, [r1, r3]
 80071e2:	f003 031f 	and.w	r3, r3, #31
 80071e6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071ec:	4b0a      	ldr	r3, [pc, #40]	; (8007218 <HAL_RCC_GetHCLKFreq+0x50>)
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	4a09      	ldr	r2, [pc, #36]	; (800721c <HAL_RCC_GetHCLKFreq+0x54>)
 80071f6:	5cd3      	ldrb	r3, [r2, r3]
 80071f8:	f003 031f 	and.w	r3, r3, #31
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007202:	4a07      	ldr	r2, [pc, #28]	; (8007220 <HAL_RCC_GetHCLKFreq+0x58>)
 8007204:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007206:	4a07      	ldr	r2, [pc, #28]	; (8007224 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <HAL_RCC_GetHCLKFreq+0x58>)
 800720e:	681b      	ldr	r3, [r3, #0]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	58024400 	.word	0x58024400
 800721c:	0800c4ec 	.word	0x0800c4ec
 8007220:	24000004 	.word	0x24000004
 8007224:	24000000 	.word	0x24000000

08007228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800722c:	f7ff ffcc 	bl	80071c8 <HAL_RCC_GetHCLKFreq>
 8007230:	4602      	mov	r2, r0
 8007232:	4b06      	ldr	r3, [pc, #24]	; (800724c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	091b      	lsrs	r3, r3, #4
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	4904      	ldr	r1, [pc, #16]	; (8007250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800723e:	5ccb      	ldrb	r3, [r1, r3]
 8007240:	f003 031f 	and.w	r3, r3, #31
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007248:	4618      	mov	r0, r3
 800724a:	bd80      	pop	{r7, pc}
 800724c:	58024400 	.word	0x58024400
 8007250:	0800c4ec 	.word	0x0800c4ec

08007254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007258:	f7ff ffb6 	bl	80071c8 <HAL_RCC_GetHCLKFreq>
 800725c:	4602      	mov	r2, r0
 800725e:	4b06      	ldr	r3, [pc, #24]	; (8007278 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	0a1b      	lsrs	r3, r3, #8
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	4904      	ldr	r1, [pc, #16]	; (800727c <HAL_RCC_GetPCLK2Freq+0x28>)
 800726a:	5ccb      	ldrb	r3, [r1, r3]
 800726c:	f003 031f 	and.w	r3, r3, #31
 8007270:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007274:	4618      	mov	r0, r3
 8007276:	bd80      	pop	{r7, pc}
 8007278:	58024400 	.word	0x58024400
 800727c:	0800c4ec 	.word	0x0800c4ec

08007280 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007288:	2300      	movs	r3, #0
 800728a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800728c:	2300      	movs	r3, #0
 800728e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d03f      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072a4:	d02a      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80072a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072aa:	d824      	bhi.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80072ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072b0:	d018      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80072b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072b6:	d81e      	bhi.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80072bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072c0:	d007      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80072c2:	e018      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c4:	4bab      	ldr	r3, [pc, #684]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	4aaa      	ldr	r2, [pc, #680]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80072d0:	e015      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3304      	adds	r3, #4
 80072d6:	2102      	movs	r1, #2
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 fff3 	bl	80092c4 <RCCEx_PLL2_Config>
 80072de:	4603      	mov	r3, r0
 80072e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80072e2:	e00c      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3324      	adds	r3, #36	; 0x24
 80072e8:	2102      	movs	r1, #2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 f89c 	bl	8009428 <RCCEx_PLL3_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80072f4:	e003      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
      break;
 80072fa:	e000      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80072fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d109      	bne.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007304:	4b9b      	ldr	r3, [pc, #620]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007310:	4998      	ldr	r1, [pc, #608]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007312:	4313      	orrs	r3, r2
 8007314:	650b      	str	r3, [r1, #80]	; 0x50
 8007316:	e001      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007324:	2b00      	cmp	r3, #0
 8007326:	d03d      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732c:	2b04      	cmp	r3, #4
 800732e:	d826      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007330:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007336:	bf00      	nop
 8007338:	0800734d 	.word	0x0800734d
 800733c:	0800735b 	.word	0x0800735b
 8007340:	0800736d 	.word	0x0800736d
 8007344:	08007385 	.word	0x08007385
 8007348:	08007385 	.word	0x08007385
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800734c:	4b89      	ldr	r3, [pc, #548]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	4a88      	ldr	r2, [pc, #544]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007356:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007358:	e015      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3304      	adds	r3, #4
 800735e:	2100      	movs	r1, #0
 8007360:	4618      	mov	r0, r3
 8007362:	f001 ffaf 	bl	80092c4 <RCCEx_PLL2_Config>
 8007366:	4603      	mov	r3, r0
 8007368:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800736a:	e00c      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3324      	adds	r3, #36	; 0x24
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f002 f858 	bl	8009428 <RCCEx_PLL3_Config>
 8007378:	4603      	mov	r3, r0
 800737a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800737c:	e003      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	75fb      	strb	r3, [r7, #23]
      break;
 8007382:	e000      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d109      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800738c:	4b79      	ldr	r3, [pc, #484]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800738e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007390:	f023 0207 	bic.w	r2, r3, #7
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007398:	4976      	ldr	r1, [pc, #472]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800739a:	4313      	orrs	r3, r2
 800739c:	650b      	str	r3, [r1, #80]	; 0x50
 800739e:	e001      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d042      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b8:	d02b      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80073ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073be:	d825      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80073c0:	2bc0      	cmp	r3, #192	; 0xc0
 80073c2:	d028      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80073c4:	2bc0      	cmp	r3, #192	; 0xc0
 80073c6:	d821      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80073c8:	2b80      	cmp	r3, #128	; 0x80
 80073ca:	d016      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80073cc:	2b80      	cmp	r3, #128	; 0x80
 80073ce:	d81d      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	d007      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80073d8:	e018      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073da:	4b66      	ldr	r3, [pc, #408]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	4a65      	ldr	r2, [pc, #404]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80073e6:	e017      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3304      	adds	r3, #4
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f001 ff68 	bl	80092c4 <RCCEx_PLL2_Config>
 80073f4:	4603      	mov	r3, r0
 80073f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80073f8:	e00e      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3324      	adds	r3, #36	; 0x24
 80073fe:	2100      	movs	r1, #0
 8007400:	4618      	mov	r0, r3
 8007402:	f002 f811 	bl	8009428 <RCCEx_PLL3_Config>
 8007406:	4603      	mov	r3, r0
 8007408:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800740a:	e005      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	75fb      	strb	r3, [r7, #23]
      break;
 8007410:	e002      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007412:	bf00      	nop
 8007414:	e000      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007418:	7dfb      	ldrb	r3, [r7, #23]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800741e:	4b55      	ldr	r3, [pc, #340]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007422:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742a:	4952      	ldr	r1, [pc, #328]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800742c:	4313      	orrs	r3, r2
 800742e:	650b      	str	r3, [r1, #80]	; 0x50
 8007430:	e001      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800743e:	2b00      	cmp	r3, #0
 8007440:	d049      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007448:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800744c:	d030      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800744e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007452:	d82a      	bhi.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007454:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007458:	d02c      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800745a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800745e:	d824      	bhi.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007464:	d018      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800746a:	d81e      	bhi.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007470:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007474:	d007      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007476:	e018      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007478:	4b3e      	ldr	r3, [pc, #248]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	4a3d      	ldr	r2, [pc, #244]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800747e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007484:	e017      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3304      	adds	r3, #4
 800748a:	2100      	movs	r1, #0
 800748c:	4618      	mov	r0, r3
 800748e:	f001 ff19 	bl	80092c4 <RCCEx_PLL2_Config>
 8007492:	4603      	mov	r3, r0
 8007494:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007496:	e00e      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3324      	adds	r3, #36	; 0x24
 800749c:	2100      	movs	r1, #0
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 ffc2 	bl	8009428 <RCCEx_PLL3_Config>
 80074a4:	4603      	mov	r3, r0
 80074a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074a8:	e005      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	75fb      	strb	r3, [r7, #23]
      break;
 80074ae:	e002      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80074b0:	bf00      	nop
 80074b2:	e000      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80074b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074b6:	7dfb      	ldrb	r3, [r7, #23]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80074bc:	4b2d      	ldr	r3, [pc, #180]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074ca:	492a      	ldr	r1, [pc, #168]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	658b      	str	r3, [r1, #88]	; 0x58
 80074d0:	e001      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d04c      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80074e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074ec:	d030      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80074ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074f2:	d82a      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80074f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074f8:	d02c      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80074fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074fe:	d824      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007504:	d018      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800750a:	d81e      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007514:	d007      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007516:	e018      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007518:	4b16      	ldr	r3, [pc, #88]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	4a15      	ldr	r2, [pc, #84]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800751e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007522:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007524:	e017      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3304      	adds	r3, #4
 800752a:	2100      	movs	r1, #0
 800752c:	4618      	mov	r0, r3
 800752e:	f001 fec9 	bl	80092c4 <RCCEx_PLL2_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007536:	e00e      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3324      	adds	r3, #36	; 0x24
 800753c:	2100      	movs	r1, #0
 800753e:	4618      	mov	r0, r3
 8007540:	f001 ff72 	bl	8009428 <RCCEx_PLL3_Config>
 8007544:	4603      	mov	r3, r0
 8007546:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007548:	e005      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	75fb      	strb	r3, [r7, #23]
      break;
 800754e:	e002      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007550:	bf00      	nop
 8007552:	e000      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007556:	7dfb      	ldrb	r3, [r7, #23]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10d      	bne.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800755c:	4b05      	ldr	r3, [pc, #20]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800755e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007560:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800756a:	4902      	ldr	r1, [pc, #8]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800756c:	4313      	orrs	r3, r2
 800756e:	658b      	str	r3, [r1, #88]	; 0x58
 8007570:	e004      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007572:	bf00      	nop
 8007574:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d032      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800758c:	2b30      	cmp	r3, #48	; 0x30
 800758e:	d01c      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007590:	2b30      	cmp	r3, #48	; 0x30
 8007592:	d817      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007594:	2b20      	cmp	r3, #32
 8007596:	d00c      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007598:	2b20      	cmp	r3, #32
 800759a:	d813      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d016      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80075a0:	2b10      	cmp	r3, #16
 80075a2:	d10f      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a4:	4baf      	ldr	r3, [pc, #700]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	4aae      	ldr	r2, [pc, #696]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80075b0:	e00e      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3304      	adds	r3, #4
 80075b6:	2102      	movs	r1, #2
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 fe83 	bl	80092c4 <RCCEx_PLL2_Config>
 80075be:	4603      	mov	r3, r0
 80075c0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80075c2:	e005      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	75fb      	strb	r3, [r7, #23]
      break;
 80075c8:	e002      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80075ca:	bf00      	nop
 80075cc:	e000      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80075ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d109      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075d6:	4ba3      	ldr	r3, [pc, #652]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e2:	49a0      	ldr	r1, [pc, #640]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80075e8:	e001      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d047      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007602:	d030      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007608:	d82a      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800760a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800760e:	d02c      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007610:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007614:	d824      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800761a:	d018      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800761c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007620:	d81e      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762a:	d007      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800762c:	e018      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800762e:	4b8d      	ldr	r3, [pc, #564]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	4a8c      	ldr	r2, [pc, #560]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007638:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800763a:	e017      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3304      	adds	r3, #4
 8007640:	2100      	movs	r1, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f001 fe3e 	bl	80092c4 <RCCEx_PLL2_Config>
 8007648:	4603      	mov	r3, r0
 800764a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800764c:	e00e      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3324      	adds	r3, #36	; 0x24
 8007652:	2100      	movs	r1, #0
 8007654:	4618      	mov	r0, r3
 8007656:	f001 fee7 	bl	8009428 <RCCEx_PLL3_Config>
 800765a:	4603      	mov	r3, r0
 800765c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800765e:	e005      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	75fb      	strb	r3, [r7, #23]
      break;
 8007664:	e002      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007666:	bf00      	nop
 8007668:	e000      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800766a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800766c:	7dfb      	ldrb	r3, [r7, #23]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d109      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007672:	4b7c      	ldr	r3, [pc, #496]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007676:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767e:	4979      	ldr	r1, [pc, #484]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007680:	4313      	orrs	r3, r2
 8007682:	650b      	str	r3, [r1, #80]	; 0x50
 8007684:	e001      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d049      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800769e:	d02e      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80076a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076a4:	d828      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80076a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076aa:	d02a      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80076ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076b0:	d822      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80076b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076b6:	d026      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80076b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076bc:	d81c      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80076be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076c2:	d010      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80076c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076c8:	d816      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01d      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80076ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d2:	d111      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3304      	adds	r3, #4
 80076d8:	2101      	movs	r1, #1
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 fdf2 	bl	80092c4 <RCCEx_PLL2_Config>
 80076e0:	4603      	mov	r3, r0
 80076e2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80076e4:	e012      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3324      	adds	r3, #36	; 0x24
 80076ea:	2101      	movs	r1, #1
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 fe9b 	bl	8009428 <RCCEx_PLL3_Config>
 80076f2:	4603      	mov	r3, r0
 80076f4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80076f6:	e009      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	75fb      	strb	r3, [r7, #23]
      break;
 80076fc:	e006      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80076fe:	bf00      	nop
 8007700:	e004      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007702:	bf00      	nop
 8007704:	e002      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007706:	bf00      	nop
 8007708:	e000      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800770a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007712:	4b54      	ldr	r3, [pc, #336]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007716:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800771e:	4951      	ldr	r1, [pc, #324]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007720:	4313      	orrs	r3, r2
 8007722:	650b      	str	r3, [r1, #80]	; 0x50
 8007724:	e001      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007726:	7dfb      	ldrb	r3, [r7, #23]
 8007728:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d04b      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800773c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007740:	d02e      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007746:	d828      	bhi.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774c:	d02a      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800774e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007752:	d822      	bhi.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007754:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007758:	d026      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800775a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800775e:	d81c      	bhi.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007764:	d010      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800776a:	d816      	bhi.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d01d      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007774:	d111      	bne.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3304      	adds	r3, #4
 800777a:	2101      	movs	r1, #1
 800777c:	4618      	mov	r0, r3
 800777e:	f001 fda1 	bl	80092c4 <RCCEx_PLL2_Config>
 8007782:	4603      	mov	r3, r0
 8007784:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007786:	e012      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3324      	adds	r3, #36	; 0x24
 800778c:	2101      	movs	r1, #1
 800778e:	4618      	mov	r0, r3
 8007790:	f001 fe4a 	bl	8009428 <RCCEx_PLL3_Config>
 8007794:	4603      	mov	r3, r0
 8007796:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007798:	e009      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	75fb      	strb	r3, [r7, #23]
      break;
 800779e:	e006      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80077a0:	bf00      	nop
 80077a2:	e004      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80077a4:	bf00      	nop
 80077a6:	e002      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80077a8:	bf00      	nop
 80077aa:	e000      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80077ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80077b4:	4b2b      	ldr	r3, [pc, #172]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077c2:	4928      	ldr	r1, [pc, #160]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	658b      	str	r3, [r1, #88]	; 0x58
 80077c8:	e001      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d02f      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077e2:	d00e      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80077e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077e8:	d814      	bhi.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d015      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80077ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077f2:	d10f      	bne.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f4:	4b1b      	ldr	r3, [pc, #108]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	4a1a      	ldr	r2, [pc, #104]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007800:	e00c      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3304      	adds	r3, #4
 8007806:	2101      	movs	r1, #1
 8007808:	4618      	mov	r0, r3
 800780a:	f001 fd5b 	bl	80092c4 <RCCEx_PLL2_Config>
 800780e:	4603      	mov	r3, r0
 8007810:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007812:	e003      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	75fb      	strb	r3, [r7, #23]
      break;
 8007818:	e000      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800781a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d109      	bne.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007822:	4b10      	ldr	r3, [pc, #64]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007826:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782e:	490d      	ldr	r1, [pc, #52]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007830:	4313      	orrs	r3, r2
 8007832:	650b      	str	r3, [r1, #80]	; 0x50
 8007834:	e001      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d033      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784a:	2b03      	cmp	r3, #3
 800784c:	d81c      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800784e:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	0800788f 	.word	0x0800788f
 8007858:	08007869 	.word	0x08007869
 800785c:	08007877 	.word	0x08007877
 8007860:	0800788f 	.word	0x0800788f
 8007864:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007868:	4bb8      	ldr	r3, [pc, #736]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	4ab7      	ldr	r2, [pc, #732]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800786e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007872:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007874:	e00c      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3304      	adds	r3, #4
 800787a:	2102      	movs	r1, #2
 800787c:	4618      	mov	r0, r3
 800787e:	f001 fd21 	bl	80092c4 <RCCEx_PLL2_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007886:	e003      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
      break;
 800788c:	e000      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800788e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007896:	4bad      	ldr	r3, [pc, #692]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789a:	f023 0203 	bic.w	r2, r3, #3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	49aa      	ldr	r1, [pc, #680]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078a8:	e001      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078aa:	7dfb      	ldrb	r3, [r7, #23]
 80078ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 8086 	beq.w	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078bc:	4ba4      	ldr	r3, [pc, #656]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4aa3      	ldr	r2, [pc, #652]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80078c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078c8:	f7fa ffea 	bl	80028a0 <HAL_GetTick>
 80078cc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078ce:	e009      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078d0:	f7fa ffe6 	bl	80028a0 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	2b64      	cmp	r3, #100	; 0x64
 80078dc:	d902      	bls.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	75fb      	strb	r3, [r7, #23]
        break;
 80078e2:	e005      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078e4:	4b9a      	ldr	r3, [pc, #616]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0ef      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d166      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80078f6:	4b95      	ldr	r3, [pc, #596]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007900:	4053      	eors	r3, r2
 8007902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007906:	2b00      	cmp	r3, #0
 8007908:	d013      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800790a:	4b90      	ldr	r3, [pc, #576]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800790c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007912:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007914:	4b8d      	ldr	r3, [pc, #564]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007918:	4a8c      	ldr	r2, [pc, #560]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800791a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800791e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007920:	4b8a      	ldr	r3, [pc, #552]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007924:	4a89      	ldr	r2, [pc, #548]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800792a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800792c:	4a87      	ldr	r2, [pc, #540]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800793c:	d115      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793e:	f7fa ffaf 	bl	80028a0 <HAL_GetTick>
 8007942:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007944:	e00b      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007946:	f7fa ffab 	bl	80028a0 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	f241 3288 	movw	r2, #5000	; 0x1388
 8007954:	4293      	cmp	r3, r2
 8007956:	d902      	bls.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	75fb      	strb	r3, [r7, #23]
            break;
 800795c:	e005      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800795e:	4b7b      	ldr	r3, [pc, #492]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0ed      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d126      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800797a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800797e:	d10d      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007980:	4b72      	ldr	r3, [pc, #456]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800798e:	0919      	lsrs	r1, r3, #4
 8007990:	4b70      	ldr	r3, [pc, #448]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007992:	400b      	ands	r3, r1
 8007994:	496d      	ldr	r1, [pc, #436]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007996:	4313      	orrs	r3, r2
 8007998:	610b      	str	r3, [r1, #16]
 800799a:	e005      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800799c:	4b6b      	ldr	r3, [pc, #428]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	4a6a      	ldr	r2, [pc, #424]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80079a6:	6113      	str	r3, [r2, #16]
 80079a8:	4b68      	ldr	r3, [pc, #416]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079b6:	4965      	ldr	r1, [pc, #404]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	670b      	str	r3, [r1, #112]	; 0x70
 80079bc:	e004      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	75bb      	strb	r3, [r7, #22]
 80079c2:	e001      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d07e      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079d8:	2b28      	cmp	r3, #40	; 0x28
 80079da:	d867      	bhi.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80079dc:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	08007ab3 	.word	0x08007ab3
 80079e8:	08007aad 	.word	0x08007aad
 80079ec:	08007aad 	.word	0x08007aad
 80079f0:	08007aad 	.word	0x08007aad
 80079f4:	08007aad 	.word	0x08007aad
 80079f8:	08007aad 	.word	0x08007aad
 80079fc:	08007aad 	.word	0x08007aad
 8007a00:	08007aad 	.word	0x08007aad
 8007a04:	08007a89 	.word	0x08007a89
 8007a08:	08007aad 	.word	0x08007aad
 8007a0c:	08007aad 	.word	0x08007aad
 8007a10:	08007aad 	.word	0x08007aad
 8007a14:	08007aad 	.word	0x08007aad
 8007a18:	08007aad 	.word	0x08007aad
 8007a1c:	08007aad 	.word	0x08007aad
 8007a20:	08007aad 	.word	0x08007aad
 8007a24:	08007a9b 	.word	0x08007a9b
 8007a28:	08007aad 	.word	0x08007aad
 8007a2c:	08007aad 	.word	0x08007aad
 8007a30:	08007aad 	.word	0x08007aad
 8007a34:	08007aad 	.word	0x08007aad
 8007a38:	08007aad 	.word	0x08007aad
 8007a3c:	08007aad 	.word	0x08007aad
 8007a40:	08007aad 	.word	0x08007aad
 8007a44:	08007ab3 	.word	0x08007ab3
 8007a48:	08007aad 	.word	0x08007aad
 8007a4c:	08007aad 	.word	0x08007aad
 8007a50:	08007aad 	.word	0x08007aad
 8007a54:	08007aad 	.word	0x08007aad
 8007a58:	08007aad 	.word	0x08007aad
 8007a5c:	08007aad 	.word	0x08007aad
 8007a60:	08007aad 	.word	0x08007aad
 8007a64:	08007ab3 	.word	0x08007ab3
 8007a68:	08007aad 	.word	0x08007aad
 8007a6c:	08007aad 	.word	0x08007aad
 8007a70:	08007aad 	.word	0x08007aad
 8007a74:	08007aad 	.word	0x08007aad
 8007a78:	08007aad 	.word	0x08007aad
 8007a7c:	08007aad 	.word	0x08007aad
 8007a80:	08007aad 	.word	0x08007aad
 8007a84:	08007ab3 	.word	0x08007ab3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f001 fc18 	bl	80092c4 <RCCEx_PLL2_Config>
 8007a94:	4603      	mov	r3, r0
 8007a96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007a98:	e00c      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3324      	adds	r3, #36	; 0x24
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 fcc1 	bl	8009428 <RCCEx_PLL3_Config>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007aaa:	e003      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab0:	e000      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007aba:	4b24      	ldr	r3, [pc, #144]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007abe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ac6:	4921      	ldr	r1, [pc, #132]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	654b      	str	r3, [r1, #84]	; 0x54
 8007acc:	e001      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
 8007ad0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d03e      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae2:	2b05      	cmp	r3, #5
 8007ae4:	d820      	bhi.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007ae6:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007b2f 	.word	0x08007b2f
 8007af0:	08007b05 	.word	0x08007b05
 8007af4:	08007b17 	.word	0x08007b17
 8007af8:	08007b2f 	.word	0x08007b2f
 8007afc:	08007b2f 	.word	0x08007b2f
 8007b00:	08007b2f 	.word	0x08007b2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3304      	adds	r3, #4
 8007b08:	2101      	movs	r1, #1
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 fbda 	bl	80092c4 <RCCEx_PLL2_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b14:	e00c      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3324      	adds	r3, #36	; 0x24
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 fc83 	bl	8009428 <RCCEx_PLL3_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b26:	e003      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b2c:	e000      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d110      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b36:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3a:	f023 0207 	bic.w	r2, r3, #7
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b42:	4902      	ldr	r1, [pc, #8]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	654b      	str	r3, [r1, #84]	; 0x54
 8007b48:	e008      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007b4a:	bf00      	nop
 8007b4c:	58024400 	.word	0x58024400
 8007b50:	58024800 	.word	0x58024800
 8007b54:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
 8007b5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d039      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6e:	2b05      	cmp	r3, #5
 8007b70:	d820      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007bbb 	.word	0x08007bbb
 8007b7c:	08007b91 	.word	0x08007b91
 8007b80:	08007ba3 	.word	0x08007ba3
 8007b84:	08007bbb 	.word	0x08007bbb
 8007b88:	08007bbb 	.word	0x08007bbb
 8007b8c:	08007bbb 	.word	0x08007bbb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3304      	adds	r3, #4
 8007b94:	2101      	movs	r1, #1
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 fb94 	bl	80092c4 <RCCEx_PLL2_Config>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ba0:	e00c      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3324      	adds	r3, #36	; 0x24
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 fc3d 	bl	8009428 <RCCEx_PLL3_Config>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007bb2:	e003      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb8:	e000      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007bba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bc2:	4bb7      	ldr	r3, [pc, #732]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc6:	f023 0207 	bic.w	r2, r3, #7
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd0:	49b3      	ldr	r1, [pc, #716]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	658b      	str	r3, [r1, #88]	; 0x58
 8007bd6:	e001      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d04b      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bf2:	d02e      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bf8:	d828      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfe:	d02a      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c04:	d822      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007c06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c0a:	d026      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007c0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c10:	d81c      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c16:	d010      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c1c:	d816      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d01d      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c26:	d111      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 fb48 	bl	80092c4 <RCCEx_PLL2_Config>
 8007c34:	4603      	mov	r3, r0
 8007c36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007c38:	e012      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3324      	adds	r3, #36	; 0x24
 8007c3e:	2102      	movs	r1, #2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f001 fbf1 	bl	8009428 <RCCEx_PLL3_Config>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007c4a:	e009      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c50:	e006      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007c52:	bf00      	nop
 8007c54:	e004      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007c56:	bf00      	nop
 8007c58:	e002      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007c5a:	bf00      	nop
 8007c5c:	e000      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10a      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c66:	4b8e      	ldr	r3, [pc, #568]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c74:	498a      	ldr	r1, [pc, #552]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	654b      	str	r3, [r1, #84]	; 0x54
 8007c7a:	e001      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d04b      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007c96:	d02e      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007c98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007c9c:	d828      	bhi.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca2:	d02a      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca8:	d822      	bhi.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007caa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cae:	d026      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007cb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cb4:	d81c      	bhi.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cba:	d010      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc0:	d816      	bhi.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d01d      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cca:	d111      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3304      	adds	r3, #4
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 faf6 	bl	80092c4 <RCCEx_PLL2_Config>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007cdc:	e012      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3324      	adds	r3, #36	; 0x24
 8007ce2:	2102      	movs	r1, #2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f001 fb9f 	bl	8009428 <RCCEx_PLL3_Config>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007cee:	e009      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf4:	e006      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007cf6:	bf00      	nop
 8007cf8:	e004      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007cfa:	bf00      	nop
 8007cfc:	e002      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007cfe:	bf00      	nop
 8007d00:	e000      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10a      	bne.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d0a:	4b65      	ldr	r3, [pc, #404]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d18:	4961      	ldr	r1, [pc, #388]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	658b      	str	r3, [r1, #88]	; 0x58
 8007d1e:	e001      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d04b      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007d3a:	d02e      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007d3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007d40:	d828      	bhi.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d46:	d02a      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d4c:	d822      	bhi.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007d4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007d52:	d026      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007d54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007d58:	d81c      	bhi.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d5e:	d010      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d64:	d816      	bhi.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01d      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d6e:	d111      	bne.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3304      	adds	r3, #4
 8007d74:	2100      	movs	r1, #0
 8007d76:	4618      	mov	r0, r3
 8007d78:	f001 faa4 	bl	80092c4 <RCCEx_PLL2_Config>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007d80:	e012      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3324      	adds	r3, #36	; 0x24
 8007d86:	2102      	movs	r1, #2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 fb4d 	bl	8009428 <RCCEx_PLL3_Config>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007d92:	e009      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	75fb      	strb	r3, [r7, #23]
      break;
 8007d98:	e006      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007d9a:	bf00      	nop
 8007d9c:	e004      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007d9e:	bf00      	nop
 8007da0:	e002      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007da2:	bf00      	nop
 8007da4:	e000      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007dae:	4b3c      	ldr	r3, [pc, #240]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dbc:	4938      	ldr	r1, [pc, #224]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	658b      	str	r3, [r1, #88]	; 0x58
 8007dc2:	e001      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0308 	and.w	r3, r3, #8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d01a      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dde:	d10a      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3324      	adds	r3, #36	; 0x24
 8007de4:	2102      	movs	r1, #2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f001 fb1e 	bl	8009428 <RCCEx_PLL3_Config>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007df6:	4b2a      	ldr	r3, [pc, #168]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e04:	4926      	ldr	r1, [pc, #152]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0310 	and.w	r3, r3, #16
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d01a      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e20:	d10a      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3324      	adds	r3, #36	; 0x24
 8007e26:	2102      	movs	r1, #2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f001 fafd 	bl	8009428 <RCCEx_PLL3_Config>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e38:	4b19      	ldr	r3, [pc, #100]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e46:	4916      	ldr	r1, [pc, #88]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d036      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e62:	d01f      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e68:	d817      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e72:	d009      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007e74:	e011      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 fa21 	bl	80092c4 <RCCEx_PLL2_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007e86:	e00e      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3324      	adds	r3, #36	; 0x24
 8007e8c:	2102      	movs	r1, #2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 faca 	bl	8009428 <RCCEx_PLL3_Config>
 8007e94:	4603      	mov	r3, r0
 8007e96:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007e98:	e005      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e9e:	e002      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007ea0:	58024400 	.word	0x58024400
      break;
 8007ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007eac:	4b93      	ldr	r3, [pc, #588]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007eba:	4990      	ldr	r1, [pc, #576]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	658b      	str	r3, [r1, #88]	; 0x58
 8007ec0:	e001      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
 8007ec4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d033      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ed8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007edc:	d01c      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007ede:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ee2:	d816      	bhi.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ee8:	d003      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eee:	d007      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007ef0:	e00f      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef2:	4b82      	ldr	r3, [pc, #520]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	4a81      	ldr	r2, [pc, #516]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007efc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007efe:	e00c      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3324      	adds	r3, #36	; 0x24
 8007f04:	2101      	movs	r1, #1
 8007f06:	4618      	mov	r0, r3
 8007f08:	f001 fa8e 	bl	8009428 <RCCEx_PLL3_Config>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f10:	e003      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	75fb      	strb	r3, [r7, #23]
      break;
 8007f16:	e000      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10a      	bne.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f20:	4b76      	ldr	r3, [pc, #472]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f2e:	4973      	ldr	r1, [pc, #460]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	654b      	str	r3, [r1, #84]	; 0x54
 8007f34:	e001      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d029      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f52:	d007      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007f54:	e00f      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f56:	4b69      	ldr	r3, [pc, #420]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5a:	4a68      	ldr	r2, [pc, #416]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007f62:	e00b      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3304      	adds	r3, #4
 8007f68:	2102      	movs	r1, #2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f001 f9aa 	bl	80092c4 <RCCEx_PLL2_Config>
 8007f70:	4603      	mov	r3, r0
 8007f72:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007f74:	e002      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	75fb      	strb	r3, [r7, #23]
      break;
 8007f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d109      	bne.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007f82:	4b5e      	ldr	r3, [pc, #376]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f8e:	495b      	ldr	r1, [pc, #364]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f94:	e001      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
 8007f98:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00a      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3324      	adds	r3, #36	; 0x24
 8007faa:	2102      	movs	r1, #2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 fa3b 	bl	8009428 <RCCEx_PLL3_Config>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d030      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fd0:	d017      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fd6:	d811      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fdc:	d013      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fe2:	d80b      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d010      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fec:	d106      	bne.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fee:	4b43      	ldr	r3, [pc, #268]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff2:	4a42      	ldr	r2, [pc, #264]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007ffa:	e007      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8008000:	e004      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008002:	bf00      	nop
 8008004:	e002      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008006:	bf00      	nop
 8008008:	e000      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800800a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d109      	bne.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008012:	4b3a      	ldr	r3, [pc, #232]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008016:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800801e:	4937      	ldr	r1, [pc, #220]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008020:	4313      	orrs	r3, r2
 8008022:	654b      	str	r3, [r1, #84]	; 0x54
 8008024:	e001      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d008      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008036:	4b31      	ldr	r3, [pc, #196]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008042:	492e      	ldr	r1, [pc, #184]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d009      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008054:	4b29      	ldr	r3, [pc, #164]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008062:	4926      	ldr	r1, [pc, #152]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008064:	4313      	orrs	r3, r2
 8008066:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d008      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008074:	4b21      	ldr	r3, [pc, #132]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008078:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008080:	491e      	ldr	r1, [pc, #120]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008082:	4313      	orrs	r3, r2
 8008084:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00d      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008092:	4b1a      	ldr	r3, [pc, #104]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	4a19      	ldr	r2, [pc, #100]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008098:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800809c:	6113      	str	r3, [r2, #16]
 800809e:	4b17      	ldr	r3, [pc, #92]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080a0:	691a      	ldr	r2, [r3, #16]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80080a8:	4914      	ldr	r1, [pc, #80]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	da08      	bge.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80080b6:	4b11      	ldr	r3, [pc, #68]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c2:	490e      	ldr	r1, [pc, #56]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d009      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80080d4:	4b09      	ldr	r3, [pc, #36]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e2:	4906      	ldr	r1, [pc, #24]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80080e8:	7dbb      	ldrb	r3, [r7, #22]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	e000      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	58024400 	.word	0x58024400

08008100 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b090      	sub	sp, #64	; 0x40
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800810e:	f040 8095 	bne.w	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008112:	4bae      	ldr	r3, [pc, #696]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	633b      	str	r3, [r7, #48]	; 0x30
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	2b04      	cmp	r3, #4
 8008120:	f200 8088 	bhi.w	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008124:	a201      	add	r2, pc, #4	; (adr r2, 800812c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812a:	bf00      	nop
 800812c:	08008141 	.word	0x08008141
 8008130:	08008169 	.word	0x08008169
 8008134:	08008191 	.word	0x08008191
 8008138:	0800822d 	.word	0x0800822d
 800813c:	080081b9 	.word	0x080081b9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008140:	4ba2      	ldr	r3, [pc, #648]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800814c:	d108      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800814e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008152:	4618      	mov	r0, r3
 8008154:	f000 ff64 	bl	8009020 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800815c:	f000 bc95 	b.w	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008160:	2300      	movs	r3, #0
 8008162:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008164:	f000 bc91 	b.w	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008168:	4b98      	ldr	r3, [pc, #608]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008174:	d108      	bne.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008176:	f107 0318 	add.w	r3, r7, #24
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fca8 	bl	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008184:	f000 bc81 	b.w	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800818c:	f000 bc7d 	b.w	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008190:	4b8e      	ldr	r3, [pc, #568]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800819c:	d108      	bne.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800819e:	f107 030c 	add.w	r3, r7, #12
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 fde8 	bl	8008d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081ac:	f000 bc6d 	b.w	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081b4:	f000 bc69 	b.w	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80081b8:	4b84      	ldr	r3, [pc, #528]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80081ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081c0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081c2:	4b82      	ldr	r3, [pc, #520]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0304 	and.w	r3, r3, #4
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d10c      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80081ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d109      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081d4:	4b7d      	ldr	r3, [pc, #500]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	08db      	lsrs	r3, r3, #3
 80081da:	f003 0303 	and.w	r3, r3, #3
 80081de:	4a7c      	ldr	r2, [pc, #496]	; (80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80081e0:	fa22 f303 	lsr.w	r3, r2, r3
 80081e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081e6:	e01f      	b.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081e8:	4b78      	ldr	r3, [pc, #480]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081f4:	d106      	bne.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80081f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081fc:	d102      	bne.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80081fe:	4b75      	ldr	r3, [pc, #468]	; (80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008202:	e011      	b.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008204:	4b71      	ldr	r3, [pc, #452]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800820c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008210:	d106      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008218:	d102      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800821a:	4b6f      	ldr	r3, [pc, #444]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800821e:	e003      	b.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008224:	f000 bc31 	b.w	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008228:	f000 bc2f 	b.w	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800822c:	4b6b      	ldr	r3, [pc, #428]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800822e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008230:	f000 bc2b 	b.w	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008238:	f000 bc27 	b.w	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008242:	f040 8095 	bne.w	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008246:	4b61      	ldr	r3, [pc, #388]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800824e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008256:	d04d      	beq.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800825e:	f200 8084 	bhi.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	2bc0      	cmp	r3, #192	; 0xc0
 8008266:	d07d      	beq.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	2bc0      	cmp	r3, #192	; 0xc0
 800826c:	d87d      	bhi.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	2b80      	cmp	r3, #128	; 0x80
 8008272:	d02d      	beq.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	2b80      	cmp	r3, #128	; 0x80
 8008278:	d877      	bhi.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	2b00      	cmp	r3, #0
 800827e:	d003      	beq.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	2b40      	cmp	r3, #64	; 0x40
 8008284:	d012      	beq.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008286:	e070      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008288:	4b50      	ldr	r3, [pc, #320]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008294:	d107      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fec0 	bl	8009020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082a4:	e3f1      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082aa:	e3ee      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082ac:	4b47      	ldr	r3, [pc, #284]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082b8:	d107      	bne.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ba:	f107 0318 	add.w	r3, r7, #24
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fc06 	bl	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082c8:	e3df      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ce:	e3dc      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082d0:	4b3e      	ldr	r3, [pc, #248]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082dc:	d107      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082de:	f107 030c 	add.w	r3, r7, #12
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fd48 	bl	8008d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082ec:	e3cd      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082f2:	e3ca      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80082f4:	4b35      	ldr	r3, [pc, #212]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80082f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082fc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082fe:	4b33      	ldr	r3, [pc, #204]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0304 	and.w	r3, r3, #4
 8008306:	2b04      	cmp	r3, #4
 8008308:	d10c      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800830a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830c:	2b00      	cmp	r3, #0
 800830e:	d109      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008310:	4b2e      	ldr	r3, [pc, #184]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	08db      	lsrs	r3, r3, #3
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	4a2d      	ldr	r2, [pc, #180]	; (80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800831c:	fa22 f303 	lsr.w	r3, r2, r3
 8008320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008322:	e01e      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008324:	4b29      	ldr	r3, [pc, #164]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008330:	d106      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008334:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008338:	d102      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800833a:	4b26      	ldr	r3, [pc, #152]	; (80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800833e:	e010      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008340:	4b22      	ldr	r3, [pc, #136]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800834c:	d106      	bne.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800834e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008354:	d102      	bne.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008356:	4b20      	ldr	r3, [pc, #128]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800835a:	e002      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800835c:	2300      	movs	r3, #0
 800835e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008360:	e393      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008362:	e392      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008364:	4b1d      	ldr	r3, [pc, #116]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008368:	e38f      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800836e:	e38c      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008376:	f040 80a7 	bne.w	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800837a:	4b14      	ldr	r3, [pc, #80]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800837c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008382:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800838a:	d05f      	beq.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008392:	f200 8096 	bhi.w	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800839c:	f000 808e 	beq.w	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083a6:	f200 808c 	bhi.w	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083b0:	d03a      	beq.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083b8:	f200 8083 	bhi.w	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00e      	beq.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083c8:	d01c      	beq.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80083ca:	e07a      	b.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80083cc:	58024400 	.word	0x58024400
 80083d0:	03d09000 	.word	0x03d09000
 80083d4:	003d0900 	.word	0x003d0900
 80083d8:	02dc6c00 	.word	0x02dc6c00
 80083dc:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083e0:	4baa      	ldr	r3, [pc, #680]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083ec:	d107      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fe14 	bl	8009020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083fc:	e345      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008402:	e342      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008404:	4ba1      	ldr	r3, [pc, #644]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800840c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008410:	d107      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008412:	f107 0318 	add.w	r3, r7, #24
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fb5a 	bl	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008420:	e333      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008426:	e330      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008428:	4b98      	ldr	r3, [pc, #608]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008434:	d107      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008436:	f107 030c 	add.w	r3, r7, #12
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fc9c 	bl	8008d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008444:	e321      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800844a:	e31e      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800844c:	4b8f      	ldr	r3, [pc, #572]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800844e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008454:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008456:	4b8d      	ldr	r3, [pc, #564]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b04      	cmp	r3, #4
 8008460:	d10c      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008464:	2b00      	cmp	r3, #0
 8008466:	d109      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008468:	4b88      	ldr	r3, [pc, #544]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	08db      	lsrs	r3, r3, #3
 800846e:	f003 0303 	and.w	r3, r3, #3
 8008472:	4a87      	ldr	r2, [pc, #540]	; (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008474:	fa22 f303 	lsr.w	r3, r2, r3
 8008478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800847a:	e01e      	b.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800847c:	4b83      	ldr	r3, [pc, #524]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008488:	d106      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800848a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008490:	d102      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008492:	4b80      	ldr	r3, [pc, #512]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008496:	e010      	b.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008498:	4b7c      	ldr	r3, [pc, #496]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084a4:	d106      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80084a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ac:	d102      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80084ae:	4b7a      	ldr	r3, [pc, #488]	; (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80084b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084b2:	e002      	b.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80084b8:	e2e7      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80084ba:	e2e6      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80084bc:	4b77      	ldr	r3, [pc, #476]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80084be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084c0:	e2e3      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084c6:	e2e0      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ce:	f040 809c 	bne.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80084d2:	4b6e      	ldr	r3, [pc, #440]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80084d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80084da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80084dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084e2:	d054      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084ea:	f200 808b 	bhi.w	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80084f4:	f000 8083 	beq.w	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80084fe:	f200 8081 	bhi.w	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008508:	d02f      	beq.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008510:	d878      	bhi.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	2b00      	cmp	r3, #0
 8008516:	d004      	beq.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800851e:	d012      	beq.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008520:	e070      	b.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008522:	4b5a      	ldr	r3, [pc, #360]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800852a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800852e:	d107      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008534:	4618      	mov	r0, r3
 8008536:	f000 fd73 	bl	8009020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800853e:	e2a4      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008540:	2300      	movs	r3, #0
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008544:	e2a1      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008546:	4b51      	ldr	r3, [pc, #324]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800854e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008552:	d107      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008554:	f107 0318 	add.w	r3, r7, #24
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fab9 	bl	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008562:	e292      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008568:	e28f      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800856a:	4b48      	ldr	r3, [pc, #288]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008576:	d107      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008578:	f107 030c 	add.w	r3, r7, #12
 800857c:	4618      	mov	r0, r3
 800857e:	f000 fbfb 	bl	8008d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008586:	e280      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008588:	2300      	movs	r3, #0
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800858c:	e27d      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800858e:	4b3f      	ldr	r3, [pc, #252]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008592:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008596:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008598:	4b3c      	ldr	r3, [pc, #240]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	d10c      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80085a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d109      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085aa:	4b38      	ldr	r3, [pc, #224]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	08db      	lsrs	r3, r3, #3
 80085b0:	f003 0303 	and.w	r3, r3, #3
 80085b4:	4a36      	ldr	r2, [pc, #216]	; (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80085b6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085bc:	e01e      	b.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085be:	4b33      	ldr	r3, [pc, #204]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ca:	d106      	bne.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80085cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085d2:	d102      	bne.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80085d4:	4b2f      	ldr	r3, [pc, #188]	; (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085d8:	e010      	b.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085da:	4b2c      	ldr	r3, [pc, #176]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085e6:	d106      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80085e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ee:	d102      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80085f0:	4b29      	ldr	r3, [pc, #164]	; (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80085f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085f4:	e002      	b.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80085fa:	e246      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80085fc:	e245      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80085fe:	4b27      	ldr	r3, [pc, #156]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008602:	e242      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008608:	e23f      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008610:	f040 80a8 	bne.w	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008614:	4b1d      	ldr	r3, [pc, #116]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008618:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800861c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800861e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008624:	d060      	beq.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800862c:	f200 8097 	bhi.w	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008636:	f000 808f 	beq.w	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008640:	f200 808d 	bhi.w	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800864a:	d03b      	beq.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800864c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008652:	f200 8084 	bhi.w	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008662:	d01d      	beq.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008664:	e07b      	b.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008666:	4b09      	ldr	r3, [pc, #36]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800866e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008672:	d107      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008678:	4618      	mov	r0, r3
 800867a:	f000 fcd1 	bl	8009020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008682:	e202      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008688:	e1ff      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800868a:	bf00      	nop
 800868c:	58024400 	.word	0x58024400
 8008690:	03d09000 	.word	0x03d09000
 8008694:	003d0900 	.word	0x003d0900
 8008698:	02dc6c00 	.word	0x02dc6c00
 800869c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086a0:	4ba3      	ldr	r3, [pc, #652]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086ac:	d107      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ae:	f107 0318 	add.w	r3, r7, #24
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fa0c 	bl	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086bc:	e1e5      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086c2:	e1e2      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086c4:	4b9a      	ldr	r3, [pc, #616]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086d0:	d107      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086d2:	f107 030c 	add.w	r3, r7, #12
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fb4e 	bl	8008d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086e0:	e1d3      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80086e2:	2300      	movs	r3, #0
 80086e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086e6:	e1d0      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80086e8:	4b91      	ldr	r3, [pc, #580]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80086ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086f0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086f2:	4b8f      	ldr	r3, [pc, #572]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0304 	and.w	r3, r3, #4
 80086fa:	2b04      	cmp	r3, #4
 80086fc:	d10c      	bne.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80086fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008700:	2b00      	cmp	r3, #0
 8008702:	d109      	bne.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008704:	4b8a      	ldr	r3, [pc, #552]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	08db      	lsrs	r3, r3, #3
 800870a:	f003 0303 	and.w	r3, r3, #3
 800870e:	4a89      	ldr	r2, [pc, #548]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008710:	fa22 f303 	lsr.w	r3, r2, r3
 8008714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008716:	e01e      	b.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008718:	4b85      	ldr	r3, [pc, #532]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008724:	d106      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800872c:	d102      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800872e:	4b82      	ldr	r3, [pc, #520]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008732:	e010      	b.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008734:	4b7e      	ldr	r3, [pc, #504]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008740:	d106      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008748:	d102      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800874a:	4b7c      	ldr	r3, [pc, #496]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800874e:	e002      	b.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008754:	e199      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008756:	e198      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008758:	4b79      	ldr	r3, [pc, #484]	; (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800875a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800875c:	e195      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008762:	e192      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800876a:	d173      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800876c:	4b70      	ldr	r3, [pc, #448]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800876e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008770:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008774:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800877c:	d02f      	beq.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008784:	d863      	bhi.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	2b00      	cmp	r3, #0
 800878a:	d004      	beq.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008792:	d012      	beq.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008794:	e05b      	b.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008796:	4b66      	ldr	r3, [pc, #408]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800879e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087a2:	d107      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087a4:	f107 0318 	add.w	r3, r7, #24
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 f991 	bl	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087b2:	e16a      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087b8:	e167      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087ba:	4b5d      	ldr	r3, [pc, #372]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087c6:	d107      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087c8:	f107 030c 	add.w	r3, r7, #12
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fad3 	bl	8008d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087d6:	e158      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087dc:	e155      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80087de:	4b54      	ldr	r3, [pc, #336]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80087e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087e6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087e8:	4b51      	ldr	r3, [pc, #324]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	d10c      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80087f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d109      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087fa:	4b4d      	ldr	r3, [pc, #308]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	08db      	lsrs	r3, r3, #3
 8008800:	f003 0303 	and.w	r3, r3, #3
 8008804:	4a4b      	ldr	r2, [pc, #300]	; (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008806:	fa22 f303 	lsr.w	r3, r2, r3
 800880a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800880c:	e01e      	b.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800880e:	4b48      	ldr	r3, [pc, #288]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800881a:	d106      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800881c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008822:	d102      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008824:	4b44      	ldr	r3, [pc, #272]	; (8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008828:	e010      	b.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800882a:	4b41      	ldr	r3, [pc, #260]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008832:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008836:	d106      	bne.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800883e:	d102      	bne.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008840:	4b3e      	ldr	r3, [pc, #248]	; (800893c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008844:	e002      	b.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800884a:	e11e      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800884c:	e11d      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008852:	e11a      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885a:	d133      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800885c:	4b34      	ldr	r3, [pc, #208]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800885e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008864:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008868:	2b00      	cmp	r3, #0
 800886a:	d004      	beq.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008872:	d012      	beq.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008874:	e023      	b.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008876:	4b2e      	ldr	r3, [pc, #184]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800887e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008882:	d107      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008888:	4618      	mov	r0, r3
 800888a:	f000 fbc9 	bl	8009020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008892:	e0fa      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008898:	e0f7      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800889a:	4b25      	ldr	r3, [pc, #148]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088a6:	d107      	bne.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088a8:	f107 0318 	add.w	r3, r7, #24
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f90f 	bl	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80088b6:	e0e8      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088bc:	e0e5      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088c2:	e0e2      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088ca:	f040 808f 	bne.w	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80088ce:	4b18      	ldr	r3, [pc, #96]	; (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80088d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80088d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088de:	d075      	beq.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80088e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088e6:	d87e      	bhi.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80088e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ee:	d060      	beq.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f6:	d876      	bhi.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80088f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088fe:	d045      	beq.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008906:	d86e      	bhi.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800890e:	d02b      	beq.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008916:	d866      	bhi.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891a:	2b00      	cmp	r3, #0
 800891c:	d004      	beq.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800891e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008924:	d00e      	beq.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008926:	e05e      	b.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008928:	f000 f8bc 	bl	8008aa4 <HAL_RCCEx_GetD3PCLK1Freq>
 800892c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800892e:	e0ac      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008930:	58024400 	.word	0x58024400
 8008934:	03d09000 	.word	0x03d09000
 8008938:	003d0900 	.word	0x003d0900
 800893c:	02dc6c00 	.word	0x02dc6c00
 8008940:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008944:	4b53      	ldr	r3, [pc, #332]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800894c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008950:	d107      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008952:	f107 0318 	add.w	r3, r7, #24
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f8ba 	bl	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008960:	e093      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008966:	e090      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008968:	4b4a      	ldr	r3, [pc, #296]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008974:	d107      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008976:	f107 030c 	add.w	r3, r7, #12
 800897a:	4618      	mov	r0, r3
 800897c:	f000 f9fc 	bl	8008d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008984:	e081      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800898a:	e07e      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800898c:	4b41      	ldr	r3, [pc, #260]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0304 	and.w	r3, r3, #4
 8008994:	2b04      	cmp	r3, #4
 8008996:	d109      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008998:	4b3e      	ldr	r3, [pc, #248]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	08db      	lsrs	r3, r3, #3
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	4a3d      	ldr	r2, [pc, #244]	; (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80089a4:	fa22 f303 	lsr.w	r3, r2, r3
 80089a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089aa:	e06e      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089b0:	e06b      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80089b2:	4b38      	ldr	r3, [pc, #224]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089be:	d102      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80089c0:	4b36      	ldr	r3, [pc, #216]	; (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80089c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089c4:	e061      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ca:	e05e      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089cc:	4b31      	ldr	r3, [pc, #196]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089d8:	d102      	bne.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80089da:	4b31      	ldr	r3, [pc, #196]	; (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80089dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089de:	e054      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089e4:	e051      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ea:	e04e      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089f2:	d148      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80089f4:	4b27      	ldr	r3, [pc, #156]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089fc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80089fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a04:	d02a      	beq.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a0c:	d838      	bhi.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d004      	beq.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a1a:	d00d      	beq.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008a1c:	e030      	b.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a1e:	4b1d      	ldr	r3, [pc, #116]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a2a:	d102      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8008a2c:	4b1c      	ldr	r3, [pc, #112]	; (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a30:	e02b      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a36:	e028      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a38:	4b16      	ldr	r3, [pc, #88]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a44:	d107      	bne.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 fae8 	bl	8009020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a54:	e019      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a5a:	e016      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a5c:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a68:	d107      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a6a:	f107 0318 	add.w	r3, r7, #24
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 f82e 	bl	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a78:	e007      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a7e:	e004      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a84:	e001      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3740      	adds	r7, #64	; 0x40
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	58024400 	.word	0x58024400
 8008a98:	03d09000 	.word	0x03d09000
 8008a9c:	003d0900 	.word	0x003d0900
 8008aa0:	02dc6c00 	.word	0x02dc6c00

08008aa4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008aa8:	f7fe fb8e 	bl	80071c8 <HAL_RCC_GetHCLKFreq>
 8008aac:	4602      	mov	r2, r0
 8008aae:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	091b      	lsrs	r3, r3, #4
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	4904      	ldr	r1, [pc, #16]	; (8008acc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008aba:	5ccb      	ldrb	r3, [r1, r3]
 8008abc:	f003 031f 	and.w	r3, r3, #31
 8008ac0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	58024400 	.word	0x58024400
 8008acc:	0800c4ec 	.word	0x0800c4ec

08008ad0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b089      	sub	sp, #36	; 0x24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ad8:	4ba1      	ldr	r3, [pc, #644]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008ae2:	4b9f      	ldr	r3, [pc, #636]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae6:	0b1b      	lsrs	r3, r3, #12
 8008ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008aee:	4b9c      	ldr	r3, [pc, #624]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af2:	091b      	lsrs	r3, r3, #4
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008afa:	4b99      	ldr	r3, [pc, #612]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afe:	08db      	lsrs	r3, r3, #3
 8008b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	fb02 f303 	mul.w	r3, r2, r3
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 8111 	beq.w	8008d40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	f000 8083 	beq.w	8008c2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	f200 80a1 	bhi.w	8008c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d056      	beq.n	8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008b3a:	e099      	b.n	8008c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b3c:	4b88      	ldr	r3, [pc, #544]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0320 	and.w	r3, r3, #32
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d02d      	beq.n	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b48:	4b85      	ldr	r3, [pc, #532]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	08db      	lsrs	r3, r3, #3
 8008b4e:	f003 0303 	and.w	r3, r3, #3
 8008b52:	4a84      	ldr	r2, [pc, #528]	; (8008d64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008b54:	fa22 f303 	lsr.w	r3, r2, r3
 8008b58:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	ee07 3a90 	vmov	s15, r3
 8008b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b72:	4b7b      	ldr	r3, [pc, #492]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7a:	ee07 3a90 	vmov	s15, r3
 8008b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008ba2:	e087      	b.n	8008cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bb6:	4b6a      	ldr	r3, [pc, #424]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008be6:	e065      	b.n	8008cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bfa:	4b59      	ldr	r3, [pc, #356]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c2a:	e043      	b.n	8008cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3e:	4b48      	ldr	r3, [pc, #288]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c6e:	e021      	b.n	8008cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c82:	4b37      	ldr	r3, [pc, #220]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008cb4:	4b2a      	ldr	r3, [pc, #168]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb8:	0a5b      	lsrs	r3, r3, #9
 8008cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cda:	ee17 2a90 	vmov	r2, s15
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008ce2:	4b1f      	ldr	r3, [pc, #124]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce6:	0c1b      	lsrs	r3, r3, #16
 8008ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cec:	ee07 3a90 	vmov	s15, r3
 8008cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d08:	ee17 2a90 	vmov	r2, s15
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008d10:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	0e1b      	lsrs	r3, r3, #24
 8008d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d36:	ee17 2a90 	vmov	r2, s15
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d3e:	e008      	b.n	8008d52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	609a      	str	r2, [r3, #8]
}
 8008d52:	bf00      	nop
 8008d54:	3724      	adds	r7, #36	; 0x24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	58024400 	.word	0x58024400
 8008d64:	03d09000 	.word	0x03d09000
 8008d68:	46000000 	.word	0x46000000
 8008d6c:	4c742400 	.word	0x4c742400
 8008d70:	4a742400 	.word	0x4a742400
 8008d74:	4c371b00 	.word	0x4c371b00

08008d78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b089      	sub	sp, #36	; 0x24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d80:	4ba1      	ldr	r3, [pc, #644]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d84:	f003 0303 	and.w	r3, r3, #3
 8008d88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008d8a:	4b9f      	ldr	r3, [pc, #636]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8e:	0d1b      	lsrs	r3, r3, #20
 8008d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d96:	4b9c      	ldr	r3, [pc, #624]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9a:	0a1b      	lsrs	r3, r3, #8
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008da2:	4b99      	ldr	r3, [pc, #612]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da6:	08db      	lsrs	r3, r3, #3
 8008da8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	fb02 f303 	mul.w	r3, r2, r3
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 8111 	beq.w	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	f000 8083 	beq.w	8008ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	f200 80a1 	bhi.w	8008f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d056      	beq.n	8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008de2:	e099      	b.n	8008f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008de4:	4b88      	ldr	r3, [pc, #544]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d02d      	beq.n	8008e4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008df0:	4b85      	ldr	r3, [pc, #532]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	08db      	lsrs	r3, r3, #3
 8008df6:	f003 0303 	and.w	r3, r3, #3
 8008dfa:	4a84      	ldr	r2, [pc, #528]	; (800900c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8008e00:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	ee07 3a90 	vmov	s15, r3
 8008e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e1a:	4b7b      	ldr	r3, [pc, #492]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e22:	ee07 3a90 	vmov	s15, r3
 8008e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e4a:	e087      	b.n	8008f5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	ee07 3a90 	vmov	s15, r3
 8008e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e5e:	4b6a      	ldr	r3, [pc, #424]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e8e:	e065      	b.n	8008f5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009018 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea2:	4b59      	ldr	r3, [pc, #356]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eaa:	ee07 3a90 	vmov	s15, r3
 8008eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ed2:	e043      	b.n	8008f5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	ee07 3a90 	vmov	s15, r3
 8008eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ede:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800901c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee6:	4b48      	ldr	r3, [pc, #288]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008efa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f16:	e021      	b.n	8008f5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	ee07 3a90 	vmov	s15, r3
 8008f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009018 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f2a:	4b37      	ldr	r3, [pc, #220]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008f5c:	4b2a      	ldr	r3, [pc, #168]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f60:	0a5b      	lsrs	r3, r3, #9
 8008f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f82:	ee17 2a90 	vmov	r2, s15
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008f8a:	4b1f      	ldr	r3, [pc, #124]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	0c1b      	lsrs	r3, r3, #16
 8008f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f94:	ee07 3a90 	vmov	s15, r3
 8008f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fb0:	ee17 2a90 	vmov	r2, s15
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008fb8:	4b13      	ldr	r3, [pc, #76]	; (8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbc:	0e1b      	lsrs	r3, r3, #24
 8008fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fc2:	ee07 3a90 	vmov	s15, r3
 8008fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fde:	ee17 2a90 	vmov	r2, s15
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008fe6:	e008      	b.n	8008ffa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	609a      	str	r2, [r3, #8]
}
 8008ffa:	bf00      	nop
 8008ffc:	3724      	adds	r7, #36	; 0x24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	58024400 	.word	0x58024400
 800900c:	03d09000 	.word	0x03d09000
 8009010:	46000000 	.word	0x46000000
 8009014:	4c742400 	.word	0x4c742400
 8009018:	4a742400 	.word	0x4a742400
 800901c:	4c371b00 	.word	0x4c371b00

08009020 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009020:	b480      	push	{r7}
 8009022:	b089      	sub	sp, #36	; 0x24
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009028:	4ba0      	ldr	r3, [pc, #640]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902c:	f003 0303 	and.w	r3, r3, #3
 8009030:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009032:	4b9e      	ldr	r3, [pc, #632]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009036:	091b      	lsrs	r3, r3, #4
 8009038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800903c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800903e:	4b9b      	ldr	r3, [pc, #620]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009048:	4b98      	ldr	r3, [pc, #608]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800904a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800904c:	08db      	lsrs	r3, r3, #3
 800904e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	fb02 f303 	mul.w	r3, r2, r3
 8009058:	ee07 3a90 	vmov	s15, r3
 800905c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009060:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 8111 	beq.w	800928e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	2b02      	cmp	r3, #2
 8009070:	f000 8083 	beq.w	800917a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	2b02      	cmp	r3, #2
 8009078:	f200 80a1 	bhi.w	80091be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d056      	beq.n	8009136 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009088:	e099      	b.n	80091be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800908a:	4b88      	ldr	r3, [pc, #544]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b00      	cmp	r3, #0
 8009094:	d02d      	beq.n	80090f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009096:	4b85      	ldr	r3, [pc, #532]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	08db      	lsrs	r3, r3, #3
 800909c:	f003 0303 	and.w	r3, r3, #3
 80090a0:	4a83      	ldr	r2, [pc, #524]	; (80092b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80090a2:	fa22 f303 	lsr.w	r3, r2, r3
 80090a6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	ee07 3a90 	vmov	s15, r3
 80090b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c0:	4b7a      	ldr	r3, [pc, #488]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c8:	ee07 3a90 	vmov	s15, r3
 80090cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80090d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80092b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80090f0:	e087      	b.n	8009202 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	ee07 3a90 	vmov	s15, r3
 80090f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80092b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009104:	4b69      	ldr	r3, [pc, #420]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910c:	ee07 3a90 	vmov	s15, r3
 8009110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009114:	ed97 6a03 	vldr	s12, [r7, #12]
 8009118:	eddf 5a66 	vldr	s11, [pc, #408]	; 80092b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800911c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009124:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009130:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009134:	e065      	b.n	8009202 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	ee07 3a90 	vmov	s15, r3
 800913c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009140:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80092bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009148:	4b58      	ldr	r3, [pc, #352]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800914a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009150:	ee07 3a90 	vmov	s15, r3
 8009154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009158:	ed97 6a03 	vldr	s12, [r7, #12]
 800915c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80092b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800916c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009174:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009178:	e043      	b.n	8009202 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	ee07 3a90 	vmov	s15, r3
 8009180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009184:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80092c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918c:	4b47      	ldr	r3, [pc, #284]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800918e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009194:	ee07 3a90 	vmov	s15, r3
 8009198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919c:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80092b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091bc:	e021      	b.n	8009202 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	ee07 3a90 	vmov	s15, r3
 80091c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80092b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80091cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d0:	4b36      	ldr	r3, [pc, #216]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d8:	ee07 3a90 	vmov	s15, r3
 80091dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80092b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009200:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009202:	4b2a      	ldr	r3, [pc, #168]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	0a5b      	lsrs	r3, r3, #9
 8009208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800920c:	ee07 3a90 	vmov	s15, r3
 8009210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009218:	ee37 7a87 	vadd.f32	s14, s15, s14
 800921c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009228:	ee17 2a90 	vmov	r2, s15
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009230:	4b1e      	ldr	r3, [pc, #120]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009234:	0c1b      	lsrs	r3, r3, #16
 8009236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800924a:	edd7 6a07 	vldr	s13, [r7, #28]
 800924e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009256:	ee17 2a90 	vmov	r2, s15
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800925e:	4b13      	ldr	r3, [pc, #76]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009262:	0e1b      	lsrs	r3, r3, #24
 8009264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009268:	ee07 3a90 	vmov	s15, r3
 800926c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009274:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009278:	edd7 6a07 	vldr	s13, [r7, #28]
 800927c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009284:	ee17 2a90 	vmov	r2, s15
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800928c:	e008      	b.n	80092a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	609a      	str	r2, [r3, #8]
}
 80092a0:	bf00      	nop
 80092a2:	3724      	adds	r7, #36	; 0x24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	58024400 	.word	0x58024400
 80092b0:	03d09000 	.word	0x03d09000
 80092b4:	46000000 	.word	0x46000000
 80092b8:	4c742400 	.word	0x4c742400
 80092bc:	4a742400 	.word	0x4a742400
 80092c0:	4c371b00 	.word	0x4c371b00

080092c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092d2:	4b53      	ldr	r3, [pc, #332]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80092d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d101      	bne.n	80092e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e099      	b.n	8009416 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80092e2:	4b4f      	ldr	r3, [pc, #316]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a4e      	ldr	r2, [pc, #312]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80092e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80092ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ee:	f7f9 fad7 	bl	80028a0 <HAL_GetTick>
 80092f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092f4:	e008      	b.n	8009308 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80092f6:	f7f9 fad3 	bl	80028a0 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	2b02      	cmp	r3, #2
 8009302:	d901      	bls.n	8009308 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e086      	b.n	8009416 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009308:	4b45      	ldr	r3, [pc, #276]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1f0      	bne.n	80092f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009314:	4b42      	ldr	r3, [pc, #264]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009318:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	031b      	lsls	r3, r3, #12
 8009322:	493f      	ldr	r1, [pc, #252]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009324:	4313      	orrs	r3, r2
 8009326:	628b      	str	r3, [r1, #40]	; 0x28
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	3b01      	subs	r3, #1
 800932e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	3b01      	subs	r3, #1
 8009338:	025b      	lsls	r3, r3, #9
 800933a:	b29b      	uxth	r3, r3
 800933c:	431a      	orrs	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	3b01      	subs	r3, #1
 8009344:	041b      	lsls	r3, r3, #16
 8009346:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800934a:	431a      	orrs	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	3b01      	subs	r3, #1
 8009352:	061b      	lsls	r3, r3, #24
 8009354:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009358:	4931      	ldr	r1, [pc, #196]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 800935a:	4313      	orrs	r3, r2
 800935c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800935e:	4b30      	ldr	r3, [pc, #192]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009362:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	492d      	ldr	r1, [pc, #180]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 800936c:	4313      	orrs	r3, r2
 800936e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009370:	4b2b      	ldr	r3, [pc, #172]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009374:	f023 0220 	bic.w	r2, r3, #32
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	4928      	ldr	r1, [pc, #160]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 800937e:	4313      	orrs	r3, r2
 8009380:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009382:	4b27      	ldr	r3, [pc, #156]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009386:	4a26      	ldr	r2, [pc, #152]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009388:	f023 0310 	bic.w	r3, r3, #16
 800938c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800938e:	4b24      	ldr	r3, [pc, #144]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009392:	4b24      	ldr	r3, [pc, #144]	; (8009424 <RCCEx_PLL2_Config+0x160>)
 8009394:	4013      	ands	r3, r2
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	69d2      	ldr	r2, [r2, #28]
 800939a:	00d2      	lsls	r2, r2, #3
 800939c:	4920      	ldr	r1, [pc, #128]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80093a2:	4b1f      	ldr	r3, [pc, #124]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a6:	4a1e      	ldr	r2, [pc, #120]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093a8:	f043 0310 	orr.w	r3, r3, #16
 80093ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d106      	bne.n	80093c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80093b4:	4b1a      	ldr	r3, [pc, #104]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	4a19      	ldr	r2, [pc, #100]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093c0:	e00f      	b.n	80093e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d106      	bne.n	80093d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80093c8:	4b15      	ldr	r3, [pc, #84]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	4a14      	ldr	r2, [pc, #80]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093d4:	e005      	b.n	80093e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80093d6:	4b12      	ldr	r3, [pc, #72]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093da:	4a11      	ldr	r2, [pc, #68]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80093e2:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a0e      	ldr	r2, [pc, #56]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ee:	f7f9 fa57 	bl	80028a0 <HAL_GetTick>
 80093f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093f4:	e008      	b.n	8009408 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80093f6:	f7f9 fa53 	bl	80028a0 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d901      	bls.n	8009408 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e006      	b.n	8009416 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009408:	4b05      	ldr	r3, [pc, #20]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0f0      	beq.n	80093f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009414:	7bfb      	ldrb	r3, [r7, #15]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	58024400 	.word	0x58024400
 8009424:	ffff0007 	.word	0xffff0007

08009428 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009436:	4b53      	ldr	r3, [pc, #332]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943a:	f003 0303 	and.w	r3, r3, #3
 800943e:	2b03      	cmp	r3, #3
 8009440:	d101      	bne.n	8009446 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e099      	b.n	800957a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009446:	4b4f      	ldr	r3, [pc, #316]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a4e      	ldr	r2, [pc, #312]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800944c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009452:	f7f9 fa25 	bl	80028a0 <HAL_GetTick>
 8009456:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009458:	e008      	b.n	800946c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800945a:	f7f9 fa21 	bl	80028a0 <HAL_GetTick>
 800945e:	4602      	mov	r2, r0
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	2b02      	cmp	r3, #2
 8009466:	d901      	bls.n	800946c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009468:	2303      	movs	r3, #3
 800946a:	e086      	b.n	800957a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800946c:	4b45      	ldr	r3, [pc, #276]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1f0      	bne.n	800945a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009478:	4b42      	ldr	r3, [pc, #264]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800947a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	051b      	lsls	r3, r3, #20
 8009486:	493f      	ldr	r1, [pc, #252]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009488:	4313      	orrs	r3, r2
 800948a:	628b      	str	r3, [r1, #40]	; 0x28
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	3b01      	subs	r3, #1
 8009492:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	3b01      	subs	r3, #1
 800949c:	025b      	lsls	r3, r3, #9
 800949e:	b29b      	uxth	r3, r3
 80094a0:	431a      	orrs	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	041b      	lsls	r3, r3, #16
 80094aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	061b      	lsls	r3, r3, #24
 80094b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094bc:	4931      	ldr	r1, [pc, #196]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80094c2:	4b30      	ldr	r3, [pc, #192]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	492d      	ldr	r1, [pc, #180]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80094d4:	4b2b      	ldr	r3, [pc, #172]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	4928      	ldr	r1, [pc, #160]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80094e6:	4b27      	ldr	r3, [pc, #156]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ea:	4a26      	ldr	r2, [pc, #152]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80094f2:	4b24      	ldr	r3, [pc, #144]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094f6:	4b24      	ldr	r3, [pc, #144]	; (8009588 <RCCEx_PLL3_Config+0x160>)
 80094f8:	4013      	ands	r3, r2
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	69d2      	ldr	r2, [r2, #28]
 80094fe:	00d2      	lsls	r2, r2, #3
 8009500:	4920      	ldr	r1, [pc, #128]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009502:	4313      	orrs	r3, r2
 8009504:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009506:	4b1f      	ldr	r3, [pc, #124]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950a:	4a1e      	ldr	r2, [pc, #120]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800950c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d106      	bne.n	8009526 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009518:	4b1a      	ldr	r3, [pc, #104]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800951a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951c:	4a19      	ldr	r2, [pc, #100]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800951e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009522:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009524:	e00f      	b.n	8009546 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d106      	bne.n	800953a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800952c:	4b15      	ldr	r3, [pc, #84]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	4a14      	ldr	r2, [pc, #80]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009532:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009536:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009538:	e005      	b.n	8009546 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800953a:	4b12      	ldr	r3, [pc, #72]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800953c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953e:	4a11      	ldr	r2, [pc, #68]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009540:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009544:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009546:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a0e      	ldr	r2, [pc, #56]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800954c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009552:	f7f9 f9a5 	bl	80028a0 <HAL_GetTick>
 8009556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009558:	e008      	b.n	800956c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800955a:	f7f9 f9a1 	bl	80028a0 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	2b02      	cmp	r3, #2
 8009566:	d901      	bls.n	800956c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e006      	b.n	800957a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d0f0      	beq.n	800955a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009578:	7bfb      	ldrb	r3, [r7, #15]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	58024400 	.word	0x58024400
 8009588:	ffff0007 	.word	0xffff0007

0800958c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e0eb      	b.n	800977a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a75      	ldr	r2, [pc, #468]	; (8009784 <HAL_SPI_Init+0x1f8>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00f      	beq.n	80095d2 <HAL_SPI_Init+0x46>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a74      	ldr	r2, [pc, #464]	; (8009788 <HAL_SPI_Init+0x1fc>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d00a      	beq.n	80095d2 <HAL_SPI_Init+0x46>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a72      	ldr	r2, [pc, #456]	; (800978c <HAL_SPI_Init+0x200>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d005      	beq.n	80095d2 <HAL_SPI_Init+0x46>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	2b0f      	cmp	r3, #15
 80095cc:	d901      	bls.n	80095d2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e0d3      	b.n	800977a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f8dc 	bl	8009790 <SPI_GetPacketSize>
 80095d8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a69      	ldr	r2, [pc, #420]	; (8009784 <HAL_SPI_Init+0x1f8>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d00c      	beq.n	80095fe <HAL_SPI_Init+0x72>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a67      	ldr	r2, [pc, #412]	; (8009788 <HAL_SPI_Init+0x1fc>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d007      	beq.n	80095fe <HAL_SPI_Init+0x72>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a66      	ldr	r2, [pc, #408]	; (800978c <HAL_SPI_Init+0x200>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d002      	beq.n	80095fe <HAL_SPI_Init+0x72>
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	d811      	bhi.n	8009622 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009602:	4a60      	ldr	r2, [pc, #384]	; (8009784 <HAL_SPI_Init+0x1f8>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d009      	beq.n	800961c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a5e      	ldr	r2, [pc, #376]	; (8009788 <HAL_SPI_Init+0x1fc>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d004      	beq.n	800961c <HAL_SPI_Init+0x90>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a5d      	ldr	r2, [pc, #372]	; (800978c <HAL_SPI_Init+0x200>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d104      	bne.n	8009626 <HAL_SPI_Init+0x9a>
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2b10      	cmp	r3, #16
 8009620:	d901      	bls.n	8009626 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e0a9      	b.n	800977a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	d106      	bne.n	8009640 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7f8 fb0a 	bl	8001c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2202      	movs	r2, #2
 8009644:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f022 0201 	bic.w	r2, r2, #1
 8009656:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009660:	d119      	bne.n	8009696 <HAL_SPI_Init+0x10a>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800966a:	d103      	bne.n	8009674 <HAL_SPI_Init+0xe8>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009670:	2b00      	cmp	r3, #0
 8009672:	d008      	beq.n	8009686 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10c      	bne.n	8009696 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009684:	d107      	bne.n	8009696 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009694:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	69da      	ldr	r2, [r3, #28]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	431a      	orrs	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a8:	ea42 0103 	orr.w	r1, r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	431a      	orrs	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	431a      	orrs	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	431a      	orrs	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	431a      	orrs	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	431a      	orrs	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	431a      	orrs	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	431a      	orrs	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096f6:	ea42 0103 	orr.w	r1, r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	430a      	orrs	r2, r1
 8009704:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d113      	bne.n	8009736 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009720:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009734:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f022 0201 	bic.w	r2, r2, #1
 8009744:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00a      	beq.n	8009768 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	430a      	orrs	r2, r1
 8009766:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	40013000 	.word	0x40013000
 8009788:	40003800 	.word	0x40003800
 800978c:	40003c00 	.word	0x40003c00

08009790 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979c:	095b      	lsrs	r3, r3, #5
 800979e:	3301      	adds	r3, #1
 80097a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	3301      	adds	r3, #1
 80097a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	3307      	adds	r3, #7
 80097ae:	08db      	lsrs	r3, r3, #3
 80097b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	fb02 f303 	mul.w	r3, r2, r3
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e049      	b.n	800986c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d106      	bne.n	80097f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7f8 fbd5 	bl	8001f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2202      	movs	r2, #2
 80097f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3304      	adds	r3, #4
 8009802:	4619      	mov	r1, r3
 8009804:	4610      	mov	r0, r2
 8009806:	f000 fe0b 	bl	800a420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b01      	cmp	r3, #1
 8009886:	d001      	beq.n	800988c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e04f      	b.n	800992c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2202      	movs	r2, #2
 8009890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68da      	ldr	r2, [r3, #12]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f042 0201 	orr.w	r2, r2, #1
 80098a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a23      	ldr	r2, [pc, #140]	; (8009938 <HAL_TIM_Base_Start_IT+0xc4>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d01d      	beq.n	80098ea <HAL_TIM_Base_Start_IT+0x76>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098b6:	d018      	beq.n	80098ea <HAL_TIM_Base_Start_IT+0x76>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a1f      	ldr	r2, [pc, #124]	; (800993c <HAL_TIM_Base_Start_IT+0xc8>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d013      	beq.n	80098ea <HAL_TIM_Base_Start_IT+0x76>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a1e      	ldr	r2, [pc, #120]	; (8009940 <HAL_TIM_Base_Start_IT+0xcc>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d00e      	beq.n	80098ea <HAL_TIM_Base_Start_IT+0x76>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a1c      	ldr	r2, [pc, #112]	; (8009944 <HAL_TIM_Base_Start_IT+0xd0>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d009      	beq.n	80098ea <HAL_TIM_Base_Start_IT+0x76>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a1b      	ldr	r2, [pc, #108]	; (8009948 <HAL_TIM_Base_Start_IT+0xd4>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d004      	beq.n	80098ea <HAL_TIM_Base_Start_IT+0x76>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a19      	ldr	r2, [pc, #100]	; (800994c <HAL_TIM_Base_Start_IT+0xd8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d115      	bne.n	8009916 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	689a      	ldr	r2, [r3, #8]
 80098f0:	4b17      	ldr	r3, [pc, #92]	; (8009950 <HAL_TIM_Base_Start_IT+0xdc>)
 80098f2:	4013      	ands	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2b06      	cmp	r3, #6
 80098fa:	d015      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0xb4>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009902:	d011      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f042 0201 	orr.w	r2, r2, #1
 8009912:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009914:	e008      	b.n	8009928 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f042 0201 	orr.w	r2, r2, #1
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	e000      	b.n	800992a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009928:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	40010000 	.word	0x40010000
 800993c:	40000400 	.word	0x40000400
 8009940:	40000800 	.word	0x40000800
 8009944:	40000c00 	.word	0x40000c00
 8009948:	40010400 	.word	0x40010400
 800994c:	40001800 	.word	0x40001800
 8009950:	00010007 	.word	0x00010007

08009954 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e049      	b.n	80099fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d106      	bne.n	8009980 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f841 	bl	8009a02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2202      	movs	r2, #2
 8009984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3304      	adds	r3, #4
 8009990:	4619      	mov	r1, r3
 8009992:	4610      	mov	r0, r2
 8009994:	f000 fd44 	bl	800a420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b083      	sub	sp, #12
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009a0a:	bf00      	nop
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
	...

08009a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d109      	bne.n	8009a3c <HAL_TIM_PWM_Start+0x24>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	bf14      	ite	ne
 8009a34:	2301      	movne	r3, #1
 8009a36:	2300      	moveq	r3, #0
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	e03c      	b.n	8009ab6 <HAL_TIM_PWM_Start+0x9e>
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b04      	cmp	r3, #4
 8009a40:	d109      	bne.n	8009a56 <HAL_TIM_PWM_Start+0x3e>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	bf14      	ite	ne
 8009a4e:	2301      	movne	r3, #1
 8009a50:	2300      	moveq	r3, #0
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	e02f      	b.n	8009ab6 <HAL_TIM_PWM_Start+0x9e>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d109      	bne.n	8009a70 <HAL_TIM_PWM_Start+0x58>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	bf14      	ite	ne
 8009a68:	2301      	movne	r3, #1
 8009a6a:	2300      	moveq	r3, #0
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	e022      	b.n	8009ab6 <HAL_TIM_PWM_Start+0x9e>
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b0c      	cmp	r3, #12
 8009a74:	d109      	bne.n	8009a8a <HAL_TIM_PWM_Start+0x72>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	bf14      	ite	ne
 8009a82:	2301      	movne	r3, #1
 8009a84:	2300      	moveq	r3, #0
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	e015      	b.n	8009ab6 <HAL_TIM_PWM_Start+0x9e>
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b10      	cmp	r3, #16
 8009a8e:	d109      	bne.n	8009aa4 <HAL_TIM_PWM_Start+0x8c>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	bf14      	ite	ne
 8009a9c:	2301      	movne	r3, #1
 8009a9e:	2300      	moveq	r3, #0
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	e008      	b.n	8009ab6 <HAL_TIM_PWM_Start+0x9e>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	bf14      	ite	ne
 8009ab0:	2301      	movne	r3, #1
 8009ab2:	2300      	moveq	r3, #0
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e09c      	b.n	8009bf8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d104      	bne.n	8009ace <HAL_TIM_PWM_Start+0xb6>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009acc:	e023      	b.n	8009b16 <HAL_TIM_PWM_Start+0xfe>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d104      	bne.n	8009ade <HAL_TIM_PWM_Start+0xc6>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009adc:	e01b      	b.n	8009b16 <HAL_TIM_PWM_Start+0xfe>
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b08      	cmp	r3, #8
 8009ae2:	d104      	bne.n	8009aee <HAL_TIM_PWM_Start+0xd6>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009aec:	e013      	b.n	8009b16 <HAL_TIM_PWM_Start+0xfe>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b0c      	cmp	r3, #12
 8009af2:	d104      	bne.n	8009afe <HAL_TIM_PWM_Start+0xe6>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2202      	movs	r2, #2
 8009af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009afc:	e00b      	b.n	8009b16 <HAL_TIM_PWM_Start+0xfe>
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b10      	cmp	r3, #16
 8009b02:	d104      	bne.n	8009b0e <HAL_TIM_PWM_Start+0xf6>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2202      	movs	r2, #2
 8009b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b0c:	e003      	b.n	8009b16 <HAL_TIM_PWM_Start+0xfe>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2202      	movs	r2, #2
 8009b12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f001 f884 	bl	800ac2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a35      	ldr	r2, [pc, #212]	; (8009c00 <HAL_TIM_PWM_Start+0x1e8>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d013      	beq.n	8009b56 <HAL_TIM_PWM_Start+0x13e>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a34      	ldr	r2, [pc, #208]	; (8009c04 <HAL_TIM_PWM_Start+0x1ec>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d00e      	beq.n	8009b56 <HAL_TIM_PWM_Start+0x13e>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a32      	ldr	r2, [pc, #200]	; (8009c08 <HAL_TIM_PWM_Start+0x1f0>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d009      	beq.n	8009b56 <HAL_TIM_PWM_Start+0x13e>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a31      	ldr	r2, [pc, #196]	; (8009c0c <HAL_TIM_PWM_Start+0x1f4>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d004      	beq.n	8009b56 <HAL_TIM_PWM_Start+0x13e>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a2f      	ldr	r2, [pc, #188]	; (8009c10 <HAL_TIM_PWM_Start+0x1f8>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d101      	bne.n	8009b5a <HAL_TIM_PWM_Start+0x142>
 8009b56:	2301      	movs	r3, #1
 8009b58:	e000      	b.n	8009b5c <HAL_TIM_PWM_Start+0x144>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d007      	beq.n	8009b70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a22      	ldr	r2, [pc, #136]	; (8009c00 <HAL_TIM_PWM_Start+0x1e8>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d01d      	beq.n	8009bb6 <HAL_TIM_PWM_Start+0x19e>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b82:	d018      	beq.n	8009bb6 <HAL_TIM_PWM_Start+0x19e>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a22      	ldr	r2, [pc, #136]	; (8009c14 <HAL_TIM_PWM_Start+0x1fc>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d013      	beq.n	8009bb6 <HAL_TIM_PWM_Start+0x19e>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a21      	ldr	r2, [pc, #132]	; (8009c18 <HAL_TIM_PWM_Start+0x200>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d00e      	beq.n	8009bb6 <HAL_TIM_PWM_Start+0x19e>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a1f      	ldr	r2, [pc, #124]	; (8009c1c <HAL_TIM_PWM_Start+0x204>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d009      	beq.n	8009bb6 <HAL_TIM_PWM_Start+0x19e>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a17      	ldr	r2, [pc, #92]	; (8009c04 <HAL_TIM_PWM_Start+0x1ec>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d004      	beq.n	8009bb6 <HAL_TIM_PWM_Start+0x19e>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <HAL_TIM_PWM_Start+0x208>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d115      	bne.n	8009be2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689a      	ldr	r2, [r3, #8]
 8009bbc:	4b19      	ldr	r3, [pc, #100]	; (8009c24 <HAL_TIM_PWM_Start+0x20c>)
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2b06      	cmp	r3, #6
 8009bc6:	d015      	beq.n	8009bf4 <HAL_TIM_PWM_Start+0x1dc>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bce:	d011      	beq.n	8009bf4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f042 0201 	orr.w	r2, r2, #1
 8009bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be0:	e008      	b.n	8009bf4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f042 0201 	orr.w	r2, r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	e000      	b.n	8009bf6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	40010000 	.word	0x40010000
 8009c04:	40010400 	.word	0x40010400
 8009c08:	40014000 	.word	0x40014000
 8009c0c:	40014400 	.word	0x40014400
 8009c10:	40014800 	.word	0x40014800
 8009c14:	40000400 	.word	0x40000400
 8009c18:	40000800 	.word	0x40000800
 8009c1c:	40000c00 	.word	0x40000c00
 8009c20:	40001800 	.word	0x40001800
 8009c24:	00010007 	.word	0x00010007

08009c28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e08f      	b.n	8009d5c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d106      	bne.n	8009c56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7f8 f88b 	bl	8001d6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2202      	movs	r2, #2
 8009c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6899      	ldr	r1, [r3, #8]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	4b3e      	ldr	r3, [pc, #248]	; (8009d64 <HAL_TIM_Encoder_Init+0x13c>)
 8009c6a:	400b      	ands	r3, r1
 8009c6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3304      	adds	r3, #4
 8009c76:	4619      	mov	r1, r3
 8009c78:	4610      	mov	r0, r2
 8009c7a:	f000 fbd1 	bl	800a420 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	6a1b      	ldr	r3, [r3, #32]
 8009c94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	4b31      	ldr	r3, [pc, #196]	; (8009d68 <HAL_TIM_Encoder_Init+0x140>)
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	021b      	lsls	r3, r3, #8
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	4b2b      	ldr	r3, [pc, #172]	; (8009d6c <HAL_TIM_Encoder_Init+0x144>)
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	4b2a      	ldr	r3, [pc, #168]	; (8009d70 <HAL_TIM_Encoder_Init+0x148>)
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	68da      	ldr	r2, [r3, #12]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	021b      	lsls	r3, r3, #8
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	011a      	lsls	r2, r3, #4
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	031b      	lsls	r3, r3, #12
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009cf6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009cfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	011b      	lsls	r3, r3, #4
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	fffebff8 	.word	0xfffebff8
 8009d68:	fffffcfc 	.word	0xfffffcfc
 8009d6c:	fffff3f3 	.word	0xfffff3f3
 8009d70:	ffff0f0f 	.word	0xffff0f0f

08009d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d122      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	f003 0302 	and.w	r3, r3, #2
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d11b      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f06f 0202 	mvn.w	r2, #2
 8009da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d003      	beq.n	8009dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fb14 	bl	800a3e4 <HAL_TIM_IC_CaptureCallback>
 8009dbc:	e005      	b.n	8009dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fb06 	bl	800a3d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fb17 	bl	800a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	f003 0304 	and.w	r3, r3, #4
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	d122      	bne.n	8009e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b04      	cmp	r3, #4
 8009dea:	d11b      	bne.n	8009e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f06f 0204 	mvn.w	r2, #4
 8009df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2202      	movs	r2, #2
 8009dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 faea 	bl	800a3e4 <HAL_TIM_IC_CaptureCallback>
 8009e10:	e005      	b.n	8009e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fadc 	bl	800a3d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 faed 	bl	800a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	f003 0308 	and.w	r3, r3, #8
 8009e2e:	2b08      	cmp	r3, #8
 8009e30:	d122      	bne.n	8009e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	f003 0308 	and.w	r3, r3, #8
 8009e3c:	2b08      	cmp	r3, #8
 8009e3e:	d11b      	bne.n	8009e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f06f 0208 	mvn.w	r2, #8
 8009e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2204      	movs	r2, #4
 8009e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	69db      	ldr	r3, [r3, #28]
 8009e56:	f003 0303 	and.w	r3, r3, #3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fac0 	bl	800a3e4 <HAL_TIM_IC_CaptureCallback>
 8009e64:	e005      	b.n	8009e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fab2 	bl	800a3d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fac3 	bl	800a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	f003 0310 	and.w	r3, r3, #16
 8009e82:	2b10      	cmp	r3, #16
 8009e84:	d122      	bne.n	8009ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	f003 0310 	and.w	r3, r3, #16
 8009e90:	2b10      	cmp	r3, #16
 8009e92:	d11b      	bne.n	8009ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f06f 0210 	mvn.w	r2, #16
 8009e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2208      	movs	r2, #8
 8009ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fa96 	bl	800a3e4 <HAL_TIM_IC_CaptureCallback>
 8009eb8:	e005      	b.n	8009ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fa88 	bl	800a3d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fa99 	bl	800a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d10e      	bne.n	8009ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	f003 0301 	and.w	r3, r3, #1
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d107      	bne.n	8009ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f06f 0201 	mvn.w	r2, #1
 8009ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa62 	bl	800a3bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f02:	2b80      	cmp	r3, #128	; 0x80
 8009f04:	d10e      	bne.n	8009f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f10:	2b80      	cmp	r3, #128	; 0x80
 8009f12:	d107      	bne.n	8009f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 ffba 	bl	800ae98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f32:	d10e      	bne.n	8009f52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f3e:	2b80      	cmp	r3, #128	; 0x80
 8009f40:	d107      	bne.n	8009f52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 ffad 	bl	800aeac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f5c:	2b40      	cmp	r3, #64	; 0x40
 8009f5e:	d10e      	bne.n	8009f7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f6a:	2b40      	cmp	r3, #64	; 0x40
 8009f6c:	d107      	bne.n	8009f7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fa47 	bl	800a40c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	f003 0320 	and.w	r3, r3, #32
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	d10e      	bne.n	8009faa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b20      	cmp	r3, #32
 8009f98:	d107      	bne.n	8009faa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f06f 0220 	mvn.w	r2, #32
 8009fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 ff6d 	bl	800ae84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009faa:	bf00      	nop
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d101      	bne.n	8009fce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009fca:	2302      	movs	r3, #2
 8009fcc:	e0fd      	b.n	800a1ca <HAL_TIM_PWM_ConfigChannel+0x216>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b14      	cmp	r3, #20
 8009fda:	f200 80f0 	bhi.w	800a1be <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009fde:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe4:	0800a039 	.word	0x0800a039
 8009fe8:	0800a1bf 	.word	0x0800a1bf
 8009fec:	0800a1bf 	.word	0x0800a1bf
 8009ff0:	0800a1bf 	.word	0x0800a1bf
 8009ff4:	0800a079 	.word	0x0800a079
 8009ff8:	0800a1bf 	.word	0x0800a1bf
 8009ffc:	0800a1bf 	.word	0x0800a1bf
 800a000:	0800a1bf 	.word	0x0800a1bf
 800a004:	0800a0bb 	.word	0x0800a0bb
 800a008:	0800a1bf 	.word	0x0800a1bf
 800a00c:	0800a1bf 	.word	0x0800a1bf
 800a010:	0800a1bf 	.word	0x0800a1bf
 800a014:	0800a0fb 	.word	0x0800a0fb
 800a018:	0800a1bf 	.word	0x0800a1bf
 800a01c:	0800a1bf 	.word	0x0800a1bf
 800a020:	0800a1bf 	.word	0x0800a1bf
 800a024:	0800a13d 	.word	0x0800a13d
 800a028:	0800a1bf 	.word	0x0800a1bf
 800a02c:	0800a1bf 	.word	0x0800a1bf
 800a030:	0800a1bf 	.word	0x0800a1bf
 800a034:	0800a17d 	.word	0x0800a17d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68b9      	ldr	r1, [r7, #8]
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 fa88 	bl	800a554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	699a      	ldr	r2, [r3, #24]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f042 0208 	orr.w	r2, r2, #8
 800a052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f022 0204 	bic.w	r2, r2, #4
 800a062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6999      	ldr	r1, [r3, #24]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	691a      	ldr	r2, [r3, #16]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	430a      	orrs	r2, r1
 800a074:	619a      	str	r2, [r3, #24]
      break;
 800a076:	e0a3      	b.n	800a1c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68b9      	ldr	r1, [r7, #8]
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 faf8 	bl	800a674 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	699a      	ldr	r2, [r3, #24]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6999      	ldr	r1, [r3, #24]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	021a      	lsls	r2, r3, #8
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	619a      	str	r2, [r3, #24]
      break;
 800a0b8:	e082      	b.n	800a1c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68b9      	ldr	r1, [r7, #8]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fb61 	bl	800a788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	69da      	ldr	r2, [r3, #28]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f042 0208 	orr.w	r2, r2, #8
 800a0d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69da      	ldr	r2, [r3, #28]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f022 0204 	bic.w	r2, r2, #4
 800a0e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69d9      	ldr	r1, [r3, #28]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	691a      	ldr	r2, [r3, #16]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	61da      	str	r2, [r3, #28]
      break;
 800a0f8:	e062      	b.n	800a1c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68b9      	ldr	r1, [r7, #8]
 800a100:	4618      	mov	r0, r3
 800a102:	f000 fbc7 	bl	800a894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	69da      	ldr	r2, [r3, #28]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69da      	ldr	r2, [r3, #28]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69d9      	ldr	r1, [r3, #28]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	021a      	lsls	r2, r3, #8
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	430a      	orrs	r2, r1
 800a138:	61da      	str	r2, [r3, #28]
      break;
 800a13a:	e041      	b.n	800a1c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68b9      	ldr	r1, [r7, #8]
 800a142:	4618      	mov	r0, r3
 800a144:	f000 fc0e 	bl	800a964 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f042 0208 	orr.w	r2, r2, #8
 800a156:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f022 0204 	bic.w	r2, r2, #4
 800a166:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	691a      	ldr	r2, [r3, #16]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	430a      	orrs	r2, r1
 800a178:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a17a:	e021      	b.n	800a1c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68b9      	ldr	r1, [r7, #8]
 800a182:	4618      	mov	r0, r3
 800a184:	f000 fc50 	bl	800aa28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a196:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	021a      	lsls	r2, r3, #8
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a1bc:	e000      	b.n	800a1c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a1be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop

0800a1d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d101      	bne.n	800a1ec <HAL_TIM_ConfigClockSource+0x18>
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	e0db      	b.n	800a3a4 <HAL_TIM_ConfigClockSource+0x1d0>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	4b69      	ldr	r3, [pc, #420]	; (800a3ac <HAL_TIM_ConfigClockSource+0x1d8>)
 800a208:	4013      	ands	r3, r2
 800a20a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a212:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a63      	ldr	r2, [pc, #396]	; (800a3b0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a222:	4293      	cmp	r3, r2
 800a224:	f000 80a9 	beq.w	800a37a <HAL_TIM_ConfigClockSource+0x1a6>
 800a228:	4a61      	ldr	r2, [pc, #388]	; (800a3b0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	f200 80ae 	bhi.w	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a230:	4a60      	ldr	r2, [pc, #384]	; (800a3b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a232:	4293      	cmp	r3, r2
 800a234:	f000 80a1 	beq.w	800a37a <HAL_TIM_ConfigClockSource+0x1a6>
 800a238:	4a5e      	ldr	r2, [pc, #376]	; (800a3b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	f200 80a6 	bhi.w	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a240:	4a5d      	ldr	r2, [pc, #372]	; (800a3b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a242:	4293      	cmp	r3, r2
 800a244:	f000 8099 	beq.w	800a37a <HAL_TIM_ConfigClockSource+0x1a6>
 800a248:	4a5b      	ldr	r2, [pc, #364]	; (800a3b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	f200 809e 	bhi.w	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a250:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a254:	f000 8091 	beq.w	800a37a <HAL_TIM_ConfigClockSource+0x1a6>
 800a258:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a25c:	f200 8096 	bhi.w	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a264:	f000 8089 	beq.w	800a37a <HAL_TIM_ConfigClockSource+0x1a6>
 800a268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a26c:	f200 808e 	bhi.w	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a274:	d03e      	beq.n	800a2f4 <HAL_TIM_ConfigClockSource+0x120>
 800a276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a27a:	f200 8087 	bhi.w	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a27e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a282:	f000 8085 	beq.w	800a390 <HAL_TIM_ConfigClockSource+0x1bc>
 800a286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a28a:	d87f      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a28c:	2b70      	cmp	r3, #112	; 0x70
 800a28e:	d01a      	beq.n	800a2c6 <HAL_TIM_ConfigClockSource+0xf2>
 800a290:	2b70      	cmp	r3, #112	; 0x70
 800a292:	d87b      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a294:	2b60      	cmp	r3, #96	; 0x60
 800a296:	d050      	beq.n	800a33a <HAL_TIM_ConfigClockSource+0x166>
 800a298:	2b60      	cmp	r3, #96	; 0x60
 800a29a:	d877      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a29c:	2b50      	cmp	r3, #80	; 0x50
 800a29e:	d03c      	beq.n	800a31a <HAL_TIM_ConfigClockSource+0x146>
 800a2a0:	2b50      	cmp	r3, #80	; 0x50
 800a2a2:	d873      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a2a4:	2b40      	cmp	r3, #64	; 0x40
 800a2a6:	d058      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0x186>
 800a2a8:	2b40      	cmp	r3, #64	; 0x40
 800a2aa:	d86f      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a2ac:	2b30      	cmp	r3, #48	; 0x30
 800a2ae:	d064      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0x1a6>
 800a2b0:	2b30      	cmp	r3, #48	; 0x30
 800a2b2:	d86b      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a2b4:	2b20      	cmp	r3, #32
 800a2b6:	d060      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0x1a6>
 800a2b8:	2b20      	cmp	r3, #32
 800a2ba:	d867      	bhi.n	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d05c      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0x1a6>
 800a2c0:	2b10      	cmp	r3, #16
 800a2c2:	d05a      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a2c4:	e062      	b.n	800a38c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	6899      	ldr	r1, [r3, #8]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	f000 fc89 	bl	800abec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a2e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	609a      	str	r2, [r3, #8]
      break;
 800a2f2:	e04e      	b.n	800a392 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6818      	ldr	r0, [r3, #0]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	6899      	ldr	r1, [r3, #8]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f000 fc72 	bl	800abec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	689a      	ldr	r2, [r3, #8]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a316:	609a      	str	r2, [r3, #8]
      break;
 800a318:	e03b      	b.n	800a392 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6818      	ldr	r0, [r3, #0]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	6859      	ldr	r1, [r3, #4]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	461a      	mov	r2, r3
 800a328:	f000 fbe2 	bl	800aaf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2150      	movs	r1, #80	; 0x50
 800a332:	4618      	mov	r0, r3
 800a334:	f000 fc3c 	bl	800abb0 <TIM_ITRx_SetConfig>
      break;
 800a338:	e02b      	b.n	800a392 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6818      	ldr	r0, [r3, #0]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	6859      	ldr	r1, [r3, #4]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	461a      	mov	r2, r3
 800a348:	f000 fc01 	bl	800ab4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2160      	movs	r1, #96	; 0x60
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fc2c 	bl	800abb0 <TIM_ITRx_SetConfig>
      break;
 800a358:	e01b      	b.n	800a392 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	6859      	ldr	r1, [r3, #4]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	461a      	mov	r2, r3
 800a368:	f000 fbc2 	bl	800aaf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2140      	movs	r1, #64	; 0x40
 800a372:	4618      	mov	r0, r3
 800a374:	f000 fc1c 	bl	800abb0 <TIM_ITRx_SetConfig>
      break;
 800a378:	e00b      	b.n	800a392 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4619      	mov	r1, r3
 800a384:	4610      	mov	r0, r2
 800a386:	f000 fc13 	bl	800abb0 <TIM_ITRx_SetConfig>
        break;
 800a38a:	e002      	b.n	800a392 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a38c:	bf00      	nop
 800a38e:	e000      	b.n	800a392 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a390:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	ffceff88 	.word	0xffceff88
 800a3b0:	00100040 	.word	0x00100040
 800a3b4:	00100030 	.word	0x00100030
 800a3b8:	00100020 	.word	0x00100020

0800a3bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a40      	ldr	r2, [pc, #256]	; (800a534 <TIM_Base_SetConfig+0x114>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d013      	beq.n	800a460 <TIM_Base_SetConfig+0x40>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a43e:	d00f      	beq.n	800a460 <TIM_Base_SetConfig+0x40>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a3d      	ldr	r2, [pc, #244]	; (800a538 <TIM_Base_SetConfig+0x118>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d00b      	beq.n	800a460 <TIM_Base_SetConfig+0x40>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a3c      	ldr	r2, [pc, #240]	; (800a53c <TIM_Base_SetConfig+0x11c>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d007      	beq.n	800a460 <TIM_Base_SetConfig+0x40>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a3b      	ldr	r2, [pc, #236]	; (800a540 <TIM_Base_SetConfig+0x120>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d003      	beq.n	800a460 <TIM_Base_SetConfig+0x40>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4a3a      	ldr	r2, [pc, #232]	; (800a544 <TIM_Base_SetConfig+0x124>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d108      	bne.n	800a472 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	4313      	orrs	r3, r2
 800a470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a2f      	ldr	r2, [pc, #188]	; (800a534 <TIM_Base_SetConfig+0x114>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d01f      	beq.n	800a4ba <TIM_Base_SetConfig+0x9a>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a480:	d01b      	beq.n	800a4ba <TIM_Base_SetConfig+0x9a>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a2c      	ldr	r2, [pc, #176]	; (800a538 <TIM_Base_SetConfig+0x118>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d017      	beq.n	800a4ba <TIM_Base_SetConfig+0x9a>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a2b      	ldr	r2, [pc, #172]	; (800a53c <TIM_Base_SetConfig+0x11c>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d013      	beq.n	800a4ba <TIM_Base_SetConfig+0x9a>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a2a      	ldr	r2, [pc, #168]	; (800a540 <TIM_Base_SetConfig+0x120>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d00f      	beq.n	800a4ba <TIM_Base_SetConfig+0x9a>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a29      	ldr	r2, [pc, #164]	; (800a544 <TIM_Base_SetConfig+0x124>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d00b      	beq.n	800a4ba <TIM_Base_SetConfig+0x9a>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a28      	ldr	r2, [pc, #160]	; (800a548 <TIM_Base_SetConfig+0x128>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d007      	beq.n	800a4ba <TIM_Base_SetConfig+0x9a>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a27      	ldr	r2, [pc, #156]	; (800a54c <TIM_Base_SetConfig+0x12c>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d003      	beq.n	800a4ba <TIM_Base_SetConfig+0x9a>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a26      	ldr	r2, [pc, #152]	; (800a550 <TIM_Base_SetConfig+0x130>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d108      	bne.n	800a4cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	689a      	ldr	r2, [r3, #8]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a10      	ldr	r2, [pc, #64]	; (800a534 <TIM_Base_SetConfig+0x114>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d00f      	beq.n	800a518 <TIM_Base_SetConfig+0xf8>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a12      	ldr	r2, [pc, #72]	; (800a544 <TIM_Base_SetConfig+0x124>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d00b      	beq.n	800a518 <TIM_Base_SetConfig+0xf8>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a11      	ldr	r2, [pc, #68]	; (800a548 <TIM_Base_SetConfig+0x128>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d007      	beq.n	800a518 <TIM_Base_SetConfig+0xf8>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a10      	ldr	r2, [pc, #64]	; (800a54c <TIM_Base_SetConfig+0x12c>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d003      	beq.n	800a518 <TIM_Base_SetConfig+0xf8>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a0f      	ldr	r2, [pc, #60]	; (800a550 <TIM_Base_SetConfig+0x130>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d103      	bne.n	800a520 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	691a      	ldr	r2, [r3, #16]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	615a      	str	r2, [r3, #20]
}
 800a526:	bf00      	nop
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	40010000 	.word	0x40010000
 800a538:	40000400 	.word	0x40000400
 800a53c:	40000800 	.word	0x40000800
 800a540:	40000c00 	.word	0x40000c00
 800a544:	40010400 	.word	0x40010400
 800a548:	40014000 	.word	0x40014000
 800a54c:	40014400 	.word	0x40014400
 800a550:	40014800 	.word	0x40014800

0800a554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a554:	b480      	push	{r7}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	f023 0201 	bic.w	r2, r3, #1
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a1b      	ldr	r3, [r3, #32]
 800a56e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	4b37      	ldr	r3, [pc, #220]	; (800a65c <TIM_OC1_SetConfig+0x108>)
 800a580:	4013      	ands	r3, r2
 800a582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f023 0303 	bic.w	r3, r3, #3
 800a58a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	4313      	orrs	r3, r2
 800a594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f023 0302 	bic.w	r3, r3, #2
 800a59c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a2d      	ldr	r2, [pc, #180]	; (800a660 <TIM_OC1_SetConfig+0x10c>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d00f      	beq.n	800a5d0 <TIM_OC1_SetConfig+0x7c>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a2c      	ldr	r2, [pc, #176]	; (800a664 <TIM_OC1_SetConfig+0x110>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d00b      	beq.n	800a5d0 <TIM_OC1_SetConfig+0x7c>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a2b      	ldr	r2, [pc, #172]	; (800a668 <TIM_OC1_SetConfig+0x114>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d007      	beq.n	800a5d0 <TIM_OC1_SetConfig+0x7c>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a2a      	ldr	r2, [pc, #168]	; (800a66c <TIM_OC1_SetConfig+0x118>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d003      	beq.n	800a5d0 <TIM_OC1_SetConfig+0x7c>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a29      	ldr	r2, [pc, #164]	; (800a670 <TIM_OC1_SetConfig+0x11c>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d10c      	bne.n	800a5ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	f023 0308 	bic.w	r3, r3, #8
 800a5d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	697a      	ldr	r2, [r7, #20]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f023 0304 	bic.w	r3, r3, #4
 800a5e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4a1c      	ldr	r2, [pc, #112]	; (800a660 <TIM_OC1_SetConfig+0x10c>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d00f      	beq.n	800a612 <TIM_OC1_SetConfig+0xbe>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a1b      	ldr	r2, [pc, #108]	; (800a664 <TIM_OC1_SetConfig+0x110>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d00b      	beq.n	800a612 <TIM_OC1_SetConfig+0xbe>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a1a      	ldr	r2, [pc, #104]	; (800a668 <TIM_OC1_SetConfig+0x114>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d007      	beq.n	800a612 <TIM_OC1_SetConfig+0xbe>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a19      	ldr	r2, [pc, #100]	; (800a66c <TIM_OC1_SetConfig+0x118>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d003      	beq.n	800a612 <TIM_OC1_SetConfig+0xbe>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a18      	ldr	r2, [pc, #96]	; (800a670 <TIM_OC1_SetConfig+0x11c>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d111      	bne.n	800a636 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	693a      	ldr	r2, [r7, #16]
 800a628:	4313      	orrs	r3, r2
 800a62a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	4313      	orrs	r3, r2
 800a634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	697a      	ldr	r2, [r7, #20]
 800a64e:	621a      	str	r2, [r3, #32]
}
 800a650:	bf00      	nop
 800a652:	371c      	adds	r7, #28
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	fffeff8f 	.word	0xfffeff8f
 800a660:	40010000 	.word	0x40010000
 800a664:	40010400 	.word	0x40010400
 800a668:	40014000 	.word	0x40014000
 800a66c:	40014400 	.word	0x40014400
 800a670:	40014800 	.word	0x40014800

0800a674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a674:	b480      	push	{r7}
 800a676:	b087      	sub	sp, #28
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a1b      	ldr	r3, [r3, #32]
 800a682:	f023 0210 	bic.w	r2, r3, #16
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	4b34      	ldr	r3, [pc, #208]	; (800a770 <TIM_OC2_SetConfig+0xfc>)
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	021b      	lsls	r3, r3, #8
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	f023 0320 	bic.w	r3, r3, #32
 800a6be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	011b      	lsls	r3, r3, #4
 800a6c6:	697a      	ldr	r2, [r7, #20]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a29      	ldr	r2, [pc, #164]	; (800a774 <TIM_OC2_SetConfig+0x100>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d003      	beq.n	800a6dc <TIM_OC2_SetConfig+0x68>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a28      	ldr	r2, [pc, #160]	; (800a778 <TIM_OC2_SetConfig+0x104>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d10d      	bne.n	800a6f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	011b      	lsls	r3, r3, #4
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a1e      	ldr	r2, [pc, #120]	; (800a774 <TIM_OC2_SetConfig+0x100>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d00f      	beq.n	800a720 <TIM_OC2_SetConfig+0xac>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a1d      	ldr	r2, [pc, #116]	; (800a778 <TIM_OC2_SetConfig+0x104>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d00b      	beq.n	800a720 <TIM_OC2_SetConfig+0xac>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a1c      	ldr	r2, [pc, #112]	; (800a77c <TIM_OC2_SetConfig+0x108>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d007      	beq.n	800a720 <TIM_OC2_SetConfig+0xac>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a1b      	ldr	r2, [pc, #108]	; (800a780 <TIM_OC2_SetConfig+0x10c>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d003      	beq.n	800a720 <TIM_OC2_SetConfig+0xac>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a1a      	ldr	r2, [pc, #104]	; (800a784 <TIM_OC2_SetConfig+0x110>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d113      	bne.n	800a748 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a72e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	4313      	orrs	r3, r2
 800a73a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	4313      	orrs	r3, r2
 800a746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	621a      	str	r2, [r3, #32]
}
 800a762:	bf00      	nop
 800a764:	371c      	adds	r7, #28
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	feff8fff 	.word	0xfeff8fff
 800a774:	40010000 	.word	0x40010000
 800a778:	40010400 	.word	0x40010400
 800a77c:	40014000 	.word	0x40014000
 800a780:	40014400 	.word	0x40014400
 800a784:	40014800 	.word	0x40014800

0800a788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a788:	b480      	push	{r7}
 800a78a:	b087      	sub	sp, #28
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	69db      	ldr	r3, [r3, #28]
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f023 0303 	bic.w	r3, r3, #3
 800a7be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	021b      	lsls	r3, r3, #8
 800a7d8:	697a      	ldr	r2, [r7, #20]
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a27      	ldr	r2, [pc, #156]	; (800a880 <TIM_OC3_SetConfig+0xf8>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d003      	beq.n	800a7ee <TIM_OC3_SetConfig+0x66>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a26      	ldr	r2, [pc, #152]	; (800a884 <TIM_OC3_SetConfig+0xfc>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d10d      	bne.n	800a80a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	021b      	lsls	r3, r3, #8
 800a7fc:	697a      	ldr	r2, [r7, #20]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a1c      	ldr	r2, [pc, #112]	; (800a880 <TIM_OC3_SetConfig+0xf8>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d00f      	beq.n	800a832 <TIM_OC3_SetConfig+0xaa>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a1b      	ldr	r2, [pc, #108]	; (800a884 <TIM_OC3_SetConfig+0xfc>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d00b      	beq.n	800a832 <TIM_OC3_SetConfig+0xaa>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a1a      	ldr	r2, [pc, #104]	; (800a888 <TIM_OC3_SetConfig+0x100>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d007      	beq.n	800a832 <TIM_OC3_SetConfig+0xaa>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a19      	ldr	r2, [pc, #100]	; (800a88c <TIM_OC3_SetConfig+0x104>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d003      	beq.n	800a832 <TIM_OC3_SetConfig+0xaa>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a18      	ldr	r2, [pc, #96]	; (800a890 <TIM_OC3_SetConfig+0x108>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d113      	bne.n	800a85a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	011b      	lsls	r3, r3, #4
 800a848:	693a      	ldr	r2, [r7, #16]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	011b      	lsls	r3, r3, #4
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	4313      	orrs	r3, r2
 800a858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	685a      	ldr	r2, [r3, #4]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	621a      	str	r2, [r3, #32]
}
 800a874:	bf00      	nop
 800a876:	371c      	adds	r7, #28
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	40010000 	.word	0x40010000
 800a884:	40010400 	.word	0x40010400
 800a888:	40014000 	.word	0x40014000
 800a88c:	40014400 	.word	0x40014400
 800a890:	40014800 	.word	0x40014800

0800a894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a894:	b480      	push	{r7}
 800a896:	b087      	sub	sp, #28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	021b      	lsls	r3, r3, #8
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	031b      	lsls	r3, r3, #12
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a18      	ldr	r2, [pc, #96]	; (800a950 <TIM_OC4_SetConfig+0xbc>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d00f      	beq.n	800a914 <TIM_OC4_SetConfig+0x80>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a17      	ldr	r2, [pc, #92]	; (800a954 <TIM_OC4_SetConfig+0xc0>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d00b      	beq.n	800a914 <TIM_OC4_SetConfig+0x80>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a16      	ldr	r2, [pc, #88]	; (800a958 <TIM_OC4_SetConfig+0xc4>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d007      	beq.n	800a914 <TIM_OC4_SetConfig+0x80>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a15      	ldr	r2, [pc, #84]	; (800a95c <TIM_OC4_SetConfig+0xc8>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d003      	beq.n	800a914 <TIM_OC4_SetConfig+0x80>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a14      	ldr	r2, [pc, #80]	; (800a960 <TIM_OC4_SetConfig+0xcc>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d109      	bne.n	800a928 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a91a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	019b      	lsls	r3, r3, #6
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	4313      	orrs	r3, r2
 800a926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	697a      	ldr	r2, [r7, #20]
 800a92c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	621a      	str	r2, [r3, #32]
}
 800a942:	bf00      	nop
 800a944:	371c      	adds	r7, #28
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	40010000 	.word	0x40010000
 800a954:	40010400 	.word	0x40010400
 800a958:	40014000 	.word	0x40014000
 800a95c:	40014400 	.word	0x40014400
 800a960:	40014800 	.word	0x40014800

0800a964 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a964:	b480      	push	{r7}
 800a966:	b087      	sub	sp, #28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a9a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	041b      	lsls	r3, r3, #16
 800a9ac:	693a      	ldr	r2, [r7, #16]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a17      	ldr	r2, [pc, #92]	; (800aa14 <TIM_OC5_SetConfig+0xb0>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d00f      	beq.n	800a9da <TIM_OC5_SetConfig+0x76>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a16      	ldr	r2, [pc, #88]	; (800aa18 <TIM_OC5_SetConfig+0xb4>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d00b      	beq.n	800a9da <TIM_OC5_SetConfig+0x76>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a15      	ldr	r2, [pc, #84]	; (800aa1c <TIM_OC5_SetConfig+0xb8>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d007      	beq.n	800a9da <TIM_OC5_SetConfig+0x76>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a14      	ldr	r2, [pc, #80]	; (800aa20 <TIM_OC5_SetConfig+0xbc>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d003      	beq.n	800a9da <TIM_OC5_SetConfig+0x76>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a13      	ldr	r2, [pc, #76]	; (800aa24 <TIM_OC5_SetConfig+0xc0>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d109      	bne.n	800a9ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	021b      	lsls	r3, r3, #8
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	685a      	ldr	r2, [r3, #4]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	621a      	str	r2, [r3, #32]
}
 800aa08:	bf00      	nop
 800aa0a:	371c      	adds	r7, #28
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	40010000 	.word	0x40010000
 800aa18:	40010400 	.word	0x40010400
 800aa1c:	40014000 	.word	0x40014000
 800aa20:	40014400 	.word	0x40014400
 800aa24:	40014800 	.word	0x40014800

0800aa28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	021b      	lsls	r3, r3, #8
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	051b      	lsls	r3, r3, #20
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a18      	ldr	r2, [pc, #96]	; (800aadc <TIM_OC6_SetConfig+0xb4>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d00f      	beq.n	800aaa0 <TIM_OC6_SetConfig+0x78>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a17      	ldr	r2, [pc, #92]	; (800aae0 <TIM_OC6_SetConfig+0xb8>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d00b      	beq.n	800aaa0 <TIM_OC6_SetConfig+0x78>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a16      	ldr	r2, [pc, #88]	; (800aae4 <TIM_OC6_SetConfig+0xbc>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d007      	beq.n	800aaa0 <TIM_OC6_SetConfig+0x78>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a15      	ldr	r2, [pc, #84]	; (800aae8 <TIM_OC6_SetConfig+0xc0>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d003      	beq.n	800aaa0 <TIM_OC6_SetConfig+0x78>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a14      	ldr	r2, [pc, #80]	; (800aaec <TIM_OC6_SetConfig+0xc4>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d109      	bne.n	800aab4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aaa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	029b      	lsls	r3, r3, #10
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	697a      	ldr	r2, [r7, #20]
 800aab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	621a      	str	r2, [r3, #32]
}
 800aace:	bf00      	nop
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	40010000 	.word	0x40010000
 800aae0:	40010400 	.word	0x40010400
 800aae4:	40014000 	.word	0x40014000
 800aae8:	40014400 	.word	0x40014400
 800aaec:	40014800 	.word	0x40014800

0800aaf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	f023 0201 	bic.w	r2, r3, #1
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	011b      	lsls	r3, r3, #4
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f023 030a 	bic.w	r3, r3, #10
 800ab2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	621a      	str	r2, [r3, #32]
}
 800ab42:	bf00      	nop
 800ab44:	371c      	adds	r7, #28
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b087      	sub	sp, #28
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	60f8      	str	r0, [r7, #12]
 800ab56:	60b9      	str	r1, [r7, #8]
 800ab58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	f023 0210 	bic.w	r2, r3, #16
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6a1b      	ldr	r3, [r3, #32]
 800ab70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	031b      	lsls	r3, r3, #12
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	011b      	lsls	r3, r3, #4
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	621a      	str	r2, [r3, #32]
}
 800aba2:	bf00      	nop
 800aba4:	371c      	adds	r7, #28
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
	...

0800abb0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	4b09      	ldr	r3, [pc, #36]	; (800abe8 <TIM_ITRx_SetConfig+0x38>)
 800abc4:	4013      	ands	r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	4313      	orrs	r3, r2
 800abce:	f043 0307 	orr.w	r3, r3, #7
 800abd2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	609a      	str	r2, [r3, #8]
}
 800abda:	bf00      	nop
 800abdc:	3714      	adds	r7, #20
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	ffcfff8f 	.word	0xffcfff8f

0800abec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abec:	b480      	push	{r7}
 800abee:	b087      	sub	sp, #28
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	021a      	lsls	r2, r3, #8
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	431a      	orrs	r2, r3
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	609a      	str	r2, [r3, #8]
}
 800ac20:	bf00      	nop
 800ac22:	371c      	adds	r7, #28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b087      	sub	sp, #28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	f003 031f 	and.w	r3, r3, #31
 800ac3e:	2201      	movs	r2, #1
 800ac40:	fa02 f303 	lsl.w	r3, r2, r3
 800ac44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6a1a      	ldr	r2, [r3, #32]
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	43db      	mvns	r3, r3
 800ac4e:	401a      	ands	r2, r3
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6a1a      	ldr	r2, [r3, #32]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	f003 031f 	and.w	r3, r3, #31
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	fa01 f303 	lsl.w	r3, r1, r3
 800ac64:	431a      	orrs	r2, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	621a      	str	r2, [r3, #32]
}
 800ac6a:	bf00      	nop
 800ac6c:	371c      	adds	r7, #28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
	...

0800ac78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d101      	bne.n	800ac90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	e068      	b.n	800ad62 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a2e      	ldr	r2, [pc, #184]	; (800ad70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d004      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a2d      	ldr	r2, [pc, #180]	; (800ad74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d108      	bne.n	800acd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800acca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a1e      	ldr	r2, [pc, #120]	; (800ad70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d01d      	beq.n	800ad36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad02:	d018      	beq.n	800ad36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a1b      	ldr	r2, [pc, #108]	; (800ad78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d013      	beq.n	800ad36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a1a      	ldr	r2, [pc, #104]	; (800ad7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d00e      	beq.n	800ad36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a18      	ldr	r2, [pc, #96]	; (800ad80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d009      	beq.n	800ad36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a13      	ldr	r2, [pc, #76]	; (800ad74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d004      	beq.n	800ad36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a14      	ldr	r2, [pc, #80]	; (800ad84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d10c      	bne.n	800ad50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	40010000 	.word	0x40010000
 800ad74:	40010400 	.word	0x40010400
 800ad78:	40000400 	.word	0x40000400
 800ad7c:	40000800 	.word	0x40000800
 800ad80:	40000c00 	.word	0x40000c00
 800ad84:	40001800 	.word	0x40001800

0800ad88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ad92:	2300      	movs	r3, #0
 800ad94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d101      	bne.n	800ada4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ada0:	2302      	movs	r3, #2
 800ada2:	e065      	b.n	800ae70 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	4313      	orrs	r3, r2
 800add4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	4313      	orrs	r3, r2
 800adf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	695b      	ldr	r3, [r3, #20]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	041b      	lsls	r3, r3, #16
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a16      	ldr	r2, [pc, #88]	; (800ae7c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d004      	beq.n	800ae32 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a14      	ldr	r2, [pc, #80]	; (800ae80 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d115      	bne.n	800ae5e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3c:	051b      	lsls	r3, r3, #20
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	69db      	ldr	r3, [r3, #28]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	40010000 	.word	0x40010000
 800ae80:	40010400 	.word	0x40010400

0800ae84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae8c:	bf00      	nop
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	e042      	b.n	800af58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d106      	bne.n	800aeea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7f7 f9b1 	bl	800224c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2224      	movs	r2, #36	; 0x24
 800aeee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f022 0201 	bic.w	r2, r2, #1
 800af00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f82c 	bl	800af60 <UART_SetConfig>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d101      	bne.n	800af12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	e022      	b.n	800af58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af16:	2b00      	cmp	r3, #0
 800af18:	d002      	beq.n	800af20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fd80 	bl	800ba20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	685a      	ldr	r2, [r3, #4]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	689a      	ldr	r2, [r3, #8]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f042 0201 	orr.w	r2, r2, #1
 800af4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fe07 	bl	800bb64 <UART_CheckIdleState>
 800af56:	4603      	mov	r3, r0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af60:	b5b0      	push	{r4, r5, r7, lr}
 800af62:	b08e      	sub	sp, #56	; 0x38
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689a      	ldr	r2, [r3, #8]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	431a      	orrs	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	695b      	ldr	r3, [r3, #20]
 800af7c:	431a      	orrs	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	4313      	orrs	r3, r2
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	4bbf      	ldr	r3, [pc, #764]	; (800b28c <UART_SetConfig+0x32c>)
 800af8e:	4013      	ands	r3, r2
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	6812      	ldr	r2, [r2, #0]
 800af94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af96:	430b      	orrs	r3, r1
 800af98:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	68da      	ldr	r2, [r3, #12]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	430a      	orrs	r2, r1
 800afae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4ab5      	ldr	r2, [pc, #724]	; (800b290 <UART_SetConfig+0x330>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d004      	beq.n	800afca <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a1b      	ldr	r3, [r3, #32]
 800afc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afc6:	4313      	orrs	r3, r2
 800afc8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	689a      	ldr	r2, [r3, #8]
 800afd0:	4bb0      	ldr	r3, [pc, #704]	; (800b294 <UART_SetConfig+0x334>)
 800afd2:	4013      	ands	r3, r2
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	6812      	ldr	r2, [r2, #0]
 800afd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800afda:	430b      	orrs	r3, r1
 800afdc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe4:	f023 010f 	bic.w	r1, r3, #15
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4aa7      	ldr	r2, [pc, #668]	; (800b298 <UART_SetConfig+0x338>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d176      	bne.n	800b0ec <UART_SetConfig+0x18c>
 800affe:	4ba7      	ldr	r3, [pc, #668]	; (800b29c <UART_SetConfig+0x33c>)
 800b000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b006:	2b28      	cmp	r3, #40	; 0x28
 800b008:	d86c      	bhi.n	800b0e4 <UART_SetConfig+0x184>
 800b00a:	a201      	add	r2, pc, #4	; (adr r2, 800b010 <UART_SetConfig+0xb0>)
 800b00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b010:	0800b0b5 	.word	0x0800b0b5
 800b014:	0800b0e5 	.word	0x0800b0e5
 800b018:	0800b0e5 	.word	0x0800b0e5
 800b01c:	0800b0e5 	.word	0x0800b0e5
 800b020:	0800b0e5 	.word	0x0800b0e5
 800b024:	0800b0e5 	.word	0x0800b0e5
 800b028:	0800b0e5 	.word	0x0800b0e5
 800b02c:	0800b0e5 	.word	0x0800b0e5
 800b030:	0800b0bd 	.word	0x0800b0bd
 800b034:	0800b0e5 	.word	0x0800b0e5
 800b038:	0800b0e5 	.word	0x0800b0e5
 800b03c:	0800b0e5 	.word	0x0800b0e5
 800b040:	0800b0e5 	.word	0x0800b0e5
 800b044:	0800b0e5 	.word	0x0800b0e5
 800b048:	0800b0e5 	.word	0x0800b0e5
 800b04c:	0800b0e5 	.word	0x0800b0e5
 800b050:	0800b0c5 	.word	0x0800b0c5
 800b054:	0800b0e5 	.word	0x0800b0e5
 800b058:	0800b0e5 	.word	0x0800b0e5
 800b05c:	0800b0e5 	.word	0x0800b0e5
 800b060:	0800b0e5 	.word	0x0800b0e5
 800b064:	0800b0e5 	.word	0x0800b0e5
 800b068:	0800b0e5 	.word	0x0800b0e5
 800b06c:	0800b0e5 	.word	0x0800b0e5
 800b070:	0800b0cd 	.word	0x0800b0cd
 800b074:	0800b0e5 	.word	0x0800b0e5
 800b078:	0800b0e5 	.word	0x0800b0e5
 800b07c:	0800b0e5 	.word	0x0800b0e5
 800b080:	0800b0e5 	.word	0x0800b0e5
 800b084:	0800b0e5 	.word	0x0800b0e5
 800b088:	0800b0e5 	.word	0x0800b0e5
 800b08c:	0800b0e5 	.word	0x0800b0e5
 800b090:	0800b0d5 	.word	0x0800b0d5
 800b094:	0800b0e5 	.word	0x0800b0e5
 800b098:	0800b0e5 	.word	0x0800b0e5
 800b09c:	0800b0e5 	.word	0x0800b0e5
 800b0a0:	0800b0e5 	.word	0x0800b0e5
 800b0a4:	0800b0e5 	.word	0x0800b0e5
 800b0a8:	0800b0e5 	.word	0x0800b0e5
 800b0ac:	0800b0e5 	.word	0x0800b0e5
 800b0b0:	0800b0dd 	.word	0x0800b0dd
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ba:	e222      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b0bc:	2304      	movs	r3, #4
 800b0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0c2:	e21e      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b0c4:	2308      	movs	r3, #8
 800b0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ca:	e21a      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b0cc:	2310      	movs	r3, #16
 800b0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d2:	e216      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b0d4:	2320      	movs	r3, #32
 800b0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0da:	e212      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b0dc:	2340      	movs	r3, #64	; 0x40
 800b0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0e2:	e20e      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b0e4:	2380      	movs	r3, #128	; 0x80
 800b0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ea:	e20a      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a6b      	ldr	r2, [pc, #428]	; (800b2a0 <UART_SetConfig+0x340>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d130      	bne.n	800b158 <UART_SetConfig+0x1f8>
 800b0f6:	4b69      	ldr	r3, [pc, #420]	; (800b29c <UART_SetConfig+0x33c>)
 800b0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0fa:	f003 0307 	and.w	r3, r3, #7
 800b0fe:	2b05      	cmp	r3, #5
 800b100:	d826      	bhi.n	800b150 <UART_SetConfig+0x1f0>
 800b102:	a201      	add	r2, pc, #4	; (adr r2, 800b108 <UART_SetConfig+0x1a8>)
 800b104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b108:	0800b121 	.word	0x0800b121
 800b10c:	0800b129 	.word	0x0800b129
 800b110:	0800b131 	.word	0x0800b131
 800b114:	0800b139 	.word	0x0800b139
 800b118:	0800b141 	.word	0x0800b141
 800b11c:	0800b149 	.word	0x0800b149
 800b120:	2300      	movs	r3, #0
 800b122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b126:	e1ec      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b128:	2304      	movs	r3, #4
 800b12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b12e:	e1e8      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b130:	2308      	movs	r3, #8
 800b132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b136:	e1e4      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b138:	2310      	movs	r3, #16
 800b13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b13e:	e1e0      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b140:	2320      	movs	r3, #32
 800b142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b146:	e1dc      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b148:	2340      	movs	r3, #64	; 0x40
 800b14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b14e:	e1d8      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b150:	2380      	movs	r3, #128	; 0x80
 800b152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b156:	e1d4      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a51      	ldr	r2, [pc, #324]	; (800b2a4 <UART_SetConfig+0x344>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d130      	bne.n	800b1c4 <UART_SetConfig+0x264>
 800b162:	4b4e      	ldr	r3, [pc, #312]	; (800b29c <UART_SetConfig+0x33c>)
 800b164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	2b05      	cmp	r3, #5
 800b16c:	d826      	bhi.n	800b1bc <UART_SetConfig+0x25c>
 800b16e:	a201      	add	r2, pc, #4	; (adr r2, 800b174 <UART_SetConfig+0x214>)
 800b170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b174:	0800b18d 	.word	0x0800b18d
 800b178:	0800b195 	.word	0x0800b195
 800b17c:	0800b19d 	.word	0x0800b19d
 800b180:	0800b1a5 	.word	0x0800b1a5
 800b184:	0800b1ad 	.word	0x0800b1ad
 800b188:	0800b1b5 	.word	0x0800b1b5
 800b18c:	2300      	movs	r3, #0
 800b18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b192:	e1b6      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b194:	2304      	movs	r3, #4
 800b196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b19a:	e1b2      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b19c:	2308      	movs	r3, #8
 800b19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1a2:	e1ae      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b1a4:	2310      	movs	r3, #16
 800b1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1aa:	e1aa      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b1ac:	2320      	movs	r3, #32
 800b1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1b2:	e1a6      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b1b4:	2340      	movs	r3, #64	; 0x40
 800b1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ba:	e1a2      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b1bc:	2380      	movs	r3, #128	; 0x80
 800b1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1c2:	e19e      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a37      	ldr	r2, [pc, #220]	; (800b2a8 <UART_SetConfig+0x348>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d130      	bne.n	800b230 <UART_SetConfig+0x2d0>
 800b1ce:	4b33      	ldr	r3, [pc, #204]	; (800b29c <UART_SetConfig+0x33c>)
 800b1d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1d2:	f003 0307 	and.w	r3, r3, #7
 800b1d6:	2b05      	cmp	r3, #5
 800b1d8:	d826      	bhi.n	800b228 <UART_SetConfig+0x2c8>
 800b1da:	a201      	add	r2, pc, #4	; (adr r2, 800b1e0 <UART_SetConfig+0x280>)
 800b1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e0:	0800b1f9 	.word	0x0800b1f9
 800b1e4:	0800b201 	.word	0x0800b201
 800b1e8:	0800b209 	.word	0x0800b209
 800b1ec:	0800b211 	.word	0x0800b211
 800b1f0:	0800b219 	.word	0x0800b219
 800b1f4:	0800b221 	.word	0x0800b221
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1fe:	e180      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b200:	2304      	movs	r3, #4
 800b202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b206:	e17c      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b208:	2308      	movs	r3, #8
 800b20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b20e:	e178      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b210:	2310      	movs	r3, #16
 800b212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b216:	e174      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b218:	2320      	movs	r3, #32
 800b21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b21e:	e170      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b220:	2340      	movs	r3, #64	; 0x40
 800b222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b226:	e16c      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b228:	2380      	movs	r3, #128	; 0x80
 800b22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b22e:	e168      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a1d      	ldr	r2, [pc, #116]	; (800b2ac <UART_SetConfig+0x34c>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d142      	bne.n	800b2c0 <UART_SetConfig+0x360>
 800b23a:	4b18      	ldr	r3, [pc, #96]	; (800b29c <UART_SetConfig+0x33c>)
 800b23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b23e:	f003 0307 	and.w	r3, r3, #7
 800b242:	2b05      	cmp	r3, #5
 800b244:	d838      	bhi.n	800b2b8 <UART_SetConfig+0x358>
 800b246:	a201      	add	r2, pc, #4	; (adr r2, 800b24c <UART_SetConfig+0x2ec>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b265 	.word	0x0800b265
 800b250:	0800b26d 	.word	0x0800b26d
 800b254:	0800b275 	.word	0x0800b275
 800b258:	0800b27d 	.word	0x0800b27d
 800b25c:	0800b285 	.word	0x0800b285
 800b260:	0800b2b1 	.word	0x0800b2b1
 800b264:	2300      	movs	r3, #0
 800b266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b26a:	e14a      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b26c:	2304      	movs	r3, #4
 800b26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b272:	e146      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b274:	2308      	movs	r3, #8
 800b276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b27a:	e142      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b27c:	2310      	movs	r3, #16
 800b27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b282:	e13e      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b284:	2320      	movs	r3, #32
 800b286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b28a:	e13a      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b28c:	cfff69f3 	.word	0xcfff69f3
 800b290:	58000c00 	.word	0x58000c00
 800b294:	11fff4ff 	.word	0x11fff4ff
 800b298:	40011000 	.word	0x40011000
 800b29c:	58024400 	.word	0x58024400
 800b2a0:	40004400 	.word	0x40004400
 800b2a4:	40004800 	.word	0x40004800
 800b2a8:	40004c00 	.word	0x40004c00
 800b2ac:	40005000 	.word	0x40005000
 800b2b0:	2340      	movs	r3, #64	; 0x40
 800b2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2b6:	e124      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b2b8:	2380      	movs	r3, #128	; 0x80
 800b2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2be:	e120      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4acc      	ldr	r2, [pc, #816]	; (800b5f8 <UART_SetConfig+0x698>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d176      	bne.n	800b3b8 <UART_SetConfig+0x458>
 800b2ca:	4bcc      	ldr	r3, [pc, #816]	; (800b5fc <UART_SetConfig+0x69c>)
 800b2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2d2:	2b28      	cmp	r3, #40	; 0x28
 800b2d4:	d86c      	bhi.n	800b3b0 <UART_SetConfig+0x450>
 800b2d6:	a201      	add	r2, pc, #4	; (adr r2, 800b2dc <UART_SetConfig+0x37c>)
 800b2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2dc:	0800b381 	.word	0x0800b381
 800b2e0:	0800b3b1 	.word	0x0800b3b1
 800b2e4:	0800b3b1 	.word	0x0800b3b1
 800b2e8:	0800b3b1 	.word	0x0800b3b1
 800b2ec:	0800b3b1 	.word	0x0800b3b1
 800b2f0:	0800b3b1 	.word	0x0800b3b1
 800b2f4:	0800b3b1 	.word	0x0800b3b1
 800b2f8:	0800b3b1 	.word	0x0800b3b1
 800b2fc:	0800b389 	.word	0x0800b389
 800b300:	0800b3b1 	.word	0x0800b3b1
 800b304:	0800b3b1 	.word	0x0800b3b1
 800b308:	0800b3b1 	.word	0x0800b3b1
 800b30c:	0800b3b1 	.word	0x0800b3b1
 800b310:	0800b3b1 	.word	0x0800b3b1
 800b314:	0800b3b1 	.word	0x0800b3b1
 800b318:	0800b3b1 	.word	0x0800b3b1
 800b31c:	0800b391 	.word	0x0800b391
 800b320:	0800b3b1 	.word	0x0800b3b1
 800b324:	0800b3b1 	.word	0x0800b3b1
 800b328:	0800b3b1 	.word	0x0800b3b1
 800b32c:	0800b3b1 	.word	0x0800b3b1
 800b330:	0800b3b1 	.word	0x0800b3b1
 800b334:	0800b3b1 	.word	0x0800b3b1
 800b338:	0800b3b1 	.word	0x0800b3b1
 800b33c:	0800b399 	.word	0x0800b399
 800b340:	0800b3b1 	.word	0x0800b3b1
 800b344:	0800b3b1 	.word	0x0800b3b1
 800b348:	0800b3b1 	.word	0x0800b3b1
 800b34c:	0800b3b1 	.word	0x0800b3b1
 800b350:	0800b3b1 	.word	0x0800b3b1
 800b354:	0800b3b1 	.word	0x0800b3b1
 800b358:	0800b3b1 	.word	0x0800b3b1
 800b35c:	0800b3a1 	.word	0x0800b3a1
 800b360:	0800b3b1 	.word	0x0800b3b1
 800b364:	0800b3b1 	.word	0x0800b3b1
 800b368:	0800b3b1 	.word	0x0800b3b1
 800b36c:	0800b3b1 	.word	0x0800b3b1
 800b370:	0800b3b1 	.word	0x0800b3b1
 800b374:	0800b3b1 	.word	0x0800b3b1
 800b378:	0800b3b1 	.word	0x0800b3b1
 800b37c:	0800b3a9 	.word	0x0800b3a9
 800b380:	2301      	movs	r3, #1
 800b382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b386:	e0bc      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b388:	2304      	movs	r3, #4
 800b38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b38e:	e0b8      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b390:	2308      	movs	r3, #8
 800b392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b396:	e0b4      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b398:	2310      	movs	r3, #16
 800b39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b39e:	e0b0      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b3a0:	2320      	movs	r3, #32
 800b3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3a6:	e0ac      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b3a8:	2340      	movs	r3, #64	; 0x40
 800b3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ae:	e0a8      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b3b0:	2380      	movs	r3, #128	; 0x80
 800b3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3b6:	e0a4      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a90      	ldr	r2, [pc, #576]	; (800b600 <UART_SetConfig+0x6a0>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d130      	bne.n	800b424 <UART_SetConfig+0x4c4>
 800b3c2:	4b8e      	ldr	r3, [pc, #568]	; (800b5fc <UART_SetConfig+0x69c>)
 800b3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c6:	f003 0307 	and.w	r3, r3, #7
 800b3ca:	2b05      	cmp	r3, #5
 800b3cc:	d826      	bhi.n	800b41c <UART_SetConfig+0x4bc>
 800b3ce:	a201      	add	r2, pc, #4	; (adr r2, 800b3d4 <UART_SetConfig+0x474>)
 800b3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d4:	0800b3ed 	.word	0x0800b3ed
 800b3d8:	0800b3f5 	.word	0x0800b3f5
 800b3dc:	0800b3fd 	.word	0x0800b3fd
 800b3e0:	0800b405 	.word	0x0800b405
 800b3e4:	0800b40d 	.word	0x0800b40d
 800b3e8:	0800b415 	.word	0x0800b415
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3f2:	e086      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b3f4:	2304      	movs	r3, #4
 800b3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3fa:	e082      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b3fc:	2308      	movs	r3, #8
 800b3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b402:	e07e      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b404:	2310      	movs	r3, #16
 800b406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b40a:	e07a      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b40c:	2320      	movs	r3, #32
 800b40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b412:	e076      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b414:	2340      	movs	r3, #64	; 0x40
 800b416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b41a:	e072      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b41c:	2380      	movs	r3, #128	; 0x80
 800b41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b422:	e06e      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a76      	ldr	r2, [pc, #472]	; (800b604 <UART_SetConfig+0x6a4>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d130      	bne.n	800b490 <UART_SetConfig+0x530>
 800b42e:	4b73      	ldr	r3, [pc, #460]	; (800b5fc <UART_SetConfig+0x69c>)
 800b430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b432:	f003 0307 	and.w	r3, r3, #7
 800b436:	2b05      	cmp	r3, #5
 800b438:	d826      	bhi.n	800b488 <UART_SetConfig+0x528>
 800b43a:	a201      	add	r2, pc, #4	; (adr r2, 800b440 <UART_SetConfig+0x4e0>)
 800b43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b440:	0800b459 	.word	0x0800b459
 800b444:	0800b461 	.word	0x0800b461
 800b448:	0800b469 	.word	0x0800b469
 800b44c:	0800b471 	.word	0x0800b471
 800b450:	0800b479 	.word	0x0800b479
 800b454:	0800b481 	.word	0x0800b481
 800b458:	2300      	movs	r3, #0
 800b45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b45e:	e050      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b460:	2304      	movs	r3, #4
 800b462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b466:	e04c      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b468:	2308      	movs	r3, #8
 800b46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b46e:	e048      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b470:	2310      	movs	r3, #16
 800b472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b476:	e044      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b478:	2320      	movs	r3, #32
 800b47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b47e:	e040      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b480:	2340      	movs	r3, #64	; 0x40
 800b482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b486:	e03c      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b488:	2380      	movs	r3, #128	; 0x80
 800b48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b48e:	e038      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a5c      	ldr	r2, [pc, #368]	; (800b608 <UART_SetConfig+0x6a8>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d130      	bne.n	800b4fc <UART_SetConfig+0x59c>
 800b49a:	4b58      	ldr	r3, [pc, #352]	; (800b5fc <UART_SetConfig+0x69c>)
 800b49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b49e:	f003 0307 	and.w	r3, r3, #7
 800b4a2:	2b05      	cmp	r3, #5
 800b4a4:	d826      	bhi.n	800b4f4 <UART_SetConfig+0x594>
 800b4a6:	a201      	add	r2, pc, #4	; (adr r2, 800b4ac <UART_SetConfig+0x54c>)
 800b4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ac:	0800b4c5 	.word	0x0800b4c5
 800b4b0:	0800b4cd 	.word	0x0800b4cd
 800b4b4:	0800b4d5 	.word	0x0800b4d5
 800b4b8:	0800b4dd 	.word	0x0800b4dd
 800b4bc:	0800b4e5 	.word	0x0800b4e5
 800b4c0:	0800b4ed 	.word	0x0800b4ed
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ca:	e01a      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b4cc:	2304      	movs	r3, #4
 800b4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4d2:	e016      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b4d4:	2308      	movs	r3, #8
 800b4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4da:	e012      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b4dc:	2310      	movs	r3, #16
 800b4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4e2:	e00e      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b4e4:	2320      	movs	r3, #32
 800b4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ea:	e00a      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b4ec:	2340      	movs	r3, #64	; 0x40
 800b4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4f2:	e006      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b4f4:	2380      	movs	r3, #128	; 0x80
 800b4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4fa:	e002      	b.n	800b502 <UART_SetConfig+0x5a2>
 800b4fc:	2380      	movs	r3, #128	; 0x80
 800b4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a40      	ldr	r2, [pc, #256]	; (800b608 <UART_SetConfig+0x6a8>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	f040 80ef 	bne.w	800b6ec <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b50e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b512:	2b20      	cmp	r3, #32
 800b514:	dc46      	bgt.n	800b5a4 <UART_SetConfig+0x644>
 800b516:	2b02      	cmp	r3, #2
 800b518:	f2c0 8081 	blt.w	800b61e <UART_SetConfig+0x6be>
 800b51c:	3b02      	subs	r3, #2
 800b51e:	2b1e      	cmp	r3, #30
 800b520:	d87d      	bhi.n	800b61e <UART_SetConfig+0x6be>
 800b522:	a201      	add	r2, pc, #4	; (adr r2, 800b528 <UART_SetConfig+0x5c8>)
 800b524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b528:	0800b5ab 	.word	0x0800b5ab
 800b52c:	0800b61f 	.word	0x0800b61f
 800b530:	0800b5b3 	.word	0x0800b5b3
 800b534:	0800b61f 	.word	0x0800b61f
 800b538:	0800b61f 	.word	0x0800b61f
 800b53c:	0800b61f 	.word	0x0800b61f
 800b540:	0800b5c3 	.word	0x0800b5c3
 800b544:	0800b61f 	.word	0x0800b61f
 800b548:	0800b61f 	.word	0x0800b61f
 800b54c:	0800b61f 	.word	0x0800b61f
 800b550:	0800b61f 	.word	0x0800b61f
 800b554:	0800b61f 	.word	0x0800b61f
 800b558:	0800b61f 	.word	0x0800b61f
 800b55c:	0800b61f 	.word	0x0800b61f
 800b560:	0800b5d3 	.word	0x0800b5d3
 800b564:	0800b61f 	.word	0x0800b61f
 800b568:	0800b61f 	.word	0x0800b61f
 800b56c:	0800b61f 	.word	0x0800b61f
 800b570:	0800b61f 	.word	0x0800b61f
 800b574:	0800b61f 	.word	0x0800b61f
 800b578:	0800b61f 	.word	0x0800b61f
 800b57c:	0800b61f 	.word	0x0800b61f
 800b580:	0800b61f 	.word	0x0800b61f
 800b584:	0800b61f 	.word	0x0800b61f
 800b588:	0800b61f 	.word	0x0800b61f
 800b58c:	0800b61f 	.word	0x0800b61f
 800b590:	0800b61f 	.word	0x0800b61f
 800b594:	0800b61f 	.word	0x0800b61f
 800b598:	0800b61f 	.word	0x0800b61f
 800b59c:	0800b61f 	.word	0x0800b61f
 800b5a0:	0800b611 	.word	0x0800b611
 800b5a4:	2b40      	cmp	r3, #64	; 0x40
 800b5a6:	d036      	beq.n	800b616 <UART_SetConfig+0x6b6>
 800b5a8:	e039      	b.n	800b61e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b5aa:	f7fd fa7b 	bl	8008aa4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b5ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b5b0:	e03b      	b.n	800b62a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5b2:	f107 0314 	add.w	r3, r7, #20
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fd fa8a 	bl	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5c0:	e033      	b.n	800b62a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5c2:	f107 0308 	add.w	r3, r7, #8
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fd fbd6 	bl	8008d78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5d0:	e02b      	b.n	800b62a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5d2:	4b0a      	ldr	r3, [pc, #40]	; (800b5fc <UART_SetConfig+0x69c>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f003 0320 	and.w	r3, r3, #32
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d009      	beq.n	800b5f2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5de:	4b07      	ldr	r3, [pc, #28]	; (800b5fc <UART_SetConfig+0x69c>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	08db      	lsrs	r3, r3, #3
 800b5e4:	f003 0303 	and.w	r3, r3, #3
 800b5e8:	4a08      	ldr	r2, [pc, #32]	; (800b60c <UART_SetConfig+0x6ac>)
 800b5ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5f0:	e01b      	b.n	800b62a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b5f2:	4b06      	ldr	r3, [pc, #24]	; (800b60c <UART_SetConfig+0x6ac>)
 800b5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5f6:	e018      	b.n	800b62a <UART_SetConfig+0x6ca>
 800b5f8:	40011400 	.word	0x40011400
 800b5fc:	58024400 	.word	0x58024400
 800b600:	40007800 	.word	0x40007800
 800b604:	40007c00 	.word	0x40007c00
 800b608:	58000c00 	.word	0x58000c00
 800b60c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b610:	4bc4      	ldr	r3, [pc, #784]	; (800b924 <UART_SetConfig+0x9c4>)
 800b612:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b614:	e009      	b.n	800b62a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b61a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b61c:	e005      	b.n	800b62a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b628:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 81da 	beq.w	800b9e6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b636:	4abc      	ldr	r2, [pc, #752]	; (800b928 <UART_SetConfig+0x9c8>)
 800b638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b63c:	461a      	mov	r2, r3
 800b63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b640:	fbb3 f3f2 	udiv	r3, r3, r2
 800b644:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685a      	ldr	r2, [r3, #4]
 800b64a:	4613      	mov	r3, r2
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	4413      	add	r3, r2
 800b650:	6a3a      	ldr	r2, [r7, #32]
 800b652:	429a      	cmp	r2, r3
 800b654:	d305      	bcc.n	800b662 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b65c:	6a3a      	ldr	r2, [r7, #32]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d903      	bls.n	800b66a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b668:	e1bd      	b.n	800b9e6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	4618      	mov	r0, r3
 800b66e:	f04f 0100 	mov.w	r1, #0
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b676:	4aac      	ldr	r2, [pc, #688]	; (800b928 <UART_SetConfig+0x9c8>)
 800b678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	f04f 0300 	mov.w	r3, #0
 800b682:	f7f4 fe29 	bl	80002d8 <__aeabi_uldivmod>
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	4610      	mov	r0, r2
 800b68c:	4619      	mov	r1, r3
 800b68e:	f04f 0200 	mov.w	r2, #0
 800b692:	f04f 0300 	mov.w	r3, #0
 800b696:	020b      	lsls	r3, r1, #8
 800b698:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b69c:	0202      	lsls	r2, r0, #8
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	6849      	ldr	r1, [r1, #4]
 800b6a2:	0849      	lsrs	r1, r1, #1
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	f04f 0100 	mov.w	r1, #0
 800b6aa:	1814      	adds	r4, r2, r0
 800b6ac:	eb43 0501 	adc.w	r5, r3, r1
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	f04f 0300 	mov.w	r3, #0
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	4629      	mov	r1, r5
 800b6be:	f7f4 fe0b 	bl	80002d8 <__aeabi_uldivmod>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6d0:	d308      	bcc.n	800b6e4 <UART_SetConfig+0x784>
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6d8:	d204      	bcs.n	800b6e4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6e0:	60da      	str	r2, [r3, #12]
 800b6e2:	e180      	b.n	800b9e6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b6ea:	e17c      	b.n	800b9e6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	69db      	ldr	r3, [r3, #28]
 800b6f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6f4:	f040 80bf 	bne.w	800b876 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800b6f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6fc:	2b20      	cmp	r3, #32
 800b6fe:	dc49      	bgt.n	800b794 <UART_SetConfig+0x834>
 800b700:	2b00      	cmp	r3, #0
 800b702:	db7c      	blt.n	800b7fe <UART_SetConfig+0x89e>
 800b704:	2b20      	cmp	r3, #32
 800b706:	d87a      	bhi.n	800b7fe <UART_SetConfig+0x89e>
 800b708:	a201      	add	r2, pc, #4	; (adr r2, 800b710 <UART_SetConfig+0x7b0>)
 800b70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b70e:	bf00      	nop
 800b710:	0800b79b 	.word	0x0800b79b
 800b714:	0800b7a3 	.word	0x0800b7a3
 800b718:	0800b7ff 	.word	0x0800b7ff
 800b71c:	0800b7ff 	.word	0x0800b7ff
 800b720:	0800b7ab 	.word	0x0800b7ab
 800b724:	0800b7ff 	.word	0x0800b7ff
 800b728:	0800b7ff 	.word	0x0800b7ff
 800b72c:	0800b7ff 	.word	0x0800b7ff
 800b730:	0800b7bb 	.word	0x0800b7bb
 800b734:	0800b7ff 	.word	0x0800b7ff
 800b738:	0800b7ff 	.word	0x0800b7ff
 800b73c:	0800b7ff 	.word	0x0800b7ff
 800b740:	0800b7ff 	.word	0x0800b7ff
 800b744:	0800b7ff 	.word	0x0800b7ff
 800b748:	0800b7ff 	.word	0x0800b7ff
 800b74c:	0800b7ff 	.word	0x0800b7ff
 800b750:	0800b7cb 	.word	0x0800b7cb
 800b754:	0800b7ff 	.word	0x0800b7ff
 800b758:	0800b7ff 	.word	0x0800b7ff
 800b75c:	0800b7ff 	.word	0x0800b7ff
 800b760:	0800b7ff 	.word	0x0800b7ff
 800b764:	0800b7ff 	.word	0x0800b7ff
 800b768:	0800b7ff 	.word	0x0800b7ff
 800b76c:	0800b7ff 	.word	0x0800b7ff
 800b770:	0800b7ff 	.word	0x0800b7ff
 800b774:	0800b7ff 	.word	0x0800b7ff
 800b778:	0800b7ff 	.word	0x0800b7ff
 800b77c:	0800b7ff 	.word	0x0800b7ff
 800b780:	0800b7ff 	.word	0x0800b7ff
 800b784:	0800b7ff 	.word	0x0800b7ff
 800b788:	0800b7ff 	.word	0x0800b7ff
 800b78c:	0800b7ff 	.word	0x0800b7ff
 800b790:	0800b7f1 	.word	0x0800b7f1
 800b794:	2b40      	cmp	r3, #64	; 0x40
 800b796:	d02e      	beq.n	800b7f6 <UART_SetConfig+0x896>
 800b798:	e031      	b.n	800b7fe <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b79a:	f7fb fd45 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 800b79e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7a0:	e033      	b.n	800b80a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7a2:	f7fb fd57 	bl	8007254 <HAL_RCC_GetPCLK2Freq>
 800b7a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7a8:	e02f      	b.n	800b80a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7aa:	f107 0314 	add.w	r3, r7, #20
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fd f98e 	bl	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7b8:	e027      	b.n	800b80a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7ba:	f107 0308 	add.w	r3, r7, #8
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7fd fada 	bl	8008d78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7c8:	e01f      	b.n	800b80a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7ca:	4b58      	ldr	r3, [pc, #352]	; (800b92c <UART_SetConfig+0x9cc>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f003 0320 	and.w	r3, r3, #32
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d009      	beq.n	800b7ea <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b7d6:	4b55      	ldr	r3, [pc, #340]	; (800b92c <UART_SetConfig+0x9cc>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	08db      	lsrs	r3, r3, #3
 800b7dc:	f003 0303 	and.w	r3, r3, #3
 800b7e0:	4a53      	ldr	r2, [pc, #332]	; (800b930 <UART_SetConfig+0x9d0>)
 800b7e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7e8:	e00f      	b.n	800b80a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b7ea:	4b51      	ldr	r3, [pc, #324]	; (800b930 <UART_SetConfig+0x9d0>)
 800b7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7ee:	e00c      	b.n	800b80a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b7f0:	4b4c      	ldr	r3, [pc, #304]	; (800b924 <UART_SetConfig+0x9c4>)
 800b7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7f4:	e009      	b.n	800b80a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7fc:	e005      	b.n	800b80a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b808:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f000 80ea 	beq.w	800b9e6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	4a44      	ldr	r2, [pc, #272]	; (800b928 <UART_SetConfig+0x9c8>)
 800b818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b81c:	461a      	mov	r2, r3
 800b81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b820:	fbb3 f3f2 	udiv	r3, r3, r2
 800b824:	005a      	lsls	r2, r3, #1
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	085b      	lsrs	r3, r3, #1
 800b82c:	441a      	add	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	fbb2 f3f3 	udiv	r3, r2, r3
 800b836:	b29b      	uxth	r3, r3
 800b838:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	2b0f      	cmp	r3, #15
 800b83e:	d916      	bls.n	800b86e <UART_SetConfig+0x90e>
 800b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b846:	d212      	bcs.n	800b86e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	f023 030f 	bic.w	r3, r3, #15
 800b850:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b854:	085b      	lsrs	r3, r3, #1
 800b856:	b29b      	uxth	r3, r3
 800b858:	f003 0307 	and.w	r3, r3, #7
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b860:	4313      	orrs	r3, r2
 800b862:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b86a:	60da      	str	r2, [r3, #12]
 800b86c:	e0bb      	b.n	800b9e6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b874:	e0b7      	b.n	800b9e6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b87a:	2b20      	cmp	r3, #32
 800b87c:	dc4a      	bgt.n	800b914 <UART_SetConfig+0x9b4>
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f2c0 8086 	blt.w	800b990 <UART_SetConfig+0xa30>
 800b884:	2b20      	cmp	r3, #32
 800b886:	f200 8083 	bhi.w	800b990 <UART_SetConfig+0xa30>
 800b88a:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <UART_SetConfig+0x930>)
 800b88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b890:	0800b91b 	.word	0x0800b91b
 800b894:	0800b935 	.word	0x0800b935
 800b898:	0800b991 	.word	0x0800b991
 800b89c:	0800b991 	.word	0x0800b991
 800b8a0:	0800b93d 	.word	0x0800b93d
 800b8a4:	0800b991 	.word	0x0800b991
 800b8a8:	0800b991 	.word	0x0800b991
 800b8ac:	0800b991 	.word	0x0800b991
 800b8b0:	0800b94d 	.word	0x0800b94d
 800b8b4:	0800b991 	.word	0x0800b991
 800b8b8:	0800b991 	.word	0x0800b991
 800b8bc:	0800b991 	.word	0x0800b991
 800b8c0:	0800b991 	.word	0x0800b991
 800b8c4:	0800b991 	.word	0x0800b991
 800b8c8:	0800b991 	.word	0x0800b991
 800b8cc:	0800b991 	.word	0x0800b991
 800b8d0:	0800b95d 	.word	0x0800b95d
 800b8d4:	0800b991 	.word	0x0800b991
 800b8d8:	0800b991 	.word	0x0800b991
 800b8dc:	0800b991 	.word	0x0800b991
 800b8e0:	0800b991 	.word	0x0800b991
 800b8e4:	0800b991 	.word	0x0800b991
 800b8e8:	0800b991 	.word	0x0800b991
 800b8ec:	0800b991 	.word	0x0800b991
 800b8f0:	0800b991 	.word	0x0800b991
 800b8f4:	0800b991 	.word	0x0800b991
 800b8f8:	0800b991 	.word	0x0800b991
 800b8fc:	0800b991 	.word	0x0800b991
 800b900:	0800b991 	.word	0x0800b991
 800b904:	0800b991 	.word	0x0800b991
 800b908:	0800b991 	.word	0x0800b991
 800b90c:	0800b991 	.word	0x0800b991
 800b910:	0800b983 	.word	0x0800b983
 800b914:	2b40      	cmp	r3, #64	; 0x40
 800b916:	d037      	beq.n	800b988 <UART_SetConfig+0xa28>
 800b918:	e03a      	b.n	800b990 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b91a:	f7fb fc85 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 800b91e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b920:	e03c      	b.n	800b99c <UART_SetConfig+0xa3c>
 800b922:	bf00      	nop
 800b924:	003d0900 	.word	0x003d0900
 800b928:	0800c504 	.word	0x0800c504
 800b92c:	58024400 	.word	0x58024400
 800b930:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b934:	f7fb fc8e 	bl	8007254 <HAL_RCC_GetPCLK2Freq>
 800b938:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b93a:	e02f      	b.n	800b99c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b93c:	f107 0314 	add.w	r3, r7, #20
 800b940:	4618      	mov	r0, r3
 800b942:	f7fd f8c5 	bl	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b94a:	e027      	b.n	800b99c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b94c:	f107 0308 	add.w	r3, r7, #8
 800b950:	4618      	mov	r0, r3
 800b952:	f7fd fa11 	bl	8008d78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b95a:	e01f      	b.n	800b99c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b95c:	4b2c      	ldr	r3, [pc, #176]	; (800ba10 <UART_SetConfig+0xab0>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 0320 	and.w	r3, r3, #32
 800b964:	2b00      	cmp	r3, #0
 800b966:	d009      	beq.n	800b97c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b968:	4b29      	ldr	r3, [pc, #164]	; (800ba10 <UART_SetConfig+0xab0>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	08db      	lsrs	r3, r3, #3
 800b96e:	f003 0303 	and.w	r3, r3, #3
 800b972:	4a28      	ldr	r2, [pc, #160]	; (800ba14 <UART_SetConfig+0xab4>)
 800b974:	fa22 f303 	lsr.w	r3, r2, r3
 800b978:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b97a:	e00f      	b.n	800b99c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b97c:	4b25      	ldr	r3, [pc, #148]	; (800ba14 <UART_SetConfig+0xab4>)
 800b97e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b980:	e00c      	b.n	800b99c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b982:	4b25      	ldr	r3, [pc, #148]	; (800ba18 <UART_SetConfig+0xab8>)
 800b984:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b986:	e009      	b.n	800b99c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b98c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b98e:	e005      	b.n	800b99c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b990:	2300      	movs	r3, #0
 800b992:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b99a:	bf00      	nop
    }

    if (pclk != 0U)
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d021      	beq.n	800b9e6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a6:	4a1d      	ldr	r2, [pc, #116]	; (800ba1c <UART_SetConfig+0xabc>)
 800b9a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	fbb3 f2f2 	udiv	r2, r3, r2
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	085b      	lsrs	r3, r3, #1
 800b9ba:	441a      	add	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	2b0f      	cmp	r3, #15
 800b9cc:	d908      	bls.n	800b9e0 <UART_SetConfig+0xa80>
 800b9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9d4:	d204      	bcs.n	800b9e0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9dc:	60da      	str	r2, [r3, #12]
 800b9de:	e002      	b.n	800b9e6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ba02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3738      	adds	r7, #56	; 0x38
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	58024400 	.word	0x58024400
 800ba14:	03d09000 	.word	0x03d09000
 800ba18:	003d0900 	.word	0x003d0900
 800ba1c:	0800c504 	.word	0x0800c504

0800ba20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2c:	f003 0301 	and.w	r3, r3, #1
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00a      	beq.n	800ba4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	430a      	orrs	r2, r1
 800ba48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4e:	f003 0302 	and.w	r3, r3, #2
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	430a      	orrs	r2, r1
 800ba6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba70:	f003 0304 	and.w	r3, r3, #4
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00a      	beq.n	800ba8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	430a      	orrs	r2, r1
 800ba8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba92:	f003 0308 	and.w	r3, r3, #8
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00a      	beq.n	800bab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	430a      	orrs	r2, r1
 800baae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab4:	f003 0310 	and.w	r3, r3, #16
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00a      	beq.n	800bad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	430a      	orrs	r2, r1
 800bad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad6:	f003 0320 	and.w	r3, r3, #32
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00a      	beq.n	800baf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	430a      	orrs	r2, r1
 800baf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d01a      	beq.n	800bb36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	430a      	orrs	r2, r1
 800bb14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb1e:	d10a      	bne.n	800bb36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	430a      	orrs	r2, r1
 800bb34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00a      	beq.n	800bb58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	430a      	orrs	r2, r1
 800bb56:	605a      	str	r2, [r3, #4]
  }
}
 800bb58:	bf00      	nop
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af02      	add	r7, sp, #8
 800bb6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb74:	f7f6 fe94 	bl	80028a0 <HAL_GetTick>
 800bb78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 0308 	and.w	r3, r3, #8
 800bb84:	2b08      	cmp	r3, #8
 800bb86:	d10e      	bne.n	800bba6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f82f 	bl	800bbfa <UART_WaitOnFlagUntilTimeout>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d001      	beq.n	800bba6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e025      	b.n	800bbf2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f003 0304 	and.w	r3, r3, #4
 800bbb0:	2b04      	cmp	r3, #4
 800bbb2:	d10e      	bne.n	800bbd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f819 	bl	800bbfa <UART_WaitOnFlagUntilTimeout>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	e00f      	b.n	800bbf2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2220      	movs	r2, #32
 800bbd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2220      	movs	r2, #32
 800bbde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	60f8      	str	r0, [r7, #12]
 800bc02:	60b9      	str	r1, [r7, #8]
 800bc04:	603b      	str	r3, [r7, #0]
 800bc06:	4613      	mov	r3, r2
 800bc08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc0a:	e062      	b.n	800bcd2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc12:	d05e      	beq.n	800bcd2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc14:	f7f6 fe44 	bl	80028a0 <HAL_GetTick>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	69ba      	ldr	r2, [r7, #24]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d302      	bcc.n	800bc2a <UART_WaitOnFlagUntilTimeout+0x30>
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d11d      	bne.n	800bc66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bc38:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	689a      	ldr	r2, [r3, #8]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f022 0201 	bic.w	r2, r2, #1
 800bc48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2220      	movs	r2, #32
 800bc4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2220      	movs	r2, #32
 800bc56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e045      	b.n	800bcf2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 0304 	and.w	r3, r3, #4
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d02e      	beq.n	800bcd2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	69db      	ldr	r3, [r3, #28]
 800bc7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc82:	d126      	bne.n	800bcd2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bc9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	689a      	ldr	r2, [r3, #8]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f022 0201 	bic.w	r2, r2, #1
 800bcac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2220      	movs	r2, #32
 800bcb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2220      	movs	r2, #32
 800bcba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2220      	movs	r2, #32
 800bcc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	e00f      	b.n	800bcf2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	69da      	ldr	r2, [r3, #28]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	4013      	ands	r3, r2
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	bf0c      	ite	eq
 800bce2:	2301      	moveq	r3, #1
 800bce4:	2300      	movne	r3, #0
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d08d      	beq.n	800bc0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bcfa:	b480      	push	{r7}
 800bcfc:	b085      	sub	sp, #20
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d101      	bne.n	800bd10 <HAL_UARTEx_DisableFifoMode+0x16>
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	e027      	b.n	800bd60 <HAL_UARTEx_DisableFifoMode+0x66>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2224      	movs	r2, #36	; 0x24
 800bd1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f022 0201 	bic.w	r2, r2, #1
 800bd36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bd3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2220      	movs	r2, #32
 800bd52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d101      	bne.n	800bd84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd80:	2302      	movs	r3, #2
 800bd82:	e02d      	b.n	800bde0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2224      	movs	r2, #36	; 0x24
 800bd90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f022 0201 	bic.w	r2, r2, #1
 800bdaa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	430a      	orrs	r2, r1
 800bdbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f84f 	bl	800be64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2220      	movs	r2, #32
 800bdd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d101      	bne.n	800be00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bdfc:	2302      	movs	r3, #2
 800bdfe:	e02d      	b.n	800be5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2224      	movs	r2, #36	; 0x24
 800be0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f022 0201 	bic.w	r2, r2, #1
 800be26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	683a      	ldr	r2, [r7, #0]
 800be38:	430a      	orrs	r2, r1
 800be3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 f811 	bl	800be64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2220      	movs	r2, #32
 800be4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be70:	2b00      	cmp	r3, #0
 800be72:	d108      	bne.n	800be86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2201      	movs	r2, #1
 800be78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2201      	movs	r2, #1
 800be80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be84:	e031      	b.n	800beea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be86:	2310      	movs	r3, #16
 800be88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be8a:	2310      	movs	r3, #16
 800be8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	0e5b      	lsrs	r3, r3, #25
 800be96:	b2db      	uxtb	r3, r3
 800be98:	f003 0307 	and.w	r3, r3, #7
 800be9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	0f5b      	lsrs	r3, r3, #29
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	f003 0307 	and.w	r3, r3, #7
 800beac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800beae:	7bbb      	ldrb	r3, [r7, #14]
 800beb0:	7b3a      	ldrb	r2, [r7, #12]
 800beb2:	4911      	ldr	r1, [pc, #68]	; (800bef8 <UARTEx_SetNbDataToProcess+0x94>)
 800beb4:	5c8a      	ldrb	r2, [r1, r2]
 800beb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800beba:	7b3a      	ldrb	r2, [r7, #12]
 800bebc:	490f      	ldr	r1, [pc, #60]	; (800befc <UARTEx_SetNbDataToProcess+0x98>)
 800bebe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bec0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800becc:	7bfb      	ldrb	r3, [r7, #15]
 800bece:	7b7a      	ldrb	r2, [r7, #13]
 800bed0:	4909      	ldr	r1, [pc, #36]	; (800bef8 <UARTEx_SetNbDataToProcess+0x94>)
 800bed2:	5c8a      	ldrb	r2, [r1, r2]
 800bed4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bed8:	7b7a      	ldrb	r2, [r7, #13]
 800beda:	4908      	ldr	r1, [pc, #32]	; (800befc <UARTEx_SetNbDataToProcess+0x98>)
 800bedc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bede:	fb93 f3f2 	sdiv	r3, r3, r2
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800beea:	bf00      	nop
 800beec:	3714      	adds	r7, #20
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	0800c51c 	.word	0x0800c51c
 800befc:	0800c524 	.word	0x0800c524

0800bf00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf00:	b084      	sub	sp, #16
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b084      	sub	sp, #16
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	f107 001c 	add.w	r0, r7, #28
 800bf0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d120      	bne.n	800bf5a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	68da      	ldr	r2, [r3, #12]
 800bf28:	4b2a      	ldr	r3, [pc, #168]	; (800bfd4 <USB_CoreInit+0xd4>)
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bf3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d105      	bne.n	800bf4e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fa60 	bl	800c414 <USB_CoreReset>
 800bf54:	4603      	mov	r3, r0
 800bf56:	73fb      	strb	r3, [r7, #15]
 800bf58:	e01a      	b.n	800bf90 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fa54 	bl	800c414 <USB_CoreReset>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bf70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d106      	bne.n	800bf84 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	639a      	str	r2, [r3, #56]	; 0x38
 800bf82:	e005      	b.n	800bf90 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d116      	bne.n	800bfc4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bfa4:	4b0c      	ldr	r3, [pc, #48]	; (800bfd8 <USB_CoreInit+0xd8>)
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	f043 0206 	orr.w	r2, r3, #6
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	f043 0220 	orr.w	r2, r3, #32
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bfc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bfd0:	b004      	add	sp, #16
 800bfd2:	4770      	bx	lr
 800bfd4:	ffbdffbf 	.word	0xffbdffbf
 800bfd8:	03ee0000 	.word	0x03ee0000

0800bfdc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	f023 0201 	bic.w	r2, r3, #1
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b082      	sub	sp, #8
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	460b      	mov	r3, r1
 800c008:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c016:	78fb      	ldrb	r3, [r7, #3]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d106      	bne.n	800c02a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	60da      	str	r2, [r3, #12]
 800c028:	e00b      	b.n	800c042 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c02a:	78fb      	ldrb	r3, [r7, #3]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d106      	bne.n	800c03e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	60da      	str	r2, [r3, #12]
 800c03c:	e001      	b.n	800c042 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c03e:	2301      	movs	r3, #1
 800c040:	e003      	b.n	800c04a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c042:	2032      	movs	r0, #50	; 0x32
 800c044:	f7f6 fc38 	bl	80028b8 <HAL_Delay>

  return HAL_OK;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
	...

0800c054 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c054:	b084      	sub	sp, #16
 800c056:	b580      	push	{r7, lr}
 800c058:	b086      	sub	sp, #24
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c06e:	2300      	movs	r3, #0
 800c070:	613b      	str	r3, [r7, #16]
 800c072:	e009      	b.n	800c088 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	3340      	adds	r3, #64	; 0x40
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	2200      	movs	r2, #0
 800c080:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	3301      	adds	r3, #1
 800c086:	613b      	str	r3, [r7, #16]
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	2b0e      	cmp	r3, #14
 800c08c:	d9f2      	bls.n	800c074 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c08e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c090:	2b00      	cmp	r3, #0
 800c092:	d11c      	bne.n	800c0ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0a2:	f043 0302 	orr.w	r3, r3, #2
 800c0a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	601a      	str	r2, [r3, #0]
 800c0cc:	e005      	b.n	800c0da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	680b      	ldr	r3, [r1, #0]
 800c0f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d10c      	bne.n	800c11a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c102:	2b00      	cmp	r3, #0
 800c104:	d104      	bne.n	800c110 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c106:	2100      	movs	r1, #0
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 f949 	bl	800c3a0 <USB_SetDevSpeed>
 800c10e:	e008      	b.n	800c122 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c110:	2101      	movs	r1, #1
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f944 	bl	800c3a0 <USB_SetDevSpeed>
 800c118:	e003      	b.n	800c122 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c11a:	2103      	movs	r1, #3
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f93f 	bl	800c3a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c122:	2110      	movs	r1, #16
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 f8f3 	bl	800c310 <USB_FlushTxFifo>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d001      	beq.n	800c134 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c130:	2301      	movs	r3, #1
 800c132:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f911 	bl	800c35c <USB_FlushRxFifo>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d001      	beq.n	800c144 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c14a:	461a      	mov	r2, r3
 800c14c:	2300      	movs	r3, #0
 800c14e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c156:	461a      	mov	r2, r3
 800c158:	2300      	movs	r3, #0
 800c15a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c162:	461a      	mov	r2, r3
 800c164:	2300      	movs	r3, #0
 800c166:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c168:	2300      	movs	r3, #0
 800c16a:	613b      	str	r3, [r7, #16]
 800c16c:	e043      	b.n	800c1f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	015a      	lsls	r2, r3, #5
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	4413      	add	r3, r2
 800c176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c184:	d118      	bne.n	800c1b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d10a      	bne.n	800c1a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	015a      	lsls	r2, r3, #5
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	4413      	add	r3, r2
 800c194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c198:	461a      	mov	r2, r3
 800c19a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c19e:	6013      	str	r3, [r2, #0]
 800c1a0:	e013      	b.n	800c1ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	015a      	lsls	r2, r3, #5
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	e008      	b.n	800c1ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	015a      	lsls	r2, r3, #5
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	4413      	add	r3, r2
 800c1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	015a      	lsls	r2, r3, #5
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	2300      	movs	r3, #0
 800c1da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	015a      	lsls	r2, r3, #5
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c1ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	613b      	str	r3, [r7, #16]
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f8:	693a      	ldr	r2, [r7, #16]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d3b7      	bcc.n	800c16e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1fe:	2300      	movs	r3, #0
 800c200:	613b      	str	r3, [r7, #16]
 800c202:	e043      	b.n	800c28c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	015a      	lsls	r2, r3, #5
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	4413      	add	r3, r2
 800c20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c21a:	d118      	bne.n	800c24e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d10a      	bne.n	800c238 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	015a      	lsls	r2, r3, #5
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	4413      	add	r3, r2
 800c22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c22e:	461a      	mov	r2, r3
 800c230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c234:	6013      	str	r3, [r2, #0]
 800c236:	e013      	b.n	800c260 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c244:	461a      	mov	r2, r3
 800c246:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c24a:	6013      	str	r3, [r2, #0]
 800c24c:	e008      	b.n	800c260 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	015a      	lsls	r2, r3, #5
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	4413      	add	r3, r2
 800c256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c25a:	461a      	mov	r2, r3
 800c25c:	2300      	movs	r3, #0
 800c25e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	015a      	lsls	r2, r3, #5
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	4413      	add	r3, r2
 800c268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c26c:	461a      	mov	r2, r3
 800c26e:	2300      	movs	r3, #0
 800c270:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	015a      	lsls	r2, r3, #5
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	4413      	add	r3, r2
 800c27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c27e:	461a      	mov	r2, r3
 800c280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c284:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	3301      	adds	r3, #1
 800c28a:	613b      	str	r3, [r7, #16]
 800c28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28e:	693a      	ldr	r2, [r7, #16]
 800c290:	429a      	cmp	r2, r3
 800c292:	d3b7      	bcc.n	800c204 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c2b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d105      	bne.n	800c2c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	f043 0210 	orr.w	r2, r3, #16
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	699a      	ldr	r2, [r3, #24]
 800c2cc:	4b0e      	ldr	r3, [pc, #56]	; (800c308 <USB_DevInit+0x2b4>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d005      	beq.n	800c2e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	699b      	ldr	r3, [r3, #24]
 800c2de:	f043 0208 	orr.w	r2, r3, #8
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c2e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d105      	bne.n	800c2f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	699a      	ldr	r2, [r3, #24]
 800c2f0:	4b06      	ldr	r3, [pc, #24]	; (800c30c <USB_DevInit+0x2b8>)
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c304:	b004      	add	sp, #16
 800c306:	4770      	bx	lr
 800c308:	803c3800 	.word	0x803c3800
 800c30c:	40000004 	.word	0x40000004

0800c310 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	019b      	lsls	r3, r3, #6
 800c322:	f043 0220 	orr.w	r2, r3, #32
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3301      	adds	r3, #1
 800c32e:	60fb      	str	r3, [r7, #12]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4a09      	ldr	r2, [pc, #36]	; (800c358 <USB_FlushTxFifo+0x48>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d901      	bls.n	800c33c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c338:	2303      	movs	r3, #3
 800c33a:	e006      	b.n	800c34a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	f003 0320 	and.w	r3, r3, #32
 800c344:	2b20      	cmp	r3, #32
 800c346:	d0f0      	beq.n	800c32a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3714      	adds	r7, #20
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	00030d40 	.word	0x00030d40

0800c35c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c364:	2300      	movs	r3, #0
 800c366:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2210      	movs	r2, #16
 800c36c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3301      	adds	r3, #1
 800c372:	60fb      	str	r3, [r7, #12]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	4a09      	ldr	r2, [pc, #36]	; (800c39c <USB_FlushRxFifo+0x40>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d901      	bls.n	800c380 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c37c:	2303      	movs	r3, #3
 800c37e:	e006      	b.n	800c38e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	f003 0310 	and.w	r3, r3, #16
 800c388:	2b10      	cmp	r3, #16
 800c38a:	d0f0      	beq.n	800c36e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3714      	adds	r7, #20
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	00030d40 	.word	0x00030d40

0800c3a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	78fb      	ldrb	r3, [r7, #3]
 800c3ba:	68f9      	ldr	r1, [r7, #12]
 800c3bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c3d2:	b480      	push	{r7}
 800c3d4:	b085      	sub	sp, #20
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	68fa      	ldr	r2, [r7, #12]
 800c3e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c3ec:	f023 0303 	bic.w	r3, r3, #3
 800c3f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c400:	f043 0302 	orr.w	r3, r3, #2
 800c404:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3714      	adds	r7, #20
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c41c:	2300      	movs	r3, #0
 800c41e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	3301      	adds	r3, #1
 800c424:	60fb      	str	r3, [r7, #12]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	4a13      	ldr	r2, [pc, #76]	; (800c478 <USB_CoreReset+0x64>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d901      	bls.n	800c432 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c42e:	2303      	movs	r3, #3
 800c430:	e01b      	b.n	800c46a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	2b00      	cmp	r3, #0
 800c438:	daf2      	bge.n	800c420 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c43a:	2300      	movs	r3, #0
 800c43c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	691b      	ldr	r3, [r3, #16]
 800c442:	f043 0201 	orr.w	r2, r3, #1
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3301      	adds	r3, #1
 800c44e:	60fb      	str	r3, [r7, #12]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	4a09      	ldr	r2, [pc, #36]	; (800c478 <USB_CoreReset+0x64>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d901      	bls.n	800c45c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c458:	2303      	movs	r3, #3
 800c45a:	e006      	b.n	800c46a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	f003 0301 	and.w	r3, r3, #1
 800c464:	2b01      	cmp	r3, #1
 800c466:	d0f0      	beq.n	800c44a <USB_CoreReset+0x36>

  return HAL_OK;
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	00030d40 	.word	0x00030d40

0800c47c <__libc_init_array>:
 800c47c:	b570      	push	{r4, r5, r6, lr}
 800c47e:	4d0d      	ldr	r5, [pc, #52]	; (800c4b4 <__libc_init_array+0x38>)
 800c480:	4c0d      	ldr	r4, [pc, #52]	; (800c4b8 <__libc_init_array+0x3c>)
 800c482:	1b64      	subs	r4, r4, r5
 800c484:	10a4      	asrs	r4, r4, #2
 800c486:	2600      	movs	r6, #0
 800c488:	42a6      	cmp	r6, r4
 800c48a:	d109      	bne.n	800c4a0 <__libc_init_array+0x24>
 800c48c:	4d0b      	ldr	r5, [pc, #44]	; (800c4bc <__libc_init_array+0x40>)
 800c48e:	4c0c      	ldr	r4, [pc, #48]	; (800c4c0 <__libc_init_array+0x44>)
 800c490:	f000 f820 	bl	800c4d4 <_init>
 800c494:	1b64      	subs	r4, r4, r5
 800c496:	10a4      	asrs	r4, r4, #2
 800c498:	2600      	movs	r6, #0
 800c49a:	42a6      	cmp	r6, r4
 800c49c:	d105      	bne.n	800c4aa <__libc_init_array+0x2e>
 800c49e:	bd70      	pop	{r4, r5, r6, pc}
 800c4a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4a4:	4798      	blx	r3
 800c4a6:	3601      	adds	r6, #1
 800c4a8:	e7ee      	b.n	800c488 <__libc_init_array+0xc>
 800c4aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4ae:	4798      	blx	r3
 800c4b0:	3601      	adds	r6, #1
 800c4b2:	e7f2      	b.n	800c49a <__libc_init_array+0x1e>
 800c4b4:	0800c534 	.word	0x0800c534
 800c4b8:	0800c534 	.word	0x0800c534
 800c4bc:	0800c534 	.word	0x0800c534
 800c4c0:	0800c538 	.word	0x0800c538

0800c4c4 <memset>:
 800c4c4:	4402      	add	r2, r0
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d100      	bne.n	800c4ce <memset+0xa>
 800c4cc:	4770      	bx	lr
 800c4ce:	f803 1b01 	strb.w	r1, [r3], #1
 800c4d2:	e7f9      	b.n	800c4c8 <memset+0x4>

0800c4d4 <_init>:
 800c4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d6:	bf00      	nop
 800c4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4da:	bc08      	pop	{r3}
 800c4dc:	469e      	mov	lr, r3
 800c4de:	4770      	bx	lr

0800c4e0 <_fini>:
 800c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e2:	bf00      	nop
 800c4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4e6:	bc08      	pop	{r3}
 800c4e8:	469e      	mov	lr, r3
 800c4ea:	4770      	bx	lr
