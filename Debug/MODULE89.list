
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf78  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c210  0800c210  0001c210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c250  0800c250  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c250  0800c250  0001c250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c258  0800c258  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c258  0800c258  0001c258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c25c  0800c25c  0001c25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800c260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800c270  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800c2d0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000bec  240000d0  0800c330  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000cbc  0800c330  00020cbc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00030451  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000044dd  00000000  00000000  0005054f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a28  00000000  00000000  00054a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000018d0  00000000  00000000  00056458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b4a2  00000000  00000000  00057d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020f30  00000000  00000000  000931ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00180eb1  00000000  00000000  000b40fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00234fab  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007198  00000000  00000000  00235000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c1f8 	.word	0x0800c1f8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800c1f8 	.word	0x0800c1f8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 80005d0:	b480      	push	{r7}
 80005d2:	b08b      	sub	sp, #44	; 0x2c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	61f8      	str	r0, [r7, #28]
 80005d8:	ed87 0a06 	vstr	s0, [r7, #24]
 80005dc:	edc7 0a05 	vstr	s1, [r7, #20]
 80005e0:	ed87 1a04 	vstr	s2, [r7, #16]
 80005e4:	edc7 1a03 	vstr	s3, [r7, #12]
 80005e8:	ed87 2a02 	vstr	s4, [r7, #8]
 80005ec:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 80005f0:	69fa      	ldr	r2, [r7, #28]
 80005f2:	4613      	mov	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <setupPID+0x68>)
 80005fc:	4413      	add	r3, r2
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 8000600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000602:	69fa      	ldr	r2, [r7, #28]
 8000604:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 8000606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000608:	69ba      	ldr	r2, [r7, #24]
 800060a:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 800060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 8000612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 8000618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 800061e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 8000624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	611a      	str	r2, [r3, #16]
}
 800062a:	bf00      	nop
 800062c:	372c      	adds	r7, #44	; 0x2c
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	240000ec 	.word	0x240000ec

0800063c <Encoder_Start>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare

static encoder_state encoders[NUM_ENCODER];

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <Encoder_Start+0x40>)
 8000654:	4413      	add	r3, r2
 8000656:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	68b8      	ldr	r0, [r7, #8]
 800065c:	f009 f98e 	bl	800997c <HAL_TIM_Encoder_Start>
	encoder->number = num;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	68ba      	ldr	r2, [r7, #8]
 800066a:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	609a      	str	r2, [r3, #8]
}
 8000672:	bf00      	nop
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2400018c 	.word	0x2400018c

08000680 <setupStepper>:

#include "STEPPER.h"

static stepper_state steppers[NUM_STEPPER];

void setupStepper(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN){
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	4613      	mov	r3, r2
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4413      	add	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <setupStepper+0xa4>)
 800069a:	4413      	add	r3, r2
 800069c:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_Start(stepTimer, stepChannel);
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	68b8      	ldr	r0, [r7, #8]
 80006a2:	f008 ffbd 	bl	8009620 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(stepTimer, stepChannel, 0);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d104      	bne.n	80006b6 <setupStepper+0x36>
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2200      	movs	r2, #0
 80006b2:	635a      	str	r2, [r3, #52]	; 0x34
 80006b4:	e023      	b.n	80006fe <setupStepper+0x7e>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b04      	cmp	r3, #4
 80006ba:	d104      	bne.n	80006c6 <setupStepper+0x46>
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	6393      	str	r3, [r2, #56]	; 0x38
 80006c4:	e01b      	b.n	80006fe <setupStepper+0x7e>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b08      	cmp	r3, #8
 80006ca:	d104      	bne.n	80006d6 <setupStepper+0x56>
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	2300      	movs	r3, #0
 80006d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006d4:	e013      	b.n	80006fe <setupStepper+0x7e>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0c      	cmp	r3, #12
 80006da:	d104      	bne.n	80006e6 <setupStepper+0x66>
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	2300      	movs	r3, #0
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	e00b      	b.n	80006fe <setupStepper+0x7e>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b10      	cmp	r3, #16
 80006ea:	d104      	bne.n	80006f6 <setupStepper+0x76>
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	2300      	movs	r3, #0
 80006f2:	6593      	str	r3, [r2, #88]	; 0x58
 80006f4:	e003      	b.n	80006fe <setupStepper+0x7e>
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	2300      	movs	r3, #0
 80006fc:	65d3      	str	r3, [r2, #92]	; 0x5c
	stepper->number = num;
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	68fa      	ldr	r2, [r7, #12]
 8000702:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	8c3a      	ldrh	r2, [r7, #32]
 800071a:	821a      	strh	r2, [r3, #16]
}
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	240001bc 	.word	0x240001bc

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f001 feaf 	bl	8002490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f897 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000736:	f000 fe61 	bl	80013fc <MX_GPIO_Init>
  MX_BDMA_Init();
 800073a:	f000 fe1f 	bl	800137c <MX_BDMA_Init>
  MX_DMA_Init();
 800073e:	f000 fe3d 	bl	80013bc <MX_DMA_Init>
  MX_ETH_Init();
 8000742:	f000 f979 	bl	8000a38 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000746:	f000 fde7 	bl	8001318 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800074a:	f000 fa77 	bl	8000c3c <MX_TIM2_Init>
  MX_TIM3_Init();
 800074e:	f000 fac9 	bl	8000ce4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000752:	f000 fb1d 	bl	8000d90 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000756:	f000 fa17 	bl	8000b88 <MX_TIM1_Init>
  MX_SPI3_Init();
 800075a:	f000 f9bf 	bl	8000adc <MX_SPI3_Init>
  MX_ADC3_Init();
 800075e:	f000 f907 	bl	8000970 <MX_ADC3_Init>
  MX_TIM5_Init();
 8000762:	f000 fb6b 	bl	8000e3c <MX_TIM5_Init>
  MX_UART7_Init();
 8000766:	f000 fd8b 	bl	8001280 <MX_UART7_Init>
  MX_TIM12_Init();
 800076a:	f000 fbb5 	bl	8000ed8 <MX_TIM12_Init>
  MX_TIM13_Init();
 800076e:	f000 fbf9 	bl	8000f64 <MX_TIM13_Init>
  MX_TIM16_Init();
 8000772:	f000 fc45 	bl	8001000 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000776:	f000 fcbd 	bl	80010f4 <MX_TIM17_Init>
  MX_UART5_Init();
 800077a:	f000 fd35 	bl	80011e8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  setupPID(1, 10, 50, 150, 1, 2, 3);
 800077e:	eef0 2a08 	vmov.f32	s5, #8	; 0x40400000  3.0
 8000782:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
 8000786:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800078a:	ed9f 1a28 	vldr	s2, [pc, #160]	; 800082c <main+0x104>
 800078e:	eddf 0a28 	vldr	s1, [pc, #160]	; 8000830 <main+0x108>
 8000792:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff ff1a 	bl	80005d0 <setupPID>
  setupPID(2, 110, 510, 1150, 11, 12, 13);
 800079c:	eef2 2a0a 	vmov.f32	s5, #42	; 0x41500000  13.0
 80007a0:	eeb2 2a08 	vmov.f32	s4, #40	; 0x41400000  12.0
 80007a4:	eef2 1a06 	vmov.f32	s3, #38	; 0x41300000  11.0
 80007a8:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8000834 <main+0x10c>
 80007ac:	eddf 0a22 	vldr	s1, [pc, #136]	; 8000838 <main+0x110>
 80007b0:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800083c <main+0x114>
 80007b4:	2002      	movs	r0, #2
 80007b6:	f7ff ff0b 	bl	80005d0 <setupPID>
  setupPID(3, 110, 510, 1510, 11, 21, 31);
 80007ba:	eef3 2a0f 	vmov.f32	s5, #63	; 0x41f80000  31.0
 80007be:	eeb3 2a05 	vmov.f32	s4, #53	; 0x41a80000  21.0
 80007c2:	eef2 1a06 	vmov.f32	s3, #38	; 0x41300000  11.0
 80007c6:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8000840 <main+0x118>
 80007ca:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8000838 <main+0x110>
 80007ce:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800083c <main+0x114>
 80007d2:	2003      	movs	r0, #3
 80007d4:	f7ff fefc 	bl	80005d0 <setupPID>
//  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
 80007d8:	223c      	movs	r2, #60	; 0x3c
 80007da:	491a      	ldr	r1, [pc, #104]	; (8000844 <main+0x11c>)
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff2d 	bl	800063c <Encoder_Start>
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 80007e2:	223c      	movs	r2, #60	; 0x3c
 80007e4:	4918      	ldr	r1, [pc, #96]	; (8000848 <main+0x120>)
 80007e6:	2002      	movs	r0, #2
 80007e8:	f7ff ff28 	bl	800063c <Encoder_Start>
  Encoder_Start(3, &htim4, TIM_CHANNEL_ALL);
 80007ec:	223c      	movs	r2, #60	; 0x3c
 80007ee:	4917      	ldr	r1, [pc, #92]	; (800084c <main+0x124>)
 80007f0:	2003      	movs	r0, #3
 80007f2:	f7ff ff23 	bl	800063c <Encoder_Start>
//  __HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, 0);
  //htim12 DIR PF5
  //htim13 DIR PF4
  //htim16 DIR PE8
  //htim17 DIR PF10
  setupStepper(1, &htim12, TIM_CHANNEL_2, GPIOF, GPIO_PIN_5);
 80007f6:	2320      	movs	r3, #32
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <main+0x128>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	4915      	ldr	r1, [pc, #84]	; (8000854 <main+0x12c>)
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff ff3d 	bl	8000680 <setupStepper>
  setupStepper(2, &htim13, TIM_CHANNEL_1, GPIOF, GPIO_PIN_4);
 8000806:	2310      	movs	r3, #16
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <main+0x128>)
 800080c:	2200      	movs	r2, #0
 800080e:	4912      	ldr	r1, [pc, #72]	; (8000858 <main+0x130>)
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff35 	bl	8000680 <setupStepper>
  setupStepper(3, &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_8);
 8000816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <main+0x134>)
 800081e:	2200      	movs	r2, #0
 8000820:	490f      	ldr	r1, [pc, #60]	; (8000860 <main+0x138>)
 8000822:	2003      	movs	r0, #3
 8000824:	f7ff ff2c 	bl	8000680 <setupStepper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000828:	e7fe      	b.n	8000828 <main+0x100>
 800082a:	bf00      	nop
 800082c:	43160000 	.word	0x43160000
 8000830:	42480000 	.word	0x42480000
 8000834:	448fc000 	.word	0x448fc000
 8000838:	43ff0000 	.word	0x43ff0000
 800083c:	42dc0000 	.word	0x42dc0000
 8000840:	44bcc000 	.word	0x44bcc000
 8000844:	24000acc 	.word	0x24000acc
 8000848:	24000840 	.word	0x24000840
 800084c:	240002dc 	.word	0x240002dc
 8000850:	58021400 	.word	0x58021400
 8000854:	24000b64 	.word	0x24000b64
 8000858:	24000a80 	.word	0x24000a80
 800085c:	58021000 	.word	0x58021000
 8000860:	24000c6c 	.word	0x24000c6c

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b09c      	sub	sp, #112	; 0x70
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	224c      	movs	r2, #76	; 0x4c
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f00b fcb8 	bl	800c1e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2220      	movs	r2, #32
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f00b fcb2 	bl	800c1e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000884:	2002      	movs	r0, #2
 8000886:	f005 fb93 	bl	8005fb0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b35      	ldr	r3, [pc, #212]	; (8000964 <SystemClock_Config+0x100>)
 8000890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000892:	4a34      	ldr	r2, [pc, #208]	; (8000964 <SystemClock_Config+0x100>)
 8000894:	f023 0301 	bic.w	r3, r3, #1
 8000898:	62d3      	str	r3, [r2, #44]	; 0x2c
 800089a:	4b32      	ldr	r3, [pc, #200]	; (8000964 <SystemClock_Config+0x100>)
 800089c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	4b30      	ldr	r3, [pc, #192]	; (8000968 <SystemClock_Config+0x104>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ac:	4a2e      	ldr	r2, [pc, #184]	; (8000968 <SystemClock_Config+0x104>)
 80008ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <SystemClock_Config+0x104>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c0:	bf00      	nop
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <SystemClock_Config+0x104>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ce:	d1f8      	bne.n	80008c2 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <SystemClock_Config+0x108>)
 80008d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d4:	4a25      	ldr	r2, [pc, #148]	; (800096c <SystemClock_Config+0x108>)
 80008d6:	f023 0303 	bic.w	r3, r3, #3
 80008da:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80008dc:	2322      	movs	r3, #34	; 0x22
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ec:	2302      	movs	r3, #2
 80008ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f0:	2300      	movs	r3, #0
 80008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 80008f4:	2320      	movs	r3, #32
 80008f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 80008f8:	2381      	movs	r3, #129	; 0x81
 80008fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000908:	230c      	movs	r3, #12
 800090a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800090c:	2300      	movs	r3, #0
 800090e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	4618      	mov	r0, r3
 800091a:	f005 fb93 	bl	8006044 <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000924:	f000 feb0 	bl	8001688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000928:	233f      	movs	r3, #63	; 0x3f
 800092a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092c:	2303      	movs	r3, #3
 800092e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2102      	movs	r1, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f005 ff89 	bl	8006864 <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000958:	f000 fe96 	bl	8001688 <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3770      	adds	r7, #112	; 0x70
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	58000400 	.word	0x58000400
 8000968:	58024800 	.word	0x58024800
 800096c:	58024400 	.word	0x58024400

08000970 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	615a      	str	r2, [r3, #20]
 8000986:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000988:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <MX_ADC3_Init+0xc0>)
 800098a:	4a2a      	ldr	r2, [pc, #168]	; (8000a34 <MX_ADC3_Init+0xc4>)
 800098c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800098e:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <MX_ADC3_Init+0xc0>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <MX_ADC3_Init+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <MX_ADC3_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <MX_ADC3_Init+0xc0>)
 80009a2:	2204      	movs	r2, #4
 80009a4:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009a6:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <MX_ADC3_Init+0xc0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80009ac:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <MX_ADC3_Init+0xc0>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_ADC3_Init+0xc0>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_ADC3_Init+0xc0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_ADC3_Init+0xc0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_ADC3_Init+0xc0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_ADC3_Init+0xc0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_ADC3_Init+0xc0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_ADC3_Init+0xc0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_ADC3_Init+0xc0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009e4:	4812      	ldr	r0, [pc, #72]	; (8000a30 <MX_ADC3_Init+0xc0>)
 80009e6:	f001 ffcb 	bl	8002980 <HAL_ADC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80009f0:	f000 fe4a 	bl	8001688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009f4:	2301      	movs	r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f8:	2306      	movs	r3, #6
 80009fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a00:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a04:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a06:	2304      	movs	r3, #4
 8000a08:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <MX_ADC3_Init+0xc0>)
 8000a18:	f002 f952 	bl	8002cc0 <HAL_ADC_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000a22:	f000 fe31 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	24000a1c 	.word	0x24000a1c
 8000a34:	58026000 	.word	0x58026000

08000a38 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a3e:	4a23      	ldr	r2, [pc, #140]	; (8000acc <MX_ETH_Init+0x94>)
 8000a40:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	3302      	adds	r3, #2
 8000a5a:	22e1      	movs	r2, #225	; 0xe1
 8000a5c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	3303      	adds	r3, #3
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	3305      	adds	r3, #5
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a84:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <MX_ETH_Init+0x98>)
 8000a86:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MX_ETH_Init+0x9c>)
 8000a8c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a90:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a94:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a98:	f004 fb3e 	bl	8005118 <HAL_ETH_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000aa2:	f000 fdf1 	bl	8001688 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000aa6:	2234      	movs	r2, #52	; 0x34
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <MX_ETH_Init+0xa0>)
 8000aac:	f00b fb9c 	bl	800c1e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_ETH_Init+0xa0>)
 8000ab2:	2221      	movs	r2, #33	; 0x21
 8000ab4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_ETH_Init+0xa0>)
 8000ab8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000abc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_ETH_Init+0xa0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24000bb0 	.word	0x24000bb0
 8000acc:	40028000 	.word	0x40028000
 8000ad0:	24000070 	.word	0x24000070
 8000ad4:	24000010 	.word	0x24000010
 8000ad8:	24000c38 	.word	0x24000c38

08000adc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000ae2:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <MX_SPI3_Init+0xa8>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000ae8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000aec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000af6:	2203      	movs	r2, #3
 8000af8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b0c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b32:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_SPI3_Init+0xa4>)
 8000b6c:	f008 fb8c 	bl	8009288 <HAL_SPI_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000b76:	f000 fd87 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2400088c 	.word	0x2400088c
 8000b84:	40003c00 	.word	0x40003c00

08000b88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2224      	movs	r2, #36	; 0x24
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f00b fb26 	bl	800c1e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ba6:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_TIM1_Init+0xac>)
 8000ba8:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <MX_TIM1_Init+0xb0>)
 8000baa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_TIM1_Init+0xac>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_TIM1_Init+0xac>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_TIM1_Init+0xac>)
 8000bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bbe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_TIM1_Init+0xac>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_TIM1_Init+0xac>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_TIM1_Init+0xac>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bea:	2301      	movs	r3, #1
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_TIM1_Init+0xac>)
 8000bfe:	f008 fe17 	bl	8009830 <HAL_TIM_Encoder_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000c08:	f000 fd3e 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_TIM1_Init+0xac>)
 8000c1e:	f009 febd 	bl	800a99c <HAL_TIMEx_MasterConfigSynchronization>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000c28:	f000 fd2e 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3730      	adds	r7, #48	; 0x30
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	24000acc 	.word	0x24000acc
 8000c38:	40010000 	.word	0x40010000

08000c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	2224      	movs	r2, #36	; 0x24
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f00b facc 	bl	800c1e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_TIM2_Init+0xa4>)
 8000c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_TIM2_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_TIM2_Init+0xa4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_TIM2_Init+0xa4>)
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_TIM2_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_TIM2_Init+0xa4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MX_TIM2_Init+0xa4>)
 8000cae:	f008 fdbf 	bl	8009830 <HAL_TIM_Encoder_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000cb8:	f000 fce6 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_TIM2_Init+0xa4>)
 8000cca:	f009 fe67 	bl	800a99c <HAL_TIMEx_MasterConfigSynchronization>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000cd4:	f000 fcd8 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	24000b18 	.word	0x24000b18

08000ce4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2224      	movs	r2, #36	; 0x24
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f00b fa78 	bl	800c1e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_TIM3_Init+0xa4>)
 8000d04:	4a21      	ldr	r2, [pc, #132]	; (8000d8c <MX_TIM3_Init+0xa8>)
 8000d06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_TIM3_Init+0xa4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_TIM3_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <MX_TIM3_Init+0xa4>)
 8000d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_TIM3_Init+0xa4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_TIM3_Init+0xa4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d30:	2301      	movs	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d40:	2301      	movs	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	4619      	mov	r1, r3
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <MX_TIM3_Init+0xa4>)
 8000d54:	f008 fd6c 	bl	8009830 <HAL_TIM_Encoder_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d5e:	f000 fc93 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_TIM3_Init+0xa4>)
 8000d70:	f009 fe14 	bl	800a99c <HAL_TIMEx_MasterConfigSynchronization>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d7a:	f000 fc85 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3730      	adds	r7, #48	; 0x30
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	24000840 	.word	0x24000840
 8000d8c:	40000400 	.word	0x40000400

08000d90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2224      	movs	r2, #36	; 0x24
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f00b fa22 	bl	800c1e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	463b      	mov	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_TIM4_Init+0xa4>)
 8000db0:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <MX_TIM4_Init+0xa8>)
 8000db2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_TIM4_Init+0xa4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_TIM4_Init+0xa4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_TIM4_Init+0xa4>)
 8000dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_TIM4_Init+0xa4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_TIM4_Init+0xa4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000de4:	230a      	movs	r3, #10
 8000de6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dec:	2301      	movs	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000df4:	230a      	movs	r3, #10
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_TIM4_Init+0xa4>)
 8000e00:	f008 fd16 	bl	8009830 <HAL_TIM_Encoder_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000e0a:	f000 fc3d 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e16:	463b      	mov	r3, r7
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	; (8000e34 <MX_TIM4_Init+0xa4>)
 8000e1c:	f009 fdbe 	bl	800a99c <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000e26:	f000 fc2f 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	3730      	adds	r7, #48	; 0x30
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	240002dc 	.word	0x240002dc
 8000e38:	40000800 	.word	0x40000800

08000e3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_TIM5_Init+0x94>)
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ed4 <MX_TIM5_Init+0x98>)
 8000e5e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_TIM5_Init+0x94>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_TIM5_Init+0x94>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_TIM5_Init+0x94>)
 8000e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e72:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_TIM5_Init+0x94>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_TIM5_Init+0x94>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e80:	4813      	ldr	r0, [pc, #76]	; (8000ed0 <MX_TIM5_Init+0x94>)
 8000e82:	f008 fb1e 	bl	80094c2 <HAL_TIM_Base_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e8c:	f000 fbfc 	bl	8001688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <MX_TIM5_Init+0x94>)
 8000e9e:	f009 f82b 	bl	8009ef8 <HAL_TIM_ConfigClockSource>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000ea8:	f000 fbee 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_TIM5_Init+0x94>)
 8000eba:	f009 fd6f 	bl	800a99c <HAL_TIMEx_MasterConfigSynchronization>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ec4:	f000 fbe0 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	240007f4 	.word	0x240007f4
 8000ed4:	40000c00 	.word	0x40000c00

08000ed8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	615a      	str	r2, [r3, #20]
 8000eee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_TIM12_Init+0x84>)
 8000ef2:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <MX_TIM12_Init+0x88>)
 8000ef4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_TIM12_Init+0x84>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_TIM12_Init+0x84>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_TIM12_Init+0x84>)
 8000f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f08:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_TIM12_Init+0x84>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_TIM12_Init+0x84>)
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000f16:	4811      	ldr	r0, [pc, #68]	; (8000f5c <MX_TIM12_Init+0x84>)
 8000f18:	f008 fb2a 	bl	8009570 <HAL_TIM_PWM_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000f22:	f000 fbb1 	bl	8001688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f26:	2360      	movs	r3, #96	; 0x60
 8000f28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2204      	movs	r2, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <MX_TIM12_Init+0x84>)
 8000f3e:	f008 fecb 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000f48:	f000 fb9e 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <MX_TIM12_Init+0x84>)
 8000f4e:	f000 ff79 	bl	8001e44 <HAL_TIM_MspPostInit>

}
 8000f52:	bf00      	nop
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	24000b64 	.word	0x24000b64
 8000f60:	40001800 	.word	0x40001800

08000f64 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <MX_TIM13_Init+0x94>)
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <MX_TIM13_Init+0x98>)
 8000f80:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <MX_TIM13_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MX_TIM13_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_TIM13_Init+0x94>)
 8000f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f94:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_TIM13_Init+0x94>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <MX_TIM13_Init+0x94>)
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000fa2:	4815      	ldr	r0, [pc, #84]	; (8000ff8 <MX_TIM13_Init+0x94>)
 8000fa4:	f008 fa8d 	bl	80094c2 <HAL_TIM_Base_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000fae:	f000 fb6b 	bl	8001688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000fb2:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <MX_TIM13_Init+0x94>)
 8000fb4:	f008 fadc 	bl	8009570 <HAL_TIM_PWM_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000fbe:	f000 fb63 	bl	8001688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc2:	2360      	movs	r3, #96	; 0x60
 8000fc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <MX_TIM13_Init+0x94>)
 8000fda:	f008 fe7d 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000fe4:	f000 fb50 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <MX_TIM13_Init+0x94>)
 8000fea:	f000 ff2b 	bl	8001e44 <HAL_TIM_MspPostInit>

}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	24000a80 	.word	0x24000a80
 8000ffc:	40001c00 	.word	0x40001c00

08001000 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b092      	sub	sp, #72	; 0x48
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	222c      	movs	r2, #44	; 0x2c
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f00b f8e1 	bl	800c1e8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <MX_TIM16_Init+0xec>)
 8001028:	4a31      	ldr	r2, [pc, #196]	; (80010f0 <MX_TIM16_Init+0xf0>)
 800102a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <MX_TIM16_Init+0xec>)
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <MX_TIM16_Init+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001038:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <MX_TIM16_Init+0xec>)
 800103a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800103e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <MX_TIM16_Init+0xec>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001046:	4b29      	ldr	r3, [pc, #164]	; (80010ec <MX_TIM16_Init+0xec>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <MX_TIM16_Init+0xec>)
 800104e:	2280      	movs	r2, #128	; 0x80
 8001050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001052:	4826      	ldr	r0, [pc, #152]	; (80010ec <MX_TIM16_Init+0xec>)
 8001054:	f008 fa35 	bl	80094c2 <HAL_TIM_Base_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800105e:	f000 fb13 	bl	8001688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001062:	4822      	ldr	r0, [pc, #136]	; (80010ec <MX_TIM16_Init+0xec>)
 8001064:	f008 fa84 	bl	8009570 <HAL_TIM_PWM_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800106e:	f000 fb0b 	bl	8001688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001072:	2360      	movs	r3, #96	; 0x60
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107a:	2300      	movs	r3, #0
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800107e:	2300      	movs	r3, #0
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	4815      	ldr	r0, [pc, #84]	; (80010ec <MX_TIM16_Init+0xec>)
 8001098:	f008 fe1e 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80010a2:	f000 faf1 	bl	8001688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <MX_TIM16_Init+0xec>)
 80010ce:	f009 fced 	bl	800aaac <HAL_TIMEx_ConfigBreakDeadTime>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80010d8:	f000 fad6 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <MX_TIM16_Init+0xec>)
 80010de:	f000 feb1 	bl	8001e44 <HAL_TIM_MspPostInit>

}
 80010e2:	bf00      	nop
 80010e4:	3748      	adds	r7, #72	; 0x48
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	24000c6c 	.word	0x24000c6c
 80010f0:	40014400 	.word	0x40014400

080010f4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b092      	sub	sp, #72	; 0x48
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	222c      	movs	r2, #44	; 0x2c
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f00b f867 	bl	800c1e8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800111a:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <MX_TIM17_Init+0xec>)
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <MX_TIM17_Init+0xf0>)
 800111e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001120:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <MX_TIM17_Init+0xec>)
 8001122:	2200      	movs	r2, #0
 8001124:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001126:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <MX_TIM17_Init+0xec>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <MX_TIM17_Init+0xec>)
 800112e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001132:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <MX_TIM17_Init+0xec>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800113a:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <MX_TIM17_Init+0xec>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <MX_TIM17_Init+0xec>)
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001146:	4826      	ldr	r0, [pc, #152]	; (80011e0 <MX_TIM17_Init+0xec>)
 8001148:	f008 f9bb 	bl	80094c2 <HAL_TIM_Base_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001152:	f000 fa99 	bl	8001688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001156:	4822      	ldr	r0, [pc, #136]	; (80011e0 <MX_TIM17_Init+0xec>)
 8001158:	f008 fa0a 	bl	8009570 <HAL_TIM_PWM_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001162:	f000 fa91 	bl	8001688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001166:	2360      	movs	r3, #96	; 0x60
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001172:	2300      	movs	r3, #0
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001186:	2200      	movs	r2, #0
 8001188:	4619      	mov	r1, r3
 800118a:	4815      	ldr	r0, [pc, #84]	; (80011e0 <MX_TIM17_Init+0xec>)
 800118c:	f008 fda4 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001196:	f000 fa77 	bl	8001688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	4807      	ldr	r0, [pc, #28]	; (80011e0 <MX_TIM17_Init+0xec>)
 80011c2:	f009 fc73 	bl	800aaac <HAL_TIMEx_ConfigBreakDeadTime>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80011cc:	f000 fa5c 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <MX_TIM17_Init+0xec>)
 80011d2:	f000 fe37 	bl	8001e44 <HAL_TIM_MspPostInit>

}
 80011d6:	bf00      	nop
 80011d8:	3748      	adds	r7, #72	; 0x48
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	24000730 	.word	0x24000730
 80011e4:	40014800 	.word	0x40014800

080011e8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <MX_UART5_Init+0x90>)
 80011ee:	4a23      	ldr	r2, [pc, #140]	; (800127c <MX_UART5_Init+0x94>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_UART5_Init+0x90>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_UART5_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_UART5_Init+0x90>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_UART5_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_UART5_Init+0x90>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_UART5_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_UART5_Init+0x90>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_UART5_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_UART5_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_UART5_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001230:	4811      	ldr	r0, [pc, #68]	; (8001278 <MX_UART5_Init+0x90>)
 8001232:	f009 fcd7 	bl	800abe4 <HAL_UART_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800123c:	f000 fa24 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001240:	2100      	movs	r1, #0
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_UART5_Init+0x90>)
 8001244:	f00a fc24 	bl	800ba90 <HAL_UARTEx_SetTxFifoThreshold>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800124e:	f000 fa1b 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	4808      	ldr	r0, [pc, #32]	; (8001278 <MX_UART5_Init+0x90>)
 8001256:	f00a fc59 	bl	800bb0c <HAL_UARTEx_SetRxFifoThreshold>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001260:	f000 fa12 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_UART5_Init+0x90>)
 8001266:	f00a fbda 	bl	800ba1e <HAL_UARTEx_DisableFifoMode>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001270:	f000 fa0a 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	24000914 	.word	0x24000914
 800127c:	40005000 	.word	0x40005000

08001280 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <MX_UART7_Init+0x90>)
 8001286:	4a23      	ldr	r2, [pc, #140]	; (8001314 <MX_UART7_Init+0x94>)
 8001288:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <MX_UART7_Init+0x90>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_UART7_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <MX_UART7_Init+0x90>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_UART7_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_UART7_Init+0x90>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_UART7_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_UART7_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_UART7_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_UART7_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_UART7_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80012c8:	4811      	ldr	r0, [pc, #68]	; (8001310 <MX_UART7_Init+0x90>)
 80012ca:	f009 fc8b 	bl	800abe4 <HAL_UART_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80012d4:	f000 f9d8 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_UART7_Init+0x90>)
 80012dc:	f00a fbd8 	bl	800ba90 <HAL_UARTEx_SetTxFifoThreshold>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80012e6:	f000 f9cf 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4808      	ldr	r0, [pc, #32]	; (8001310 <MX_UART7_Init+0x90>)
 80012ee:	f00a fc0d 	bl	800bb0c <HAL_UARTEx_SetRxFifoThreshold>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80012f8:	f000 f9c6 	bl	8001688 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_UART7_Init+0x90>)
 80012fe:	f00a fb8e 	bl	800ba1e <HAL_UARTEx_DisableFifoMode>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001308:	f000 f9be 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2400024c 	.word	0x2400024c
 8001314:	40007800 	.word	0x40007800

08001318 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800131e:	4a16      	ldr	r2, [pc, #88]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001320:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001324:	2209      	movs	r2, #9
 8001326:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800132a:	2202      	movs	r2, #2
 800132c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001336:	2202      	movs	r2, #2
 8001338:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800133c:	2201      	movs	r2, #1
 800133e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134e:	2201      	movs	r2, #1
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001354:	2201      	movs	r2, #1
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800135a:	2200      	movs	r2, #0
 800135c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001360:	f004 fcde 	bl	8005d20 <HAL_PCD_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800136a:	f000 f98d 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	24000328 	.word	0x24000328
 8001378:	40080000 	.word	0x40080000

0800137c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <MX_BDMA_Init+0x3c>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001388:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <MX_BDMA_Init+0x3c>)
 800138a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_BDMA_Init+0x3c>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2081      	movs	r0, #129	; 0x81
 80013a6:	f002 f9c0 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80013aa:	2081      	movs	r0, #129	; 0x81
 80013ac:	f002 f9d7 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	58024400 	.word	0x58024400

080013bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <MX_DMA_Init+0x3c>)
 80013c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c8:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <MX_DMA_Init+0x3c>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_DMA_Init+0x3c>)
 80013d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	200c      	movs	r0, #12
 80013e6:	f002 f9a0 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013ea:	200c      	movs	r0, #12
 80013ec:	f002 f9b7 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	58024400 	.word	0x58024400

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	; 0x38
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	4b95      	ldr	r3, [pc, #596]	; (8001668 <MX_GPIO_Init+0x26c>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	4a93      	ldr	r2, [pc, #588]	; (8001668 <MX_GPIO_Init+0x26c>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001422:	4b91      	ldr	r3, [pc, #580]	; (8001668 <MX_GPIO_Init+0x26c>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	623b      	str	r3, [r7, #32]
 800142e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001430:	4b8d      	ldr	r3, [pc, #564]	; (8001668 <MX_GPIO_Init+0x26c>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	4a8c      	ldr	r2, [pc, #560]	; (8001668 <MX_GPIO_Init+0x26c>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001440:	4b89      	ldr	r3, [pc, #548]	; (8001668 <MX_GPIO_Init+0x26c>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	4b86      	ldr	r3, [pc, #536]	; (8001668 <MX_GPIO_Init+0x26c>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	4a84      	ldr	r2, [pc, #528]	; (8001668 <MX_GPIO_Init+0x26c>)
 8001456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145e:	4b82      	ldr	r3, [pc, #520]	; (8001668 <MX_GPIO_Init+0x26c>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <MX_GPIO_Init+0x26c>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	4a7d      	ldr	r2, [pc, #500]	; (8001668 <MX_GPIO_Init+0x26c>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147c:	4b7a      	ldr	r3, [pc, #488]	; (8001668 <MX_GPIO_Init+0x26c>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b77      	ldr	r3, [pc, #476]	; (8001668 <MX_GPIO_Init+0x26c>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	4a75      	ldr	r2, [pc, #468]	; (8001668 <MX_GPIO_Init+0x26c>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149a:	4b73      	ldr	r3, [pc, #460]	; (8001668 <MX_GPIO_Init+0x26c>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a8:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <MX_GPIO_Init+0x26c>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <MX_GPIO_Init+0x26c>)
 80014b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b8:	4b6b      	ldr	r3, [pc, #428]	; (8001668 <MX_GPIO_Init+0x26c>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c6:	4b68      	ldr	r3, [pc, #416]	; (8001668 <MX_GPIO_Init+0x26c>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	4a66      	ldr	r2, [pc, #408]	; (8001668 <MX_GPIO_Init+0x26c>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d6:	4b64      	ldr	r3, [pc, #400]	; (8001668 <MX_GPIO_Init+0x26c>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e4:	4b60      	ldr	r3, [pc, #384]	; (8001668 <MX_GPIO_Init+0x26c>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	4a5f      	ldr	r2, [pc, #380]	; (8001668 <MX_GPIO_Init+0x26c>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f4:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <MX_GPIO_Init+0x26c>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001508:	4858      	ldr	r0, [pc, #352]	; (800166c <MX_GPIO_Init+0x270>)
 800150a:	f004 fbcb 	bl	8005ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f644 4101 	movw	r1, #19457	; 0x4c01
 8001514:	4856      	ldr	r0, [pc, #344]	; (8001670 <MX_GPIO_Init+0x274>)
 8001516:	f004 fbc5 	bl	8005ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001520:	4854      	ldr	r0, [pc, #336]	; (8001674 <MX_GPIO_Init+0x278>)
 8001522:	f004 fbbf 	bl	8005ca4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|LD2_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 7181 	mov.w	r1, #258	; 0x102
 800152c:	4852      	ldr	r0, [pc, #328]	; (8001678 <MX_GPIO_Init+0x27c>)
 800152e:	f004 fbb9 	bl	8005ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001538:	4850      	ldr	r0, [pc, #320]	; (800167c <MX_GPIO_Init+0x280>)
 800153a:	f004 fbb3 	bl	8005ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800153e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001550:	4619      	mov	r1, r3
 8001552:	484b      	ldr	r0, [pc, #300]	; (8001680 <MX_GPIO_Init+0x284>)
 8001554:	f004 f9f6 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10;
 8001558:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	483e      	ldr	r0, [pc, #248]	; (800166c <MX_GPIO_Init+0x270>)
 8001572:	f004 f9e7 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB10 PB11 LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin;
 8001576:	f644 4301 	movw	r3, #19457	; 0x4c01
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	4838      	ldr	r0, [pc, #224]	; (8001670 <MX_GPIO_Init+0x274>)
 8001590:	f004 f9d8 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001594:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	4831      	ldr	r0, [pc, #196]	; (8001674 <MX_GPIO_Init+0x278>)
 80015ae:	f004 f9c9 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|LD2_Pin;
 80015b2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	482b      	ldr	r0, [pc, #172]	; (8001678 <MX_GPIO_Init+0x27c>)
 80015cc:	f004 f9ba 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015e2:	2307      	movs	r3, #7
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	4823      	ldr	r0, [pc, #140]	; (800167c <MX_GPIO_Init+0x280>)
 80015ee:	f004 f9a9 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80015f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	481c      	ldr	r0, [pc, #112]	; (800167c <MX_GPIO_Init+0x280>)
 800160c:	f004 f99a 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001610:	2304      	movs	r3, #4
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_GPIO_Init+0x288>)
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	4814      	ldr	r0, [pc, #80]	; (8001674 <MX_GPIO_Init+0x278>)
 8001624:	f004 f98e 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001628:	23f8      	movs	r3, #248	; 0xf8
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_GPIO_Init+0x288>)
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	4810      	ldr	r0, [pc, #64]	; (800167c <MX_GPIO_Init+0x280>)
 800163c:	f004 f982 	bl	8005944 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	200a      	movs	r0, #10
 8001646:	f002 f870 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800164a:	200a      	movs	r0, #10
 800164c:	f002 f887 	bl	800375e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	2017      	movs	r0, #23
 8001656:	f002 f868 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800165a:	2017      	movs	r0, #23
 800165c:	f002 f87f 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 8001660:	bf00      	nop
 8001662:	3738      	adds	r7, #56	; 0x38
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	58024400 	.word	0x58024400
 800166c:	58021400 	.word	0x58021400
 8001670:	58020400 	.word	0x58020400
 8001674:	58021800 	.word	0x58021800
 8001678:	58021000 	.word	0x58021000
 800167c:	58020c00 	.word	0x58020c00
 8001680:	58020800 	.word	0x58020800
 8001684:	11110000 	.word	0x11110000

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001690:	e7fe      	b.n	8001690 <Error_Handler+0x8>
	...

08001694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_MspInit+0x30>)
 800169c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016a0:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_MspInit+0x30>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_MspInit+0x30>)
 80016ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	58024400 	.word	0x58024400

080016c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0ba      	sub	sp, #232	; 0xe8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	22bc      	movs	r2, #188	; 0xbc
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00a fd7d 	bl	800c1e8 <memset>
  if(hadc->Instance==ADC3)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a51      	ldr	r2, [pc, #324]	; (8001838 <HAL_ADC_MspInit+0x170>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	f040 809a 	bne.w	800182e <HAL_ADC_MspInit+0x166>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8001700:	2304      	movs	r3, #4
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 9;
 8001704:	2309      	movs	r3, #9
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001708:	2302      	movs	r3, #2
 800170a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800170c:	2302      	movs	r3, #2
 800170e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 8001710:	2304      	movs	r3, #4
 8001712:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001714:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001718:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800171a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800171e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 3072.0;
 8001720:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001724:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8001726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172e:	f107 0318 	add.w	r3, r7, #24
 8001732:	4618      	mov	r0, r3
 8001734:	f005 fc22 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800173e:	f7ff ffa3 	bl	8001688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001742:	4b3e      	ldr	r3, [pc, #248]	; (800183c <HAL_ADC_MspInit+0x174>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001748:	4a3c      	ldr	r2, [pc, #240]	; (800183c <HAL_ADC_MspInit+0x174>)
 800174a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800174e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001752:	4b3a      	ldr	r3, [pc, #232]	; (800183c <HAL_ADC_MspInit+0x174>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001760:	4b36      	ldr	r3, [pc, #216]	; (800183c <HAL_ADC_MspInit+0x174>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001766:	4a35      	ldr	r2, [pc, #212]	; (800183c <HAL_ADC_MspInit+0x174>)
 8001768:	f043 0320 	orr.w	r3, r3, #32
 800176c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <HAL_ADC_MspInit+0x174>)
 8001772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001776:	f003 0320 	and.w	r3, r3, #32
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	4b2f      	ldr	r3, [pc, #188]	; (800183c <HAL_ADC_MspInit+0x174>)
 8001780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001784:	4a2d      	ldr	r2, [pc, #180]	; (800183c <HAL_ADC_MspInit+0x174>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_ADC_MspInit+0x174>)
 8001790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800179c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a4:	2303      	movs	r3, #3
 80017a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017b4:	4619      	mov	r1, r3
 80017b6:	4822      	ldr	r0, [pc, #136]	; (8001840 <HAL_ADC_MspInit+0x178>)
 80017b8:	f004 f8c4 	bl	8005944 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80017bc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80017c0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80017c4:	f000 ff3a 	bl	800263c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80017c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80017cc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80017d0:	f000 ff34 	bl	800263c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_ADC_MspInit+0x17c>)
 80017d6:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <HAL_ADC_MspInit+0x180>)
 80017d8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_ADC_MspInit+0x17c>)
 80017dc:	2211      	movs	r2, #17
 80017de:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_ADC_MspInit+0x17c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_ADC_MspInit+0x17c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_ADC_MspInit+0x17c>)
 80017ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_ADC_MspInit+0x17c>)
 80017f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017fa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_ADC_MspInit+0x17c>)
 80017fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001802:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_ADC_MspInit+0x17c>)
 8001806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_ADC_MspInit+0x17c>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001812:	480c      	ldr	r0, [pc, #48]	; (8001844 <HAL_ADC_MspInit+0x17c>)
 8001814:	f001 ffbe 	bl	8003794 <HAL_DMA_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_ADC_MspInit+0x15a>
    {
      Error_Handler();
 800181e:	f7ff ff33 	bl	8001688 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_ADC_MspInit+0x17c>)
 8001826:	64da      	str	r2, [r3, #76]	; 0x4c
 8001828:	4a06      	ldr	r2, [pc, #24]	; (8001844 <HAL_ADC_MspInit+0x17c>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	37e8      	adds	r7, #232	; 0xe8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	58026000 	.word	0x58026000
 800183c:	58024400 	.word	0x58024400
 8001840:	58021400 	.word	0x58021400
 8001844:	2400077c 	.word	0x2400077c
 8001848:	58025408 	.word	0x58025408

0800184c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	; 0x38
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a59      	ldr	r2, [pc, #356]	; (80019d0 <HAL_ETH_MspInit+0x184>)
 800186a:	4293      	cmp	r3, r2
 800186c:	f040 80ab 	bne.w	80019c6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001870:	4b58      	ldr	r3, [pc, #352]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 8001872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001876:	4a57      	ldr	r2, [pc, #348]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 8001878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800187c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001880:	4b54      	ldr	r3, [pc, #336]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 8001882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800188e:	4b51      	ldr	r3, [pc, #324]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 8001890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001894:	4a4f      	ldr	r2, [pc, #316]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 8001896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800189e:	4b4d      	ldr	r3, [pc, #308]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 80018a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80018ac:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 80018ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018b2:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018bc:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 80018be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d0:	4a40      	ldr	r2, [pc, #256]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018da:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ee:	4a39      	ldr	r2, [pc, #228]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f8:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190c:	4a31      	ldr	r2, [pc, #196]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 800190e:	f043 0302 	orr.w	r3, r3, #2
 8001912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001916:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 8001918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 8001926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192a:	4a2a      	ldr	r2, [pc, #168]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 800192c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_ETH_MspInit+0x188>)
 8001936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001942:	2332      	movs	r3, #50	; 0x32
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001952:	230b      	movs	r3, #11
 8001954:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195a:	4619      	mov	r1, r3
 800195c:	481e      	ldr	r0, [pc, #120]	; (80019d8 <HAL_ETH_MspInit+0x18c>)
 800195e:	f003 fff1 	bl	8005944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001962:	2386      	movs	r3, #134	; 0x86
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001972:	230b      	movs	r3, #11
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197a:	4619      	mov	r1, r3
 800197c:	4817      	ldr	r0, [pc, #92]	; (80019dc <HAL_ETH_MspInit+0x190>)
 800197e:	f003 ffe1 	bl	8005944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001994:	230b      	movs	r3, #11
 8001996:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	4619      	mov	r1, r3
 800199e:	4810      	ldr	r0, [pc, #64]	; (80019e0 <HAL_ETH_MspInit+0x194>)
 80019a0:	f003 ffd0 	bl	8005944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80019a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019b6:	230b      	movs	r3, #11
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019be:	4619      	mov	r1, r3
 80019c0:	4808      	ldr	r0, [pc, #32]	; (80019e4 <HAL_ETH_MspInit+0x198>)
 80019c2:	f003 ffbf 	bl	8005944 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3738      	adds	r7, #56	; 0x38
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40028000 	.word	0x40028000
 80019d4:	58024400 	.word	0x58024400
 80019d8:	58020800 	.word	0x58020800
 80019dc:	58020000 	.word	0x58020000
 80019e0:	58020400 	.word	0x58020400
 80019e4:	58021800 	.word	0x58021800

080019e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b0ba      	sub	sp, #232	; 0xe8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a00:	f107 0318 	add.w	r3, r7, #24
 8001a04:	22bc      	movs	r2, #188	; 0xbc
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00a fbed 	bl	800c1e8 <memset>
  if(hspi->Instance==SPI3)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a37      	ldr	r2, [pc, #220]	; (8001af0 <HAL_SPI_MspInit+0x108>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d166      	bne.n	8001ae6 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a22:	f107 0318 	add.w	r3, r7, #24
 8001a26:	4618      	mov	r0, r3
 8001a28:	f005 faa8 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001a32:	f7ff fe29 	bl	8001688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a36:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_SPI_MspInit+0x10c>)
 8001a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a3c:	4a2d      	ldr	r2, [pc, #180]	; (8001af4 <HAL_SPI_MspInit+0x10c>)
 8001a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_SPI_MspInit+0x10c>)
 8001a48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_SPI_MspInit+0x10c>)
 8001a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5a:	4a26      	ldr	r2, [pc, #152]	; (8001af4 <HAL_SPI_MspInit+0x10c>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <HAL_SPI_MspInit+0x10c>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_SPI_MspInit+0x10c>)
 8001a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a78:	4a1e      	ldr	r2, [pc, #120]	; (8001af4 <HAL_SPI_MspInit+0x10c>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <HAL_SPI_MspInit+0x10c>)
 8001a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a90:	2310      	movs	r3, #16
 8001a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aa8:	2306      	movs	r3, #6
 8001aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4810      	ldr	r0, [pc, #64]	; (8001af8 <HAL_SPI_MspInit+0x110>)
 8001ab6:	f003 ff45 	bl	8005944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001aba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ad4:	2306      	movs	r3, #6
 8001ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4806      	ldr	r0, [pc, #24]	; (8001afc <HAL_SPI_MspInit+0x114>)
 8001ae2:	f003 ff2f 	bl	8005944 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	37e8      	adds	r7, #232	; 0xe8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40003c00 	.word	0x40003c00
 8001af4:	58024400 	.word	0x58024400
 8001af8:	58020000 	.word	0x58020000
 8001afc:	58020800 	.word	0x58020800

08001b00 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b090      	sub	sp, #64	; 0x40
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a7c      	ldr	r2, [pc, #496]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x210>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d12f      	bne.n	8001b82 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b22:	4b7c      	ldr	r3, [pc, #496]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b28:	4a7a      	ldr	r2, [pc, #488]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b32:	4b78      	ldr	r3, [pc, #480]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b40:	4b74      	ldr	r3, [pc, #464]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b46:	4a73      	ldr	r2, [pc, #460]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001b48:	f043 0310 	orr.w	r3, r3, #16
 8001b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b50:	4b70      	ldr	r3, [pc, #448]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001b5e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4867      	ldr	r0, [pc, #412]	; (8001d18 <HAL_TIM_Encoder_MspInit+0x218>)
 8001b7c:	f003 fee2 	bl	8005944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b80:	e0c2      	b.n	8001d08 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8a:	d14d      	bne.n	8001c28 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b8c:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b92:	4a60      	ldr	r2, [pc, #384]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b9c:	4b5d      	ldr	r3, [pc, #372]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	623b      	str	r3, [r7, #32]
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b5a      	ldr	r3, [pc, #360]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb0:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bba:	4b56      	ldr	r3, [pc, #344]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bce:	4a51      	ldr	r2, [pc, #324]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd8:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001be6:	2320      	movs	r3, #32
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4846      	ldr	r0, [pc, #280]	; (8001d1c <HAL_TIM_Encoder_MspInit+0x21c>)
 8001c02:	f003 fe9f 	bl	8005944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c06:	2308      	movs	r3, #8
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c16:	2301      	movs	r3, #1
 8001c18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1e:	4619      	mov	r1, r3
 8001c20:	483f      	ldr	r0, [pc, #252]	; (8001d20 <HAL_TIM_Encoder_MspInit+0x220>)
 8001c22:	f003 fe8f 	bl	8005944 <HAL_GPIO_Init>
}
 8001c26:	e06f      	b.n	8001d08 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a3d      	ldr	r2, [pc, #244]	; (8001d24 <HAL_TIM_Encoder_MspInit+0x224>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d12e      	bne.n	8001c90 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c38:	4a36      	ldr	r2, [pc, #216]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c42:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c56:	4a2f      	ldr	r2, [pc, #188]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c6e:	2330      	movs	r3, #48	; 0x30
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c86:	4619      	mov	r1, r3
 8001c88:	4825      	ldr	r0, [pc, #148]	; (8001d20 <HAL_TIM_Encoder_MspInit+0x220>)
 8001c8a:	f003 fe5b 	bl	8005944 <HAL_GPIO_Init>
}
 8001c8e:	e03b      	b.n	8001d08 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM4)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <HAL_TIM_Encoder_MspInit+0x228>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d136      	bne.n	8001d08 <HAL_TIM_Encoder_MspInit+0x208>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001cc0:	f043 0308 	orr.w	r3, r3, #8
 8001cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x214>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480e      	ldr	r0, [pc, #56]	; (8001d2c <HAL_TIM_Encoder_MspInit+0x22c>)
 8001cf4:	f003 fe26 	bl	8005944 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	201e      	movs	r0, #30
 8001cfe:	f001 fd14 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d02:	201e      	movs	r0, #30
 8001d04:	f001 fd2b 	bl	800375e <HAL_NVIC_EnableIRQ>
}
 8001d08:	bf00      	nop
 8001d0a:	3740      	adds	r7, #64	; 0x40
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40010000 	.word	0x40010000
 8001d14:	58024400 	.word	0x58024400
 8001d18:	58021000 	.word	0x58021000
 8001d1c:	58020000 	.word	0x58020000
 8001d20:	58020400 	.word	0x58020400
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40000800 	.word	0x40000800
 8001d2c:	58020c00 	.word	0x58020c00

08001d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a2b      	ldr	r2, [pc, #172]	; (8001dec <HAL_TIM_Base_MspInit+0xbc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10f      	bne.n	8001d62 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d42:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d48:	4a29      	ldr	r2, [pc, #164]	; (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d4a:	f043 0308 	orr.w	r3, r3, #8
 8001d4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d52:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001d60:	e03d      	b.n	8001dde <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM13)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_TIM_Base_MspInit+0xc4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10f      	bne.n	8001d8c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001d6c:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d72:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
}
 8001d8a:	e028      	b.n	8001dde <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM16)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a19      	ldr	r2, [pc, #100]	; (8001df8 <HAL_TIM_Base_MspInit+0xc8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d10f      	bne.n	8001db6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	e013      	b.n	8001dde <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM17)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_TIM_Base_MspInit+0xcc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d10e      	bne.n	8001dde <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dcc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <HAL_TIM_Base_MspInit+0xc0>)
 8001dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
}
 8001dde:	bf00      	nop
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40000c00 	.word	0x40000c00
 8001df0:	58024400 	.word	0x58024400
 8001df4:	40001c00 	.word	0x40001c00
 8001df8:	40014400 	.word	0x40014400
 8001dfc:	40014800 	.word	0x40014800

08001e00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10e      	bne.n	8001e30 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_TIM_PWM_MspInit+0x40>)
 8001e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e18:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <HAL_TIM_PWM_MspInit+0x40>)
 8001e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_TIM_PWM_MspInit+0x40>)
 8001e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40001800 	.word	0x40001800
 8001e40:	58024400 	.word	0x58024400

08001e44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	; 0x30
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a4b      	ldr	r2, [pc, #300]	; (8001f90 <HAL_TIM_MspPostInit+0x14c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d120      	bne.n	8001ea8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <HAL_TIM_MspPostInit+0x150>)
 8001e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6c:	4a49      	ldr	r2, [pc, #292]	; (8001f94 <HAL_TIM_MspPostInit+0x150>)
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_TIM_MspPostInit+0x150>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8001e96:	2302      	movs	r3, #2
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	483d      	ldr	r0, [pc, #244]	; (8001f98 <HAL_TIM_MspPostInit+0x154>)
 8001ea2:	f003 fd4f 	bl	8005944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001ea6:	e06f      	b.n	8001f88 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a3b      	ldr	r2, [pc, #236]	; (8001f9c <HAL_TIM_MspPostInit+0x158>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d11f      	bne.n	8001ef2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <HAL_TIM_MspPostInit+0x150>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb8:	4a36      	ldr	r2, [pc, #216]	; (8001f94 <HAL_TIM_MspPostInit+0x150>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec2:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_TIM_MspPostInit+0x150>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ed0:	2340      	movs	r3, #64	; 0x40
 8001ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001ee0:	2309      	movs	r3, #9
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	482d      	ldr	r0, [pc, #180]	; (8001fa0 <HAL_TIM_MspPostInit+0x15c>)
 8001eec:	f003 fd2a 	bl	8005944 <HAL_GPIO_Init>
}
 8001ef0:	e04a      	b.n	8001f88 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <HAL_TIM_MspPostInit+0x160>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d120      	bne.n	8001f3e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_TIM_MspPostInit+0x150>)
 8001efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f02:	4a24      	ldr	r2, [pc, #144]	; (8001f94 <HAL_TIM_MspPostInit+0x150>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <HAL_TIM_MspPostInit+0x150>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	4619      	mov	r1, r3
 8001f36:	4818      	ldr	r0, [pc, #96]	; (8001f98 <HAL_TIM_MspPostInit+0x154>)
 8001f38:	f003 fd04 	bl	8005944 <HAL_GPIO_Init>
}
 8001f3c:	e024      	b.n	8001f88 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_TIM_MspPostInit+0x164>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d11f      	bne.n	8001f88 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_TIM_MspPostInit+0x150>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4e:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <HAL_TIM_MspPostInit+0x150>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f58:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_TIM_MspPostInit+0x150>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <HAL_TIM_MspPostInit+0x154>)
 8001f84:	f003 fcde 	bl	8005944 <HAL_GPIO_Init>
}
 8001f88:	bf00      	nop
 8001f8a:	3730      	adds	r7, #48	; 0x30
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40001800 	.word	0x40001800
 8001f94:	58024400 	.word	0x58024400
 8001f98:	58020400 	.word	0x58020400
 8001f9c:	40001c00 	.word	0x40001c00
 8001fa0:	58020000 	.word	0x58020000
 8001fa4:	40014400 	.word	0x40014400
 8001fa8:	40014800 	.word	0x40014800

08001fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b0ba      	sub	sp, #232	; 0xe8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fc4:	f107 0318 	add.w	r3, r7, #24
 8001fc8:	22bc      	movs	r2, #188	; 0xbc
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00a f90b 	bl	800c1e8 <memset>
  if(huart->Instance==UART5)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a60      	ldr	r2, [pc, #384]	; (8002158 <HAL_UART_MspInit+0x1ac>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d143      	bne.n	8002064 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe6:	f107 0318 	add.w	r3, r7, #24
 8001fea:	4618      	mov	r0, r3
 8001fec:	f004 ffc6 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ff6:	f7ff fb47 	bl	8001688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ffa:	4b58      	ldr	r3, [pc, #352]	; (800215c <HAL_UART_MspInit+0x1b0>)
 8001ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002000:	4a56      	ldr	r2, [pc, #344]	; (800215c <HAL_UART_MspInit+0x1b0>)
 8002002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002006:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800200a:	4b54      	ldr	r3, [pc, #336]	; (800215c <HAL_UART_MspInit+0x1b0>)
 800200c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	4b50      	ldr	r3, [pc, #320]	; (800215c <HAL_UART_MspInit+0x1b0>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201e:	4a4f      	ldr	r2, [pc, #316]	; (800215c <HAL_UART_MspInit+0x1b0>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002028:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_UART_MspInit+0x1b0>)
 800202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8002036:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800203a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002050:	230e      	movs	r3, #14
 8002052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002056:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800205a:	4619      	mov	r1, r3
 800205c:	4840      	ldr	r0, [pc, #256]	; (8002160 <HAL_UART_MspInit+0x1b4>)
 800205e:	f003 fc71 	bl	8005944 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8002062:	e074      	b.n	800214e <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==UART7)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a3e      	ldr	r2, [pc, #248]	; (8002164 <HAL_UART_MspInit+0x1b8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d16f      	bne.n	800214e <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800206e:	2302      	movs	r3, #2
 8002070:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002078:	f107 0318 	add.w	r3, r7, #24
 800207c:	4618      	mov	r0, r3
 800207e:	f004 ff7d 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002088:	f7ff fafe 	bl	8001688 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800208c:	4b33      	ldr	r3, [pc, #204]	; (800215c <HAL_UART_MspInit+0x1b0>)
 800208e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002092:	4a32      	ldr	r2, [pc, #200]	; (800215c <HAL_UART_MspInit+0x1b0>)
 8002094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002098:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800209c:	4b2f      	ldr	r3, [pc, #188]	; (800215c <HAL_UART_MspInit+0x1b0>)
 800209e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020aa:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_UART_MspInit+0x1b0>)
 80020ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b0:	4a2a      	ldr	r2, [pc, #168]	; (800215c <HAL_UART_MspInit+0x1b0>)
 80020b2:	f043 0320 	orr.w	r3, r3, #32
 80020b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ba:	4b28      	ldr	r3, [pc, #160]	; (800215c <HAL_UART_MspInit+0x1b0>)
 80020bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020c8:	23c0      	movs	r3, #192	; 0xc0
 80020ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80020e0:	2307      	movs	r3, #7
 80020e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020ea:	4619      	mov	r1, r3
 80020ec:	481e      	ldr	r0, [pc, #120]	; (8002168 <HAL_UART_MspInit+0x1bc>)
 80020ee:	f003 fc29 	bl	8005944 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream1;
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_UART_MspInit+0x1c0>)
 80020f4:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <HAL_UART_MspInit+0x1c4>)
 80020f6:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80020f8:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_UART_MspInit+0x1c0>)
 80020fa:	224f      	movs	r2, #79	; 0x4f
 80020fc:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_UART_MspInit+0x1c0>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_UART_MspInit+0x1c0>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_UART_MspInit+0x1c0>)
 800210c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002110:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_UART_MspInit+0x1c0>)
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_UART_MspInit+0x1c0>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_UART_MspInit+0x1c0>)
 8002120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002124:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_UART_MspInit+0x1c0>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HAL_UART_MspInit+0x1c0>)
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002132:	480e      	ldr	r0, [pc, #56]	; (800216c <HAL_UART_MspInit+0x1c0>)
 8002134:	f001 fb2e 	bl	8003794 <HAL_DMA_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_UART_MspInit+0x196>
      Error_Handler();
 800213e:	f7ff faa3 	bl	8001688 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a09      	ldr	r2, [pc, #36]	; (800216c <HAL_UART_MspInit+0x1c0>)
 8002146:	67da      	str	r2, [r3, #124]	; 0x7c
 8002148:	4a08      	ldr	r2, [pc, #32]	; (800216c <HAL_UART_MspInit+0x1c0>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800214e:	bf00      	nop
 8002150:	37e8      	adds	r7, #232	; 0xe8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40005000 	.word	0x40005000
 800215c:	58024400 	.word	0x58024400
 8002160:	58020400 	.word	0x58020400
 8002164:	40007800 	.word	0x40007800
 8002168:	58021400 	.word	0x58021400
 800216c:	240009a4 	.word	0x240009a4
 8002170:	40020028 	.word	0x40020028

08002174 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b0b8      	sub	sp, #224	; 0xe0
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	22bc      	movs	r2, #188	; 0xbc
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f00a f827 	bl	800c1e8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a2f      	ldr	r2, [pc, #188]	; (800225c <HAL_PCD_MspInit+0xe8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d156      	bne.n	8002252 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80021a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80021aa:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80021ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 fee0 	bl	8006f7c <HAL_RCCEx_PeriphCLKConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80021c2:	f7ff fa61 	bl	8001688 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80021c6:	f003 ff2d 	bl	8006024 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_PCD_MspInit+0xec>)
 80021cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d0:	4a23      	ldr	r2, [pc, #140]	; (8002260 <HAL_PCD_MspInit+0xec>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HAL_PCD_MspInit+0xec>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80021e8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80021ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002202:	230a      	movs	r3, #10
 8002204:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800220c:	4619      	mov	r1, r3
 800220e:	4815      	ldr	r0, [pc, #84]	; (8002264 <HAL_PCD_MspInit+0xf0>)
 8002210:	f003 fb98 	bl	8005944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002218:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800222c:	4619      	mov	r1, r3
 800222e:	480d      	ldr	r0, [pc, #52]	; (8002264 <HAL_PCD_MspInit+0xf0>)
 8002230:	f003 fb88 	bl	8005944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_PCD_MspInit+0xec>)
 8002236:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_PCD_MspInit+0xec>)
 800223c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002240:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_PCD_MspInit+0xec>)
 8002246:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800224a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002252:	bf00      	nop
 8002254:	37e0      	adds	r7, #224	; 0xe0
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40080000 	.word	0x40080000
 8002260:	58024400 	.word	0x58024400
 8002264:	58020000 	.word	0x58020000

08002268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800226c:	e7fe      	b.n	800226c <NMI_Handler+0x4>

0800226e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002272:	e7fe      	b.n	8002272 <HardFault_Handler+0x4>

08002274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <MemManage_Handler+0x4>

0800227a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <BusFault_Handler+0x4>

08002280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <UsageFault_Handler+0x4>

08002286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b4:	f000 f95e 	bl	8002574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80022c0:	2010      	movs	r0, #16
 80022c2:	f003 fd08 	bl	8005cd6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <DMA1_Stream1_IRQHandler+0x10>)
 80022d2:	f001 fdbb 	bl	8003e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	240009a4 	.word	0x240009a4

080022e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80022e4:	2020      	movs	r0, #32
 80022e6:	f003 fcf6 	bl	8005cd6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80022ea:	2040      	movs	r0, #64	; 0x40
 80022ec:	f003 fcf3 	bl	8005cd6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80022f0:	2080      	movs	r0, #128	; 0x80
 80022f2:	f003 fcf0 	bl	8005cd6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM4_IRQHandler+0x10>)
 8002302:	f007 fbc9 	bl	8009a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	240002dc 	.word	0x240002dc

08002310 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <BDMA_Channel0_IRQHandler+0x10>)
 8002316:	f001 fd99 	bl	8003e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2400077c 	.word	0x2400077c

08002324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <SystemInit+0xec>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	4a38      	ldr	r2, [pc, #224]	; (8002410 <SystemInit+0xec>)
 8002330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002338:	4b36      	ldr	r3, [pc, #216]	; (8002414 <SystemInit+0xf0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	2b06      	cmp	r3, #6
 8002342:	d807      	bhi.n	8002354 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002344:	4b33      	ldr	r3, [pc, #204]	; (8002414 <SystemInit+0xf0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 030f 	bic.w	r3, r3, #15
 800234c:	4a31      	ldr	r2, [pc, #196]	; (8002414 <SystemInit+0xf0>)
 800234e:	f043 0307 	orr.w	r3, r3, #7
 8002352:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002354:	4b30      	ldr	r3, [pc, #192]	; (8002418 <SystemInit+0xf4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <SystemInit+0xf4>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <SystemInit+0xf4>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002366:	4b2c      	ldr	r3, [pc, #176]	; (8002418 <SystemInit+0xf4>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	492b      	ldr	r1, [pc, #172]	; (8002418 <SystemInit+0xf4>)
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <SystemInit+0xf8>)
 800236e:	4013      	ands	r3, r2
 8002370:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002372:	4b28      	ldr	r3, [pc, #160]	; (8002414 <SystemInit+0xf0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <SystemInit+0xf0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 030f 	bic.w	r3, r3, #15
 8002386:	4a23      	ldr	r2, [pc, #140]	; (8002414 <SystemInit+0xf0>)
 8002388:	f043 0307 	orr.w	r3, r3, #7
 800238c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800238e:	4b22      	ldr	r3, [pc, #136]	; (8002418 <SystemInit+0xf4>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002394:	4b20      	ldr	r3, [pc, #128]	; (8002418 <SystemInit+0xf4>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800239a:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <SystemInit+0xf4>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <SystemInit+0xf4>)
 80023a2:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <SystemInit+0xfc>)
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <SystemInit+0xf4>)
 80023a8:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <SystemInit+0x100>)
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <SystemInit+0xf4>)
 80023ae:	4a1e      	ldr	r2, [pc, #120]	; (8002428 <SystemInit+0x104>)
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023b2:	4b19      	ldr	r3, [pc, #100]	; (8002418 <SystemInit+0xf4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023b8:	4b17      	ldr	r3, [pc, #92]	; (8002418 <SystemInit+0xf4>)
 80023ba:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <SystemInit+0x104>)
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <SystemInit+0xf4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <SystemInit+0xf4>)
 80023c6:	4a18      	ldr	r2, [pc, #96]	; (8002428 <SystemInit+0x104>)
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <SystemInit+0xf4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <SystemInit+0xf4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a10      	ldr	r2, [pc, #64]	; (8002418 <SystemInit+0xf4>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <SystemInit+0xf4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <SystemInit+0x108>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <SystemInit+0x10c>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023ee:	d202      	bcs.n	80023f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80023f0:	4b10      	ldr	r3, [pc, #64]	; (8002434 <SystemInit+0x110>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <SystemInit+0x114>)
 80023f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80023fc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SystemInit+0xec>)
 8002400:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002404:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00
 8002414:	52002000 	.word	0x52002000
 8002418:	58024400 	.word	0x58024400
 800241c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002420:	02020200 	.word	0x02020200
 8002424:	01ff0000 	.word	0x01ff0000
 8002428:	01010280 	.word	0x01010280
 800242c:	5c001000 	.word	0x5c001000
 8002430:	ffff0000 	.word	0xffff0000
 8002434:	51008108 	.word	0x51008108
 8002438:	52004000 	.word	0x52004000

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002474 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002440:	f7ff ff70 	bl	8002324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002444:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002446:	e003      	b.n	8002450 <LoopCopyDataInit>

08002448 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800244a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800244c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800244e:	3104      	adds	r1, #4

08002450 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002450:	480a      	ldr	r0, [pc, #40]	; (800247c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002454:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002456:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002458:	d3f6      	bcc.n	8002448 <CopyDataInit>
  ldr  r2, =_sbss
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800245c:	e002      	b.n	8002464 <LoopFillZerobss>

0800245e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800245e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002460:	f842 3b04 	str.w	r3, [r2], #4

08002464 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002466:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002468:	d3f9      	bcc.n	800245e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246a:	f009 fe99 	bl	800c1a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7fe f95b 	bl	8000728 <main>
  bx  lr    
 8002472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002474:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002478:	0800c260 	.word	0x0800c260
  ldr  r0, =_sdata
 800247c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002480:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8002484:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8002488:	24000cbc 	.word	0x24000cbc

0800248c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC3_IRQHandler>
	...

08002490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002496:	2003      	movs	r0, #3
 8002498:	f001 f93c 	bl	8003714 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800249c:	f004 fb98 	bl	8006bd0 <HAL_RCC_GetSysClockFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_Init+0x68>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	4913      	ldr	r1, [pc, #76]	; (80024fc <HAL_Init+0x6c>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_Init+0x68>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	4a0e      	ldr	r2, [pc, #56]	; (80024fc <HAL_Init+0x6c>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <HAL_Init+0x70>)
 80024d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HAL_Init+0x74>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024da:	2000      	movs	r0, #0
 80024dc:	f000 f814 	bl	8002508 <HAL_InitTick>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e002      	b.n	80024f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024ea:	f7ff f8d3 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	58024400 	.word	0x58024400
 80024fc:	0800c210 	.word	0x0800c210
 8002500:	24000004 	.word	0x24000004
 8002504:	24000000 	.word	0x24000000

08002508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_InitTick+0x60>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e021      	b.n	8002560 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_InitTick+0x64>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_InitTick+0x60>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252a:	fbb3 f3f1 	udiv	r3, r3, r1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f001 f921 	bl	800377a <HAL_SYSTICK_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e00e      	b.n	8002560 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d80a      	bhi.n	800255e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002548:	2200      	movs	r2, #0
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f001 f8eb 	bl	800372a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002554:	4a06      	ldr	r2, [pc, #24]	; (8002570 <HAL_InitTick+0x68>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	2400000c 	.word	0x2400000c
 800256c:	24000000 	.word	0x24000000
 8002570:	24000008 	.word	0x24000008

08002574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_IncTick+0x20>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_IncTick+0x24>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4413      	add	r3, r2
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_IncTick+0x24>)
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	2400000c 	.word	0x2400000c
 8002598:	24000cb8 	.word	0x24000cb8

0800259c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return uwTick;
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <HAL_GetTick+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	24000cb8 	.word	0x24000cb8

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff ffee 	bl	800259c <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffde 	bl	800259c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2400000c 	.word	0x2400000c

080025fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_GetREVID+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0c1b      	lsrs	r3, r3, #16
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	5c001000 	.word	0x5c001000

08002614 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002624:	4904      	ldr	r1, [pc, #16]	; (8002638 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	58000400 	.word	0x58000400

0800263c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	43db      	mvns	r3, r3
 800264e:	401a      	ands	r2, r3
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	58000400 	.word	0x58000400

08002668 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	609a      	str	r2, [r3, #8]
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3360      	adds	r3, #96	; 0x60
 80026e2:	461a      	mov	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	431a      	orrs	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002704:	bf00      	nop
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	431a      	orrs	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	611a      	str	r2, [r3, #16]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002742:	b480      	push	{r7}
 8002744:	b087      	sub	sp, #28
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	3360      	adds	r3, #96	; 0x60
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	431a      	orrs	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	601a      	str	r2, [r3, #0]
  }
}
 800276c:	bf00      	nop
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3330      	adds	r3, #48	; 0x30
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	4413      	add	r3, r2
 8002796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	211f      	movs	r1, #31
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	401a      	ands	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	0e9b      	lsrs	r3, r3, #26
 80027b0:	f003 011f 	and.w	r1, r3, #31
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	431a      	orrs	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027c4:	bf00      	nop
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3314      	adds	r3, #20
 80027e0:	461a      	mov	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	0e5b      	lsrs	r3, r3, #25
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	4413      	add	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	0d1b      	lsrs	r3, r3, #20
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	2107      	movs	r1, #7
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	401a      	ands	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	0d1b      	lsrs	r3, r3, #20
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	431a      	orrs	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800281a:	bf00      	nop
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002840:	43db      	mvns	r3, r3
 8002842:	401a      	ands	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0318 	and.w	r3, r3, #24
 800284a:	4908      	ldr	r1, [pc, #32]	; (800286c <LL_ADC_SetChannelSingleDiff+0x44>)
 800284c:	40d9      	lsrs	r1, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	400b      	ands	r3, r1
 8002852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002856:	431a      	orrs	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	000fffff 	.word	0x000fffff

08002870 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <LL_ADC_DisableDeepPowerDown+0x20>)
 800287e:	4013      	ands	r3, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6093      	str	r3, [r2, #8]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	5fffffc0 	.word	0x5fffffc0

08002894 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a8:	d101      	bne.n	80028ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	6fffffc0 	.word	0x6fffffc0

080028e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028f8:	d101      	bne.n	80028fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <LL_ADC_IsEnabled+0x18>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <LL_ADC_IsEnabled+0x1a>
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d101      	bne.n	800294a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b08      	cmp	r3, #8
 800296a:	d101      	bne.n	8002970 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e18e      	b.n	8002cb8 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d109      	bne.n	80029bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7fe fe8d 	bl	80016c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff67 	bl	8002894 <LL_ADC_IsDeepPowerDownEnabled>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff4d 	bl	8002870 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff82 	bl	80028e4 <LL_ADC_IsInternalRegulatorEnabled>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d114      	bne.n	8002a10 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff66 	bl	80028bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f0:	4b9a      	ldr	r3, [pc, #616]	; (8002c5c <HAL_ADC_Init+0x2dc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	4a9a      	ldr	r2, [pc, #616]	; (8002c60 <HAL_ADC_Init+0x2e0>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	3301      	adds	r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a02:	e002      	b.n	8002a0a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f9      	bne.n	8002a04 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff65 	bl	80028e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f043 0210 	orr.w	r2, r3, #16
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a30:	f043 0201 	orr.w	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff76 	bl	8002932 <LL_ADC_REG_IsConversionOngoing>
 8002a46:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f040 8128 	bne.w	8002ca6 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f040 8124 	bne.w	8002ca6 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a62:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a66:	f043 0202 	orr.w	r2, r3, #2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ff4a 	bl	800290c <LL_ADC_IsEnabled>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d136      	bne.n	8002aec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a78      	ldr	r2, [pc, #480]	; (8002c64 <HAL_ADC_Init+0x2e4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d004      	beq.n	8002a92 <HAL_ADC_Init+0x112>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a76      	ldr	r2, [pc, #472]	; (8002c68 <HAL_ADC_Init+0x2e8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10e      	bne.n	8002ab0 <HAL_ADC_Init+0x130>
 8002a92:	4874      	ldr	r0, [pc, #464]	; (8002c64 <HAL_ADC_Init+0x2e4>)
 8002a94:	f7ff ff3a 	bl	800290c <LL_ADC_IsEnabled>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	4873      	ldr	r0, [pc, #460]	; (8002c68 <HAL_ADC_Init+0x2e8>)
 8002a9c:	f7ff ff36 	bl	800290c <LL_ADC_IsEnabled>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4323      	orrs	r3, r4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e008      	b.n	8002ac2 <HAL_ADC_Init+0x142>
 8002ab0:	486e      	ldr	r0, [pc, #440]	; (8002c6c <HAL_ADC_Init+0x2ec>)
 8002ab2:	f7ff ff2b 	bl	800290c <LL_ADC_IsEnabled>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a66      	ldr	r2, [pc, #408]	; (8002c64 <HAL_ADC_Init+0x2e4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d004      	beq.n	8002ada <HAL_ADC_Init+0x15a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a64      	ldr	r2, [pc, #400]	; (8002c68 <HAL_ADC_Init+0x2e8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_Init+0x15e>
 8002ada:	4a65      	ldr	r2, [pc, #404]	; (8002c70 <HAL_ADC_Init+0x2f0>)
 8002adc:	e000      	b.n	8002ae0 <HAL_ADC_Init+0x160>
 8002ade:	4a65      	ldr	r2, [pc, #404]	; (8002c74 <HAL_ADC_Init+0x2f4>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f7ff fdbe 	bl	8002668 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002aec:	f7ff fd86 	bl	80025fc <HAL_GetREVID>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d914      	bls.n	8002b24 <HAL_ADC_Init+0x1a4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b10      	cmp	r3, #16
 8002b00:	d110      	bne.n	8002b24 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7d5b      	ldrb	r3, [r3, #21]
 8002b06:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b0c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002b12:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7f1b      	ldrb	r3, [r3, #28]
 8002b18:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002b1a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b1c:	f043 030c 	orr.w	r3, r3, #12
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e00d      	b.n	8002b40 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	7d5b      	ldrb	r3, [r3, #21]
 8002b28:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b2e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002b34:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7f1b      	ldrb	r3, [r3, #28]
 8002b3a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7f1b      	ldrb	r3, [r3, #28]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d106      	bne.n	8002b56 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	045b      	lsls	r3, r3, #17
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_ADC_Init+0x2f8>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	69b9      	ldr	r1, [r7, #24]
 8002b82:	430b      	orrs	r3, r1
 8002b84:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fed1 	bl	8002932 <LL_ADC_REG_IsConversionOngoing>
 8002b90:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fede 	bl	8002958 <LL_ADC_INJ_IsConversionOngoing>
 8002b9c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d14a      	bne.n	8002c3a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d147      	bne.n	8002c3a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	7d1b      	ldrb	r3, [r3, #20]
 8002bae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <HAL_ADC_Init+0x2fc>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	69b9      	ldr	r1, [r7, #24]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d11b      	bne.n	8002c0e <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_ADC_Init+0x300>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bea:	3a01      	subs	r2, #1
 8002bec:	0411      	lsls	r1, r2, #16
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bf2:	4311      	orrs	r1, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bf8:	4311      	orrs	r1, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	611a      	str	r2, [r3, #16]
 8002c0c:	e007      	b.n	8002c1e <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fb93 	bl	8003360 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d120      	bne.n	8002c84 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	f023 010f 	bic.w	r1, r3, #15
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
 8002c5a:	e01b      	b.n	8002c94 <HAL_ADC_Init+0x314>
 8002c5c:	24000000 	.word	0x24000000
 8002c60:	053e2d63 	.word	0x053e2d63
 8002c64:	40022000 	.word	0x40022000
 8002c68:	40022100 	.word	0x40022100
 8002c6c:	58026000 	.word	0x58026000
 8002c70:	40022300 	.word	0x40022300
 8002c74:	58026300 	.word	0x58026300
 8002c78:	fff0c003 	.word	0xfff0c003
 8002c7c:	ffffbffc 	.word	0xffffbffc
 8002c80:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 020f 	bic.w	r2, r2, #15
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	f023 0303 	bic.w	r3, r3, #3
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54
 8002ca4:	e007      	b.n	8002cb6 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f043 0210 	orr.w	r2, r3, #16
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3724      	adds	r7, #36	; 0x24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd90      	pop	{r4, r7, pc}

08002cc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b0a1      	sub	sp, #132	; 0x84
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a9d      	ldr	r2, [pc, #628]	; (8002f50 <HAL_ADC_ConfigChannel+0x290>)
 8002cda:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x2a>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e321      	b.n	800332e <HAL_ADC_ConfigChannel+0x66e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fe1b 	bl	8002932 <LL_ADC_REG_IsConversionOngoing>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 8306 	bne.w	8003310 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d108      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x62>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	e016      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x90>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d32:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e003      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	69d1      	ldr	r1, [r2, #28]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f7ff fd04 	bl	8002778 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fddc 	bl	8002932 <LL_ADC_REG_IsConversionOngoing>
 8002d7a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fde9 	bl	8002958 <LL_ADC_INJ_IsConversionOngoing>
 8002d86:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f040 80b3 	bne.w	8002ef6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 80af 	bne.w	8002ef6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	461a      	mov	r2, r3
 8002da6:	f7ff fd13 	bl	80027d0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002daa:	4b6a      	ldr	r3, [pc, #424]	; (8002f54 <HAL_ADC_ConfigChannel+0x294>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002db6:	d10b      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x110>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	e01d      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x14c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10b      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x136>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	e00a      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x14c>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d027      	beq.n	8002e66 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6919      	ldr	r1, [r3, #16]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e24:	f7ff fc54 	bl	80026d0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6919      	ldr	r1, [r3, #16]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	7e5b      	ldrb	r3, [r3, #25]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d102      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x17e>
 8002e38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e3c:	e000      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x180>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	461a      	mov	r2, r3
 8002e42:	f7ff fc7e 	bl	8002742 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6919      	ldr	r1, [r3, #16]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	7e1b      	ldrb	r3, [r3, #24]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d102      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x19c>
 8002e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e5a:	e000      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x19e>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f7ff fc56 	bl	8002710 <LL_ADC_SetDataRightShift>
 8002e64:	e047      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	069b      	lsls	r3, r3, #26
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d107      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e88:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	069b      	lsls	r3, r3, #26
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d107      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002eac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	069b      	lsls	r3, r3, #26
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ed0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	069b      	lsls	r3, r3, #26
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d107      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ef4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fd06 	bl	800290c <LL_ADC_IsEnabled>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 820d 	bne.w	8003322 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	461a      	mov	r2, r3
 8002f16:	f7ff fc87 	bl	8002828 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	4a0c      	ldr	r2, [pc, #48]	; (8002f50 <HAL_ADC_ConfigChannel+0x290>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	f040 8133 	bne.w	800318c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d110      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x298>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	0e9b      	lsrs	r3, r3, #26
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2b09      	cmp	r3, #9
 8002f44:	bf94      	ite	ls
 8002f46:	2301      	movls	r3, #1
 8002f48:	2300      	movhi	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	e01e      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x2cc>
 8002f4e:	bf00      	nop
 8002f50:	47ff0000 	.word	0x47ff0000
 8002f54:	5c001000 	.word	0x5c001000
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e003      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2b09      	cmp	r3, #9
 8002f84:	bf94      	ite	ls
 8002f86:	2301      	movls	r3, #1
 8002f88:	2300      	movhi	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d079      	beq.n	8003084 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d107      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x2ec>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	0e9b      	lsrs	r3, r3, #26
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	069b      	lsls	r3, r3, #26
 8002fa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002faa:	e015      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x318>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fbc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	e003      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	069b      	lsls	r3, r3, #26
 8002fd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x338>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	3301      	adds	r3, #1
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	e017      	b.n	8003028 <HAL_ADC_ConfigChannel+0x368>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003008:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800300a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003010:	2320      	movs	r3, #32
 8003012:	e003      	b.n	800301c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f303 	lsl.w	r3, r1, r3
 8003028:	ea42 0103 	orr.w	r1, r2, r3
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <HAL_ADC_ConfigChannel+0x38e>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	3301      	adds	r3, #1
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	051b      	lsls	r3, r3, #20
 800304c:	e018      	b.n	8003080 <HAL_ADC_ConfigChannel+0x3c0>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003066:	2320      	movs	r3, #32
 8003068:	e003      	b.n	8003072 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	3301      	adds	r3, #1
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003080:	430b      	orrs	r3, r1
 8003082:	e07e      	b.n	8003182 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800308c:	2b00      	cmp	r3, #0
 800308e:	d107      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x3e0>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0e9b      	lsrs	r3, r3, #26
 8003096:	3301      	adds	r3, #1
 8003098:	069b      	lsls	r3, r3, #26
 800309a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800309e:	e015      	b.n	80030cc <HAL_ADC_ConfigChannel+0x40c>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80030b8:	2320      	movs	r3, #32
 80030ba:	e003      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	069b      	lsls	r3, r3, #26
 80030c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x42c>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	3301      	adds	r3, #1
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	e017      	b.n	800311c <HAL_ADC_ConfigChannel+0x45c>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	61bb      	str	r3, [r7, #24]
  return result;
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e003      	b.n	8003110 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	ea42 0103 	orr.w	r1, r2, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10d      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x488>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0e9b      	lsrs	r3, r3, #26
 8003132:	3301      	adds	r3, #1
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4613      	mov	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	3b1e      	subs	r3, #30
 8003140:	051b      	lsls	r3, r3, #20
 8003142:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003146:	e01b      	b.n	8003180 <HAL_ADC_ConfigChannel+0x4c0>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	60fb      	str	r3, [r7, #12]
  return result;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003160:	2320      	movs	r3, #32
 8003162:	e003      	b.n	800316c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	3301      	adds	r3, #1
 800316e:	f003 021f 	and.w	r2, r3, #31
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	3b1e      	subs	r3, #30
 800317a:	051b      	lsls	r3, r3, #20
 800317c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003180:	430b      	orrs	r3, r1
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	6892      	ldr	r2, [r2, #8]
 8003186:	4619      	mov	r1, r3
 8003188:	f7ff fb22 	bl	80027d0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f280 80c6 	bge.w	8003322 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a67      	ldr	r2, [pc, #412]	; (8003338 <HAL_ADC_ConfigChannel+0x678>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x4ea>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a65      	ldr	r2, [pc, #404]	; (800333c <HAL_ADC_ConfigChannel+0x67c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x4ee>
 80031aa:	4b65      	ldr	r3, [pc, #404]	; (8003340 <HAL_ADC_ConfigChannel+0x680>)
 80031ac:	e000      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x4f0>
 80031ae:	4b65      	ldr	r3, [pc, #404]	; (8003344 <HAL_ADC_ConfigChannel+0x684>)
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fa7f 	bl	80026b4 <LL_ADC_GetCommonPathInternalCh>
 80031b6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a5e      	ldr	r2, [pc, #376]	; (8003338 <HAL_ADC_ConfigChannel+0x678>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_ADC_ConfigChannel+0x50c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a5d      	ldr	r2, [pc, #372]	; (800333c <HAL_ADC_ConfigChannel+0x67c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d10e      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x52a>
 80031cc:	485a      	ldr	r0, [pc, #360]	; (8003338 <HAL_ADC_ConfigChannel+0x678>)
 80031ce:	f7ff fb9d 	bl	800290c <LL_ADC_IsEnabled>
 80031d2:	4604      	mov	r4, r0
 80031d4:	4859      	ldr	r0, [pc, #356]	; (800333c <HAL_ADC_ConfigChannel+0x67c>)
 80031d6:	f7ff fb99 	bl	800290c <LL_ADC_IsEnabled>
 80031da:	4603      	mov	r3, r0
 80031dc:	4323      	orrs	r3, r4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e008      	b.n	80031fc <HAL_ADC_ConfigChannel+0x53c>
 80031ea:	4857      	ldr	r0, [pc, #348]	; (8003348 <HAL_ADC_ConfigChannel+0x688>)
 80031ec:	f7ff fb8e 	bl	800290c <LL_ADC_IsEnabled>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d07d      	beq.n	80032fc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a51      	ldr	r2, [pc, #324]	; (800334c <HAL_ADC_ConfigChannel+0x68c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d130      	bne.n	800326c <HAL_ADC_ConfigChannel+0x5ac>
 800320a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d12b      	bne.n	800326c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a4b      	ldr	r2, [pc, #300]	; (8003348 <HAL_ADC_ConfigChannel+0x688>)
 800321a:	4293      	cmp	r3, r2
 800321c:	f040 8081 	bne.w	8003322 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a44      	ldr	r2, [pc, #272]	; (8003338 <HAL_ADC_ConfigChannel+0x678>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_ADC_ConfigChannel+0x574>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a43      	ldr	r2, [pc, #268]	; (800333c <HAL_ADC_ConfigChannel+0x67c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d101      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x578>
 8003234:	4a42      	ldr	r2, [pc, #264]	; (8003340 <HAL_ADC_ConfigChannel+0x680>)
 8003236:	e000      	b.n	800323a <HAL_ADC_ConfigChannel+0x57a>
 8003238:	4a42      	ldr	r2, [pc, #264]	; (8003344 <HAL_ADC_ConfigChannel+0x684>)
 800323a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f7ff fa23 	bl	800268e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003248:	4b41      	ldr	r3, [pc, #260]	; (8003350 <HAL_ADC_ConfigChannel+0x690>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	099b      	lsrs	r3, r3, #6
 800324e:	4a41      	ldr	r2, [pc, #260]	; (8003354 <HAL_ADC_ConfigChannel+0x694>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	099b      	lsrs	r3, r3, #6
 8003256:	3301      	adds	r3, #1
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800325c:	e002      	b.n	8003264 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	3b01      	subs	r3, #1
 8003262:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f9      	bne.n	800325e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800326a:	e05a      	b.n	8003322 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a39      	ldr	r2, [pc, #228]	; (8003358 <HAL_ADC_ConfigChannel+0x698>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d11e      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x5f4>
 8003276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d119      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a30      	ldr	r2, [pc, #192]	; (8003348 <HAL_ADC_ConfigChannel+0x688>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d14b      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2a      	ldr	r2, [pc, #168]	; (8003338 <HAL_ADC_ConfigChannel+0x678>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_ADC_ConfigChannel+0x5de>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a28      	ldr	r2, [pc, #160]	; (800333c <HAL_ADC_ConfigChannel+0x67c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x5e2>
 800329e:	4a28      	ldr	r2, [pc, #160]	; (8003340 <HAL_ADC_ConfigChannel+0x680>)
 80032a0:	e000      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x5e4>
 80032a2:	4a28      	ldr	r2, [pc, #160]	; (8003344 <HAL_ADC_ConfigChannel+0x684>)
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f7ff f9ee 	bl	800268e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032b2:	e036      	b.n	8003322 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a28      	ldr	r2, [pc, #160]	; (800335c <HAL_ADC_ConfigChannel+0x69c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d131      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x662>
 80032be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d12c      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <HAL_ADC_ConfigChannel+0x688>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d127      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <HAL_ADC_ConfigChannel+0x678>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x626>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a16      	ldr	r2, [pc, #88]	; (800333c <HAL_ADC_ConfigChannel+0x67c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x62a>
 80032e6:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_ADC_ConfigChannel+0x680>)
 80032e8:	e000      	b.n	80032ec <HAL_ADC_ConfigChannel+0x62c>
 80032ea:	4a16      	ldr	r2, [pc, #88]	; (8003344 <HAL_ADC_ConfigChannel+0x684>)
 80032ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f7ff f9ca 	bl	800268e <LL_ADC_SetCommonPathInternalCh>
 80032fa:	e012      	b.n	8003322 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800330e:	e008      	b.n	8003322 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800332a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800332e:	4618      	mov	r0, r3
 8003330:	3784      	adds	r7, #132	; 0x84
 8003332:	46bd      	mov	sp, r7
 8003334:	bd90      	pop	{r4, r7, pc}
 8003336:	bf00      	nop
 8003338:	40022000 	.word	0x40022000
 800333c:	40022100 	.word	0x40022100
 8003340:	40022300 	.word	0x40022300
 8003344:	58026300 	.word	0x58026300
 8003348:	58026000 	.word	0x58026000
 800334c:	cb840000 	.word	0xcb840000
 8003350:	24000000 	.word	0x24000000
 8003354:	053e2d63 	.word	0x053e2d63
 8003358:	c7520000 	.word	0xc7520000
 800335c:	cfb80000 	.word	0xcfb80000

08003360 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a79      	ldr	r2, [pc, #484]	; (8003554 <ADC_ConfigureBoostMode+0x1f4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <ADC_ConfigureBoostMode+0x1c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a78      	ldr	r2, [pc, #480]	; (8003558 <ADC_ConfigureBoostMode+0x1f8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d109      	bne.n	8003390 <ADC_ConfigureBoostMode+0x30>
 800337c:	4b77      	ldr	r3, [pc, #476]	; (800355c <ADC_ConfigureBoostMode+0x1fc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e008      	b.n	80033a2 <ADC_ConfigureBoostMode+0x42>
 8003390:	4b73      	ldr	r3, [pc, #460]	; (8003560 <ADC_ConfigureBoostMode+0x200>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf14      	ite	ne
 800339c:	2301      	movne	r3, #1
 800339e:	2300      	moveq	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d01c      	beq.n	80033e0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80033a6:	f003 fd8d 	bl	8006ec4 <HAL_RCC_GetHCLKFreq>
 80033aa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033b4:	d010      	beq.n	80033d8 <ADC_ConfigureBoostMode+0x78>
 80033b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033ba:	d871      	bhi.n	80034a0 <ADC_ConfigureBoostMode+0x140>
 80033bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c0:	d002      	beq.n	80033c8 <ADC_ConfigureBoostMode+0x68>
 80033c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c6:	d16b      	bne.n	80034a0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	60fb      	str	r3, [r7, #12]
        break;
 80033d6:	e066      	b.n	80034a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	60fb      	str	r3, [r7, #12]
        break;
 80033de:	e062      	b.n	80034a6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80033e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80033e4:	f004 fd0a 	bl	8007dfc <HAL_RCCEx_GetPeriphCLKFreq>
 80033e8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80033f2:	d051      	beq.n	8003498 <ADC_ConfigureBoostMode+0x138>
 80033f4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80033f8:	d854      	bhi.n	80034a4 <ADC_ConfigureBoostMode+0x144>
 80033fa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80033fe:	d047      	beq.n	8003490 <ADC_ConfigureBoostMode+0x130>
 8003400:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003404:	d84e      	bhi.n	80034a4 <ADC_ConfigureBoostMode+0x144>
 8003406:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800340a:	d03d      	beq.n	8003488 <ADC_ConfigureBoostMode+0x128>
 800340c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003410:	d848      	bhi.n	80034a4 <ADC_ConfigureBoostMode+0x144>
 8003412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003416:	d033      	beq.n	8003480 <ADC_ConfigureBoostMode+0x120>
 8003418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800341c:	d842      	bhi.n	80034a4 <ADC_ConfigureBoostMode+0x144>
 800341e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003422:	d029      	beq.n	8003478 <ADC_ConfigureBoostMode+0x118>
 8003424:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003428:	d83c      	bhi.n	80034a4 <ADC_ConfigureBoostMode+0x144>
 800342a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800342e:	d01a      	beq.n	8003466 <ADC_ConfigureBoostMode+0x106>
 8003430:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003434:	d836      	bhi.n	80034a4 <ADC_ConfigureBoostMode+0x144>
 8003436:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800343a:	d014      	beq.n	8003466 <ADC_ConfigureBoostMode+0x106>
 800343c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003440:	d830      	bhi.n	80034a4 <ADC_ConfigureBoostMode+0x144>
 8003442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003446:	d00e      	beq.n	8003466 <ADC_ConfigureBoostMode+0x106>
 8003448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800344c:	d82a      	bhi.n	80034a4 <ADC_ConfigureBoostMode+0x144>
 800344e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003452:	d008      	beq.n	8003466 <ADC_ConfigureBoostMode+0x106>
 8003454:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003458:	d824      	bhi.n	80034a4 <ADC_ConfigureBoostMode+0x144>
 800345a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800345e:	d002      	beq.n	8003466 <ADC_ConfigureBoostMode+0x106>
 8003460:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003464:	d11e      	bne.n	80034a4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	0c9b      	lsrs	r3, r3, #18
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	60fb      	str	r3, [r7, #12]
        break;
 8003476:	e016      	b.n	80034a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	60fb      	str	r3, [r7, #12]
        break;
 800347e:	e012      	b.n	80034a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	60fb      	str	r3, [r7, #12]
        break;
 8003486:	e00e      	b.n	80034a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	099b      	lsrs	r3, r3, #6
 800348c:	60fb      	str	r3, [r7, #12]
        break;
 800348e:	e00a      	b.n	80034a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	09db      	lsrs	r3, r3, #7
 8003494:	60fb      	str	r3, [r7, #12]
        break;
 8003496:	e006      	b.n	80034a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	60fb      	str	r3, [r7, #12]
        break;
 800349e:	e002      	b.n	80034a6 <ADC_ConfigureBoostMode+0x146>
        break;
 80034a0:	bf00      	nop
 80034a2:	e000      	b.n	80034a6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80034a4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80034a6:	f7ff f8a9 	bl	80025fc <HAL_GetREVID>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d815      	bhi.n	80034e0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a2b      	ldr	r2, [pc, #172]	; (8003564 <ADC_ConfigureBoostMode+0x204>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d908      	bls.n	80034ce <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ca:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80034cc:	e03e      	b.n	800354c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034dc:	609a      	str	r2, [r3, #8]
}
 80034de:	e035      	b.n	800354c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <ADC_ConfigureBoostMode+0x208>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d808      	bhi.n	8003500 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034fc:	609a      	str	r2, [r3, #8]
}
 80034fe:	e025      	b.n	800354c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a1a      	ldr	r2, [pc, #104]	; (800356c <ADC_ConfigureBoostMode+0x20c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d80a      	bhi.n	800351e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351a:	609a      	str	r2, [r3, #8]
}
 800351c:	e016      	b.n	800354c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4a13      	ldr	r2, [pc, #76]	; (8003570 <ADC_ConfigureBoostMode+0x210>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d80a      	bhi.n	800353c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003538:	609a      	str	r2, [r3, #8]
}
 800353a:	e007      	b.n	800354c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800354a:	609a      	str	r2, [r3, #8]
}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40022000 	.word	0x40022000
 8003558:	40022100 	.word	0x40022100
 800355c:	40022300 	.word	0x40022300
 8003560:	58026300 	.word	0x58026300
 8003564:	01312d00 	.word	0x01312d00
 8003568:	005f5e10 	.word	0x005f5e10
 800356c:	00bebc20 	.word	0x00bebc20
 8003570:	017d7840 	.word	0x017d7840

08003574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <__NVIC_SetPriorityGrouping+0x40>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a2:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <__NVIC_SetPriorityGrouping+0x40>)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	60d3      	str	r3, [r2, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00
 80035b8:	05fa0000 	.word	0x05fa0000

080035bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <__NVIC_GetPriorityGrouping+0x18>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0307 	and.w	r3, r3, #7
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db0b      	blt.n	8003602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4907      	ldr	r1, [pc, #28]	; (8003610 <__NVIC_EnableIRQ+0x38>)
 80035f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2001      	movs	r0, #1
 80035fa:	fa00 f202 	lsl.w	r2, r0, r2
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000e100 	.word	0xe000e100

08003614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	; (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	; (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f1c3 0307 	rsb	r3, r3, #7
 8003682:	2b04      	cmp	r3, #4
 8003684:	bf28      	it	cs
 8003686:	2304      	movcs	r3, #4
 8003688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3304      	adds	r3, #4
 800368e:	2b06      	cmp	r3, #6
 8003690:	d902      	bls.n	8003698 <NVIC_EncodePriority+0x30>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3b03      	subs	r3, #3
 8003696:	e000      	b.n	800369a <NVIC_EncodePriority+0x32>
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	f04f 32ff 	mov.w	r2, #4294967295
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	401a      	ands	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b0:	f04f 31ff 	mov.w	r1, #4294967295
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43d9      	mvns	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	4313      	orrs	r3, r2
         );
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e0:	d301      	bcc.n	80036e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e2:	2301      	movs	r3, #1
 80036e4:	e00f      	b.n	8003706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e6:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <SysTick_Config+0x40>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ee:	210f      	movs	r1, #15
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	f7ff ff8e 	bl	8003614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <SysTick_Config+0x40>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <SysTick_Config+0x40>)
 8003700:	2207      	movs	r2, #7
 8003702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	e000e010 	.word	0xe000e010

08003714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ff29 	bl	8003574 <__NVIC_SetPriorityGrouping>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003738:	f7ff ff40 	bl	80035bc <__NVIC_GetPriorityGrouping>
 800373c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f7ff ff90 	bl	8003668 <NVIC_EncodePriority>
 8003748:	4602      	mov	r2, r0
 800374a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff5f 	bl	8003614 <__NVIC_SetPriority>
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff33 	bl	80035d8 <__NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffa4 	bl	80036d0 <SysTick_Config>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800379c:	f7fe fefe 	bl	800259c <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e316      	b.n	8003dda <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a66      	ldr	r2, [pc, #408]	; (800394c <HAL_DMA_Init+0x1b8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d04a      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a65      	ldr	r2, [pc, #404]	; (8003950 <HAL_DMA_Init+0x1bc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d045      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a63      	ldr	r2, [pc, #396]	; (8003954 <HAL_DMA_Init+0x1c0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d040      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a62      	ldr	r2, [pc, #392]	; (8003958 <HAL_DMA_Init+0x1c4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d03b      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a60      	ldr	r2, [pc, #384]	; (800395c <HAL_DMA_Init+0x1c8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d036      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a5f      	ldr	r2, [pc, #380]	; (8003960 <HAL_DMA_Init+0x1cc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d031      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a5d      	ldr	r2, [pc, #372]	; (8003964 <HAL_DMA_Init+0x1d0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02c      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a5c      	ldr	r2, [pc, #368]	; (8003968 <HAL_DMA_Init+0x1d4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d027      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a5a      	ldr	r2, [pc, #360]	; (800396c <HAL_DMA_Init+0x1d8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d022      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a59      	ldr	r2, [pc, #356]	; (8003970 <HAL_DMA_Init+0x1dc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d01d      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a57      	ldr	r2, [pc, #348]	; (8003974 <HAL_DMA_Init+0x1e0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_DMA_Init+0xb8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a56      	ldr	r2, [pc, #344]	; (8003978 <HAL_DMA_Init+0x1e4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a54      	ldr	r2, [pc, #336]	; (800397c <HAL_DMA_Init+0x1e8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_DMA_Init+0xb8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a53      	ldr	r2, [pc, #332]	; (8003980 <HAL_DMA_Init+0x1ec>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a51      	ldr	r2, [pc, #324]	; (8003984 <HAL_DMA_Init+0x1f0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a50      	ldr	r2, [pc, #320]	; (8003988 <HAL_DMA_Init+0x1f4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_DMA_Init+0xbc>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_DMA_Init+0xbe>
 8003850:	2300      	movs	r3, #0
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 813b 	beq.w	8003ace <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a37      	ldr	r2, [pc, #220]	; (800394c <HAL_DMA_Init+0x1b8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04a      	beq.n	8003908 <HAL_DMA_Init+0x174>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a36      	ldr	r2, [pc, #216]	; (8003950 <HAL_DMA_Init+0x1bc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d045      	beq.n	8003908 <HAL_DMA_Init+0x174>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a34      	ldr	r2, [pc, #208]	; (8003954 <HAL_DMA_Init+0x1c0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d040      	beq.n	8003908 <HAL_DMA_Init+0x174>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a33      	ldr	r2, [pc, #204]	; (8003958 <HAL_DMA_Init+0x1c4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d03b      	beq.n	8003908 <HAL_DMA_Init+0x174>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a31      	ldr	r2, [pc, #196]	; (800395c <HAL_DMA_Init+0x1c8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d036      	beq.n	8003908 <HAL_DMA_Init+0x174>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a30      	ldr	r2, [pc, #192]	; (8003960 <HAL_DMA_Init+0x1cc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d031      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2e      	ldr	r2, [pc, #184]	; (8003964 <HAL_DMA_Init+0x1d0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02c      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2d      	ldr	r2, [pc, #180]	; (8003968 <HAL_DMA_Init+0x1d4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d027      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2b      	ldr	r2, [pc, #172]	; (800396c <HAL_DMA_Init+0x1d8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <HAL_DMA_Init+0x1dc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01d      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a28      	ldr	r2, [pc, #160]	; (8003974 <HAL_DMA_Init+0x1e0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a27      	ldr	r2, [pc, #156]	; (8003978 <HAL_DMA_Init+0x1e4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a25      	ldr	r2, [pc, #148]	; (800397c <HAL_DMA_Init+0x1e8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a24      	ldr	r2, [pc, #144]	; (8003980 <HAL_DMA_Init+0x1ec>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a22      	ldr	r2, [pc, #136]	; (8003984 <HAL_DMA_Init+0x1f0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a21      	ldr	r2, [pc, #132]	; (8003988 <HAL_DMA_Init+0x1f4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d108      	bne.n	800391a <HAL_DMA_Init+0x186>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e007      	b.n	800392a <HAL_DMA_Init+0x196>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800392a:	e02f      	b.n	800398c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800392c:	f7fe fe36 	bl	800259c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b05      	cmp	r3, #5
 8003938:	d928      	bls.n	800398c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2203      	movs	r2, #3
 8003944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e246      	b.n	8003dda <HAL_DMA_Init+0x646>
 800394c:	40020010 	.word	0x40020010
 8003950:	40020028 	.word	0x40020028
 8003954:	40020040 	.word	0x40020040
 8003958:	40020058 	.word	0x40020058
 800395c:	40020070 	.word	0x40020070
 8003960:	40020088 	.word	0x40020088
 8003964:	400200a0 	.word	0x400200a0
 8003968:	400200b8 	.word	0x400200b8
 800396c:	40020410 	.word	0x40020410
 8003970:	40020428 	.word	0x40020428
 8003974:	40020440 	.word	0x40020440
 8003978:	40020458 	.word	0x40020458
 800397c:	40020470 	.word	0x40020470
 8003980:	40020488 	.word	0x40020488
 8003984:	400204a0 	.word	0x400204a0
 8003988:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1c8      	bne.n	800392c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4b83      	ldr	r3, [pc, #524]	; (8003bb4 <HAL_DMA_Init+0x420>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d107      	bne.n	80039f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	4313      	orrs	r3, r2
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80039f0:	4b71      	ldr	r3, [pc, #452]	; (8003bb8 <HAL_DMA_Init+0x424>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b71      	ldr	r3, [pc, #452]	; (8003bbc <HAL_DMA_Init+0x428>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fc:	d328      	bcc.n	8003a50 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b28      	cmp	r3, #40	; 0x28
 8003a04:	d903      	bls.n	8003a0e <HAL_DMA_Init+0x27a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a0c:	d917      	bls.n	8003a3e <HAL_DMA_Init+0x2aa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b3e      	cmp	r3, #62	; 0x3e
 8003a14:	d903      	bls.n	8003a1e <HAL_DMA_Init+0x28a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b42      	cmp	r3, #66	; 0x42
 8003a1c:	d90f      	bls.n	8003a3e <HAL_DMA_Init+0x2aa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b46      	cmp	r3, #70	; 0x46
 8003a24:	d903      	bls.n	8003a2e <HAL_DMA_Init+0x29a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b48      	cmp	r3, #72	; 0x48
 8003a2c:	d907      	bls.n	8003a3e <HAL_DMA_Init+0x2aa>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b4e      	cmp	r3, #78	; 0x4e
 8003a34:	d905      	bls.n	8003a42 <HAL_DMA_Init+0x2ae>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b52      	cmp	r3, #82	; 0x52
 8003a3c:	d801      	bhi.n	8003a42 <HAL_DMA_Init+0x2ae>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_DMA_Init+0x2b0>
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a4e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 0307 	bic.w	r3, r3, #7
 8003a66:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d117      	bne.n	8003aaa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f001 f9b9 	bl	8004e04 <DMA_CheckFifoParam>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2240      	movs	r2, #64	; 0x40
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e197      	b.n	8003dda <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f001 f8f4 	bl	8004ca0 <DMA_CalcBaseAndBitshift>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	223f      	movs	r2, #63	; 0x3f
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	e0cd      	b.n	8003c6a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a3b      	ldr	r2, [pc, #236]	; (8003bc0 <HAL_DMA_Init+0x42c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a39      	ldr	r2, [pc, #228]	; (8003bc4 <HAL_DMA_Init+0x430>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a38      	ldr	r2, [pc, #224]	; (8003bc8 <HAL_DMA_Init+0x434>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a36      	ldr	r2, [pc, #216]	; (8003bcc <HAL_DMA_Init+0x438>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a35      	ldr	r2, [pc, #212]	; (8003bd0 <HAL_DMA_Init+0x43c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a33      	ldr	r2, [pc, #204]	; (8003bd4 <HAL_DMA_Init+0x440>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a32      	ldr	r2, [pc, #200]	; (8003bd8 <HAL_DMA_Init+0x444>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a30      	ldr	r2, [pc, #192]	; (8003bdc <HAL_DMA_Init+0x448>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA_Init+0x38e>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <HAL_DMA_Init+0x390>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8097 	beq.w	8003c58 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <HAL_DMA_Init+0x42c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d021      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <HAL_DMA_Init+0x430>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01c      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <HAL_DMA_Init+0x434>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d017      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <HAL_DMA_Init+0x438>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d012      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <HAL_DMA_Init+0x43c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00d      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_DMA_Init+0x440>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d008      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_DMA_Init+0x444>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <HAL_DMA_Init+0x448>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_DMA_Init+0x44c>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d020      	beq.n	8003be4 <HAL_DMA_Init+0x450>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b80      	cmp	r3, #128	; 0x80
 8003ba8:	d102      	bne.n	8003bb0 <HAL_DMA_Init+0x41c>
 8003baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bae:	e01a      	b.n	8003be6 <HAL_DMA_Init+0x452>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e018      	b.n	8003be6 <HAL_DMA_Init+0x452>
 8003bb4:	fe10803f 	.word	0xfe10803f
 8003bb8:	5c001000 	.word	0x5c001000
 8003bbc:	ffff0000 	.word	0xffff0000
 8003bc0:	58025408 	.word	0x58025408
 8003bc4:	5802541c 	.word	0x5802541c
 8003bc8:	58025430 	.word	0x58025430
 8003bcc:	58025444 	.word	0x58025444
 8003bd0:	58025458 	.word	0x58025458
 8003bd4:	5802546c 	.word	0x5802546c
 8003bd8:	58025480 	.word	0x58025480
 8003bdc:	58025494 	.word	0x58025494
 8003be0:	fffe000f 	.word	0xfffe000f
 8003be4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68d2      	ldr	r2, [r2, #12]
 8003bea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4b6e      	ldr	r3, [pc, #440]	; (8003de4 <HAL_DMA_Init+0x650>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	4a6e      	ldr	r2, [pc, #440]	; (8003de8 <HAL_DMA_Init+0x654>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	009a      	lsls	r2, r3, #2
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f001 f82f 	bl	8004ca0 <DMA_CalcBaseAndBitshift>
 8003c42:	4603      	mov	r3, r0
 8003c44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	2201      	movs	r2, #1
 8003c50:	409a      	lsls	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	e008      	b.n	8003c6a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2240      	movs	r2, #64	; 0x40
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2203      	movs	r2, #3
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e0b7      	b.n	8003dda <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a5f      	ldr	r2, [pc, #380]	; (8003dec <HAL_DMA_Init+0x658>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d072      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a5d      	ldr	r2, [pc, #372]	; (8003df0 <HAL_DMA_Init+0x65c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d06d      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5c      	ldr	r2, [pc, #368]	; (8003df4 <HAL_DMA_Init+0x660>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d068      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5a      	ldr	r2, [pc, #360]	; (8003df8 <HAL_DMA_Init+0x664>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d063      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a59      	ldr	r2, [pc, #356]	; (8003dfc <HAL_DMA_Init+0x668>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d05e      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a57      	ldr	r2, [pc, #348]	; (8003e00 <HAL_DMA_Init+0x66c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d059      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a56      	ldr	r2, [pc, #344]	; (8003e04 <HAL_DMA_Init+0x670>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d054      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a54      	ldr	r2, [pc, #336]	; (8003e08 <HAL_DMA_Init+0x674>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d04f      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a53      	ldr	r2, [pc, #332]	; (8003e0c <HAL_DMA_Init+0x678>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d04a      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a51      	ldr	r2, [pc, #324]	; (8003e10 <HAL_DMA_Init+0x67c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d045      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a50      	ldr	r2, [pc, #320]	; (8003e14 <HAL_DMA_Init+0x680>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d040      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a4e      	ldr	r2, [pc, #312]	; (8003e18 <HAL_DMA_Init+0x684>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d03b      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a4d      	ldr	r2, [pc, #308]	; (8003e1c <HAL_DMA_Init+0x688>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d036      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4b      	ldr	r2, [pc, #300]	; (8003e20 <HAL_DMA_Init+0x68c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d031      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4a      	ldr	r2, [pc, #296]	; (8003e24 <HAL_DMA_Init+0x690>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d02c      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a48      	ldr	r2, [pc, #288]	; (8003e28 <HAL_DMA_Init+0x694>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d027      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a47      	ldr	r2, [pc, #284]	; (8003e2c <HAL_DMA_Init+0x698>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d022      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a45      	ldr	r2, [pc, #276]	; (8003e30 <HAL_DMA_Init+0x69c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01d      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a44      	ldr	r2, [pc, #272]	; (8003e34 <HAL_DMA_Init+0x6a0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d018      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a42      	ldr	r2, [pc, #264]	; (8003e38 <HAL_DMA_Init+0x6a4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a41      	ldr	r2, [pc, #260]	; (8003e3c <HAL_DMA_Init+0x6a8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00e      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3f      	ldr	r2, [pc, #252]	; (8003e40 <HAL_DMA_Init+0x6ac>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d009      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a3e      	ldr	r2, [pc, #248]	; (8003e44 <HAL_DMA_Init+0x6b0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a3c      	ldr	r2, [pc, #240]	; (8003e48 <HAL_DMA_Init+0x6b4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <HAL_DMA_Init+0x5ca>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_DMA_Init+0x5cc>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d032      	beq.n	8003dca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f001 f8c9 	bl	8004efc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b80      	cmp	r3, #128	; 0x80
 8003d70:	d102      	bne.n	8003d78 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d010      	beq.n	8003db8 <HAL_DMA_Init+0x624>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d80c      	bhi.n	8003db8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f001 f946 	bl	8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	e008      	b.n	8003dca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	a7fdabf8 	.word	0xa7fdabf8
 8003de8:	cccccccd 	.word	0xcccccccd
 8003dec:	40020010 	.word	0x40020010
 8003df0:	40020028 	.word	0x40020028
 8003df4:	40020040 	.word	0x40020040
 8003df8:	40020058 	.word	0x40020058
 8003dfc:	40020070 	.word	0x40020070
 8003e00:	40020088 	.word	0x40020088
 8003e04:	400200a0 	.word	0x400200a0
 8003e08:	400200b8 	.word	0x400200b8
 8003e0c:	40020410 	.word	0x40020410
 8003e10:	40020428 	.word	0x40020428
 8003e14:	40020440 	.word	0x40020440
 8003e18:	40020458 	.word	0x40020458
 8003e1c:	40020470 	.word	0x40020470
 8003e20:	40020488 	.word	0x40020488
 8003e24:	400204a0 	.word	0x400204a0
 8003e28:	400204b8 	.word	0x400204b8
 8003e2c:	58025408 	.word	0x58025408
 8003e30:	5802541c 	.word	0x5802541c
 8003e34:	58025430 	.word	0x58025430
 8003e38:	58025444 	.word	0x58025444
 8003e3c:	58025458 	.word	0x58025458
 8003e40:	5802546c 	.word	0x5802546c
 8003e44:	58025480 	.word	0x58025480
 8003e48:	58025494 	.word	0x58025494

08003e4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e58:	4b67      	ldr	r3, [pc, #412]	; (8003ff8 <HAL_DMA_IRQHandler+0x1ac>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a67      	ldr	r2, [pc, #412]	; (8003ffc <HAL_DMA_IRQHandler+0x1b0>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	0a9b      	lsrs	r3, r3, #10
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a5f      	ldr	r2, [pc, #380]	; (8004000 <HAL_DMA_IRQHandler+0x1b4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d04a      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5d      	ldr	r2, [pc, #372]	; (8004004 <HAL_DMA_IRQHandler+0x1b8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d045      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a5c      	ldr	r2, [pc, #368]	; (8004008 <HAL_DMA_IRQHandler+0x1bc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d040      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a5a      	ldr	r2, [pc, #360]	; (800400c <HAL_DMA_IRQHandler+0x1c0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d03b      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a59      	ldr	r2, [pc, #356]	; (8004010 <HAL_DMA_IRQHandler+0x1c4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d036      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a57      	ldr	r2, [pc, #348]	; (8004014 <HAL_DMA_IRQHandler+0x1c8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d031      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a56      	ldr	r2, [pc, #344]	; (8004018 <HAL_DMA_IRQHandler+0x1cc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d02c      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a54      	ldr	r2, [pc, #336]	; (800401c <HAL_DMA_IRQHandler+0x1d0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d027      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a53      	ldr	r2, [pc, #332]	; (8004020 <HAL_DMA_IRQHandler+0x1d4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d022      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a51      	ldr	r2, [pc, #324]	; (8004024 <HAL_DMA_IRQHandler+0x1d8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01d      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a50      	ldr	r2, [pc, #320]	; (8004028 <HAL_DMA_IRQHandler+0x1dc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d018      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a4e      	ldr	r2, [pc, #312]	; (800402c <HAL_DMA_IRQHandler+0x1e0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <HAL_DMA_IRQHandler+0x1e4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a4b      	ldr	r2, [pc, #300]	; (8004034 <HAL_DMA_IRQHandler+0x1e8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a4a      	ldr	r2, [pc, #296]	; (8004038 <HAL_DMA_IRQHandler+0x1ec>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xd2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a48      	ldr	r2, [pc, #288]	; (800403c <HAL_DMA_IRQHandler+0x1f0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <HAL_DMA_IRQHandler+0xd6>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_DMA_IRQHandler+0xd8>
 8003f22:	2300      	movs	r3, #0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 842b 	beq.w	8004780 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	2208      	movs	r2, #8
 8003f34:	409a      	lsls	r2, r3
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80a2 	beq.w	8004084 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a2e      	ldr	r2, [pc, #184]	; (8004000 <HAL_DMA_IRQHandler+0x1b4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d04a      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a2d      	ldr	r2, [pc, #180]	; (8004004 <HAL_DMA_IRQHandler+0x1b8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d045      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a2b      	ldr	r2, [pc, #172]	; (8004008 <HAL_DMA_IRQHandler+0x1bc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d040      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2a      	ldr	r2, [pc, #168]	; (800400c <HAL_DMA_IRQHandler+0x1c0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d03b      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a28      	ldr	r2, [pc, #160]	; (8004010 <HAL_DMA_IRQHandler+0x1c4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d036      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a27      	ldr	r2, [pc, #156]	; (8004014 <HAL_DMA_IRQHandler+0x1c8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d031      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a25      	ldr	r2, [pc, #148]	; (8004018 <HAL_DMA_IRQHandler+0x1cc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d02c      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a24      	ldr	r2, [pc, #144]	; (800401c <HAL_DMA_IRQHandler+0x1d0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d027      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a22      	ldr	r2, [pc, #136]	; (8004020 <HAL_DMA_IRQHandler+0x1d4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d022      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a21      	ldr	r2, [pc, #132]	; (8004024 <HAL_DMA_IRQHandler+0x1d8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d01d      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_DMA_IRQHandler+0x1dc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d018      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1e      	ldr	r2, [pc, #120]	; (800402c <HAL_DMA_IRQHandler+0x1e0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <HAL_DMA_IRQHandler+0x1e4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1b      	ldr	r2, [pc, #108]	; (8004034 <HAL_DMA_IRQHandler+0x1e8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d009      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_DMA_IRQHandler+0x1ec>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_DMA_IRQHandler+0x194>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a18      	ldr	r2, [pc, #96]	; (800403c <HAL_DMA_IRQHandler+0x1f0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d12f      	bne.n	8004040 <HAL_DMA_IRQHandler+0x1f4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	e02e      	b.n	8004054 <HAL_DMA_IRQHandler+0x208>
 8003ff6:	bf00      	nop
 8003ff8:	24000000 	.word	0x24000000
 8003ffc:	1b4e81b5 	.word	0x1b4e81b5
 8004000:	40020010 	.word	0x40020010
 8004004:	40020028 	.word	0x40020028
 8004008:	40020040 	.word	0x40020040
 800400c:	40020058 	.word	0x40020058
 8004010:	40020070 	.word	0x40020070
 8004014:	40020088 	.word	0x40020088
 8004018:	400200a0 	.word	0x400200a0
 800401c:	400200b8 	.word	0x400200b8
 8004020:	40020410 	.word	0x40020410
 8004024:	40020428 	.word	0x40020428
 8004028:	40020440 	.word	0x40020440
 800402c:	40020458 	.word	0x40020458
 8004030:	40020470 	.word	0x40020470
 8004034:	40020488 	.word	0x40020488
 8004038:	400204a0 	.word	0x400204a0
 800403c:	400204b8 	.word	0x400204b8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0204 	bic.w	r2, r2, #4
 8004066:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2208      	movs	r2, #8
 8004072:	409a      	lsls	r2, r3
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	f043 0201 	orr.w	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d06e      	beq.n	8004178 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a69      	ldr	r2, [pc, #420]	; (8004244 <HAL_DMA_IRQHandler+0x3f8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d04a      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a67      	ldr	r2, [pc, #412]	; (8004248 <HAL_DMA_IRQHandler+0x3fc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d045      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a66      	ldr	r2, [pc, #408]	; (800424c <HAL_DMA_IRQHandler+0x400>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d040      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a64      	ldr	r2, [pc, #400]	; (8004250 <HAL_DMA_IRQHandler+0x404>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d03b      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a63      	ldr	r2, [pc, #396]	; (8004254 <HAL_DMA_IRQHandler+0x408>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d036      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a61      	ldr	r2, [pc, #388]	; (8004258 <HAL_DMA_IRQHandler+0x40c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d031      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a60      	ldr	r2, [pc, #384]	; (800425c <HAL_DMA_IRQHandler+0x410>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d02c      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a5e      	ldr	r2, [pc, #376]	; (8004260 <HAL_DMA_IRQHandler+0x414>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d027      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a5d      	ldr	r2, [pc, #372]	; (8004264 <HAL_DMA_IRQHandler+0x418>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d022      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a5b      	ldr	r2, [pc, #364]	; (8004268 <HAL_DMA_IRQHandler+0x41c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d01d      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a5a      	ldr	r2, [pc, #360]	; (800426c <HAL_DMA_IRQHandler+0x420>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d018      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a58      	ldr	r2, [pc, #352]	; (8004270 <HAL_DMA_IRQHandler+0x424>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a57      	ldr	r2, [pc, #348]	; (8004274 <HAL_DMA_IRQHandler+0x428>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00e      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a55      	ldr	r2, [pc, #340]	; (8004278 <HAL_DMA_IRQHandler+0x42c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d009      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a54      	ldr	r2, [pc, #336]	; (800427c <HAL_DMA_IRQHandler+0x430>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_DMA_IRQHandler+0x2ee>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a52      	ldr	r2, [pc, #328]	; (8004280 <HAL_DMA_IRQHandler+0x434>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10a      	bne.n	8004150 <HAL_DMA_IRQHandler+0x304>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e003      	b.n	8004158 <HAL_DMA_IRQHandler+0x30c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	2201      	movs	r2, #1
 8004166:	409a      	lsls	r2, r3
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	f043 0202 	orr.w	r2, r3, #2
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2204      	movs	r2, #4
 8004182:	409a      	lsls	r2, r3
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 808f 	beq.w	80042ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <HAL_DMA_IRQHandler+0x3f8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d04a      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2a      	ldr	r2, [pc, #168]	; (8004248 <HAL_DMA_IRQHandler+0x3fc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d045      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a29      	ldr	r2, [pc, #164]	; (800424c <HAL_DMA_IRQHandler+0x400>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d040      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a27      	ldr	r2, [pc, #156]	; (8004250 <HAL_DMA_IRQHandler+0x404>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d03b      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a26      	ldr	r2, [pc, #152]	; (8004254 <HAL_DMA_IRQHandler+0x408>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d036      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a24      	ldr	r2, [pc, #144]	; (8004258 <HAL_DMA_IRQHandler+0x40c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d031      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a23      	ldr	r2, [pc, #140]	; (800425c <HAL_DMA_IRQHandler+0x410>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d02c      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a21      	ldr	r2, [pc, #132]	; (8004260 <HAL_DMA_IRQHandler+0x414>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d027      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a20      	ldr	r2, [pc, #128]	; (8004264 <HAL_DMA_IRQHandler+0x418>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d022      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <HAL_DMA_IRQHandler+0x41c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d01d      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1d      	ldr	r2, [pc, #116]	; (800426c <HAL_DMA_IRQHandler+0x420>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d018      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_DMA_IRQHandler+0x424>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <HAL_DMA_IRQHandler+0x428>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_DMA_IRQHandler+0x42c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_DMA_IRQHandler+0x430>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_DMA_IRQHandler+0x3e2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a15      	ldr	r2, [pc, #84]	; (8004280 <HAL_DMA_IRQHandler+0x434>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d12a      	bne.n	8004284 <HAL_DMA_IRQHandler+0x438>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e023      	b.n	800428c <HAL_DMA_IRQHandler+0x440>
 8004244:	40020010 	.word	0x40020010
 8004248:	40020028 	.word	0x40020028
 800424c:	40020040 	.word	0x40020040
 8004250:	40020058 	.word	0x40020058
 8004254:	40020070 	.word	0x40020070
 8004258:	40020088 	.word	0x40020088
 800425c:	400200a0 	.word	0x400200a0
 8004260:	400200b8 	.word	0x400200b8
 8004264:	40020410 	.word	0x40020410
 8004268:	40020428 	.word	0x40020428
 800426c:	40020440 	.word	0x40020440
 8004270:	40020458 	.word	0x40020458
 8004274:	40020470 	.word	0x40020470
 8004278:	40020488 	.word	0x40020488
 800427c:	400204a0 	.word	0x400204a0
 8004280:	400204b8 	.word	0x400204b8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00d      	beq.n	80042ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	2204      	movs	r2, #4
 800429a:	409a      	lsls	r2, r3
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f043 0204 	orr.w	r2, r3, #4
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2210      	movs	r2, #16
 80042b6:	409a      	lsls	r2, r3
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80a6 	beq.w	800440e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a85      	ldr	r2, [pc, #532]	; (80044dc <HAL_DMA_IRQHandler+0x690>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d04a      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a83      	ldr	r2, [pc, #524]	; (80044e0 <HAL_DMA_IRQHandler+0x694>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d045      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a82      	ldr	r2, [pc, #520]	; (80044e4 <HAL_DMA_IRQHandler+0x698>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d040      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a80      	ldr	r2, [pc, #512]	; (80044e8 <HAL_DMA_IRQHandler+0x69c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d03b      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7f      	ldr	r2, [pc, #508]	; (80044ec <HAL_DMA_IRQHandler+0x6a0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d036      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7d      	ldr	r2, [pc, #500]	; (80044f0 <HAL_DMA_IRQHandler+0x6a4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d031      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a7c      	ldr	r2, [pc, #496]	; (80044f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d02c      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a7a      	ldr	r2, [pc, #488]	; (80044f8 <HAL_DMA_IRQHandler+0x6ac>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d027      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a79      	ldr	r2, [pc, #484]	; (80044fc <HAL_DMA_IRQHandler+0x6b0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d022      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a77      	ldr	r2, [pc, #476]	; (8004500 <HAL_DMA_IRQHandler+0x6b4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01d      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a76      	ldr	r2, [pc, #472]	; (8004504 <HAL_DMA_IRQHandler+0x6b8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d018      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a74      	ldr	r2, [pc, #464]	; (8004508 <HAL_DMA_IRQHandler+0x6bc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a73      	ldr	r2, [pc, #460]	; (800450c <HAL_DMA_IRQHandler+0x6c0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00e      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a71      	ldr	r2, [pc, #452]	; (8004510 <HAL_DMA_IRQHandler+0x6c4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a70      	ldr	r2, [pc, #448]	; (8004514 <HAL_DMA_IRQHandler+0x6c8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_DMA_IRQHandler+0x516>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6e      	ldr	r2, [pc, #440]	; (8004518 <HAL_DMA_IRQHandler+0x6cc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10a      	bne.n	8004378 <HAL_DMA_IRQHandler+0x52c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e009      	b.n	800438c <HAL_DMA_IRQHandler+0x540>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf14      	ite	ne
 8004386:	2301      	movne	r3, #1
 8004388:	2300      	moveq	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d03e      	beq.n	800440e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2210      	movs	r2, #16
 800439a:	409a      	lsls	r2, r3
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d018      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d108      	bne.n	80043ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d024      	beq.n	800440e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
 80043cc:	e01f      	b.n	800440e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01b      	beq.n	800440e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
 80043de:	e016      	b.n	800440e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d107      	bne.n	80043fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0208 	bic.w	r2, r2, #8
 80043fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2220      	movs	r2, #32
 8004418:	409a      	lsls	r2, r3
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8110 	beq.w	8004644 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <HAL_DMA_IRQHandler+0x690>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d04a      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <HAL_DMA_IRQHandler+0x694>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d045      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a29      	ldr	r2, [pc, #164]	; (80044e4 <HAL_DMA_IRQHandler+0x698>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d040      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a28      	ldr	r2, [pc, #160]	; (80044e8 <HAL_DMA_IRQHandler+0x69c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d03b      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a26      	ldr	r2, [pc, #152]	; (80044ec <HAL_DMA_IRQHandler+0x6a0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d036      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a25      	ldr	r2, [pc, #148]	; (80044f0 <HAL_DMA_IRQHandler+0x6a4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d031      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d02c      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a22      	ldr	r2, [pc, #136]	; (80044f8 <HAL_DMA_IRQHandler+0x6ac>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d027      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a20      	ldr	r2, [pc, #128]	; (80044fc <HAL_DMA_IRQHandler+0x6b0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d022      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_DMA_IRQHandler+0x6b4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d01d      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <HAL_DMA_IRQHandler+0x6b8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1c      	ldr	r2, [pc, #112]	; (8004508 <HAL_DMA_IRQHandler+0x6bc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1a      	ldr	r2, [pc, #104]	; (800450c <HAL_DMA_IRQHandler+0x6c0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a19      	ldr	r2, [pc, #100]	; (8004510 <HAL_DMA_IRQHandler+0x6c4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a17      	ldr	r2, [pc, #92]	; (8004514 <HAL_DMA_IRQHandler+0x6c8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x678>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a16      	ldr	r2, [pc, #88]	; (8004518 <HAL_DMA_IRQHandler+0x6cc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d12b      	bne.n	800451c <HAL_DMA_IRQHandler+0x6d0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e02a      	b.n	8004530 <HAL_DMA_IRQHandler+0x6e4>
 80044da:	bf00      	nop
 80044dc:	40020010 	.word	0x40020010
 80044e0:	40020028 	.word	0x40020028
 80044e4:	40020040 	.word	0x40020040
 80044e8:	40020058 	.word	0x40020058
 80044ec:	40020070 	.word	0x40020070
 80044f0:	40020088 	.word	0x40020088
 80044f4:	400200a0 	.word	0x400200a0
 80044f8:	400200b8 	.word	0x400200b8
 80044fc:	40020410 	.word	0x40020410
 8004500:	40020428 	.word	0x40020428
 8004504:	40020440 	.word	0x40020440
 8004508:	40020458 	.word	0x40020458
 800450c:	40020470 	.word	0x40020470
 8004510:	40020488 	.word	0x40020488
 8004514:	400204a0 	.word	0x400204a0
 8004518:	400204b8 	.word	0x400204b8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	bf14      	ite	ne
 800452a:	2301      	movne	r3, #1
 800452c:	2300      	moveq	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8087 	beq.w	8004644 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2220      	movs	r2, #32
 8004540:	409a      	lsls	r2, r3
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b04      	cmp	r3, #4
 8004550:	d139      	bne.n	80045c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0216 	bic.w	r2, r2, #22
 8004560:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004570:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <HAL_DMA_IRQHandler+0x736>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0208 	bic.w	r2, r2, #8
 8004590:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	223f      	movs	r2, #63	; 0x3f
 800459c:	409a      	lsls	r2, r3
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 834a 	beq.w	8004c50 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
          }
          return;
 80045c4:	e344      	b.n	8004c50 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d018      	beq.n	8004606 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d02c      	beq.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
 80045f2:	e027      	b.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d023      	beq.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
 8004604:	e01e      	b.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10f      	bne.n	8004634 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0210 	bic.w	r2, r2, #16
 8004622:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8306 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8088 	beq.w	800476c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2204      	movs	r2, #4
 8004660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a7a      	ldr	r2, [pc, #488]	; (8004854 <HAL_DMA_IRQHandler+0xa08>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d04a      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a79      	ldr	r2, [pc, #484]	; (8004858 <HAL_DMA_IRQHandler+0xa0c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d045      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a77      	ldr	r2, [pc, #476]	; (800485c <HAL_DMA_IRQHandler+0xa10>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d040      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a76      	ldr	r2, [pc, #472]	; (8004860 <HAL_DMA_IRQHandler+0xa14>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d03b      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a74      	ldr	r2, [pc, #464]	; (8004864 <HAL_DMA_IRQHandler+0xa18>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d036      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a73      	ldr	r2, [pc, #460]	; (8004868 <HAL_DMA_IRQHandler+0xa1c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d031      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a71      	ldr	r2, [pc, #452]	; (800486c <HAL_DMA_IRQHandler+0xa20>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d02c      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a70      	ldr	r2, [pc, #448]	; (8004870 <HAL_DMA_IRQHandler+0xa24>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d027      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6e      	ldr	r2, [pc, #440]	; (8004874 <HAL_DMA_IRQHandler+0xa28>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d022      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6d      	ldr	r2, [pc, #436]	; (8004878 <HAL_DMA_IRQHandler+0xa2c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d01d      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a6b      	ldr	r2, [pc, #428]	; (800487c <HAL_DMA_IRQHandler+0xa30>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6a      	ldr	r2, [pc, #424]	; (8004880 <HAL_DMA_IRQHandler+0xa34>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a68      	ldr	r2, [pc, #416]	; (8004884 <HAL_DMA_IRQHandler+0xa38>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a67      	ldr	r2, [pc, #412]	; (8004888 <HAL_DMA_IRQHandler+0xa3c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a65      	ldr	r2, [pc, #404]	; (800488c <HAL_DMA_IRQHandler+0xa40>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_DMA_IRQHandler+0x8b8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a64      	ldr	r2, [pc, #400]	; (8004890 <HAL_DMA_IRQHandler+0xa44>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d108      	bne.n	8004716 <HAL_DMA_IRQHandler+0x8ca>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e007      	b.n	8004726 <HAL_DMA_IRQHandler+0x8da>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3301      	adds	r3, #1
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472e:	429a      	cmp	r2, r3
 8004730:	d307      	bcc.n	8004742 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f2      	bne.n	8004726 <HAL_DMA_IRQHandler+0x8da>
 8004740:	e000      	b.n	8004744 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004742:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2203      	movs	r2, #3
 800475e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004762:	e003      	b.n	800476c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8272 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	4798      	blx	r3
 800477e:	e26c      	b.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a43      	ldr	r2, [pc, #268]	; (8004894 <HAL_DMA_IRQHandler+0xa48>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d022      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a42      	ldr	r2, [pc, #264]	; (8004898 <HAL_DMA_IRQHandler+0xa4c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d01d      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a40      	ldr	r2, [pc, #256]	; (800489c <HAL_DMA_IRQHandler+0xa50>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d018      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a3f      	ldr	r2, [pc, #252]	; (80048a0 <HAL_DMA_IRQHandler+0xa54>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d013      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a3d      	ldr	r2, [pc, #244]	; (80048a4 <HAL_DMA_IRQHandler+0xa58>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00e      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a3c      	ldr	r2, [pc, #240]	; (80048a8 <HAL_DMA_IRQHandler+0xa5c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d009      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a3a      	ldr	r2, [pc, #232]	; (80048ac <HAL_DMA_IRQHandler+0xa60>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x984>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a39      	ldr	r2, [pc, #228]	; (80048b0 <HAL_DMA_IRQHandler+0xa64>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d101      	bne.n	80047d4 <HAL_DMA_IRQHandler+0x988>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <HAL_DMA_IRQHandler+0x98a>
 80047d4:	2300      	movs	r3, #0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 823f 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	2204      	movs	r2, #4
 80047ee:	409a      	lsls	r2, r3
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80cd 	beq.w	8004994 <HAL_DMA_IRQHandler+0xb48>
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80c7 	beq.w	8004994 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	f003 031f 	and.w	r3, r3, #31
 800480e:	2204      	movs	r2, #4
 8004810:	409a      	lsls	r2, r3
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d049      	beq.n	80048b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8210 	beq.w	8004c54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800483c:	e20a      	b.n	8004c54 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8206 	beq.w	8004c54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004850:	e200      	b.n	8004c54 <HAL_DMA_IRQHandler+0xe08>
 8004852:	bf00      	nop
 8004854:	40020010 	.word	0x40020010
 8004858:	40020028 	.word	0x40020028
 800485c:	40020040 	.word	0x40020040
 8004860:	40020058 	.word	0x40020058
 8004864:	40020070 	.word	0x40020070
 8004868:	40020088 	.word	0x40020088
 800486c:	400200a0 	.word	0x400200a0
 8004870:	400200b8 	.word	0x400200b8
 8004874:	40020410 	.word	0x40020410
 8004878:	40020428 	.word	0x40020428
 800487c:	40020440 	.word	0x40020440
 8004880:	40020458 	.word	0x40020458
 8004884:	40020470 	.word	0x40020470
 8004888:	40020488 	.word	0x40020488
 800488c:	400204a0 	.word	0x400204a0
 8004890:	400204b8 	.word	0x400204b8
 8004894:	58025408 	.word	0x58025408
 8004898:	5802541c 	.word	0x5802541c
 800489c:	58025430 	.word	0x58025430
 80048a0:	58025444 	.word	0x58025444
 80048a4:	58025458 	.word	0x58025458
 80048a8:	5802546c 	.word	0x5802546c
 80048ac:	58025480 	.word	0x58025480
 80048b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d160      	bne.n	8004980 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a8c      	ldr	r2, [pc, #560]	; (8004af4 <HAL_DMA_IRQHandler+0xca8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d04a      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a8a      	ldr	r2, [pc, #552]	; (8004af8 <HAL_DMA_IRQHandler+0xcac>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d045      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a89      	ldr	r2, [pc, #548]	; (8004afc <HAL_DMA_IRQHandler+0xcb0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d040      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a87      	ldr	r2, [pc, #540]	; (8004b00 <HAL_DMA_IRQHandler+0xcb4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d03b      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a86      	ldr	r2, [pc, #536]	; (8004b04 <HAL_DMA_IRQHandler+0xcb8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d036      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a84      	ldr	r2, [pc, #528]	; (8004b08 <HAL_DMA_IRQHandler+0xcbc>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d031      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a83      	ldr	r2, [pc, #524]	; (8004b0c <HAL_DMA_IRQHandler+0xcc0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d02c      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a81      	ldr	r2, [pc, #516]	; (8004b10 <HAL_DMA_IRQHandler+0xcc4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d027      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a80      	ldr	r2, [pc, #512]	; (8004b14 <HAL_DMA_IRQHandler+0xcc8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d022      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a7e      	ldr	r2, [pc, #504]	; (8004b18 <HAL_DMA_IRQHandler+0xccc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01d      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7d      	ldr	r2, [pc, #500]	; (8004b1c <HAL_DMA_IRQHandler+0xcd0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d018      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a7b      	ldr	r2, [pc, #492]	; (8004b20 <HAL_DMA_IRQHandler+0xcd4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a7a      	ldr	r2, [pc, #488]	; (8004b24 <HAL_DMA_IRQHandler+0xcd8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00e      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a78      	ldr	r2, [pc, #480]	; (8004b28 <HAL_DMA_IRQHandler+0xcdc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d009      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a77      	ldr	r2, [pc, #476]	; (8004b2c <HAL_DMA_IRQHandler+0xce0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_DMA_IRQHandler+0xb12>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a75      	ldr	r2, [pc, #468]	; (8004b30 <HAL_DMA_IRQHandler+0xce4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d108      	bne.n	8004970 <HAL_DMA_IRQHandler+0xb24>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0208 	bic.w	r2, r2, #8
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	e007      	b.n	8004980 <HAL_DMA_IRQHandler+0xb34>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0204 	bic.w	r2, r2, #4
 800497e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8165 	beq.w	8004c54 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004992:	e15f      	b.n	8004c54 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2202      	movs	r2, #2
 800499e:	409a      	lsls	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80c5 	beq.w	8004b34 <HAL_DMA_IRQHandler+0xce8>
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80bf 	beq.w	8004b34 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	2202      	movs	r2, #2
 80049c0:	409a      	lsls	r2, r3
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d018      	beq.n	8004a02 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 813a 	beq.w	8004c58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ec:	e134      	b.n	8004c58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8130 	beq.w	8004c58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a00:	e12a      	b.n	8004c58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d168      	bne.n	8004ade <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a38      	ldr	r2, [pc, #224]	; (8004af4 <HAL_DMA_IRQHandler+0xca8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d04a      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a37      	ldr	r2, [pc, #220]	; (8004af8 <HAL_DMA_IRQHandler+0xcac>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d045      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a35      	ldr	r2, [pc, #212]	; (8004afc <HAL_DMA_IRQHandler+0xcb0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d040      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a34      	ldr	r2, [pc, #208]	; (8004b00 <HAL_DMA_IRQHandler+0xcb4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d03b      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a32      	ldr	r2, [pc, #200]	; (8004b04 <HAL_DMA_IRQHandler+0xcb8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d036      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a31      	ldr	r2, [pc, #196]	; (8004b08 <HAL_DMA_IRQHandler+0xcbc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d031      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2f      	ldr	r2, [pc, #188]	; (8004b0c <HAL_DMA_IRQHandler+0xcc0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02c      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2e      	ldr	r2, [pc, #184]	; (8004b10 <HAL_DMA_IRQHandler+0xcc4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d027      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <HAL_DMA_IRQHandler+0xcc8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d022      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2b      	ldr	r2, [pc, #172]	; (8004b18 <HAL_DMA_IRQHandler+0xccc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d01d      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a29      	ldr	r2, [pc, #164]	; (8004b1c <HAL_DMA_IRQHandler+0xcd0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d018      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a28      	ldr	r2, [pc, #160]	; (8004b20 <HAL_DMA_IRQHandler+0xcd4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a26      	ldr	r2, [pc, #152]	; (8004b24 <HAL_DMA_IRQHandler+0xcd8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a25      	ldr	r2, [pc, #148]	; (8004b28 <HAL_DMA_IRQHandler+0xcdc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a23      	ldr	r2, [pc, #140]	; (8004b2c <HAL_DMA_IRQHandler+0xce0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_DMA_IRQHandler+0xc60>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a22      	ldr	r2, [pc, #136]	; (8004b30 <HAL_DMA_IRQHandler+0xce4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d108      	bne.n	8004abe <HAL_DMA_IRQHandler+0xc72>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0214 	bic.w	r2, r2, #20
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e007      	b.n	8004ace <HAL_DMA_IRQHandler+0xc82>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 020a 	bic.w	r2, r2, #10
 8004acc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80b8 	beq.w	8004c58 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004af0:	e0b2      	b.n	8004c58 <HAL_DMA_IRQHandler+0xe0c>
 8004af2:	bf00      	nop
 8004af4:	40020010 	.word	0x40020010
 8004af8:	40020028 	.word	0x40020028
 8004afc:	40020040 	.word	0x40020040
 8004b00:	40020058 	.word	0x40020058
 8004b04:	40020070 	.word	0x40020070
 8004b08:	40020088 	.word	0x40020088
 8004b0c:	400200a0 	.word	0x400200a0
 8004b10:	400200b8 	.word	0x400200b8
 8004b14:	40020410 	.word	0x40020410
 8004b18:	40020428 	.word	0x40020428
 8004b1c:	40020440 	.word	0x40020440
 8004b20:	40020458 	.word	0x40020458
 8004b24:	40020470 	.word	0x40020470
 8004b28:	40020488 	.word	0x40020488
 8004b2c:	400204a0 	.word	0x400204a0
 8004b30:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8088 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8082 	beq.w	8004c5a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a41      	ldr	r2, [pc, #260]	; (8004c60 <HAL_DMA_IRQHandler+0xe14>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d04a      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a3f      	ldr	r2, [pc, #252]	; (8004c64 <HAL_DMA_IRQHandler+0xe18>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d045      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a3e      	ldr	r2, [pc, #248]	; (8004c68 <HAL_DMA_IRQHandler+0xe1c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d040      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3c      	ldr	r2, [pc, #240]	; (8004c6c <HAL_DMA_IRQHandler+0xe20>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d03b      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a3b      	ldr	r2, [pc, #236]	; (8004c70 <HAL_DMA_IRQHandler+0xe24>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d036      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a39      	ldr	r2, [pc, #228]	; (8004c74 <HAL_DMA_IRQHandler+0xe28>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d031      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <HAL_DMA_IRQHandler+0xe2c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d02c      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a36      	ldr	r2, [pc, #216]	; (8004c7c <HAL_DMA_IRQHandler+0xe30>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d027      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a35      	ldr	r2, [pc, #212]	; (8004c80 <HAL_DMA_IRQHandler+0xe34>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d022      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a33      	ldr	r2, [pc, #204]	; (8004c84 <HAL_DMA_IRQHandler+0xe38>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01d      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a32      	ldr	r2, [pc, #200]	; (8004c88 <HAL_DMA_IRQHandler+0xe3c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d018      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <HAL_DMA_IRQHandler+0xe40>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d013      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2f      	ldr	r2, [pc, #188]	; (8004c90 <HAL_DMA_IRQHandler+0xe44>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	; (8004c94 <HAL_DMA_IRQHandler+0xe48>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d009      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <HAL_DMA_IRQHandler+0xe4c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d004      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xdaa>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	; (8004c9c <HAL_DMA_IRQHandler+0xe50>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d108      	bne.n	8004c08 <HAL_DMA_IRQHandler+0xdbc>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 021c 	bic.w	r2, r2, #28
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e007      	b.n	8004c18 <HAL_DMA_IRQHandler+0xdcc>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 020e 	bic.w	r2, r2, #14
 8004c16:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2201      	movs	r2, #1
 8004c22:	409a      	lsls	r2, r3
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
 8004c4e:	e004      	b.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c50:	bf00      	nop
 8004c52:	e002      	b.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c58:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c5a:	3728      	adds	r7, #40	; 0x28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40020010 	.word	0x40020010
 8004c64:	40020028 	.word	0x40020028
 8004c68:	40020040 	.word	0x40020040
 8004c6c:	40020058 	.word	0x40020058
 8004c70:	40020070 	.word	0x40020070
 8004c74:	40020088 	.word	0x40020088
 8004c78:	400200a0 	.word	0x400200a0
 8004c7c:	400200b8 	.word	0x400200b8
 8004c80:	40020410 	.word	0x40020410
 8004c84:	40020428 	.word	0x40020428
 8004c88:	40020440 	.word	0x40020440
 8004c8c:	40020458 	.word	0x40020458
 8004c90:	40020470 	.word	0x40020470
 8004c94:	40020488 	.word	0x40020488
 8004c98:	400204a0 	.word	0x400204a0
 8004c9c:	400204b8 	.word	0x400204b8

08004ca0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a42      	ldr	r2, [pc, #264]	; (8004db8 <DMA_CalcBaseAndBitshift+0x118>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d04a      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a41      	ldr	r2, [pc, #260]	; (8004dbc <DMA_CalcBaseAndBitshift+0x11c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d045      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a3f      	ldr	r2, [pc, #252]	; (8004dc0 <DMA_CalcBaseAndBitshift+0x120>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d040      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3e      	ldr	r2, [pc, #248]	; (8004dc4 <DMA_CalcBaseAndBitshift+0x124>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d03b      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a3c      	ldr	r2, [pc, #240]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x128>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d036      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a3b      	ldr	r2, [pc, #236]	; (8004dcc <DMA_CalcBaseAndBitshift+0x12c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d031      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a39      	ldr	r2, [pc, #228]	; (8004dd0 <DMA_CalcBaseAndBitshift+0x130>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02c      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a38      	ldr	r2, [pc, #224]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x134>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d027      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a36      	ldr	r2, [pc, #216]	; (8004dd8 <DMA_CalcBaseAndBitshift+0x138>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d022      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a35      	ldr	r2, [pc, #212]	; (8004ddc <DMA_CalcBaseAndBitshift+0x13c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d01d      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a33      	ldr	r2, [pc, #204]	; (8004de0 <DMA_CalcBaseAndBitshift+0x140>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d018      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a32      	ldr	r2, [pc, #200]	; (8004de4 <DMA_CalcBaseAndBitshift+0x144>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a30      	ldr	r2, [pc, #192]	; (8004de8 <DMA_CalcBaseAndBitshift+0x148>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00e      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a2f      	ldr	r2, [pc, #188]	; (8004dec <DMA_CalcBaseAndBitshift+0x14c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d009      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a2d      	ldr	r2, [pc, #180]	; (8004df0 <DMA_CalcBaseAndBitshift+0x150>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <DMA_CalcBaseAndBitshift+0xa8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a2c      	ldr	r2, [pc, #176]	; (8004df4 <DMA_CalcBaseAndBitshift+0x154>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d101      	bne.n	8004d4c <DMA_CalcBaseAndBitshift+0xac>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <DMA_CalcBaseAndBitshift+0xae>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d024      	beq.n	8004d9c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	3b10      	subs	r3, #16
 8004d5a:	4a27      	ldr	r2, [pc, #156]	; (8004df8 <DMA_CalcBaseAndBitshift+0x158>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	4a24      	ldr	r2, [pc, #144]	; (8004dfc <DMA_CalcBaseAndBitshift+0x15c>)
 8004d6c:	5cd3      	ldrb	r3, [r2, r3]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d908      	bls.n	8004d8c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4b1f      	ldr	r3, [pc, #124]	; (8004e00 <DMA_CalcBaseAndBitshift+0x160>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	1d1a      	adds	r2, r3, #4
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	659a      	str	r2, [r3, #88]	; 0x58
 8004d8a:	e00d      	b.n	8004da8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <DMA_CalcBaseAndBitshift+0x160>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6593      	str	r3, [r2, #88]	; 0x58
 8004d9a:	e005      	b.n	8004da8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40020010 	.word	0x40020010
 8004dbc:	40020028 	.word	0x40020028
 8004dc0:	40020040 	.word	0x40020040
 8004dc4:	40020058 	.word	0x40020058
 8004dc8:	40020070 	.word	0x40020070
 8004dcc:	40020088 	.word	0x40020088
 8004dd0:	400200a0 	.word	0x400200a0
 8004dd4:	400200b8 	.word	0x400200b8
 8004dd8:	40020410 	.word	0x40020410
 8004ddc:	40020428 	.word	0x40020428
 8004de0:	40020440 	.word	0x40020440
 8004de4:	40020458 	.word	0x40020458
 8004de8:	40020470 	.word	0x40020470
 8004dec:	40020488 	.word	0x40020488
 8004df0:	400204a0 	.word	0x400204a0
 8004df4:	400204b8 	.word	0x400204b8
 8004df8:	aaaaaaab 	.word	0xaaaaaaab
 8004dfc:	0800c220 	.word	0x0800c220
 8004e00:	fffffc00 	.word	0xfffffc00

08004e04 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d120      	bne.n	8004e5a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d858      	bhi.n	8004ed2 <DMA_CheckFifoParam+0xce>
 8004e20:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <DMA_CheckFifoParam+0x24>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e4b 	.word	0x08004e4b
 8004e30:	08004e39 	.word	0x08004e39
 8004e34:	08004ed3 	.word	0x08004ed3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d048      	beq.n	8004ed6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e48:	e045      	b.n	8004ed6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e52:	d142      	bne.n	8004eda <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e58:	e03f      	b.n	8004eda <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e62:	d123      	bne.n	8004eac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d838      	bhi.n	8004ede <DMA_CheckFifoParam+0xda>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <DMA_CheckFifoParam+0x70>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e8b 	.word	0x08004e8b
 8004e7c:	08004e85 	.word	0x08004e85
 8004e80:	08004e9d 	.word	0x08004e9d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
        break;
 8004e88:	e030      	b.n	8004eec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d025      	beq.n	8004ee2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e9a:	e022      	b.n	8004ee2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ea4:	d11f      	bne.n	8004ee6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eaa:	e01c      	b.n	8004ee6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d902      	bls.n	8004eba <DMA_CheckFifoParam+0xb6>
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d003      	beq.n	8004ec0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004eb8:	e018      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ebe:	e015      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00e      	beq.n	8004eea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
    break;
 8004ed0:	e00b      	b.n	8004eea <DMA_CheckFifoParam+0xe6>
        break;
 8004ed2:	bf00      	nop
 8004ed4:	e00a      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e008      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        break;
 8004eda:	bf00      	nop
 8004edc:	e006      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e004      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e002      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
        break;
 8004ee6:	bf00      	nop
 8004ee8:	e000      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
    break;
 8004eea:	bf00      	nop
    }
  }

  return status;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop

08004efc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a38      	ldr	r2, [pc, #224]	; (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d022      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a36      	ldr	r2, [pc, #216]	; (8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d01d      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a35      	ldr	r2, [pc, #212]	; (8004ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d018      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a33      	ldr	r2, [pc, #204]	; (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a32      	ldr	r2, [pc, #200]	; (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00e      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a30      	ldr	r2, [pc, #192]	; (8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2f      	ldr	r2, [pc, #188]	; (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a2d      	ldr	r2, [pc, #180]	; (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d101      	bne.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01a      	beq.n	8004f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	3b08      	subs	r3, #8
 8004f6c:	4a28      	ldr	r2, [pc, #160]	; (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4b26      	ldr	r3, [pc, #152]	; (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	461a      	mov	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a24      	ldr	r2, [pc, #144]	; (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	2201      	movs	r2, #1
 8004f92:	409a      	lsls	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f98:	e024      	b.n	8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	3b10      	subs	r3, #16
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	; (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d806      	bhi.n	8004fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4a1b      	ldr	r2, [pc, #108]	; (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d902      	bls.n	8004fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4b18      	ldr	r3, [pc, #96]	; (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	461a      	mov	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a16      	ldr	r2, [pc, #88]	; (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004fd4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	2201      	movs	r2, #1
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	58025408 	.word	0x58025408
 8004ff4:	5802541c 	.word	0x5802541c
 8004ff8:	58025430 	.word	0x58025430
 8004ffc:	58025444 	.word	0x58025444
 8005000:	58025458 	.word	0x58025458
 8005004:	5802546c 	.word	0x5802546c
 8005008:	58025480 	.word	0x58025480
 800500c:	58025494 	.word	0x58025494
 8005010:	cccccccd 	.word	0xcccccccd
 8005014:	16009600 	.word	0x16009600
 8005018:	58025880 	.word	0x58025880
 800501c:	aaaaaaab 	.word	0xaaaaaaab
 8005020:	400204b8 	.word	0x400204b8
 8005024:	4002040f 	.word	0x4002040f
 8005028:	10008200 	.word	0x10008200
 800502c:	40020880 	.word	0x40020880

08005030 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d04a      	beq.n	80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d847      	bhi.n	80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a25      	ldr	r2, [pc, #148]	; (80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d022      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a24      	ldr	r2, [pc, #144]	; (80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d01d      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a22      	ldr	r2, [pc, #136]	; (80050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a21      	ldr	r2, [pc, #132]	; (80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1f      	ldr	r2, [pc, #124]	; (80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1c      	ldr	r2, [pc, #112]	; (8005100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d101      	bne.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4b17      	ldr	r3, [pc, #92]	; (8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	461a      	mov	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a15      	ldr	r2, [pc, #84]	; (800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050b8:	671a      	str	r2, [r3, #112]	; 0x70
 80050ba:	e009      	b.n	80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4b14      	ldr	r3, [pc, #80]	; (8005110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	461a      	mov	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a11      	ldr	r2, [pc, #68]	; (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	2201      	movs	r2, #1
 80050d6:	409a      	lsls	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	58025408 	.word	0x58025408
 80050ec:	5802541c 	.word	0x5802541c
 80050f0:	58025430 	.word	0x58025430
 80050f4:	58025444 	.word	0x58025444
 80050f8:	58025458 	.word	0x58025458
 80050fc:	5802546c 	.word	0x5802546c
 8005100:	58025480 	.word	0x58025480
 8005104:	58025494 	.word	0x58025494
 8005108:	1600963f 	.word	0x1600963f
 800510c:	58025940 	.word	0x58025940
 8005110:	1000823f 	.word	0x1000823f
 8005114:	40020940 	.word	0x40020940

08005118 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e0c6      	b.n	80052b8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d102      	bne.n	8005138 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fc fb8a 	bl	800184c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2223      	movs	r2, #35	; 0x23
 800513c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800513e:	4b60      	ldr	r3, [pc, #384]	; (80052c0 <HAL_ETH_Init+0x1a8>)
 8005140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005144:	4a5e      	ldr	r2, [pc, #376]	; (80052c0 <HAL_ETH_Init+0x1a8>)
 8005146:	f043 0302 	orr.w	r3, r3, #2
 800514a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800514e:	4b5c      	ldr	r3, [pc, #368]	; (80052c0 <HAL_ETH_Init+0x1a8>)
 8005150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	60bb      	str	r3, [r7, #8]
 800515a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	7a1b      	ldrb	r3, [r3, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005164:	2000      	movs	r0, #0
 8005166:	f7fd fa55 	bl	8002614 <HAL_SYSCFG_ETHInterfaceSelect>
 800516a:	e003      	b.n	8005174 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800516c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005170:	f7fd fa50 	bl	8002614 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800518a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800518c:	f7fd fa06 	bl	800259c <HAL_GetTick>
 8005190:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005192:	e00f      	b.n	80051b4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005194:	f7fd fa02 	bl	800259c <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051a2:	d907      	bls.n	80051b4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2204      	movs	r2, #4
 80051a8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	22e0      	movs	r2, #224	; 0xe0
 80051ae:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e081      	b.n	80052b8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e6      	bne.n	8005194 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fac0 	bl	800574c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80051cc:	f001 fe7a 	bl	8006ec4 <HAL_RCC_GetHCLKFreq>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4a3c      	ldr	r2, [pc, #240]	; (80052c4 <HAL_ETH_Init+0x1ac>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	0c9a      	lsrs	r2, r3, #18
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3a01      	subs	r2, #1
 80051e0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fa13 	bl	8005610 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005200:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005204:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	22e0      	movs	r2, #224	; 0xe0
 800521c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e04a      	b.n	80052b8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	f241 1308 	movw	r3, #4360	; 0x1108
 800522a:	4413      	add	r3, r2
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4b26      	ldr	r3, [pc, #152]	; (80052c8 <HAL_ETH_Init+0x1b0>)
 8005230:	4013      	ands	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6952      	ldr	r2, [r2, #20]
 8005236:	0052      	lsls	r2, r2, #1
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	6809      	ldr	r1, [r1, #0]
 800523c:	431a      	orrs	r2, r3
 800523e:	f241 1308 	movw	r3, #4360	; 0x1108
 8005242:	440b      	add	r3, r1
 8005244:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fad8 	bl	80057fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fb1c 	bl	800588a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	3305      	adds	r3, #5
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	021a      	lsls	r2, r3, #8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	3304      	adds	r3, #4
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	4619      	mov	r1, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	3303      	adds	r3, #3
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	061a      	lsls	r2, r3, #24
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	3302      	adds	r3, #2
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	041b      	lsls	r3, r3, #16
 8005284:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	3301      	adds	r3, #1
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005290:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800529e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2210      	movs	r2, #16
 80052ae:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2210      	movs	r2, #16
 80052b4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	58024400 	.word	0x58024400
 80052c4:	431bde83 	.word	0x431bde83
 80052c8:	ffff8001 	.word	0xffff8001

080052cc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80052de:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	791b      	ldrb	r3, [r3, #4]
 80052e4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80052e6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	7b1b      	ldrb	r3, [r3, #12]
 80052ec:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80052ee:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	7b5b      	ldrb	r3, [r3, #13]
 80052f4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80052f6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	7b9b      	ldrb	r3, [r3, #14]
 80052fc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80052fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	7bdb      	ldrb	r3, [r3, #15]
 8005304:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005306:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	7c12      	ldrb	r2, [r2, #16]
 800530c:	2a00      	cmp	r2, #0
 800530e:	d102      	bne.n	8005316 <ETH_SetMACConfig+0x4a>
 8005310:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005314:	e000      	b.n	8005318 <ETH_SetMACConfig+0x4c>
 8005316:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005318:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	7c52      	ldrb	r2, [r2, #17]
 800531e:	2a00      	cmp	r2, #0
 8005320:	d102      	bne.n	8005328 <ETH_SetMACConfig+0x5c>
 8005322:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005326:	e000      	b.n	800532a <ETH_SetMACConfig+0x5e>
 8005328:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800532a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	7c9b      	ldrb	r3, [r3, #18]
 8005330:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005332:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005338:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800533e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	7f1b      	ldrb	r3, [r3, #28]
 8005344:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005346:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	7f5b      	ldrb	r3, [r3, #29]
 800534c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800534e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	7f92      	ldrb	r2, [r2, #30]
 8005354:	2a00      	cmp	r2, #0
 8005356:	d102      	bne.n	800535e <ETH_SetMACConfig+0x92>
 8005358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800535c:	e000      	b.n	8005360 <ETH_SetMACConfig+0x94>
 800535e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005360:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	7fdb      	ldrb	r3, [r3, #31]
 8005366:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005368:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005370:	2a00      	cmp	r2, #0
 8005372:	d102      	bne.n	800537a <ETH_SetMACConfig+0xae>
 8005374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005378:	e000      	b.n	800537c <ETH_SetMACConfig+0xb0>
 800537a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800537c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005382:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800538a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800538c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b56      	ldr	r3, [pc, #344]	; (80054f8 <ETH_SetMACConfig+0x22c>)
 800539e:	4013      	ands	r3, r2
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	68f9      	ldr	r1, [r7, #12]
 80053a6:	430b      	orrs	r3, r1
 80053a8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053b6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80053b8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053c0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80053c2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053ca:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80053cc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	d102      	bne.n	80053de <ETH_SetMACConfig+0x112>
 80053d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053dc:	e000      	b.n	80053e0 <ETH_SetMACConfig+0x114>
 80053de:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80053e0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	4b42      	ldr	r3, [pc, #264]	; (80054fc <ETH_SetMACConfig+0x230>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	68f9      	ldr	r1, [r7, #12]
 80053fa:	430b      	orrs	r3, r1
 80053fc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005404:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	4b3a      	ldr	r3, [pc, #232]	; (8005500 <ETH_SetMACConfig+0x234>)
 8005416:	4013      	ands	r3, r2
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	68f9      	ldr	r1, [r7, #12]
 800541e:	430b      	orrs	r3, r1
 8005420:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005428:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800542e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005436:	2a00      	cmp	r2, #0
 8005438:	d101      	bne.n	800543e <ETH_SetMACConfig+0x172>
 800543a:	2280      	movs	r2, #128	; 0x80
 800543c:	e000      	b.n	8005440 <ETH_SetMACConfig+0x174>
 800543e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005440:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005446:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005452:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005456:	4013      	ands	r3, r2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	68f9      	ldr	r1, [r7, #12]
 800545e:	430b      	orrs	r3, r1
 8005460:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005468:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005470:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547e:	f023 0103 	bic.w	r1, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	430a      	orrs	r2, r1
 800548a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005496:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80054b2:	2a00      	cmp	r2, #0
 80054b4:	d101      	bne.n	80054ba <ETH_SetMACConfig+0x1ee>
 80054b6:	2240      	movs	r2, #64	; 0x40
 80054b8:	e000      	b.n	80054bc <ETH_SetMACConfig+0x1f0>
 80054ba:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80054bc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80054c4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80054c6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80054ce:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80054dc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80054ec:	bf00      	nop
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	00048083 	.word	0x00048083
 80054fc:	c0f88000 	.word	0xc0f88000
 8005500:	fffffef0 	.word	0xfffffef0

08005504 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4b38      	ldr	r3, [pc, #224]	; (80055fc <ETH_SetDMAConfig+0xf8>)
 800551a:	4013      	ands	r3, r2
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	6809      	ldr	r1, [r1, #0]
 8005524:	431a      	orrs	r2, r3
 8005526:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800552a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	791b      	ldrb	r3, [r3, #4]
 8005530:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005536:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	7b1b      	ldrb	r3, [r3, #12]
 800553c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	f241 0304 	movw	r3, #4100	; 0x1004
 800554a:	4413      	add	r3, r2
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <ETH_SetDMAConfig+0xfc>)
 8005550:	4013      	ands	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6811      	ldr	r1, [r2, #0]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	431a      	orrs	r2, r3
 800555a:	f241 0304 	movw	r3, #4100	; 0x1004
 800555e:	440b      	add	r3, r1
 8005560:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	7b5b      	ldrb	r3, [r3, #13]
 8005566:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4b22      	ldr	r3, [pc, #136]	; (8005604 <ETH_SetDMAConfig+0x100>)
 800557c:	4013      	ands	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6811      	ldr	r1, [r2, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	431a      	orrs	r2, r3
 8005586:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800558a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	7d1b      	ldrb	r3, [r3, #20]
 8005594:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005596:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	7f5b      	ldrb	r3, [r3, #29]
 800559c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	f241 1304 	movw	r3, #4356	; 0x1104
 80055aa:	4413      	add	r3, r2
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b16      	ldr	r3, [pc, #88]	; (8005608 <ETH_SetDMAConfig+0x104>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6811      	ldr	r1, [r2, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	f241 1304 	movw	r3, #4356	; 0x1104
 80055be:	440b      	add	r3, r1
 80055c0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	7f1b      	ldrb	r3, [r3, #28]
 80055c6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	f241 1308 	movw	r3, #4360	; 0x1108
 80055d8:	4413      	add	r3, r2
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <ETH_SetDMAConfig+0x108>)
 80055de:	4013      	ands	r3, r2
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6811      	ldr	r1, [r2, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	f241 1308 	movw	r3, #4360	; 0x1108
 80055ec:	440b      	add	r3, r1
 80055ee:	601a      	str	r2, [r3, #0]
}
 80055f0:	bf00      	nop
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	ffff87fd 	.word	0xffff87fd
 8005600:	ffff2ffe 	.word	0xffff2ffe
 8005604:	fffec000 	.word	0xfffec000
 8005608:	ffc0efef 	.word	0xffc0efef
 800560c:	7fc0ffff 	.word	0x7fc0ffff

08005610 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b0a4      	sub	sp, #144	; 0x90
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800561e:	2300      	movs	r3, #0
 8005620:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005622:	2300      	movs	r3, #0
 8005624:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005628:	2300      	movs	r3, #0
 800562a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005634:	2301      	movs	r3, #1
 8005636:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800564c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005650:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005652:	2300      	movs	r3, #0
 8005654:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005658:	2300      	movs	r3, #0
 800565a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800565c:	2300      	movs	r3, #0
 800565e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005662:	2300      	movs	r3, #0
 8005664:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005668:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800566c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800566e:	2300      	movs	r3, #0
 8005670:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005674:	2300      	movs	r3, #0
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800567e:	2300      	movs	r3, #0
 8005680:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005684:	2300      	movs	r3, #0
 8005686:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800568a:	2300      	movs	r3, #0
 800568c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800568e:	2300      	movs	r3, #0
 8005690:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005692:	2300      	movs	r3, #0
 8005694:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005696:	2300      	movs	r3, #0
 8005698:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800569c:	2300      	movs	r3, #0
 800569e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80056a8:	2320      	movs	r3, #32
 80056aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80056ba:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80056c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056c4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80056c6:	2300      	movs	r3, #0
 80056c8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80056cc:	2302      	movs	r3, #2
 80056ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80056d8:	2300      	movs	r3, #0
 80056da:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80056de:	2300      	movs	r3, #0
 80056e0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80056e4:	2301      	movs	r3, #1
 80056e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80056ea:	2300      	movs	r3, #0
 80056ec:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80056ee:	2301      	movs	r3, #1
 80056f0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80056f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff fde6 	bl	80052cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005700:	2301      	movs	r3, #1
 8005702:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005704:	2301      	movs	r3, #1
 8005706:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005708:	2300      	movs	r3, #0
 800570a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800570c:	2300      	movs	r3, #0
 800570e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005712:	2300      	movs	r3, #0
 8005714:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005716:	2300      	movs	r3, #0
 8005718:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800571a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800571e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005720:	2300      	movs	r3, #0
 8005722:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005724:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005728:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800572a:	2300      	movs	r3, #0
 800572c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005730:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005736:	f107 0308 	add.w	r3, r7, #8
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff fee1 	bl	8005504 <ETH_SetDMAConfig>
}
 8005742:	bf00      	nop
 8005744:	3790      	adds	r7, #144	; 0x90
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800575c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005764:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005766:	f001 fbad 	bl	8006ec4 <HAL_RCC_GetHCLKFreq>
 800576a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4a1e      	ldr	r2, [pc, #120]	; (80057e8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d908      	bls.n	8005786 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d804      	bhi.n	8005786 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e027      	b.n	80057d6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	4a18      	ldr	r2, [pc, #96]	; (80057ec <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d908      	bls.n	80057a0 <ETH_MAC_MDIO_ClkConfig+0x54>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d204      	bcs.n	80057a0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	e01a      	b.n	80057d6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4a13      	ldr	r2, [pc, #76]	; (80057f0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d303      	bcc.n	80057b0 <ETH_MAC_MDIO_ClkConfig+0x64>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4a12      	ldr	r2, [pc, #72]	; (80057f4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d911      	bls.n	80057d4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4a10      	ldr	r2, [pc, #64]	; (80057f4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d908      	bls.n	80057ca <ETH_MAC_MDIO_ClkConfig+0x7e>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4a0f      	ldr	r2, [pc, #60]	; (80057f8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d804      	bhi.n	80057ca <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e005      	b.n	80057d6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e000      	b.n	80057d6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80057d4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80057e0:	bf00      	nop
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	01312cff 	.word	0x01312cff
 80057ec:	02160ebf 	.word	0x02160ebf
 80057f0:	03938700 	.word	0x03938700
 80057f4:	05f5e0ff 	.word	0x05f5e0ff
 80057f8:	08f0d17f 	.word	0x08f0d17f

080057fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	e01d      	b.n	8005846 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68d9      	ldr	r1, [r3, #12]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4613      	mov	r3, r2
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	4413      	add	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	440b      	add	r3, r1
 800581a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2200      	movs	r2, #0
 8005826:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2200      	movs	r2, #0
 800582c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2200      	movs	r2, #0
 8005832:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	3206      	adds	r2, #6
 800583c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3301      	adds	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b03      	cmp	r3, #3
 800584a:	d9de      	bls.n	800580a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	f241 132c 	movw	r3, #4396	; 0x112c
 800585a:	4413      	add	r3, r2
 800585c:	2203      	movs	r2, #3
 800585e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68d9      	ldr	r1, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	f241 1314 	movw	r3, #4372	; 0x1114
 800586c:	4413      	add	r3, r2
 800586e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800587c:	601a      	str	r2, [r3, #0]
}
 800587e:	bf00      	nop
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	e024      	b.n	80058e2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6919      	ldr	r1, [r3, #16]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4613      	mov	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	440b      	add	r3, r1
 80058a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2200      	movs	r2, #0
 80058b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2200      	movs	r2, #0
 80058ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2200      	movs	r2, #0
 80058c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2200      	movs	r2, #0
 80058c6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2200      	movs	r2, #0
 80058cc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3310      	adds	r3, #16
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3301      	adds	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d9d7      	bls.n	8005898 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	f241 1330 	movw	r3, #4400	; 0x1130
 800590e:	4413      	add	r3, r2
 8005910:	2203      	movs	r2, #3
 8005912:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6919      	ldr	r1, [r3, #16]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	f241 131c 	movw	r3, #4380	; 0x111c
 8005920:	4413      	add	r3, r2
 8005922:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	f241 1328 	movw	r3, #4392	; 0x1128
 8005934:	4413      	add	r3, r2
 8005936:	6019      	str	r1, [r3, #0]
}
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005944:	b480      	push	{r7}
 8005946:	b089      	sub	sp, #36	; 0x24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005952:	4b89      	ldr	r3, [pc, #548]	; (8005b78 <HAL_GPIO_Init+0x234>)
 8005954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005956:	e194      	b.n	8005c82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	2101      	movs	r1, #1
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	fa01 f303 	lsl.w	r3, r1, r3
 8005964:	4013      	ands	r3, r2
 8005966:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8186 	beq.w	8005c7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d00b      	beq.n	8005990 <HAL_GPIO_Init+0x4c>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d007      	beq.n	8005990 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005984:	2b11      	cmp	r3, #17
 8005986:	d003      	beq.n	8005990 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b12      	cmp	r3, #18
 800598e:	d130      	bne.n	80059f2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	2203      	movs	r2, #3
 800599c:	fa02 f303 	lsl.w	r3, r2, r3
 80059a0:	43db      	mvns	r3, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4013      	ands	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059c6:	2201      	movs	r2, #1
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	fa02 f303 	lsl.w	r3, r2, r3
 80059ce:	43db      	mvns	r3, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4013      	ands	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	091b      	lsrs	r3, r3, #4
 80059dc:	f003 0201 	and.w	r2, r3, #1
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	2203      	movs	r2, #3
 80059fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005a02:	43db      	mvns	r3, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	4013      	ands	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d003      	beq.n	8005a32 <HAL_GPIO_Init+0xee>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b12      	cmp	r3, #18
 8005a30:	d123      	bne.n	8005a7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	08da      	lsrs	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3208      	adds	r2, #8
 8005a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	220f      	movs	r2, #15
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4013      	ands	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	08da      	lsrs	r2, r3, #3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3208      	adds	r2, #8
 8005a74:	69b9      	ldr	r1, [r7, #24]
 8005a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	2203      	movs	r2, #3
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 0203 	and.w	r2, r3, #3
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 80e0 	beq.w	8005c7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005abc:	4b2f      	ldr	r3, [pc, #188]	; (8005b7c <HAL_GPIO_Init+0x238>)
 8005abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ac2:	4a2e      	ldr	r2, [pc, #184]	; (8005b7c <HAL_GPIO_Init+0x238>)
 8005ac4:	f043 0302 	orr.w	r3, r3, #2
 8005ac8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005acc:	4b2b      	ldr	r3, [pc, #172]	; (8005b7c <HAL_GPIO_Init+0x238>)
 8005ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ada:	4a29      	ldr	r2, [pc, #164]	; (8005b80 <HAL_GPIO_Init+0x23c>)
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	089b      	lsrs	r3, r3, #2
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	220f      	movs	r2, #15
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	43db      	mvns	r3, r3
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	4013      	ands	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a20      	ldr	r2, [pc, #128]	; (8005b84 <HAL_GPIO_Init+0x240>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d052      	beq.n	8005bac <HAL_GPIO_Init+0x268>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a1f      	ldr	r2, [pc, #124]	; (8005b88 <HAL_GPIO_Init+0x244>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d031      	beq.n	8005b72 <HAL_GPIO_Init+0x22e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1e      	ldr	r2, [pc, #120]	; (8005b8c <HAL_GPIO_Init+0x248>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d02b      	beq.n	8005b6e <HAL_GPIO_Init+0x22a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a1d      	ldr	r2, [pc, #116]	; (8005b90 <HAL_GPIO_Init+0x24c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d025      	beq.n	8005b6a <HAL_GPIO_Init+0x226>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1c      	ldr	r2, [pc, #112]	; (8005b94 <HAL_GPIO_Init+0x250>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d01f      	beq.n	8005b66 <HAL_GPIO_Init+0x222>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1b      	ldr	r2, [pc, #108]	; (8005b98 <HAL_GPIO_Init+0x254>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d019      	beq.n	8005b62 <HAL_GPIO_Init+0x21e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <HAL_GPIO_Init+0x258>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d013      	beq.n	8005b5e <HAL_GPIO_Init+0x21a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a19      	ldr	r2, [pc, #100]	; (8005ba0 <HAL_GPIO_Init+0x25c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00d      	beq.n	8005b5a <HAL_GPIO_Init+0x216>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <HAL_GPIO_Init+0x260>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <HAL_GPIO_Init+0x212>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a17      	ldr	r2, [pc, #92]	; (8005ba8 <HAL_GPIO_Init+0x264>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d101      	bne.n	8005b52 <HAL_GPIO_Init+0x20e>
 8005b4e:	2309      	movs	r3, #9
 8005b50:	e02d      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b52:	230a      	movs	r3, #10
 8005b54:	e02b      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b56:	2308      	movs	r3, #8
 8005b58:	e029      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b5a:	2307      	movs	r3, #7
 8005b5c:	e027      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b5e:	2306      	movs	r3, #6
 8005b60:	e025      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b62:	2305      	movs	r3, #5
 8005b64:	e023      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b66:	2304      	movs	r3, #4
 8005b68:	e021      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e01f      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e01d      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e01b      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b76:	bf00      	nop
 8005b78:	58000080 	.word	0x58000080
 8005b7c:	58024400 	.word	0x58024400
 8005b80:	58000400 	.word	0x58000400
 8005b84:	58020000 	.word	0x58020000
 8005b88:	58020400 	.word	0x58020400
 8005b8c:	58020800 	.word	0x58020800
 8005b90:	58020c00 	.word	0x58020c00
 8005b94:	58021000 	.word	0x58021000
 8005b98:	58021400 	.word	0x58021400
 8005b9c:	58021800 	.word	0x58021800
 8005ba0:	58021c00 	.word	0x58021c00
 8005ba4:	58022000 	.word	0x58022000
 8005ba8:	58022400 	.word	0x58022400
 8005bac:	2300      	movs	r3, #0
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	f002 0203 	and.w	r2, r2, #3
 8005bb4:	0092      	lsls	r2, r2, #2
 8005bb6:	4093      	lsls	r3, r2
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bbe:	4938      	ldr	r1, [pc, #224]	; (8005ca0 <HAL_GPIO_Init+0x35c>)
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	089b      	lsrs	r3, r3, #2
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4013      	ands	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f47f ae63 	bne.w	8005958 <HAL_GPIO_Init+0x14>
  }
}
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
 8005c96:	3724      	adds	r7, #36	; 0x24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	58000400 	.word	0x58000400

08005ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	807b      	strh	r3, [r7, #2]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cb4:	787b      	ldrb	r3, [r7, #1]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cba:	887a      	ldrh	r2, [r7, #2]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005cc0:	e003      	b.n	8005cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cc2:	887b      	ldrh	r3, [r7, #2]
 8005cc4:	041a      	lsls	r2, r3, #16
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	619a      	str	r2, [r3, #24]
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	4603      	mov	r3, r0
 8005cde:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d008      	beq.n	8005d02 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005cfa:	88fb      	ldrh	r3, [r7, #6]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 f804 	bl	8005d0a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	4603      	mov	r3, r0
 8005d12:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d22:	b08f      	sub	sp, #60	; 0x3c
 8005d24:	af0a      	add	r7, sp, #40	; 0x28
 8005d26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e116      	b.n	8005f60 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7fc fa11 	bl	8002174 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2203      	movs	r2, #3
 8005d56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d102      	bne.n	8005d6c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f005 ffc5 	bl	800bd00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	603b      	str	r3, [r7, #0]
 8005d7c:	687e      	ldr	r6, [r7, #4]
 8005d7e:	466d      	mov	r5, sp
 8005d80:	f106 0410 	add.w	r4, r6, #16
 8005d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d90:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d94:	1d33      	adds	r3, r6, #4
 8005d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d98:	6838      	ldr	r0, [r7, #0]
 8005d9a:	f005 ff43 	bl	800bc24 <USB_CoreInit>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e0d7      	b.n	8005f60 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2100      	movs	r1, #0
 8005db6:	4618      	mov	r0, r3
 8005db8:	f005 ffb3 	bl	800bd22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	73fb      	strb	r3, [r7, #15]
 8005dc0:	e04a      	b.n	8005e58 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005dc2:	7bfa      	ldrb	r2, [r7, #15]
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	1a9b      	subs	r3, r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	440b      	add	r3, r1
 8005dd0:	333d      	adds	r3, #61	; 0x3d
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005dd6:	7bfa      	ldrb	r2, [r7, #15]
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	333c      	adds	r3, #60	; 0x3c
 8005de6:	7bfa      	ldrb	r2, [r7, #15]
 8005de8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005dea:	7bfa      	ldrb	r2, [r7, #15]
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	b298      	uxth	r0, r3
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3342      	adds	r3, #66	; 0x42
 8005dfe:	4602      	mov	r2, r0
 8005e00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e02:	7bfa      	ldrb	r2, [r7, #15]
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	333f      	adds	r3, #63	; 0x3f
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e16:	7bfa      	ldrb	r2, [r7, #15]
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	3344      	adds	r3, #68	; 0x44
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e2a:	7bfa      	ldrb	r2, [r7, #15]
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	3348      	adds	r3, #72	; 0x48
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e3e:	7bfa      	ldrb	r2, [r7, #15]
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	3350      	adds	r3, #80	; 0x50
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	3301      	adds	r3, #1
 8005e56:	73fb      	strb	r3, [r7, #15]
 8005e58:	7bfa      	ldrb	r2, [r7, #15]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d3af      	bcc.n	8005dc2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
 8005e66:	e044      	b.n	8005ef2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e68:	7bfa      	ldrb	r2, [r7, #15]
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e7e:	7bfa      	ldrb	r2, [r7, #15]
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	4613      	mov	r3, r2
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	1a9b      	subs	r3, r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005e90:	7bfa      	ldrb	r2, [r7, #15]
 8005e92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e94:	7bfa      	ldrb	r2, [r7, #15]
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005eaa:	7bfa      	ldrb	r2, [r7, #15]
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ec0:	7bfa      	ldrb	r2, [r7, #15]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ed6:	7bfa      	ldrb	r2, [r7, #15]
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	73fb      	strb	r3, [r7, #15]
 8005ef2:	7bfa      	ldrb	r2, [r7, #15]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d3b5      	bcc.n	8005e68 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	687e      	ldr	r6, [r7, #4]
 8005f04:	466d      	mov	r5, sp
 8005f06:	f106 0410 	add.w	r4, r6, #16
 8005f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f16:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f1a:	1d33      	adds	r3, r6, #4
 8005f1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f1e:	6838      	ldr	r0, [r7, #0]
 8005f20:	f005 ff2a 	bl	800bd78 <USB_DevInit>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e014      	b.n	8005f60 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d102      	bne.n	8005f54 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f80a 	bl	8005f68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f006 f8cc 	bl	800c0f6 <USB_DevDisconnect>

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <HAL_PCDEx_ActivateLPM+0x44>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	10000003 	.word	0x10000003

08005fb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005fb8:	4b19      	ldr	r3, [pc, #100]	; (8006020 <HAL_PWREx_ConfigSupply+0x70>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d00a      	beq.n	8005fda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005fc4:	4b16      	ldr	r3, [pc, #88]	; (8006020 <HAL_PWREx_ConfigSupply+0x70>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d001      	beq.n	8005fd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e01f      	b.n	8006016 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e01d      	b.n	8006016 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005fda:	4b11      	ldr	r3, [pc, #68]	; (8006020 <HAL_PWREx_ConfigSupply+0x70>)
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f023 0207 	bic.w	r2, r3, #7
 8005fe2:	490f      	ldr	r1, [pc, #60]	; (8006020 <HAL_PWREx_ConfigSupply+0x70>)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005fea:	f7fc fad7 	bl	800259c <HAL_GetTick>
 8005fee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ff0:	e009      	b.n	8006006 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ff2:	f7fc fad3 	bl	800259c <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006000:	d901      	bls.n	8006006 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e007      	b.n	8006016 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006006:	4b06      	ldr	r3, [pc, #24]	; (8006020 <HAL_PWREx_ConfigSupply+0x70>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800600e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006012:	d1ee      	bne.n	8005ff2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	58024800 	.word	0x58024800

08006024 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	4a04      	ldr	r2, [pc, #16]	; (8006040 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800602e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006032:	60d3      	str	r3, [r2, #12]
}
 8006034:	bf00      	nop
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	58024800 	.word	0x58024800

08006044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	; 0x30
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e3ff      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 8087 	beq.w	8006172 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006064:	4b99      	ldr	r3, [pc, #612]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800606e:	4b97      	ldr	r3, [pc, #604]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	2b10      	cmp	r3, #16
 8006078:	d007      	beq.n	800608a <HAL_RCC_OscConfig+0x46>
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	2b18      	cmp	r3, #24
 800607e:	d110      	bne.n	80060a2 <HAL_RCC_OscConfig+0x5e>
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d10b      	bne.n	80060a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800608a:	4b90      	ldr	r3, [pc, #576]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d06c      	beq.n	8006170 <HAL_RCC_OscConfig+0x12c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d168      	bne.n	8006170 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e3d9      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060aa:	d106      	bne.n	80060ba <HAL_RCC_OscConfig+0x76>
 80060ac:	4b87      	ldr	r3, [pc, #540]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a86      	ldr	r2, [pc, #536]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80060b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	e02e      	b.n	8006118 <HAL_RCC_OscConfig+0xd4>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10c      	bne.n	80060dc <HAL_RCC_OscConfig+0x98>
 80060c2:	4b82      	ldr	r3, [pc, #520]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a81      	ldr	r2, [pc, #516]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80060c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060cc:	6013      	str	r3, [r2, #0]
 80060ce:	4b7f      	ldr	r3, [pc, #508]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a7e      	ldr	r2, [pc, #504]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80060d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	e01d      	b.n	8006118 <HAL_RCC_OscConfig+0xd4>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060e4:	d10c      	bne.n	8006100 <HAL_RCC_OscConfig+0xbc>
 80060e6:	4b79      	ldr	r3, [pc, #484]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a78      	ldr	r2, [pc, #480]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80060ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	4b76      	ldr	r3, [pc, #472]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a75      	ldr	r2, [pc, #468]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80060f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	e00b      	b.n	8006118 <HAL_RCC_OscConfig+0xd4>
 8006100:	4b72      	ldr	r3, [pc, #456]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a71      	ldr	r2, [pc, #452]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 8006106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	4b6f      	ldr	r3, [pc, #444]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a6e      	ldr	r2, [pc, #440]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 8006112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d013      	beq.n	8006148 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fc fa3c 	bl	800259c <HAL_GetTick>
 8006124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006128:	f7fc fa38 	bl	800259c <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b64      	cmp	r3, #100	; 0x64
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e38d      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800613a:	4b64      	ldr	r3, [pc, #400]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0f0      	beq.n	8006128 <HAL_RCC_OscConfig+0xe4>
 8006146:	e014      	b.n	8006172 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006148:	f7fc fa28 	bl	800259c <HAL_GetTick>
 800614c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006150:	f7fc fa24 	bl	800259c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b64      	cmp	r3, #100	; 0x64
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e379      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006162:	4b5a      	ldr	r3, [pc, #360]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f0      	bne.n	8006150 <HAL_RCC_OscConfig+0x10c>
 800616e:	e000      	b.n	8006172 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 80ae 	beq.w	80062dc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006180:	4b52      	ldr	r3, [pc, #328]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006188:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800618a:	4b50      	ldr	r3, [pc, #320]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d007      	beq.n	80061a6 <HAL_RCC_OscConfig+0x162>
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	2b18      	cmp	r3, #24
 800619a:	d13a      	bne.n	8006212 <HAL_RCC_OscConfig+0x1ce>
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d135      	bne.n	8006212 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061a6:	4b49      	ldr	r3, [pc, #292]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_RCC_OscConfig+0x17a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e34b      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061be:	f7fc fa1d 	bl	80025fc <HAL_GetREVID>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d817      	bhi.n	80061fc <HAL_RCC_OscConfig+0x1b8>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d108      	bne.n	80061e6 <HAL_RCC_OscConfig+0x1a2>
 80061d4:	4b3d      	ldr	r3, [pc, #244]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80061dc:	4a3b      	ldr	r2, [pc, #236]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80061de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061e4:	e07a      	b.n	80062dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e6:	4b39      	ldr	r3, [pc, #228]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	031b      	lsls	r3, r3, #12
 80061f4:	4935      	ldr	r1, [pc, #212]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061fa:	e06f      	b.n	80062dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061fc:	4b33      	ldr	r3, [pc, #204]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	061b      	lsls	r3, r3, #24
 800620a:	4930      	ldr	r1, [pc, #192]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 800620c:	4313      	orrs	r3, r2
 800620e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006210:	e064      	b.n	80062dc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d045      	beq.n	80062a6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800621a:	4b2c      	ldr	r3, [pc, #176]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f023 0219 	bic.w	r2, r3, #25
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	4929      	ldr	r1, [pc, #164]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 8006228:	4313      	orrs	r3, r2
 800622a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622c:	f7fc f9b6 	bl	800259c <HAL_GetTick>
 8006230:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006234:	f7fc f9b2 	bl	800259c <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e307      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006246:	4b21      	ldr	r3, [pc, #132]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0304 	and.w	r3, r3, #4
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006252:	f7fc f9d3 	bl	80025fc <HAL_GetREVID>
 8006256:	4603      	mov	r3, r0
 8006258:	f241 0203 	movw	r2, #4099	; 0x1003
 800625c:	4293      	cmp	r3, r2
 800625e:	d817      	bhi.n	8006290 <HAL_RCC_OscConfig+0x24c>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d108      	bne.n	800627a <HAL_RCC_OscConfig+0x236>
 8006268:	4b18      	ldr	r3, [pc, #96]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006270:	4a16      	ldr	r2, [pc, #88]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 8006272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006276:	6053      	str	r3, [r2, #4]
 8006278:	e030      	b.n	80062dc <HAL_RCC_OscConfig+0x298>
 800627a:	4b14      	ldr	r3, [pc, #80]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	031b      	lsls	r3, r3, #12
 8006288:	4910      	ldr	r1, [pc, #64]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 800628a:	4313      	orrs	r3, r2
 800628c:	604b      	str	r3, [r1, #4]
 800628e:	e025      	b.n	80062dc <HAL_RCC_OscConfig+0x298>
 8006290:	4b0e      	ldr	r3, [pc, #56]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	061b      	lsls	r3, r3, #24
 800629e:	490b      	ldr	r1, [pc, #44]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	604b      	str	r3, [r1, #4]
 80062a4:	e01a      	b.n	80062dc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a08      	ldr	r2, [pc, #32]	; (80062cc <HAL_RCC_OscConfig+0x288>)
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b2:	f7fc f973 	bl	800259c <HAL_GetTick>
 80062b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062b8:	e00a      	b.n	80062d0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062ba:	f7fc f96f 	bl	800259c <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d903      	bls.n	80062d0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e2c4      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
 80062cc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062d0:	4ba4      	ldr	r3, [pc, #656]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1ee      	bne.n	80062ba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80a9 	beq.w	800643c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ea:	4b9e      	ldr	r3, [pc, #632]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062f4:	4b9b      	ldr	r3, [pc, #620]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d007      	beq.n	8006310 <HAL_RCC_OscConfig+0x2cc>
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b18      	cmp	r3, #24
 8006304:	d13a      	bne.n	800637c <HAL_RCC_OscConfig+0x338>
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f003 0303 	and.w	r3, r3, #3
 800630c:	2b01      	cmp	r3, #1
 800630e:	d135      	bne.n	800637c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006310:	4b94      	ldr	r3, [pc, #592]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <HAL_RCC_OscConfig+0x2e4>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	2b80      	cmp	r3, #128	; 0x80
 8006322:	d001      	beq.n	8006328 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e296      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006328:	f7fc f968 	bl	80025fc <HAL_GetREVID>
 800632c:	4603      	mov	r3, r0
 800632e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006332:	4293      	cmp	r3, r2
 8006334:	d817      	bhi.n	8006366 <HAL_RCC_OscConfig+0x322>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	2b20      	cmp	r3, #32
 800633c:	d108      	bne.n	8006350 <HAL_RCC_OscConfig+0x30c>
 800633e:	4b89      	ldr	r3, [pc, #548]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006346:	4a87      	ldr	r2, [pc, #540]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800634c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800634e:	e075      	b.n	800643c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006350:	4b84      	ldr	r3, [pc, #528]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	069b      	lsls	r3, r3, #26
 800635e:	4981      	ldr	r1, [pc, #516]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006360:	4313      	orrs	r3, r2
 8006362:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006364:	e06a      	b.n	800643c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006366:	4b7f      	ldr	r3, [pc, #508]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	061b      	lsls	r3, r3, #24
 8006374:	497b      	ldr	r1, [pc, #492]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006376:	4313      	orrs	r3, r2
 8006378:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800637a:	e05f      	b.n	800643c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d042      	beq.n	800640a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006384:	4b77      	ldr	r3, [pc, #476]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a76      	ldr	r2, [pc, #472]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 800638a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006390:	f7fc f904 	bl	800259c <HAL_GetTick>
 8006394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006398:	f7fc f900 	bl	800259c <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e255      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063aa:	4b6e      	ldr	r3, [pc, #440]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0f0      	beq.n	8006398 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063b6:	f7fc f921 	bl	80025fc <HAL_GetREVID>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d817      	bhi.n	80063f4 <HAL_RCC_OscConfig+0x3b0>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d108      	bne.n	80063de <HAL_RCC_OscConfig+0x39a>
 80063cc:	4b65      	ldr	r3, [pc, #404]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063d4:	4a63      	ldr	r2, [pc, #396]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80063d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063da:	6053      	str	r3, [r2, #4]
 80063dc:	e02e      	b.n	800643c <HAL_RCC_OscConfig+0x3f8>
 80063de:	4b61      	ldr	r3, [pc, #388]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	069b      	lsls	r3, r3, #26
 80063ec:	495d      	ldr	r1, [pc, #372]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	604b      	str	r3, [r1, #4]
 80063f2:	e023      	b.n	800643c <HAL_RCC_OscConfig+0x3f8>
 80063f4:	4b5b      	ldr	r3, [pc, #364]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	4958      	ldr	r1, [pc, #352]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006404:	4313      	orrs	r3, r2
 8006406:	60cb      	str	r3, [r1, #12]
 8006408:	e018      	b.n	800643c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800640a:	4b56      	ldr	r3, [pc, #344]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a55      	ldr	r2, [pc, #340]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006416:	f7fc f8c1 	bl	800259c <HAL_GetTick>
 800641a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800641c:	e008      	b.n	8006430 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800641e:	f7fc f8bd 	bl	800259c <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e212      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006430:	4b4c      	ldr	r3, [pc, #304]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f0      	bne.n	800641e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d036      	beq.n	80064b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d019      	beq.n	8006484 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006450:	4b44      	ldr	r3, [pc, #272]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006454:	4a43      	ldr	r2, [pc, #268]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006456:	f043 0301 	orr.w	r3, r3, #1
 800645a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645c:	f7fc f89e 	bl	800259c <HAL_GetTick>
 8006460:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006464:	f7fc f89a 	bl	800259c <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e1ef      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006476:	4b3b      	ldr	r3, [pc, #236]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f0      	beq.n	8006464 <HAL_RCC_OscConfig+0x420>
 8006482:	e018      	b.n	80064b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006484:	4b37      	ldr	r3, [pc, #220]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006488:	4a36      	ldr	r2, [pc, #216]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 800648a:	f023 0301 	bic.w	r3, r3, #1
 800648e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006490:	f7fc f884 	bl	800259c <HAL_GetTick>
 8006494:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006498:	f7fc f880 	bl	800259c <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e1d5      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064aa:	4b2e      	ldr	r3, [pc, #184]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80064ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f0      	bne.n	8006498 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d036      	beq.n	8006530 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d019      	beq.n	80064fe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064ca:	4b26      	ldr	r3, [pc, #152]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a25      	ldr	r2, [pc, #148]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80064d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064d6:	f7fc f861 	bl	800259c <HAL_GetTick>
 80064da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064dc:	e008      	b.n	80064f0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80064de:	f7fc f85d 	bl	800259c <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e1b2      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064f0:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0f0      	beq.n	80064de <HAL_RCC_OscConfig+0x49a>
 80064fc:	e018      	b.n	8006530 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064fe:	4b19      	ldr	r3, [pc, #100]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a18      	ldr	r2, [pc, #96]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006508:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800650a:	f7fc f847 	bl	800259c <HAL_GetTick>
 800650e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006510:	e008      	b.n	8006524 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006512:	f7fc f843 	bl	800259c <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	2b02      	cmp	r3, #2
 800651e:	d901      	bls.n	8006524 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e198      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006524:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <HAL_RCC_OscConfig+0x520>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1f0      	bne.n	8006512 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8085 	beq.w	8006648 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800653e:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <HAL_RCC_OscConfig+0x524>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a09      	ldr	r2, [pc, #36]	; (8006568 <HAL_RCC_OscConfig+0x524>)
 8006544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006548:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800654a:	f7fc f827 	bl	800259c <HAL_GetTick>
 800654e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006550:	e00c      	b.n	800656c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006552:	f7fc f823 	bl	800259c <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b64      	cmp	r3, #100	; 0x64
 800655e:	d905      	bls.n	800656c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e178      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
 8006564:	58024400 	.word	0x58024400
 8006568:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800656c:	4b96      	ldr	r3, [pc, #600]	; (80067c8 <HAL_RCC_OscConfig+0x784>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0ec      	beq.n	8006552 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d106      	bne.n	800658e <HAL_RCC_OscConfig+0x54a>
 8006580:	4b92      	ldr	r3, [pc, #584]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006584:	4a91      	ldr	r2, [pc, #580]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006586:	f043 0301 	orr.w	r3, r3, #1
 800658a:	6713      	str	r3, [r2, #112]	; 0x70
 800658c:	e02d      	b.n	80065ea <HAL_RCC_OscConfig+0x5a6>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10c      	bne.n	80065b0 <HAL_RCC_OscConfig+0x56c>
 8006596:	4b8d      	ldr	r3, [pc, #564]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659a:	4a8c      	ldr	r2, [pc, #560]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 800659c:	f023 0301 	bic.w	r3, r3, #1
 80065a0:	6713      	str	r3, [r2, #112]	; 0x70
 80065a2:	4b8a      	ldr	r3, [pc, #552]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80065a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a6:	4a89      	ldr	r2, [pc, #548]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80065a8:	f023 0304 	bic.w	r3, r3, #4
 80065ac:	6713      	str	r3, [r2, #112]	; 0x70
 80065ae:	e01c      	b.n	80065ea <HAL_RCC_OscConfig+0x5a6>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b05      	cmp	r3, #5
 80065b6:	d10c      	bne.n	80065d2 <HAL_RCC_OscConfig+0x58e>
 80065b8:	4b84      	ldr	r3, [pc, #528]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80065ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065bc:	4a83      	ldr	r2, [pc, #524]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80065be:	f043 0304 	orr.w	r3, r3, #4
 80065c2:	6713      	str	r3, [r2, #112]	; 0x70
 80065c4:	4b81      	ldr	r3, [pc, #516]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80065c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c8:	4a80      	ldr	r2, [pc, #512]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	6713      	str	r3, [r2, #112]	; 0x70
 80065d0:	e00b      	b.n	80065ea <HAL_RCC_OscConfig+0x5a6>
 80065d2:	4b7e      	ldr	r3, [pc, #504]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80065d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d6:	4a7d      	ldr	r2, [pc, #500]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	6713      	str	r3, [r2, #112]	; 0x70
 80065de:	4b7b      	ldr	r3, [pc, #492]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80065e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e2:	4a7a      	ldr	r2, [pc, #488]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80065e4:	f023 0304 	bic.w	r3, r3, #4
 80065e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d015      	beq.n	800661e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f2:	f7fb ffd3 	bl	800259c <HAL_GetTick>
 80065f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065f8:	e00a      	b.n	8006610 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065fa:	f7fb ffcf 	bl	800259c <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	f241 3288 	movw	r2, #5000	; 0x1388
 8006608:	4293      	cmp	r3, r2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e122      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006610:	4b6e      	ldr	r3, [pc, #440]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0ee      	beq.n	80065fa <HAL_RCC_OscConfig+0x5b6>
 800661c:	e014      	b.n	8006648 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800661e:	f7fb ffbd 	bl	800259c <HAL_GetTick>
 8006622:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006624:	e00a      	b.n	800663c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006626:	f7fb ffb9 	bl	800259c <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	f241 3288 	movw	r2, #5000	; 0x1388
 8006634:	4293      	cmp	r3, r2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e10c      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800663c:	4b63      	ldr	r3, [pc, #396]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 800663e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1ee      	bne.n	8006626 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8101 	beq.w	8006854 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006652:	4b5e      	ldr	r3, [pc, #376]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800665a:	2b18      	cmp	r3, #24
 800665c:	f000 80bc 	beq.w	80067d8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	2b02      	cmp	r3, #2
 8006666:	f040 8095 	bne.w	8006794 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666a:	4b58      	ldr	r3, [pc, #352]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a57      	ldr	r2, [pc, #348]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006676:	f7fb ff91 	bl	800259c <HAL_GetTick>
 800667a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800667e:	f7fb ff8d 	bl	800259c <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e0e2      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006690:	4b4e      	ldr	r3, [pc, #312]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f0      	bne.n	800667e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800669c:	4b4b      	ldr	r3, [pc, #300]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 800669e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066a0:	4b4b      	ldr	r3, [pc, #300]	; (80067d0 <HAL_RCC_OscConfig+0x78c>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80066ac:	0112      	lsls	r2, r2, #4
 80066ae:	430a      	orrs	r2, r1
 80066b0:	4946      	ldr	r1, [pc, #280]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	628b      	str	r3, [r1, #40]	; 0x28
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	3b01      	subs	r3, #1
 80066bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c4:	3b01      	subs	r3, #1
 80066c6:	025b      	lsls	r3, r3, #9
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	3b01      	subs	r3, #1
 80066d2:	041b      	lsls	r3, r3, #16
 80066d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066de:	3b01      	subs	r3, #1
 80066e0:	061b      	lsls	r3, r3, #24
 80066e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066e6:	4939      	ldr	r1, [pc, #228]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80066ec:	4b37      	ldr	r3, [pc, #220]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	4a36      	ldr	r2, [pc, #216]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066f8:	4b34      	ldr	r3, [pc, #208]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80066fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066fc:	4b35      	ldr	r3, [pc, #212]	; (80067d4 <HAL_RCC_OscConfig+0x790>)
 80066fe:	4013      	ands	r3, r2
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006704:	00d2      	lsls	r2, r2, #3
 8006706:	4931      	ldr	r1, [pc, #196]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006708:	4313      	orrs	r3, r2
 800670a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800670c:	4b2f      	ldr	r3, [pc, #188]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	f023 020c 	bic.w	r2, r3, #12
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	492c      	ldr	r1, [pc, #176]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 800671a:	4313      	orrs	r3, r2
 800671c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800671e:	4b2b      	ldr	r3, [pc, #172]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	f023 0202 	bic.w	r2, r3, #2
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672a:	4928      	ldr	r1, [pc, #160]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 800672c:	4313      	orrs	r3, r2
 800672e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006730:	4b26      	ldr	r3, [pc, #152]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	4a25      	ldr	r2, [pc, #148]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800673a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800673c:	4b23      	ldr	r3, [pc, #140]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	4a22      	ldr	r2, [pc, #136]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006746:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006748:	4b20      	ldr	r3, [pc, #128]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	4a1f      	ldr	r2, [pc, #124]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 800674e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006754:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	4a1c      	ldr	r2, [pc, #112]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 800675a:	f043 0301 	orr.w	r3, r3, #1
 800675e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006760:	4b1a      	ldr	r3, [pc, #104]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a19      	ldr	r2, [pc, #100]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800676a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676c:	f7fb ff16 	bl	800259c <HAL_GetTick>
 8006770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006774:	f7fb ff12 	bl	800259c <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e067      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006786:	4b11      	ldr	r3, [pc, #68]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0f0      	beq.n	8006774 <HAL_RCC_OscConfig+0x730>
 8006792:	e05f      	b.n	8006854 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006794:	4b0d      	ldr	r3, [pc, #52]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a0c      	ldr	r2, [pc, #48]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 800679a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800679e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a0:	f7fb fefc 	bl	800259c <HAL_GetTick>
 80067a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067a8:	f7fb fef8 	bl	800259c <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e04d      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067ba:	4b04      	ldr	r3, [pc, #16]	; (80067cc <HAL_RCC_OscConfig+0x788>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1f0      	bne.n	80067a8 <HAL_RCC_OscConfig+0x764>
 80067c6:	e045      	b.n	8006854 <HAL_RCC_OscConfig+0x810>
 80067c8:	58024800 	.word	0x58024800
 80067cc:	58024400 	.word	0x58024400
 80067d0:	fffffc0c 	.word	0xfffffc0c
 80067d4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067d8:	4b21      	ldr	r3, [pc, #132]	; (8006860 <HAL_RCC_OscConfig+0x81c>)
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80067de:	4b20      	ldr	r3, [pc, #128]	; (8006860 <HAL_RCC_OscConfig+0x81c>)
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d031      	beq.n	8006850 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f003 0203 	and.w	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d12a      	bne.n	8006850 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	091b      	lsrs	r3, r3, #4
 80067fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006806:	429a      	cmp	r2, r3
 8006808:	d122      	bne.n	8006850 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006816:	429a      	cmp	r2, r3
 8006818:	d11a      	bne.n	8006850 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	0a5b      	lsrs	r3, r3, #9
 800681e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006826:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006828:	429a      	cmp	r2, r3
 800682a:	d111      	bne.n	8006850 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	0c1b      	lsrs	r3, r3, #16
 8006830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800683a:	429a      	cmp	r2, r3
 800683c:	d108      	bne.n	8006850 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	0e1b      	lsrs	r3, r3, #24
 8006842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800684c:	429a      	cmp	r2, r3
 800684e:	d001      	beq.n	8006854 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e000      	b.n	8006856 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3730      	adds	r7, #48	; 0x30
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	58024400 	.word	0x58024400

08006864 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e19c      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006878:	4b8a      	ldr	r3, [pc, #552]	; (8006aa4 <HAL_RCC_ClockConfig+0x240>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d910      	bls.n	80068a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006886:	4b87      	ldr	r3, [pc, #540]	; (8006aa4 <HAL_RCC_ClockConfig+0x240>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f023 020f 	bic.w	r2, r3, #15
 800688e:	4985      	ldr	r1, [pc, #532]	; (8006aa4 <HAL_RCC_ClockConfig+0x240>)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	4313      	orrs	r3, r2
 8006894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006896:	4b83      	ldr	r3, [pc, #524]	; (8006aa4 <HAL_RCC_ClockConfig+0x240>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d001      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e184      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d010      	beq.n	80068d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	4b7b      	ldr	r3, [pc, #492]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d908      	bls.n	80068d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068c4:	4b78      	ldr	r3, [pc, #480]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	4975      	ldr	r1, [pc, #468]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d010      	beq.n	8006904 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	695a      	ldr	r2, [r3, #20]
 80068e6:	4b70      	ldr	r3, [pc, #448]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d908      	bls.n	8006904 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068f2:	4b6d      	ldr	r3, [pc, #436]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	496a      	ldr	r1, [pc, #424]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 8006900:	4313      	orrs	r3, r2
 8006902:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0310 	and.w	r3, r3, #16
 800690c:	2b00      	cmp	r3, #0
 800690e:	d010      	beq.n	8006932 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699a      	ldr	r2, [r3, #24]
 8006914:	4b64      	ldr	r3, [pc, #400]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800691c:	429a      	cmp	r2, r3
 800691e:	d908      	bls.n	8006932 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006920:	4b61      	ldr	r3, [pc, #388]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	495e      	ldr	r1, [pc, #376]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 800692e:	4313      	orrs	r3, r2
 8006930:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d010      	beq.n	8006960 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69da      	ldr	r2, [r3, #28]
 8006942:	4b59      	ldr	r3, [pc, #356]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800694a:	429a      	cmp	r2, r3
 800694c:	d908      	bls.n	8006960 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800694e:	4b56      	ldr	r3, [pc, #344]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	4953      	ldr	r1, [pc, #332]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 800695c:	4313      	orrs	r3, r2
 800695e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d010      	beq.n	800698e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	4b4d      	ldr	r3, [pc, #308]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	429a      	cmp	r2, r3
 800697a:	d908      	bls.n	800698e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800697c:	4b4a      	ldr	r3, [pc, #296]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f023 020f 	bic.w	r2, r3, #15
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	4947      	ldr	r1, [pc, #284]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 800698a:	4313      	orrs	r3, r2
 800698c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d055      	beq.n	8006a46 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800699a:	4b43      	ldr	r3, [pc, #268]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	4940      	ldr	r1, [pc, #256]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d107      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069b4:	4b3c      	ldr	r3, [pc, #240]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d121      	bne.n	8006a04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e0f6      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d107      	bne.n	80069dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069cc:	4b36      	ldr	r3, [pc, #216]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d115      	bne.n	8006a04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e0ea      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d107      	bne.n	80069f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069e4:	4b30      	ldr	r3, [pc, #192]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e0de      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069f4:	4b2c      	ldr	r3, [pc, #176]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0d6      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a04:	4b28      	ldr	r3, [pc, #160]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	f023 0207 	bic.w	r2, r3, #7
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4925      	ldr	r1, [pc, #148]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a16:	f7fb fdc1 	bl	800259c <HAL_GetTick>
 8006a1a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1c:	e00a      	b.n	8006a34 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a1e:	f7fb fdbd 	bl	800259c <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e0be      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a34:	4b1c      	ldr	r3, [pc, #112]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d1eb      	bne.n	8006a1e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d010      	beq.n	8006a74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d208      	bcs.n	8006a74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a62:	4b11      	ldr	r3, [pc, #68]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f023 020f 	bic.w	r2, r3, #15
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	490e      	ldr	r1, [pc, #56]	; (8006aa8 <HAL_RCC_ClockConfig+0x244>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a74:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <HAL_RCC_ClockConfig+0x240>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d214      	bcs.n	8006aac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a82:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <HAL_RCC_ClockConfig+0x240>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f023 020f 	bic.w	r2, r3, #15
 8006a8a:	4906      	ldr	r1, [pc, #24]	; (8006aa4 <HAL_RCC_ClockConfig+0x240>)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a92:	4b04      	ldr	r3, [pc, #16]	; (8006aa4 <HAL_RCC_ClockConfig+0x240>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d005      	beq.n	8006aac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e086      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x34e>
 8006aa4:	52002000 	.word	0x52002000
 8006aa8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d010      	beq.n	8006ada <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	4b3f      	ldr	r3, [pc, #252]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d208      	bcs.n	8006ada <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ac8:	4b3c      	ldr	r3, [pc, #240]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	4939      	ldr	r1, [pc, #228]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d010      	beq.n	8006b08 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695a      	ldr	r2, [r3, #20]
 8006aea:	4b34      	ldr	r3, [pc, #208]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d208      	bcs.n	8006b08 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006af6:	4b31      	ldr	r3, [pc, #196]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	492e      	ldr	r1, [pc, #184]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0310 	and.w	r3, r3, #16
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d010      	beq.n	8006b36 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699a      	ldr	r2, [r3, #24]
 8006b18:	4b28      	ldr	r3, [pc, #160]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d208      	bcs.n	8006b36 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b24:	4b25      	ldr	r3, [pc, #148]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	4922      	ldr	r1, [pc, #136]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d010      	beq.n	8006b64 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69da      	ldr	r2, [r3, #28]
 8006b46:	4b1d      	ldr	r3, [pc, #116]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d208      	bcs.n	8006b64 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b52:	4b1a      	ldr	r3, [pc, #104]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	4917      	ldr	r1, [pc, #92]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b64:	f000 f834 	bl	8006bd0 <HAL_RCC_GetSysClockFreq>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	4912      	ldr	r1, [pc, #72]	; (8006bc0 <HAL_RCC_ClockConfig+0x35c>)
 8006b76:	5ccb      	ldrb	r3, [r1, r3]
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b82:	4b0e      	ldr	r3, [pc, #56]	; (8006bbc <HAL_RCC_ClockConfig+0x358>)
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	4a0d      	ldr	r2, [pc, #52]	; (8006bc0 <HAL_RCC_ClockConfig+0x35c>)
 8006b8c:	5cd3      	ldrb	r3, [r2, r3]
 8006b8e:	f003 031f 	and.w	r3, r3, #31
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	fa22 f303 	lsr.w	r3, r2, r3
 8006b98:	4a0a      	ldr	r2, [pc, #40]	; (8006bc4 <HAL_RCC_ClockConfig+0x360>)
 8006b9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b9c:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <HAL_RCC_ClockConfig+0x364>)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006ba2:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <HAL_RCC_ClockConfig+0x368>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fb fcae 	bl	8002508 <HAL_InitTick>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	58024400 	.word	0x58024400
 8006bc0:	0800c210 	.word	0x0800c210
 8006bc4:	24000004 	.word	0x24000004
 8006bc8:	24000000 	.word	0x24000000
 8006bcc:	24000008 	.word	0x24000008

08006bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b089      	sub	sp, #36	; 0x24
 8006bd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bd6:	4bb3      	ldr	r3, [pc, #716]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bde:	2b18      	cmp	r3, #24
 8006be0:	f200 8155 	bhi.w	8006e8e <HAL_RCC_GetSysClockFreq+0x2be>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <HAL_RCC_GetSysClockFreq+0x1c>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006c51 	.word	0x08006c51
 8006bf0:	08006e8f 	.word	0x08006e8f
 8006bf4:	08006e8f 	.word	0x08006e8f
 8006bf8:	08006e8f 	.word	0x08006e8f
 8006bfc:	08006e8f 	.word	0x08006e8f
 8006c00:	08006e8f 	.word	0x08006e8f
 8006c04:	08006e8f 	.word	0x08006e8f
 8006c08:	08006e8f 	.word	0x08006e8f
 8006c0c:	08006c77 	.word	0x08006c77
 8006c10:	08006e8f 	.word	0x08006e8f
 8006c14:	08006e8f 	.word	0x08006e8f
 8006c18:	08006e8f 	.word	0x08006e8f
 8006c1c:	08006e8f 	.word	0x08006e8f
 8006c20:	08006e8f 	.word	0x08006e8f
 8006c24:	08006e8f 	.word	0x08006e8f
 8006c28:	08006e8f 	.word	0x08006e8f
 8006c2c:	08006c7d 	.word	0x08006c7d
 8006c30:	08006e8f 	.word	0x08006e8f
 8006c34:	08006e8f 	.word	0x08006e8f
 8006c38:	08006e8f 	.word	0x08006e8f
 8006c3c:	08006e8f 	.word	0x08006e8f
 8006c40:	08006e8f 	.word	0x08006e8f
 8006c44:	08006e8f 	.word	0x08006e8f
 8006c48:	08006e8f 	.word	0x08006e8f
 8006c4c:	08006c83 	.word	0x08006c83
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c50:	4b94      	ldr	r3, [pc, #592]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d009      	beq.n	8006c70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c5c:	4b91      	ldr	r3, [pc, #580]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	08db      	lsrs	r3, r3, #3
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	4a90      	ldr	r2, [pc, #576]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c68:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006c6e:	e111      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c70:	4b8d      	ldr	r3, [pc, #564]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c72:	61bb      	str	r3, [r7, #24]
    break;
 8006c74:	e10e      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c76:	4b8d      	ldr	r3, [pc, #564]	; (8006eac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c78:	61bb      	str	r3, [r7, #24]
    break;
 8006c7a:	e10b      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006c7c:	4b8c      	ldr	r3, [pc, #560]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c7e:	61bb      	str	r3, [r7, #24]
    break;
 8006c80:	e108      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c82:	4b88      	ldr	r3, [pc, #544]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006c8c:	4b85      	ldr	r3, [pc, #532]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	091b      	lsrs	r3, r3, #4
 8006c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c96:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c98:	4b82      	ldr	r3, [pc, #520]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006ca2:	4b80      	ldr	r3, [pc, #512]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca6:	08db      	lsrs	r3, r3, #3
 8006ca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	fb02 f303 	mul.w	r3, r2, r3
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 80e1 	beq.w	8006e88 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	f000 8083 	beq.w	8006dd4 <HAL_RCC_GetSysClockFreq+0x204>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	f200 80a1 	bhi.w	8006e18 <HAL_RCC_GetSysClockFreq+0x248>
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x114>
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d056      	beq.n	8006d90 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006ce2:	e099      	b.n	8006e18 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ce4:	4b6f      	ldr	r3, [pc, #444]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d02d      	beq.n	8006d4c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cf0:	4b6c      	ldr	r3, [pc, #432]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	08db      	lsrs	r3, r3, #3
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	4a6b      	ldr	r2, [pc, #428]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006d00:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	ee07 3a90 	vmov	s15, r3
 8006d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1a:	4b62      	ldr	r3, [pc, #392]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d2e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006d4a:	e087      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d56:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006eb8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d5e:	4b51      	ldr	r3, [pc, #324]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d72:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d8e:	e065      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006ebc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da2:	4b40      	ldr	r3, [pc, #256]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006db6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dd2:	e043      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dde:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006ec0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de6:	4b2f      	ldr	r3, [pc, #188]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dfa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e16:	e021      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e22:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006ebc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2a:	4b1e      	ldr	r3, [pc, #120]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e3e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e5a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006e5c:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e60:	0a5b      	lsrs	r3, r3, #9
 8006e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e66:	3301      	adds	r3, #1
 8006e68:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	ee07 3a90 	vmov	s15, r3
 8006e70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e80:	ee17 3a90 	vmov	r3, s15
 8006e84:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006e86:	e005      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61bb      	str	r3, [r7, #24]
    break;
 8006e8c:	e002      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e90:	61bb      	str	r3, [r7, #24]
    break;
 8006e92:	bf00      	nop
  }

  return sysclockfreq;
 8006e94:	69bb      	ldr	r3, [r7, #24]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3724      	adds	r7, #36	; 0x24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	58024400 	.word	0x58024400
 8006ea8:	03d09000 	.word	0x03d09000
 8006eac:	003d0900 	.word	0x003d0900
 8006eb0:	02dc6c00 	.word	0x02dc6c00
 8006eb4:	46000000 	.word	0x46000000
 8006eb8:	4c742400 	.word	0x4c742400
 8006ebc:	4a742400 	.word	0x4a742400
 8006ec0:	4c371b00 	.word	0x4c371b00

08006ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006eca:	f7ff fe81 	bl	8006bd0 <HAL_RCC_GetSysClockFreq>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	4b10      	ldr	r3, [pc, #64]	; (8006f14 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	0a1b      	lsrs	r3, r3, #8
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	490f      	ldr	r1, [pc, #60]	; (8006f18 <HAL_RCC_GetHCLKFreq+0x54>)
 8006edc:	5ccb      	ldrb	r3, [r1, r3]
 8006ede:	f003 031f 	and.w	r3, r3, #31
 8006ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <HAL_RCC_GetHCLKFreq+0x50>)
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ef2:	5cd3      	ldrb	r3, [r2, r3]
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	fa22 f303 	lsr.w	r3, r2, r3
 8006efe:	4a07      	ldr	r2, [pc, #28]	; (8006f1c <HAL_RCC_GetHCLKFreq+0x58>)
 8006f00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f02:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f08:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <HAL_RCC_GetHCLKFreq+0x58>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	58024400 	.word	0x58024400
 8006f18:	0800c210 	.word	0x0800c210
 8006f1c:	24000004 	.word	0x24000004
 8006f20:	24000000 	.word	0x24000000

08006f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f28:	f7ff ffcc 	bl	8006ec4 <HAL_RCC_GetHCLKFreq>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	091b      	lsrs	r3, r3, #4
 8006f34:	f003 0307 	and.w	r3, r3, #7
 8006f38:	4904      	ldr	r1, [pc, #16]	; (8006f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f3a:	5ccb      	ldrb	r3, [r1, r3]
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	58024400 	.word	0x58024400
 8006f4c:	0800c210 	.word	0x0800c210

08006f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006f54:	f7ff ffb6 	bl	8006ec4 <HAL_RCC_GetHCLKFreq>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	0a1b      	lsrs	r3, r3, #8
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	4904      	ldr	r1, [pc, #16]	; (8006f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f66:	5ccb      	ldrb	r3, [r1, r3]
 8006f68:	f003 031f 	and.w	r3, r3, #31
 8006f6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	58024400 	.word	0x58024400
 8006f78:	0800c210 	.word	0x0800c210

08006f7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f88:	2300      	movs	r3, #0
 8006f8a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d03f      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fa0:	d02a      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006fa2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fa6:	d824      	bhi.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fac:	d018      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fb2:	d81e      	bhi.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fbc:	d007      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006fbe:	e018      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc0:	4bab      	ldr	r3, [pc, #684]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	4aaa      	ldr	r2, [pc, #680]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fcc:	e015      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	2102      	movs	r1, #2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 fff3 	bl	8008fc0 <RCCEx_PLL2_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fde:	e00c      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3324      	adds	r3, #36	; 0x24
 8006fe4:	2102      	movs	r1, #2
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f002 f89c 	bl	8009124 <RCCEx_PLL3_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ff0:	e003      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff6:	e000      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007000:	4b9b      	ldr	r3, [pc, #620]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700c:	4998      	ldr	r1, [pc, #608]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800700e:	4313      	orrs	r3, r2
 8007010:	650b      	str	r3, [r1, #80]	; 0x50
 8007012:	e001      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007020:	2b00      	cmp	r3, #0
 8007022:	d03d      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007028:	2b04      	cmp	r3, #4
 800702a:	d826      	bhi.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800702c:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	08007049 	.word	0x08007049
 8007038:	08007057 	.word	0x08007057
 800703c:	08007069 	.word	0x08007069
 8007040:	08007081 	.word	0x08007081
 8007044:	08007081 	.word	0x08007081
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007048:	4b89      	ldr	r3, [pc, #548]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	4a88      	ldr	r2, [pc, #544]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800704e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007052:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007054:	e015      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3304      	adds	r3, #4
 800705a:	2100      	movs	r1, #0
 800705c:	4618      	mov	r0, r3
 800705e:	f001 ffaf 	bl	8008fc0 <RCCEx_PLL2_Config>
 8007062:	4603      	mov	r3, r0
 8007064:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007066:	e00c      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3324      	adds	r3, #36	; 0x24
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f002 f858 	bl	8009124 <RCCEx_PLL3_Config>
 8007074:	4603      	mov	r3, r0
 8007076:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007078:	e003      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	75fb      	strb	r3, [r7, #23]
      break;
 800707e:	e000      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d109      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007088:	4b79      	ldr	r3, [pc, #484]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800708a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708c:	f023 0207 	bic.w	r2, r3, #7
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007094:	4976      	ldr	r1, [pc, #472]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007096:	4313      	orrs	r3, r2
 8007098:	650b      	str	r3, [r1, #80]	; 0x50
 800709a:	e001      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d042      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b4:	d02b      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80070b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ba:	d825      	bhi.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070bc:	2bc0      	cmp	r3, #192	; 0xc0
 80070be:	d028      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80070c0:	2bc0      	cmp	r3, #192	; 0xc0
 80070c2:	d821      	bhi.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070c4:	2b80      	cmp	r3, #128	; 0x80
 80070c6:	d016      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80070c8:	2b80      	cmp	r3, #128	; 0x80
 80070ca:	d81d      	bhi.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80070d0:	2b40      	cmp	r3, #64	; 0x40
 80070d2:	d007      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80070d4:	e018      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d6:	4b66      	ldr	r3, [pc, #408]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	4a65      	ldr	r2, [pc, #404]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070e2:	e017      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3304      	adds	r3, #4
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 ff68 	bl	8008fc0 <RCCEx_PLL2_Config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070f4:	e00e      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3324      	adds	r3, #36	; 0x24
 80070fa:	2100      	movs	r1, #0
 80070fc:	4618      	mov	r0, r3
 80070fe:	f002 f811 	bl	8009124 <RCCEx_PLL3_Config>
 8007102:	4603      	mov	r3, r0
 8007104:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007106:	e005      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	75fb      	strb	r3, [r7, #23]
      break;
 800710c:	e002      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800710e:	bf00      	nop
 8007110:	e000      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007114:	7dfb      	ldrb	r3, [r7, #23]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800711a:	4b55      	ldr	r3, [pc, #340]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800711c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007126:	4952      	ldr	r1, [pc, #328]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007128:	4313      	orrs	r3, r2
 800712a:	650b      	str	r3, [r1, #80]	; 0x50
 800712c:	e001      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712e:	7dfb      	ldrb	r3, [r7, #23]
 8007130:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800713a:	2b00      	cmp	r3, #0
 800713c:	d049      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007144:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007148:	d030      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x230>
 800714a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800714e:	d82a      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007150:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007154:	d02c      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007156:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800715a:	d824      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800715c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007160:	d018      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007166:	d81e      	bhi.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800716c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007170:	d007      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007172:	e018      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007174:	4b3e      	ldr	r3, [pc, #248]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	4a3d      	ldr	r2, [pc, #244]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800717a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800717e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007180:	e017      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3304      	adds	r3, #4
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f001 ff19 	bl	8008fc0 <RCCEx_PLL2_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007192:	e00e      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3324      	adds	r3, #36	; 0x24
 8007198:	2100      	movs	r1, #0
 800719a:	4618      	mov	r0, r3
 800719c:	f001 ffc2 	bl	8009124 <RCCEx_PLL3_Config>
 80071a0:	4603      	mov	r3, r0
 80071a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071a4:	e005      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	75fb      	strb	r3, [r7, #23]
      break;
 80071aa:	e002      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80071ac:	bf00      	nop
 80071ae:	e000      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80071b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80071b8:	4b2d      	ldr	r3, [pc, #180]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071bc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071c6:	492a      	ldr	r1, [pc, #168]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	658b      	str	r3, [r1, #88]	; 0x58
 80071cc:	e001      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d04c      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071e8:	d030      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80071ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071ee:	d82a      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80071f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071f4:	d02c      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80071f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071fa:	d824      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80071fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007200:	d018      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007206:	d81e      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800720c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007210:	d007      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007212:	e018      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007214:	4b16      	ldr	r3, [pc, #88]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	4a15      	ldr	r2, [pc, #84]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800721a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800721e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007220:	e017      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3304      	adds	r3, #4
 8007226:	2100      	movs	r1, #0
 8007228:	4618      	mov	r0, r3
 800722a:	f001 fec9 	bl	8008fc0 <RCCEx_PLL2_Config>
 800722e:	4603      	mov	r3, r0
 8007230:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007232:	e00e      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3324      	adds	r3, #36	; 0x24
 8007238:	2100      	movs	r1, #0
 800723a:	4618      	mov	r0, r3
 800723c:	f001 ff72 	bl	8009124 <RCCEx_PLL3_Config>
 8007240:	4603      	mov	r3, r0
 8007242:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007244:	e005      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	75fb      	strb	r3, [r7, #23]
      break;
 800724a:	e002      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800724c:	bf00      	nop
 800724e:	e000      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10d      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007258:	4b05      	ldr	r3, [pc, #20]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800725a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007266:	4902      	ldr	r1, [pc, #8]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007268:	4313      	orrs	r3, r2
 800726a:	658b      	str	r3, [r1, #88]	; 0x58
 800726c:	e004      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800726e:	bf00      	nop
 8007270:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d032      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007288:	2b30      	cmp	r3, #48	; 0x30
 800728a:	d01c      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800728c:	2b30      	cmp	r3, #48	; 0x30
 800728e:	d817      	bhi.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007290:	2b20      	cmp	r3, #32
 8007292:	d00c      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007294:	2b20      	cmp	r3, #32
 8007296:	d813      	bhi.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007298:	2b00      	cmp	r3, #0
 800729a:	d016      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800729c:	2b10      	cmp	r3, #16
 800729e:	d10f      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a0:	4baf      	ldr	r3, [pc, #700]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	4aae      	ldr	r2, [pc, #696]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80072ac:	e00e      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3304      	adds	r3, #4
 80072b2:	2102      	movs	r1, #2
 80072b4:	4618      	mov	r0, r3
 80072b6:	f001 fe83 	bl	8008fc0 <RCCEx_PLL2_Config>
 80072ba:	4603      	mov	r3, r0
 80072bc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80072be:	e005      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	75fb      	strb	r3, [r7, #23]
      break;
 80072c4:	e002      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80072c6:	bf00      	nop
 80072c8:	e000      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80072ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d109      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072d2:	4ba3      	ldr	r3, [pc, #652]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072de:	49a0      	ldr	r1, [pc, #640]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072e4:	e001      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d047      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072fe:	d030      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007304:	d82a      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007306:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800730a:	d02c      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800730c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007310:	d824      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007316:	d018      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800731c:	d81e      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007326:	d007      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007328:	e018      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800732a:	4b8d      	ldr	r3, [pc, #564]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732e:	4a8c      	ldr	r2, [pc, #560]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007334:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007336:	e017      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3304      	adds	r3, #4
 800733c:	2100      	movs	r1, #0
 800733e:	4618      	mov	r0, r3
 8007340:	f001 fe3e 	bl	8008fc0 <RCCEx_PLL2_Config>
 8007344:	4603      	mov	r3, r0
 8007346:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007348:	e00e      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3324      	adds	r3, #36	; 0x24
 800734e:	2100      	movs	r1, #0
 8007350:	4618      	mov	r0, r3
 8007352:	f001 fee7 	bl	8009124 <RCCEx_PLL3_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800735a:	e005      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	75fb      	strb	r3, [r7, #23]
      break;
 8007360:	e002      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007362:	bf00      	nop
 8007364:	e000      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800736e:	4b7c      	ldr	r3, [pc, #496]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007372:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737a:	4979      	ldr	r1, [pc, #484]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800737c:	4313      	orrs	r3, r2
 800737e:	650b      	str	r3, [r1, #80]	; 0x50
 8007380:	e001      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d049      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007396:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800739a:	d02e      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800739c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073a0:	d828      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80073a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073a6:	d02a      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x482>
 80073a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073ac:	d822      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80073ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073b2:	d026      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80073b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80073b8:	d81c      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80073ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073be:	d010      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80073c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073c4:	d816      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d01d      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80073ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ce:	d111      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3304      	adds	r3, #4
 80073d4:	2101      	movs	r1, #1
 80073d6:	4618      	mov	r0, r3
 80073d8:	f001 fdf2 	bl	8008fc0 <RCCEx_PLL2_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80073e0:	e012      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3324      	adds	r3, #36	; 0x24
 80073e6:	2101      	movs	r1, #1
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 fe9b 	bl	8009124 <RCCEx_PLL3_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80073f2:	e009      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	75fb      	strb	r3, [r7, #23]
      break;
 80073f8:	e006      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80073fa:	bf00      	nop
 80073fc:	e004      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80073fe:	bf00      	nop
 8007400:	e002      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007402:	bf00      	nop
 8007404:	e000      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800740e:	4b54      	ldr	r3, [pc, #336]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007412:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800741a:	4951      	ldr	r1, [pc, #324]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800741c:	4313      	orrs	r3, r2
 800741e:	650b      	str	r3, [r1, #80]	; 0x50
 8007420:	e001      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d04b      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800743c:	d02e      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800743e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007442:	d828      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007448:	d02a      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800744a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800744e:	d822      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007450:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007454:	d026      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800745a:	d81c      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800745c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007460:	d010      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007466:	d816      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01d      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800746c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007470:	d111      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3304      	adds	r3, #4
 8007476:	2101      	movs	r1, #1
 8007478:	4618      	mov	r0, r3
 800747a:	f001 fda1 	bl	8008fc0 <RCCEx_PLL2_Config>
 800747e:	4603      	mov	r3, r0
 8007480:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007482:	e012      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3324      	adds	r3, #36	; 0x24
 8007488:	2101      	movs	r1, #1
 800748a:	4618      	mov	r0, r3
 800748c:	f001 fe4a 	bl	8009124 <RCCEx_PLL3_Config>
 8007490:	4603      	mov	r3, r0
 8007492:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007494:	e009      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	75fb      	strb	r3, [r7, #23]
      break;
 800749a:	e006      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800749c:	bf00      	nop
 800749e:	e004      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80074a0:	bf00      	nop
 80074a2:	e002      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80074a4:	bf00      	nop
 80074a6:	e000      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80074a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80074b0:	4b2b      	ldr	r3, [pc, #172]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80074be:	4928      	ldr	r1, [pc, #160]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	658b      	str	r3, [r1, #88]	; 0x58
 80074c4:	e001      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d02f      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074de:	d00e      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x582>
 80074e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e4:	d814      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d015      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80074ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ee:	d10f      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f0:	4b1b      	ldr	r3, [pc, #108]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	4a1a      	ldr	r2, [pc, #104]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80074fc:	e00c      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3304      	adds	r3, #4
 8007502:	2101      	movs	r1, #1
 8007504:	4618      	mov	r0, r3
 8007506:	f001 fd5b 	bl	8008fc0 <RCCEx_PLL2_Config>
 800750a:	4603      	mov	r3, r0
 800750c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800750e:	e003      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	75fb      	strb	r3, [r7, #23]
      break;
 8007514:	e000      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007518:	7dfb      	ldrb	r3, [r7, #23]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800751e:	4b10      	ldr	r3, [pc, #64]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007522:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800752a:	490d      	ldr	r1, [pc, #52]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800752c:	4313      	orrs	r3, r2
 800752e:	650b      	str	r3, [r1, #80]	; 0x50
 8007530:	e001      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d033      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007546:	2b03      	cmp	r3, #3
 8007548:	d81c      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	0800758b 	.word	0x0800758b
 8007554:	08007565 	.word	0x08007565
 8007558:	08007573 	.word	0x08007573
 800755c:	0800758b 	.word	0x0800758b
 8007560:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007564:	4bb8      	ldr	r3, [pc, #736]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	4ab7      	ldr	r2, [pc, #732]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800756a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800756e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007570:	e00c      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3304      	adds	r3, #4
 8007576:	2102      	movs	r1, #2
 8007578:	4618      	mov	r0, r3
 800757a:	f001 fd21 	bl	8008fc0 <RCCEx_PLL2_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007582:	e003      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	75fb      	strb	r3, [r7, #23]
      break;
 8007588:	e000      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800758a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d109      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007592:	4bad      	ldr	r3, [pc, #692]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007596:	f023 0203 	bic.w	r2, r3, #3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759e:	49aa      	ldr	r1, [pc, #680]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80075a4:	e001      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
 80075a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 8086 	beq.w	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075b8:	4ba4      	ldr	r3, [pc, #656]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4aa3      	ldr	r2, [pc, #652]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80075be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075c4:	f7fa ffea 	bl	800259c <HAL_GetTick>
 80075c8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075ca:	e009      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075cc:	f7fa ffe6 	bl	800259c <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b64      	cmp	r3, #100	; 0x64
 80075d8:	d902      	bls.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	75fb      	strb	r3, [r7, #23]
        break;
 80075de:	e005      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075e0:	4b9a      	ldr	r3, [pc, #616]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0ef      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d166      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075f2:	4b95      	ldr	r3, [pc, #596]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075fc:	4053      	eors	r3, r2
 80075fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007602:	2b00      	cmp	r3, #0
 8007604:	d013      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007606:	4b90      	ldr	r3, [pc, #576]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800760e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007610:	4b8d      	ldr	r3, [pc, #564]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007614:	4a8c      	ldr	r2, [pc, #560]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800761a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800761c:	4b8a      	ldr	r3, [pc, #552]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800761e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007620:	4a89      	ldr	r2, [pc, #548]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007626:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007628:	4a87      	ldr	r2, [pc, #540]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007638:	d115      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763a:	f7fa ffaf 	bl	800259c <HAL_GetTick>
 800763e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007640:	e00b      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007642:	f7fa ffab 	bl	800259c <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007650:	4293      	cmp	r3, r2
 8007652:	d902      	bls.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	75fb      	strb	r3, [r7, #23]
            break;
 8007658:	e005      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800765a:	4b7b      	ldr	r3, [pc, #492]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800765c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d0ed      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007666:	7dfb      	ldrb	r3, [r7, #23]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d126      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800767a:	d10d      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800767c:	4b72      	ldr	r3, [pc, #456]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800768a:	0919      	lsrs	r1, r3, #4
 800768c:	4b70      	ldr	r3, [pc, #448]	; (8007850 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800768e:	400b      	ands	r3, r1
 8007690:	496d      	ldr	r1, [pc, #436]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007692:	4313      	orrs	r3, r2
 8007694:	610b      	str	r3, [r1, #16]
 8007696:	e005      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007698:	4b6b      	ldr	r3, [pc, #428]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	4a6a      	ldr	r2, [pc, #424]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800769e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076a2:	6113      	str	r3, [r2, #16]
 80076a4:	4b68      	ldr	r3, [pc, #416]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076b2:	4965      	ldr	r1, [pc, #404]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	670b      	str	r3, [r1, #112]	; 0x70
 80076b8:	e004      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
 80076bc:	75bb      	strb	r3, [r7, #22]
 80076be:	e001      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d07e      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076d4:	2b28      	cmp	r3, #40	; 0x28
 80076d6:	d867      	bhi.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80076d8:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80076da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076de:	bf00      	nop
 80076e0:	080077af 	.word	0x080077af
 80076e4:	080077a9 	.word	0x080077a9
 80076e8:	080077a9 	.word	0x080077a9
 80076ec:	080077a9 	.word	0x080077a9
 80076f0:	080077a9 	.word	0x080077a9
 80076f4:	080077a9 	.word	0x080077a9
 80076f8:	080077a9 	.word	0x080077a9
 80076fc:	080077a9 	.word	0x080077a9
 8007700:	08007785 	.word	0x08007785
 8007704:	080077a9 	.word	0x080077a9
 8007708:	080077a9 	.word	0x080077a9
 800770c:	080077a9 	.word	0x080077a9
 8007710:	080077a9 	.word	0x080077a9
 8007714:	080077a9 	.word	0x080077a9
 8007718:	080077a9 	.word	0x080077a9
 800771c:	080077a9 	.word	0x080077a9
 8007720:	08007797 	.word	0x08007797
 8007724:	080077a9 	.word	0x080077a9
 8007728:	080077a9 	.word	0x080077a9
 800772c:	080077a9 	.word	0x080077a9
 8007730:	080077a9 	.word	0x080077a9
 8007734:	080077a9 	.word	0x080077a9
 8007738:	080077a9 	.word	0x080077a9
 800773c:	080077a9 	.word	0x080077a9
 8007740:	080077af 	.word	0x080077af
 8007744:	080077a9 	.word	0x080077a9
 8007748:	080077a9 	.word	0x080077a9
 800774c:	080077a9 	.word	0x080077a9
 8007750:	080077a9 	.word	0x080077a9
 8007754:	080077a9 	.word	0x080077a9
 8007758:	080077a9 	.word	0x080077a9
 800775c:	080077a9 	.word	0x080077a9
 8007760:	080077af 	.word	0x080077af
 8007764:	080077a9 	.word	0x080077a9
 8007768:	080077a9 	.word	0x080077a9
 800776c:	080077a9 	.word	0x080077a9
 8007770:	080077a9 	.word	0x080077a9
 8007774:	080077a9 	.word	0x080077a9
 8007778:	080077a9 	.word	0x080077a9
 800777c:	080077a9 	.word	0x080077a9
 8007780:	080077af 	.word	0x080077af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3304      	adds	r3, #4
 8007788:	2101      	movs	r1, #1
 800778a:	4618      	mov	r0, r3
 800778c:	f001 fc18 	bl	8008fc0 <RCCEx_PLL2_Config>
 8007790:	4603      	mov	r3, r0
 8007792:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007794:	e00c      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3324      	adds	r3, #36	; 0x24
 800779a:	2101      	movs	r1, #1
 800779c:	4618      	mov	r0, r3
 800779e:	f001 fcc1 	bl	8009124 <RCCEx_PLL3_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80077a6:	e003      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	75fb      	strb	r3, [r7, #23]
      break;
 80077ac:	e000      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80077ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80077b6:	4b24      	ldr	r3, [pc, #144]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077c2:	4921      	ldr	r1, [pc, #132]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	654b      	str	r3, [r1, #84]	; 0x54
 80077c8:	e001      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d03e      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077de:	2b05      	cmp	r3, #5
 80077e0:	d820      	bhi.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80077e2:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	0800782b 	.word	0x0800782b
 80077ec:	08007801 	.word	0x08007801
 80077f0:	08007813 	.word	0x08007813
 80077f4:	0800782b 	.word	0x0800782b
 80077f8:	0800782b 	.word	0x0800782b
 80077fc:	0800782b 	.word	0x0800782b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3304      	adds	r3, #4
 8007804:	2101      	movs	r1, #1
 8007806:	4618      	mov	r0, r3
 8007808:	f001 fbda 	bl	8008fc0 <RCCEx_PLL2_Config>
 800780c:	4603      	mov	r3, r0
 800780e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007810:	e00c      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3324      	adds	r3, #36	; 0x24
 8007816:	2101      	movs	r1, #1
 8007818:	4618      	mov	r0, r3
 800781a:	f001 fc83 	bl	8009124 <RCCEx_PLL3_Config>
 800781e:	4603      	mov	r3, r0
 8007820:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007822:	e003      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	75fb      	strb	r3, [r7, #23]
      break;
 8007828:	e000      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800782a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d110      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007832:	4b05      	ldr	r3, [pc, #20]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007836:	f023 0207 	bic.w	r2, r3, #7
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800783e:	4902      	ldr	r1, [pc, #8]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007840:	4313      	orrs	r3, r2
 8007842:	654b      	str	r3, [r1, #84]	; 0x54
 8007844:	e008      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007846:	bf00      	nop
 8007848:	58024400 	.word	0x58024400
 800784c:	58024800 	.word	0x58024800
 8007850:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b00      	cmp	r3, #0
 8007862:	d039      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800786a:	2b05      	cmp	r3, #5
 800786c:	d820      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800786e:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007874:	080078b7 	.word	0x080078b7
 8007878:	0800788d 	.word	0x0800788d
 800787c:	0800789f 	.word	0x0800789f
 8007880:	080078b7 	.word	0x080078b7
 8007884:	080078b7 	.word	0x080078b7
 8007888:	080078b7 	.word	0x080078b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3304      	adds	r3, #4
 8007890:	2101      	movs	r1, #1
 8007892:	4618      	mov	r0, r3
 8007894:	f001 fb94 	bl	8008fc0 <RCCEx_PLL2_Config>
 8007898:	4603      	mov	r3, r0
 800789a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800789c:	e00c      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3324      	adds	r3, #36	; 0x24
 80078a2:	2101      	movs	r1, #1
 80078a4:	4618      	mov	r0, r3
 80078a6:	f001 fc3d 	bl	8009124 <RCCEx_PLL3_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80078ae:	e003      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75fb      	strb	r3, [r7, #23]
      break;
 80078b4:	e000      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80078b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10a      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078be:	4bb7      	ldr	r3, [pc, #732]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c2:	f023 0207 	bic.w	r2, r3, #7
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078cc:	49b3      	ldr	r1, [pc, #716]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	658b      	str	r3, [r1, #88]	; 0x58
 80078d2:	e001      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0320 	and.w	r3, r3, #32
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d04b      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078ee:	d02e      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80078f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078f4:	d828      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80078f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078fa:	d02a      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80078fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007900:	d822      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007902:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007906:	d026      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007908:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800790c:	d81c      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800790e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007912:	d010      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007918:	d816      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01d      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800791e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007922:	d111      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f001 fb48 	bl	8008fc0 <RCCEx_PLL2_Config>
 8007930:	4603      	mov	r3, r0
 8007932:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007934:	e012      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3324      	adds	r3, #36	; 0x24
 800793a:	2102      	movs	r1, #2
 800793c:	4618      	mov	r0, r3
 800793e:	f001 fbf1 	bl	8009124 <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007946:	e009      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	75fb      	strb	r3, [r7, #23]
      break;
 800794c:	e006      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800794e:	bf00      	nop
 8007950:	e004      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007952:	bf00      	nop
 8007954:	e002      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007956:	bf00      	nop
 8007958:	e000      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800795a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007962:	4b8e      	ldr	r3, [pc, #568]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007966:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007970:	498a      	ldr	r1, [pc, #552]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007972:	4313      	orrs	r3, r2
 8007974:	654b      	str	r3, [r1, #84]	; 0x54
 8007976:	e001      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007984:	2b00      	cmp	r3, #0
 8007986:	d04b      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800798e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007992:	d02e      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007994:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007998:	d828      	bhi.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800799a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800799e:	d02a      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a4:	d822      	bhi.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80079a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079aa:	d026      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80079ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079b0:	d81c      	bhi.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80079b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b6:	d010      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80079b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079bc:	d816      	bhi.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d01d      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80079c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c6:	d111      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3304      	adds	r3, #4
 80079cc:	2100      	movs	r1, #0
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 faf6 	bl	8008fc0 <RCCEx_PLL2_Config>
 80079d4:	4603      	mov	r3, r0
 80079d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80079d8:	e012      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3324      	adds	r3, #36	; 0x24
 80079de:	2102      	movs	r1, #2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 fb9f 	bl	8009124 <RCCEx_PLL3_Config>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80079ea:	e009      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	75fb      	strb	r3, [r7, #23]
      break;
 80079f0:	e006      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80079f2:	bf00      	nop
 80079f4:	e004      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80079f6:	bf00      	nop
 80079f8:	e002      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80079fa:	bf00      	nop
 80079fc:	e000      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80079fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a06:	4b65      	ldr	r3, [pc, #404]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a14:	4961      	ldr	r1, [pc, #388]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	658b      	str	r3, [r1, #88]	; 0x58
 8007a1a:	e001      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d04b      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a32:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a36:	d02e      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007a38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a3c:	d828      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a42:	d02a      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a48:	d822      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a4e:	d026      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007a50:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a54:	d81c      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a5a:	d010      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a60:	d816      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d01d      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a6a:	d111      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	2100      	movs	r1, #0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f001 faa4 	bl	8008fc0 <RCCEx_PLL2_Config>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a7c:	e012      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3324      	adds	r3, #36	; 0x24
 8007a82:	2102      	movs	r1, #2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f001 fb4d 	bl	8009124 <RCCEx_PLL3_Config>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a8e:	e009      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	75fb      	strb	r3, [r7, #23]
      break;
 8007a94:	e006      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a96:	bf00      	nop
 8007a98:	e004      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a9a:	bf00      	nop
 8007a9c:	e002      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007a9e:	bf00      	nop
 8007aa0:	e000      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007aa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007aaa:	4b3c      	ldr	r3, [pc, #240]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ab8:	4938      	ldr	r1, [pc, #224]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	658b      	str	r3, [r1, #88]	; 0x58
 8007abe:	e001      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac0:	7dfb      	ldrb	r3, [r7, #23]
 8007ac2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0308 	and.w	r3, r3, #8
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01a      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ada:	d10a      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3324      	adds	r3, #36	; 0x24
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 fb1e 	bl	8009124 <RCCEx_PLL3_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007af2:	4b2a      	ldr	r3, [pc, #168]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b00:	4926      	ldr	r1, [pc, #152]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0310 	and.w	r3, r3, #16
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d01a      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b1c:	d10a      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3324      	adds	r3, #36	; 0x24
 8007b22:	2102      	movs	r1, #2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f001 fafd 	bl	8009124 <RCCEx_PLL3_Config>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b34:	4b19      	ldr	r3, [pc, #100]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b42:	4916      	ldr	r1, [pc, #88]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d036      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b5e:	d01f      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b64:	d817      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b6e:	d009      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007b70:	e011      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	3304      	adds	r3, #4
 8007b76:	2100      	movs	r1, #0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f001 fa21 	bl	8008fc0 <RCCEx_PLL2_Config>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b82:	e00e      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3324      	adds	r3, #36	; 0x24
 8007b88:	2102      	movs	r1, #2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 faca 	bl	8009124 <RCCEx_PLL3_Config>
 8007b90:	4603      	mov	r3, r0
 8007b92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b94:	e005      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	75fb      	strb	r3, [r7, #23]
      break;
 8007b9a:	e002      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007b9c:	58024400 	.word	0x58024400
      break;
 8007ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ba8:	4b93      	ldr	r3, [pc, #588]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007bb6:	4990      	ldr	r1, [pc, #576]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	658b      	str	r3, [r1, #88]	; 0x58
 8007bbc:	e001      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d033      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bd8:	d01c      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007bda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bde:	d816      	bhi.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007be4:	d003      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bea:	d007      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007bec:	e00f      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bee:	4b82      	ldr	r3, [pc, #520]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	4a81      	ldr	r2, [pc, #516]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007bfa:	e00c      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3324      	adds	r3, #36	; 0x24
 8007c00:	2101      	movs	r1, #1
 8007c02:	4618      	mov	r0, r3
 8007c04:	f001 fa8e 	bl	8009124 <RCCEx_PLL3_Config>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007c0c:	e003      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	75fb      	strb	r3, [r7, #23]
      break;
 8007c12:	e000      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10a      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c1c:	4b76      	ldr	r3, [pc, #472]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c2a:	4973      	ldr	r1, [pc, #460]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	654b      	str	r3, [r1, #84]	; 0x54
 8007c30:	e001      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d029      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4e:	d007      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007c50:	e00f      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c52:	4b69      	ldr	r3, [pc, #420]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	4a68      	ldr	r2, [pc, #416]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c5e:	e00b      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3304      	adds	r3, #4
 8007c64:	2102      	movs	r1, #2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 f9aa 	bl	8008fc0 <RCCEx_PLL2_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007c70:	e002      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	75fb      	strb	r3, [r7, #23]
      break;
 8007c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c7e:	4b5e      	ldr	r3, [pc, #376]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8a:	495b      	ldr	r1, [pc, #364]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c90:	e001      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3324      	adds	r3, #36	; 0x24
 8007ca6:	2102      	movs	r1, #2
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 fa3b 	bl	8009124 <RCCEx_PLL3_Config>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d030      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ccc:	d017      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007cce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cd2:	d811      	bhi.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd8:	d013      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cde:	d80b      	bhi.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d010      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ce8:	d106      	bne.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cea:	4b43      	ldr	r3, [pc, #268]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	4a42      	ldr	r2, [pc, #264]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007cf6:	e007      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8007cfc:	e004      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007cfe:	bf00      	nop
 8007d00:	e002      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007d02:	bf00      	nop
 8007d04:	e000      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d0e:	4b3a      	ldr	r3, [pc, #232]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d1a:	4937      	ldr	r1, [pc, #220]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	654b      	str	r3, [r1, #84]	; 0x54
 8007d20:	e001      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d008      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d32:	4b31      	ldr	r3, [pc, #196]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	492e      	ldr	r1, [pc, #184]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d009      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007d50:	4b29      	ldr	r3, [pc, #164]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d5e:	4926      	ldr	r1, [pc, #152]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d008      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d70:	4b21      	ldr	r3, [pc, #132]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d7c:	491e      	ldr	r1, [pc, #120]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00d      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d8e:	4b1a      	ldr	r3, [pc, #104]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	4a19      	ldr	r2, [pc, #100]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d98:	6113      	str	r3, [r2, #16]
 8007d9a:	4b17      	ldr	r3, [pc, #92]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d9c:	691a      	ldr	r2, [r3, #16]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007da4:	4914      	ldr	r1, [pc, #80]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	da08      	bge.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007db2:	4b11      	ldr	r3, [pc, #68]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbe:	490e      	ldr	r1, [pc, #56]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d009      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007dd0:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dde:	4906      	ldr	r1, [pc, #24]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007de4:	7dbb      	ldrb	r3, [r7, #22]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	e000      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	58024400 	.word	0x58024400

08007dfc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b090      	sub	sp, #64	; 0x40
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e0a:	f040 8095 	bne.w	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007e0e:	4bae      	ldr	r3, [pc, #696]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	633b      	str	r3, [r7, #48]	; 0x30
 8007e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	f200 8088 	bhi.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007e20:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e26:	bf00      	nop
 8007e28:	08007e3d 	.word	0x08007e3d
 8007e2c:	08007e65 	.word	0x08007e65
 8007e30:	08007e8d 	.word	0x08007e8d
 8007e34:	08007f29 	.word	0x08007f29
 8007e38:	08007eb5 	.word	0x08007eb5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e3c:	4ba2      	ldr	r3, [pc, #648]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e48:	d108      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 ff64 	bl	8008d1c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e58:	f000 bc95 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e60:	f000 bc91 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e64:	4b98      	ldr	r3, [pc, #608]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e70:	d108      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e72:	f107 0318 	add.w	r3, r7, #24
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fca8 	bl	80087cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e80:	f000 bc81 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e88:	f000 bc7d 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e8c:	4b8e      	ldr	r3, [pc, #568]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e98:	d108      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e9a:	f107 030c 	add.w	r3, r7, #12
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 fde8 	bl	8008a74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ea8:	f000 bc6d 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb0:	f000 bc69 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007eb4:	4b84      	ldr	r3, [pc, #528]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ebe:	4b82      	ldr	r3, [pc, #520]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0304 	and.w	r3, r3, #4
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d10c      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d109      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ed0:	4b7d      	ldr	r3, [pc, #500]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	08db      	lsrs	r3, r3, #3
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	4a7c      	ldr	r2, [pc, #496]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007edc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee2:	e01f      	b.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ee4:	4b78      	ldr	r3, [pc, #480]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef0:	d106      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ef8:	d102      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007efa:	4b75      	ldr	r3, [pc, #468]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007efe:	e011      	b.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f00:	4b71      	ldr	r3, [pc, #452]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f0c:	d106      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f14:	d102      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007f16:	4b6f      	ldr	r3, [pc, #444]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f1a:	e003      	b.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007f20:	f000 bc31 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f24:	f000 bc2f 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f28:	4b6b      	ldr	r3, [pc, #428]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f2c:	f000 bc2b 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f34:	f000 bc27 	b.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f3e:	f040 8095 	bne.w	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007f42:	4b61      	ldr	r3, [pc, #388]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f46:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007f4a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f52:	d04d      	beq.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f5a:	f200 8084 	bhi.w	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	2bc0      	cmp	r3, #192	; 0xc0
 8007f62:	d07d      	beq.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	2bc0      	cmp	r3, #192	; 0xc0
 8007f68:	d87d      	bhi.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	2b80      	cmp	r3, #128	; 0x80
 8007f6e:	d02d      	beq.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	2b80      	cmp	r3, #128	; 0x80
 8007f74:	d877      	bhi.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7e:	2b40      	cmp	r3, #64	; 0x40
 8007f80:	d012      	beq.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007f82:	e070      	b.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f84:	4b50      	ldr	r3, [pc, #320]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f90:	d107      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fec0 	bl	8008d1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fa0:	e3f1      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fa6:	e3ee      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fa8:	4b47      	ldr	r3, [pc, #284]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fb4:	d107      	bne.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fb6:	f107 0318 	add.w	r3, r7, #24
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fc06 	bl	80087cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fc4:	e3df      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fca:	e3dc      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fcc:	4b3e      	ldr	r3, [pc, #248]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fd8:	d107      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fda:	f107 030c 	add.w	r3, r7, #12
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fd48 	bl	8008a74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fe8:	e3cd      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fee:	e3ca      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ff0:	4b35      	ldr	r3, [pc, #212]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ffa:	4b33      	ldr	r3, [pc, #204]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0304 	and.w	r3, r3, #4
 8008002:	2b04      	cmp	r3, #4
 8008004:	d10c      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008008:	2b00      	cmp	r3, #0
 800800a:	d109      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800800c:	4b2e      	ldr	r3, [pc, #184]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	08db      	lsrs	r3, r3, #3
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	4a2d      	ldr	r2, [pc, #180]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008018:	fa22 f303 	lsr.w	r3, r2, r3
 800801c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800801e:	e01e      	b.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008020:	4b29      	ldr	r3, [pc, #164]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800802c:	d106      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800802e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008034:	d102      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008036:	4b26      	ldr	r3, [pc, #152]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800803a:	e010      	b.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800803c:	4b22      	ldr	r3, [pc, #136]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008048:	d106      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008050:	d102      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008052:	4b20      	ldr	r3, [pc, #128]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008056:	e002      	b.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008058:	2300      	movs	r3, #0
 800805a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800805c:	e393      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800805e:	e392      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008060:	4b1d      	ldr	r3, [pc, #116]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008064:	e38f      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800806a:	e38c      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008072:	f040 80a7 	bne.w	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008076:	4b14      	ldr	r3, [pc, #80]	; (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800807a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800807e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008082:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008086:	d05f      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800808e:	f200 8096 	bhi.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008098:	f000 808e 	beq.w	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080a2:	f200 808c 	bhi.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080ac:	d03a      	beq.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080b4:	f200 8083 	bhi.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00e      	beq.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080c4:	d01c      	beq.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80080c6:	e07a      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80080c8:	58024400 	.word	0x58024400
 80080cc:	03d09000 	.word	0x03d09000
 80080d0:	003d0900 	.word	0x003d0900
 80080d4:	02dc6c00 	.word	0x02dc6c00
 80080d8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080dc:	4baa      	ldr	r3, [pc, #680]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080e8:	d107      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 fe14 	bl	8008d1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080f8:	e345      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080fe:	e342      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008100:	4ba1      	ldr	r3, [pc, #644]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800810c:	d107      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800810e:	f107 0318 	add.w	r3, r7, #24
 8008112:	4618      	mov	r0, r3
 8008114:	f000 fb5a 	bl	80087cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800811c:	e333      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008122:	e330      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008124:	4b98      	ldr	r3, [pc, #608]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800812c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008130:	d107      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008132:	f107 030c 	add.w	r3, r7, #12
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fc9c 	bl	8008a74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008140:	e321      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008146:	e31e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008148:	4b8f      	ldr	r3, [pc, #572]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800814a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800814c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008150:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008152:	4b8d      	ldr	r3, [pc, #564]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0304 	and.w	r3, r3, #4
 800815a:	2b04      	cmp	r3, #4
 800815c:	d10c      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800815e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008160:	2b00      	cmp	r3, #0
 8008162:	d109      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008164:	4b88      	ldr	r3, [pc, #544]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	08db      	lsrs	r3, r3, #3
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	4a87      	ldr	r2, [pc, #540]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008170:	fa22 f303 	lsr.w	r3, r2, r3
 8008174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008176:	e01e      	b.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008178:	4b83      	ldr	r3, [pc, #524]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008184:	d106      	bne.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800818c:	d102      	bne.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800818e:	4b80      	ldr	r3, [pc, #512]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008192:	e010      	b.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008194:	4b7c      	ldr	r3, [pc, #496]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800819c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081a0:	d106      	bne.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80081a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a8:	d102      	bne.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80081aa:	4b7a      	ldr	r3, [pc, #488]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80081ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ae:	e002      	b.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80081b4:	e2e7      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80081b6:	e2e6      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081b8:	4b77      	ldr	r3, [pc, #476]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081bc:	e2e3      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c2:	e2e0      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ca:	f040 809c 	bne.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80081ce:	4b6e      	ldr	r3, [pc, #440]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80081d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80081d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081de:	d054      	beq.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081e6:	f200 808b 	bhi.w	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081f0:	f000 8083 	beq.w	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081fa:	f200 8081 	bhi.w	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008204:	d02f      	beq.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800820c:	d878      	bhi.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800821a:	d012      	beq.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800821c:	e070      	b.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800821e:	4b5a      	ldr	r3, [pc, #360]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008226:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800822a:	d107      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800822c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008230:	4618      	mov	r0, r3
 8008232:	f000 fd73 	bl	8008d1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800823a:	e2a4      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008240:	e2a1      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008242:	4b51      	ldr	r3, [pc, #324]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800824a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800824e:	d107      	bne.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008250:	f107 0318 	add.w	r3, r7, #24
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fab9 	bl	80087cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800825e:	e292      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008264:	e28f      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008266:	4b48      	ldr	r3, [pc, #288]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800826e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008272:	d107      	bne.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008274:	f107 030c 	add.w	r3, r7, #12
 8008278:	4618      	mov	r0, r3
 800827a:	f000 fbfb 	bl	8008a74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008282:	e280      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008288:	e27d      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800828a:	4b3f      	ldr	r3, [pc, #252]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800828c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800828e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008292:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008294:	4b3c      	ldr	r3, [pc, #240]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	2b04      	cmp	r3, #4
 800829e:	d10c      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80082a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082a6:	4b38      	ldr	r3, [pc, #224]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	08db      	lsrs	r3, r3, #3
 80082ac:	f003 0303 	and.w	r3, r3, #3
 80082b0:	4a36      	ldr	r2, [pc, #216]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80082b2:	fa22 f303 	lsr.w	r3, r2, r3
 80082b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082b8:	e01e      	b.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082ba:	4b33      	ldr	r3, [pc, #204]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082c6:	d106      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80082c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ce:	d102      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80082d0:	4b2f      	ldr	r3, [pc, #188]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d4:	e010      	b.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082d6:	4b2c      	ldr	r3, [pc, #176]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082e2:	d106      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80082e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ea:	d102      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80082ec:	4b29      	ldr	r3, [pc, #164]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f0:	e002      	b.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80082f2:	2300      	movs	r3, #0
 80082f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80082f6:	e246      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082f8:	e245      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80082fa:	4b27      	ldr	r3, [pc, #156]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80082fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082fe:	e242      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008304:	e23f      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800830c:	f040 80a8 	bne.w	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008310:	4b1d      	ldr	r3, [pc, #116]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008314:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008318:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008320:	d060      	beq.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008328:	f200 8097 	bhi.w	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008332:	f000 808f 	beq.w	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008338:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800833c:	f200 808d 	bhi.w	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008346:	d03b      	beq.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800834e:	f200 8084 	bhi.w	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	2b00      	cmp	r3, #0
 8008356:	d004      	beq.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800835e:	d01d      	beq.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008360:	e07b      	b.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800836e:	d107      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008374:	4618      	mov	r0, r3
 8008376:	f000 fcd1 	bl	8008d1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800837e:	e202      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008384:	e1ff      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008386:	bf00      	nop
 8008388:	58024400 	.word	0x58024400
 800838c:	03d09000 	.word	0x03d09000
 8008390:	003d0900 	.word	0x003d0900
 8008394:	02dc6c00 	.word	0x02dc6c00
 8008398:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800839c:	4ba3      	ldr	r3, [pc, #652]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083a8:	d107      	bne.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083aa:	f107 0318 	add.w	r3, r7, #24
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fa0c 	bl	80087cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083b8:	e1e5      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083be:	e1e2      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083c0:	4b9a      	ldr	r3, [pc, #616]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083cc:	d107      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ce:	f107 030c 	add.w	r3, r7, #12
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fb4e 	bl	8008a74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083dc:	e1d3      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e2:	e1d0      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80083e4:	4b91      	ldr	r3, [pc, #580]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80083e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083ec:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083ee:	4b8f      	ldr	r3, [pc, #572]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0304 	and.w	r3, r3, #4
 80083f6:	2b04      	cmp	r3, #4
 80083f8:	d10c      	bne.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80083fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d109      	bne.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008400:	4b8a      	ldr	r3, [pc, #552]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	08db      	lsrs	r3, r3, #3
 8008406:	f003 0303 	and.w	r3, r3, #3
 800840a:	4a89      	ldr	r2, [pc, #548]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800840c:	fa22 f303 	lsr.w	r3, r2, r3
 8008410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008412:	e01e      	b.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008414:	4b85      	ldr	r3, [pc, #532]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008420:	d106      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008428:	d102      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800842a:	4b82      	ldr	r3, [pc, #520]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800842c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800842e:	e010      	b.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008430:	4b7e      	ldr	r3, [pc, #504]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800843c:	d106      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800843e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008444:	d102      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008446:	4b7c      	ldr	r3, [pc, #496]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800844a:	e002      	b.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008450:	e199      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008452:	e198      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008454:	4b79      	ldr	r3, [pc, #484]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008458:	e195      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800845e:	e192      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008466:	d173      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008468:	4b70      	ldr	r3, [pc, #448]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800846a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008470:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008478:	d02f      	beq.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008480:	d863      	bhi.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	2b00      	cmp	r3, #0
 8008486:	d004      	beq.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800848e:	d012      	beq.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008490:	e05b      	b.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008492:	4b66      	ldr	r3, [pc, #408]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800849a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800849e:	d107      	bne.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084a0:	f107 0318 	add.w	r3, r7, #24
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 f991 	bl	80087cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084ae:	e16a      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084b4:	e167      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084b6:	4b5d      	ldr	r3, [pc, #372]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084c2:	d107      	bne.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084c4:	f107 030c 	add.w	r3, r7, #12
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fad3 	bl	8008a74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084d2:	e158      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084d8:	e155      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80084da:	4b54      	ldr	r3, [pc, #336]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80084dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084e4:	4b51      	ldr	r3, [pc, #324]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0304 	and.w	r3, r3, #4
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	d10c      	bne.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80084f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d109      	bne.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084f6:	4b4d      	ldr	r3, [pc, #308]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	08db      	lsrs	r3, r3, #3
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	4a4b      	ldr	r2, [pc, #300]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008502:	fa22 f303 	lsr.w	r3, r2, r3
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008508:	e01e      	b.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800850a:	4b48      	ldr	r3, [pc, #288]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008516:	d106      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800851e:	d102      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008520:	4b44      	ldr	r3, [pc, #272]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008524:	e010      	b.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008526:	4b41      	ldr	r3, [pc, #260]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800852e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008532:	d106      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800853a:	d102      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800853c:	4b3e      	ldr	r3, [pc, #248]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800853e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008540:	e002      	b.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008546:	e11e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008548:	e11d      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800854e:	e11a      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008556:	d133      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008558:	4b34      	ldr	r3, [pc, #208]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800855a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008560:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	2b00      	cmp	r3, #0
 8008566:	d004      	beq.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800856e:	d012      	beq.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008570:	e023      	b.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008572:	4b2e      	ldr	r3, [pc, #184]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800857a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800857e:	d107      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fbc9 	bl	8008d1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800858e:	e0fa      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008594:	e0f7      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008596:	4b25      	ldr	r3, [pc, #148]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800859e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085a2:	d107      	bne.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a4:	f107 0318 	add.w	r3, r7, #24
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 f90f 	bl	80087cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80085b2:	e0e8      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085b8:	e0e5      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085be:	e0e2      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085c6:	f040 808f 	bne.w	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80085ca:	4b18      	ldr	r3, [pc, #96]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80085cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80085d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80085d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085da:	d075      	beq.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085e2:	d87e      	bhi.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ea:	d060      	beq.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80085ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f2:	d876      	bhi.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085fa:	d045      	beq.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008602:	d86e      	bhi.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800860a:	d02b      	beq.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008612:	d866      	bhi.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	2b00      	cmp	r3, #0
 8008618:	d004      	beq.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008620:	d00e      	beq.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008622:	e05e      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008624:	f000 f8bc 	bl	80087a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008628:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800862a:	e0ac      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800862c:	58024400 	.word	0x58024400
 8008630:	03d09000 	.word	0x03d09000
 8008634:	003d0900 	.word	0x003d0900
 8008638:	02dc6c00 	.word	0x02dc6c00
 800863c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008640:	4b53      	ldr	r3, [pc, #332]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800864c:	d107      	bne.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800864e:	f107 0318 	add.w	r3, r7, #24
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f8ba 	bl	80087cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800865c:	e093      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008662:	e090      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008664:	4b4a      	ldr	r3, [pc, #296]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800866c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008670:	d107      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008672:	f107 030c 	add.w	r3, r7, #12
 8008676:	4618      	mov	r0, r3
 8008678:	f000 f9fc 	bl	8008a74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008680:	e081      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008686:	e07e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008688:	4b41      	ldr	r3, [pc, #260]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b04      	cmp	r3, #4
 8008692:	d109      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008694:	4b3e      	ldr	r3, [pc, #248]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	08db      	lsrs	r3, r3, #3
 800869a:	f003 0303 	and.w	r3, r3, #3
 800869e:	4a3d      	ldr	r2, [pc, #244]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80086a0:	fa22 f303 	lsr.w	r3, r2, r3
 80086a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80086a6:	e06e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086ac:	e06b      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80086ae:	4b38      	ldr	r3, [pc, #224]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ba:	d102      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80086bc:	4b36      	ldr	r3, [pc, #216]	; (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80086be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086c0:	e061      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086c6:	e05e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086c8:	4b31      	ldr	r3, [pc, #196]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086d4:	d102      	bne.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80086d6:	4b31      	ldr	r3, [pc, #196]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80086d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80086da:	e054      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086dc:	2300      	movs	r3, #0
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086e0:	e051      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80086e2:	2300      	movs	r3, #0
 80086e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086e6:	e04e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ee:	d148      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80086f0:	4b27      	ldr	r3, [pc, #156]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086f8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80086fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008700:	d02a      	beq.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008708:	d838      	bhi.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	2b00      	cmp	r3, #0
 800870e:	d004      	beq.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008716:	d00d      	beq.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008718:	e030      	b.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800871a:	4b1d      	ldr	r3, [pc, #116]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008726:	d102      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8008728:	4b1c      	ldr	r3, [pc, #112]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800872c:	e02b      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008732:	e028      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008734:	4b16      	ldr	r3, [pc, #88]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008740:	d107      	bne.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fae8 	bl	8008d1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008750:	e019      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008756:	e016      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008758:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008764:	d107      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008766:	f107 0318 	add.w	r3, r7, #24
 800876a:	4618      	mov	r0, r3
 800876c:	f000 f82e 	bl	80087cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008774:	e007      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800877a:	e004      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008780:	e001      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008788:	4618      	mov	r0, r3
 800878a:	3740      	adds	r7, #64	; 0x40
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	58024400 	.word	0x58024400
 8008794:	03d09000 	.word	0x03d09000
 8008798:	003d0900 	.word	0x003d0900
 800879c:	02dc6c00 	.word	0x02dc6c00

080087a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087a4:	f7fe fb8e 	bl	8006ec4 <HAL_RCC_GetHCLKFreq>
 80087a8:	4602      	mov	r2, r0
 80087aa:	4b06      	ldr	r3, [pc, #24]	; (80087c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	091b      	lsrs	r3, r3, #4
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	4904      	ldr	r1, [pc, #16]	; (80087c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087b6:	5ccb      	ldrb	r3, [r1, r3]
 80087b8:	f003 031f 	and.w	r3, r3, #31
 80087bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	58024400 	.word	0x58024400
 80087c8:	0800c210 	.word	0x0800c210

080087cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b089      	sub	sp, #36	; 0x24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087d4:	4ba1      	ldr	r3, [pc, #644]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d8:	f003 0303 	and.w	r3, r3, #3
 80087dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80087de:	4b9f      	ldr	r3, [pc, #636]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e2:	0b1b      	lsrs	r3, r3, #12
 80087e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80087ea:	4b9c      	ldr	r3, [pc, #624]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ee:	091b      	lsrs	r3, r3, #4
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80087f6:	4b99      	ldr	r3, [pc, #612]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fa:	08db      	lsrs	r3, r3, #3
 80087fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	fb02 f303 	mul.w	r3, r2, r3
 8008806:	ee07 3a90 	vmov	s15, r3
 800880a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 8111 	beq.w	8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	2b02      	cmp	r3, #2
 800881e:	f000 8083 	beq.w	8008928 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	2b02      	cmp	r3, #2
 8008826:	f200 80a1 	bhi.w	800896c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d056      	beq.n	80088e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008836:	e099      	b.n	800896c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008838:	4b88      	ldr	r3, [pc, #544]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0320 	and.w	r3, r3, #32
 8008840:	2b00      	cmp	r3, #0
 8008842:	d02d      	beq.n	80088a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008844:	4b85      	ldr	r3, [pc, #532]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	08db      	lsrs	r3, r3, #3
 800884a:	f003 0303 	and.w	r3, r3, #3
 800884e:	4a84      	ldr	r2, [pc, #528]	; (8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008850:	fa22 f303 	lsr.w	r3, r2, r3
 8008854:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	ee07 3a90 	vmov	s15, r3
 8008866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886e:	4b7b      	ldr	r3, [pc, #492]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008882:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800888a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800889a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800889e:	e087      	b.n	80089b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80088ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b2:	4b6a      	ldr	r3, [pc, #424]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088e2:	e065      	b.n	80089b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f6:	4b59      	ldr	r3, [pc, #356]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008906:	ed97 6a03 	vldr	s12, [r7, #12]
 800890a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800890e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800891a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008922:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008926:	e043      	b.n	80089b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008932:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893a:	4b48      	ldr	r3, [pc, #288]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894a:	ed97 6a03 	vldr	s12, [r7, #12]
 800894e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800895e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008966:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800896a:	e021      	b.n	80089b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	ee07 3a90 	vmov	s15, r3
 8008972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008976:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800897a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800897e:	4b37      	ldr	r3, [pc, #220]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800898e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008992:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800899a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800899e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80089b0:	4b2a      	ldr	r3, [pc, #168]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b4:	0a5b      	lsrs	r3, r3, #9
 80089b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d6:	ee17 2a90 	vmov	r2, s15
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80089de:	4b1f      	ldr	r3, [pc, #124]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e2:	0c1b      	lsrs	r3, r3, #16
 80089e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e8:	ee07 3a90 	vmov	s15, r3
 80089ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a04:	ee17 2a90 	vmov	r2, s15
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008a0c:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a10:	0e1b      	lsrs	r3, r3, #24
 8008a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a32:	ee17 2a90 	vmov	r2, s15
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a3a:	e008      	b.n	8008a4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	609a      	str	r2, [r3, #8]
}
 8008a4e:	bf00      	nop
 8008a50:	3724      	adds	r7, #36	; 0x24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	58024400 	.word	0x58024400
 8008a60:	03d09000 	.word	0x03d09000
 8008a64:	46000000 	.word	0x46000000
 8008a68:	4c742400 	.word	0x4c742400
 8008a6c:	4a742400 	.word	0x4a742400
 8008a70:	4c371b00 	.word	0x4c371b00

08008a74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b089      	sub	sp, #36	; 0x24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a7c:	4ba1      	ldr	r3, [pc, #644]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a80:	f003 0303 	and.w	r3, r3, #3
 8008a84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008a86:	4b9f      	ldr	r3, [pc, #636]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8a:	0d1b      	lsrs	r3, r3, #20
 8008a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a92:	4b9c      	ldr	r3, [pc, #624]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a96:	0a1b      	lsrs	r3, r3, #8
 8008a98:	f003 0301 	and.w	r3, r3, #1
 8008a9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008a9e:	4b99      	ldr	r3, [pc, #612]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa2:	08db      	lsrs	r3, r3, #3
 8008aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	fb02 f303 	mul.w	r3, r2, r3
 8008aae:	ee07 3a90 	vmov	s15, r3
 8008ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 8111 	beq.w	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	f000 8083 	beq.w	8008bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	f200 80a1 	bhi.w	8008c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d003      	beq.n	8008ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d056      	beq.n	8008b8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008ade:	e099      	b.n	8008c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ae0:	4b88      	ldr	r3, [pc, #544]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0320 	and.w	r3, r3, #32
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d02d      	beq.n	8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008aec:	4b85      	ldr	r3, [pc, #532]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	08db      	lsrs	r3, r3, #3
 8008af2:	f003 0303 	and.w	r3, r3, #3
 8008af6:	4a84      	ldr	r2, [pc, #528]	; (8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008af8:	fa22 f303 	lsr.w	r3, r2, r3
 8008afc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	ee07 3a90 	vmov	s15, r3
 8008b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b16:	4b7b      	ldr	r3, [pc, #492]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b42:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b46:	e087      	b.n	8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b5a:	4b6a      	ldr	r3, [pc, #424]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b8a:	e065      	b.n	8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b9e:	4b59      	ldr	r3, [pc, #356]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bce:	e043      	b.n	8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be2:	4b48      	ldr	r3, [pc, #288]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bf6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c12:	e021      	b.n	8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c26:	4b37      	ldr	r3, [pc, #220]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008c58:	4b2a      	ldr	r3, [pc, #168]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5c:	0a5b      	lsrs	r3, r3, #9
 8008c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c7e:	ee17 2a90 	vmov	r2, s15
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008c86:	4b1f      	ldr	r3, [pc, #124]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8a:	0c1b      	lsrs	r3, r3, #16
 8008c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c90:	ee07 3a90 	vmov	s15, r3
 8008c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ca0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cac:	ee17 2a90 	vmov	r2, s15
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008cb4:	4b13      	ldr	r3, [pc, #76]	; (8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb8:	0e1b      	lsrs	r3, r3, #24
 8008cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cda:	ee17 2a90 	vmov	r2, s15
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008ce2:	e008      	b.n	8008cf6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	609a      	str	r2, [r3, #8]
}
 8008cf6:	bf00      	nop
 8008cf8:	3724      	adds	r7, #36	; 0x24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	58024400 	.word	0x58024400
 8008d08:	03d09000 	.word	0x03d09000
 8008d0c:	46000000 	.word	0x46000000
 8008d10:	4c742400 	.word	0x4c742400
 8008d14:	4a742400 	.word	0x4a742400
 8008d18:	4c371b00 	.word	0x4c371b00

08008d1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b089      	sub	sp, #36	; 0x24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d24:	4ba0      	ldr	r3, [pc, #640]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008d2e:	4b9e      	ldr	r3, [pc, #632]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d32:	091b      	lsrs	r3, r3, #4
 8008d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d38:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008d3a:	4b9b      	ldr	r3, [pc, #620]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008d44:	4b98      	ldr	r3, [pc, #608]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d48:	08db      	lsrs	r3, r3, #3
 8008d4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	fb02 f303 	mul.w	r3, r2, r3
 8008d54:	ee07 3a90 	vmov	s15, r3
 8008d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 8111 	beq.w	8008f8a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	f000 8083 	beq.w	8008e76 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	f200 80a1 	bhi.w	8008eba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d056      	beq.n	8008e32 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008d84:	e099      	b.n	8008eba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d86:	4b88      	ldr	r3, [pc, #544]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 0320 	and.w	r3, r3, #32
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d02d      	beq.n	8008dee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d92:	4b85      	ldr	r3, [pc, #532]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	08db      	lsrs	r3, r3, #3
 8008d98:	f003 0303 	and.w	r3, r3, #3
 8008d9c:	4a83      	ldr	r2, [pc, #524]	; (8008fac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008da2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	ee07 3a90 	vmov	s15, r3
 8008db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dbc:	4b7a      	ldr	r3, [pc, #488]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc4:	ee07 3a90 	vmov	s15, r3
 8008dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dd0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008dec:	e087      	b.n	8008efe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	ee07 3a90 	vmov	s15, r3
 8008df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e00:	4b69      	ldr	r3, [pc, #420]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e08:	ee07 3a90 	vmov	s15, r3
 8008e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e10:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e14:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e30:	e065      	b.n	8008efe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	ee07 3a90 	vmov	s15, r3
 8008e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008e40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e44:	4b58      	ldr	r3, [pc, #352]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4c:	ee07 3a90 	vmov	s15, r3
 8008e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e54:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e58:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e74:	e043      	b.n	8008efe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	ee07 3a90 	vmov	s15, r3
 8008e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e80:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008fbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008e84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e88:	4b47      	ldr	r3, [pc, #284]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e90:	ee07 3a90 	vmov	s15, r3
 8008e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e98:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e9c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eb8:	e021      	b.n	8008efe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	ee07 3a90 	vmov	s15, r3
 8008ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ecc:	4b36      	ldr	r3, [pc, #216]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed4:	ee07 3a90 	vmov	s15, r3
 8008ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008edc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ee0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008efc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008efe:	4b2a      	ldr	r3, [pc, #168]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	0a5b      	lsrs	r3, r3, #9
 8008f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f08:	ee07 3a90 	vmov	s15, r3
 8008f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f24:	ee17 2a90 	vmov	r2, s15
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008f2c:	4b1e      	ldr	r3, [pc, #120]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f30:	0c1b      	lsrs	r3, r3, #16
 8008f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f36:	ee07 3a90 	vmov	s15, r3
 8008f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f52:	ee17 2a90 	vmov	r2, s15
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008f5a:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5e:	0e1b      	lsrs	r3, r3, #24
 8008f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f64:	ee07 3a90 	vmov	s15, r3
 8008f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f80:	ee17 2a90 	vmov	r2, s15
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008f88:	e008      	b.n	8008f9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	609a      	str	r2, [r3, #8]
}
 8008f9c:	bf00      	nop
 8008f9e:	3724      	adds	r7, #36	; 0x24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	58024400 	.word	0x58024400
 8008fac:	03d09000 	.word	0x03d09000
 8008fb0:	46000000 	.word	0x46000000
 8008fb4:	4c742400 	.word	0x4c742400
 8008fb8:	4a742400 	.word	0x4a742400
 8008fbc:	4c371b00 	.word	0x4c371b00

08008fc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fce:	4b53      	ldr	r3, [pc, #332]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd2:	f003 0303 	and.w	r3, r3, #3
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d101      	bne.n	8008fde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e099      	b.n	8009112 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008fde:	4b4f      	ldr	r3, [pc, #316]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a4e      	ldr	r2, [pc, #312]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 8008fe4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fea:	f7f9 fad7 	bl	800259c <HAL_GetTick>
 8008fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ff0:	e008      	b.n	8009004 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008ff2:	f7f9 fad3 	bl	800259c <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d901      	bls.n	8009004 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e086      	b.n	8009112 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009004:	4b45      	ldr	r3, [pc, #276]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1f0      	bne.n	8008ff2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009010:	4b42      	ldr	r3, [pc, #264]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 8009012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009014:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	031b      	lsls	r3, r3, #12
 800901e:	493f      	ldr	r1, [pc, #252]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 8009020:	4313      	orrs	r3, r2
 8009022:	628b      	str	r3, [r1, #40]	; 0x28
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	3b01      	subs	r3, #1
 800902a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	3b01      	subs	r3, #1
 8009034:	025b      	lsls	r3, r3, #9
 8009036:	b29b      	uxth	r3, r3
 8009038:	431a      	orrs	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	3b01      	subs	r3, #1
 8009040:	041b      	lsls	r3, r3, #16
 8009042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009046:	431a      	orrs	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	3b01      	subs	r3, #1
 800904e:	061b      	lsls	r3, r3, #24
 8009050:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009054:	4931      	ldr	r1, [pc, #196]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 8009056:	4313      	orrs	r3, r2
 8009058:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800905a:	4b30      	ldr	r3, [pc, #192]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 800905c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	492d      	ldr	r1, [pc, #180]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 8009068:	4313      	orrs	r3, r2
 800906a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800906c:	4b2b      	ldr	r3, [pc, #172]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	f023 0220 	bic.w	r2, r3, #32
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	4928      	ldr	r1, [pc, #160]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 800907a:	4313      	orrs	r3, r2
 800907c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800907e:	4b27      	ldr	r3, [pc, #156]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 8009080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009082:	4a26      	ldr	r2, [pc, #152]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 8009084:	f023 0310 	bic.w	r3, r3, #16
 8009088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800908a:	4b24      	ldr	r3, [pc, #144]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 800908c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800908e:	4b24      	ldr	r3, [pc, #144]	; (8009120 <RCCEx_PLL2_Config+0x160>)
 8009090:	4013      	ands	r3, r2
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	69d2      	ldr	r2, [r2, #28]
 8009096:	00d2      	lsls	r2, r2, #3
 8009098:	4920      	ldr	r1, [pc, #128]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 800909a:	4313      	orrs	r3, r2
 800909c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800909e:	4b1f      	ldr	r3, [pc, #124]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 80090a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a2:	4a1e      	ldr	r2, [pc, #120]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 80090a4:	f043 0310 	orr.w	r3, r3, #16
 80090a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d106      	bne.n	80090be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80090b0:	4b1a      	ldr	r3, [pc, #104]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 80090b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b4:	4a19      	ldr	r2, [pc, #100]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 80090b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090bc:	e00f      	b.n	80090de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d106      	bne.n	80090d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80090c4:	4b15      	ldr	r3, [pc, #84]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 80090c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c8:	4a14      	ldr	r2, [pc, #80]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 80090ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090d0:	e005      	b.n	80090de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80090d2:	4b12      	ldr	r3, [pc, #72]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 80090d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d6:	4a11      	ldr	r2, [pc, #68]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 80090d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80090de:	4b0f      	ldr	r3, [pc, #60]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a0e      	ldr	r2, [pc, #56]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 80090e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ea:	f7f9 fa57 	bl	800259c <HAL_GetTick>
 80090ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090f0:	e008      	b.n	8009104 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80090f2:	f7f9 fa53 	bl	800259c <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d901      	bls.n	8009104 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e006      	b.n	8009112 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009104:	4b05      	ldr	r3, [pc, #20]	; (800911c <RCCEx_PLL2_Config+0x15c>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0f0      	beq.n	80090f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	58024400 	.word	0x58024400
 8009120:	ffff0007 	.word	0xffff0007

08009124 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009132:	4b53      	ldr	r3, [pc, #332]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 8009134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009136:	f003 0303 	and.w	r3, r3, #3
 800913a:	2b03      	cmp	r3, #3
 800913c:	d101      	bne.n	8009142 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e099      	b.n	8009276 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009142:	4b4f      	ldr	r3, [pc, #316]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a4e      	ldr	r2, [pc, #312]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 8009148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800914c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800914e:	f7f9 fa25 	bl	800259c <HAL_GetTick>
 8009152:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009154:	e008      	b.n	8009168 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009156:	f7f9 fa21 	bl	800259c <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	2b02      	cmp	r3, #2
 8009162:	d901      	bls.n	8009168 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e086      	b.n	8009276 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009168:	4b45      	ldr	r3, [pc, #276]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1f0      	bne.n	8009156 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009174:	4b42      	ldr	r3, [pc, #264]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 8009176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009178:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	051b      	lsls	r3, r3, #20
 8009182:	493f      	ldr	r1, [pc, #252]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 8009184:	4313      	orrs	r3, r2
 8009186:	628b      	str	r3, [r1, #40]	; 0x28
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	3b01      	subs	r3, #1
 800918e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	3b01      	subs	r3, #1
 8009198:	025b      	lsls	r3, r3, #9
 800919a:	b29b      	uxth	r3, r3
 800919c:	431a      	orrs	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	041b      	lsls	r3, r3, #16
 80091a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	061b      	lsls	r3, r3, #24
 80091b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091b8:	4931      	ldr	r1, [pc, #196]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80091be:	4b30      	ldr	r3, [pc, #192]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 80091c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	492d      	ldr	r1, [pc, #180]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80091d0:	4b2b      	ldr	r3, [pc, #172]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	4928      	ldr	r1, [pc, #160]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 80091de:	4313      	orrs	r3, r2
 80091e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80091e2:	4b27      	ldr	r3, [pc, #156]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 80091e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e6:	4a26      	ldr	r2, [pc, #152]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 80091e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80091ee:	4b24      	ldr	r3, [pc, #144]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 80091f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091f2:	4b24      	ldr	r3, [pc, #144]	; (8009284 <RCCEx_PLL3_Config+0x160>)
 80091f4:	4013      	ands	r3, r2
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	69d2      	ldr	r2, [r2, #28]
 80091fa:	00d2      	lsls	r2, r2, #3
 80091fc:	4920      	ldr	r1, [pc, #128]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009202:	4b1f      	ldr	r3, [pc, #124]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 8009204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009206:	4a1e      	ldr	r2, [pc, #120]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 8009208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800920c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d106      	bne.n	8009222 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009214:	4b1a      	ldr	r3, [pc, #104]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 8009216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009218:	4a19      	ldr	r2, [pc, #100]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 800921a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800921e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009220:	e00f      	b.n	8009242 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d106      	bne.n	8009236 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009228:	4b15      	ldr	r3, [pc, #84]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	4a14      	ldr	r2, [pc, #80]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 800922e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009234:	e005      	b.n	8009242 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009236:	4b12      	ldr	r3, [pc, #72]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 8009238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923a:	4a11      	ldr	r2, [pc, #68]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 800923c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009240:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009242:	4b0f      	ldr	r3, [pc, #60]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a0e      	ldr	r2, [pc, #56]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 8009248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800924c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800924e:	f7f9 f9a5 	bl	800259c <HAL_GetTick>
 8009252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009254:	e008      	b.n	8009268 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009256:	f7f9 f9a1 	bl	800259c <HAL_GetTick>
 800925a:	4602      	mov	r2, r0
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	2b02      	cmp	r3, #2
 8009262:	d901      	bls.n	8009268 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	e006      	b.n	8009276 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009268:	4b05      	ldr	r3, [pc, #20]	; (8009280 <RCCEx_PLL3_Config+0x15c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d0f0      	beq.n	8009256 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009274:	7bfb      	ldrb	r3, [r7, #15]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	58024400 	.word	0x58024400
 8009284:	ffff0007 	.word	0xffff0007

08009288 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8009290:	2300      	movs	r3, #0
 8009292:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e0eb      	b.n	8009476 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a75      	ldr	r2, [pc, #468]	; (8009480 <HAL_SPI_Init+0x1f8>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d00f      	beq.n	80092ce <HAL_SPI_Init+0x46>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a74      	ldr	r2, [pc, #464]	; (8009484 <HAL_SPI_Init+0x1fc>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d00a      	beq.n	80092ce <HAL_SPI_Init+0x46>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a72      	ldr	r2, [pc, #456]	; (8009488 <HAL_SPI_Init+0x200>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d005      	beq.n	80092ce <HAL_SPI_Init+0x46>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	2b0f      	cmp	r3, #15
 80092c8:	d901      	bls.n	80092ce <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e0d3      	b.n	8009476 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f8dc 	bl	800948c <SPI_GetPacketSize>
 80092d4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a69      	ldr	r2, [pc, #420]	; (8009480 <HAL_SPI_Init+0x1f8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d00c      	beq.n	80092fa <HAL_SPI_Init+0x72>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a67      	ldr	r2, [pc, #412]	; (8009484 <HAL_SPI_Init+0x1fc>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d007      	beq.n	80092fa <HAL_SPI_Init+0x72>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a66      	ldr	r2, [pc, #408]	; (8009488 <HAL_SPI_Init+0x200>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d002      	beq.n	80092fa <HAL_SPI_Init+0x72>
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d811      	bhi.n	800931e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80092fe:	4a60      	ldr	r2, [pc, #384]	; (8009480 <HAL_SPI_Init+0x1f8>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d009      	beq.n	8009318 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a5e      	ldr	r2, [pc, #376]	; (8009484 <HAL_SPI_Init+0x1fc>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d004      	beq.n	8009318 <HAL_SPI_Init+0x90>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a5d      	ldr	r2, [pc, #372]	; (8009488 <HAL_SPI_Init+0x200>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d104      	bne.n	8009322 <HAL_SPI_Init+0x9a>
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b10      	cmp	r3, #16
 800931c:	d901      	bls.n	8009322 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e0a9      	b.n	8009476 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7f8 fb56 	bl	80019e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f022 0201 	bic.w	r2, r2, #1
 8009352:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800935c:	d119      	bne.n	8009392 <HAL_SPI_Init+0x10a>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009366:	d103      	bne.n	8009370 <HAL_SPI_Init+0xe8>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936c:	2b00      	cmp	r3, #0
 800936e:	d008      	beq.n	8009382 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10c      	bne.n	8009392 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009380:	d107      	bne.n	8009392 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009390:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	69da      	ldr	r2, [r3, #28]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939a:	431a      	orrs	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	431a      	orrs	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a4:	ea42 0103 	orr.w	r1, r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68da      	ldr	r2, [r3, #12]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093bc:	431a      	orrs	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	431a      	orrs	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	431a      	orrs	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	431a      	orrs	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	431a      	orrs	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e6:	431a      	orrs	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	431a      	orrs	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093f2:	ea42 0103 	orr.w	r1, r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	430a      	orrs	r2, r1
 8009400:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d113      	bne.n	8009432 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800941c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009430:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f022 0201 	bic.w	r2, r2, #1
 8009440:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	430a      	orrs	r2, r1
 8009462:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	40013000 	.word	0x40013000
 8009484:	40003800 	.word	0x40003800
 8009488:	40003c00 	.word	0x40003c00

0800948c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009498:	095b      	lsrs	r3, r3, #5
 800949a:	3301      	adds	r3, #1
 800949c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	3301      	adds	r3, #1
 80094a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	3307      	adds	r3, #7
 80094aa:	08db      	lsrs	r3, r3, #3
 80094ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	fb02 f303 	mul.w	r3, r2, r3
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e049      	b.n	8009568 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d106      	bne.n	80094ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7f8 fc21 	bl	8001d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3304      	adds	r3, #4
 80094fe:	4619      	mov	r1, r3
 8009500:	4610      	mov	r0, r2
 8009502:	f000 fe1f 	bl	800a144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e049      	b.n	8009616 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d106      	bne.n	800959c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7f8 fc32 	bl	8001e00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4619      	mov	r1, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	f000 fdc8 	bl	800a144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d109      	bne.n	8009644 <HAL_TIM_PWM_Start+0x24>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b01      	cmp	r3, #1
 800963a:	bf14      	ite	ne
 800963c:	2301      	movne	r3, #1
 800963e:	2300      	moveq	r3, #0
 8009640:	b2db      	uxtb	r3, r3
 8009642:	e03c      	b.n	80096be <HAL_TIM_PWM_Start+0x9e>
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	2b04      	cmp	r3, #4
 8009648:	d109      	bne.n	800965e <HAL_TIM_PWM_Start+0x3e>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b01      	cmp	r3, #1
 8009654:	bf14      	ite	ne
 8009656:	2301      	movne	r3, #1
 8009658:	2300      	moveq	r3, #0
 800965a:	b2db      	uxtb	r3, r3
 800965c:	e02f      	b.n	80096be <HAL_TIM_PWM_Start+0x9e>
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	2b08      	cmp	r3, #8
 8009662:	d109      	bne.n	8009678 <HAL_TIM_PWM_Start+0x58>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b01      	cmp	r3, #1
 800966e:	bf14      	ite	ne
 8009670:	2301      	movne	r3, #1
 8009672:	2300      	moveq	r3, #0
 8009674:	b2db      	uxtb	r3, r3
 8009676:	e022      	b.n	80096be <HAL_TIM_PWM_Start+0x9e>
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2b0c      	cmp	r3, #12
 800967c:	d109      	bne.n	8009692 <HAL_TIM_PWM_Start+0x72>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b01      	cmp	r3, #1
 8009688:	bf14      	ite	ne
 800968a:	2301      	movne	r3, #1
 800968c:	2300      	moveq	r3, #0
 800968e:	b2db      	uxtb	r3, r3
 8009690:	e015      	b.n	80096be <HAL_TIM_PWM_Start+0x9e>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b10      	cmp	r3, #16
 8009696:	d109      	bne.n	80096ac <HAL_TIM_PWM_Start+0x8c>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	bf14      	ite	ne
 80096a4:	2301      	movne	r3, #1
 80096a6:	2300      	moveq	r3, #0
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	e008      	b.n	80096be <HAL_TIM_PWM_Start+0x9e>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	bf14      	ite	ne
 80096b8:	2301      	movne	r3, #1
 80096ba:	2300      	moveq	r3, #0
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e09c      	b.n	8009800 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <HAL_TIM_PWM_Start+0xb6>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2202      	movs	r2, #2
 80096d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096d4:	e023      	b.n	800971e <HAL_TIM_PWM_Start+0xfe>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b04      	cmp	r3, #4
 80096da:	d104      	bne.n	80096e6 <HAL_TIM_PWM_Start+0xc6>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2202      	movs	r2, #2
 80096e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096e4:	e01b      	b.n	800971e <HAL_TIM_PWM_Start+0xfe>
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2b08      	cmp	r3, #8
 80096ea:	d104      	bne.n	80096f6 <HAL_TIM_PWM_Start+0xd6>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2202      	movs	r2, #2
 80096f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096f4:	e013      	b.n	800971e <HAL_TIM_PWM_Start+0xfe>
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b0c      	cmp	r3, #12
 80096fa:	d104      	bne.n	8009706 <HAL_TIM_PWM_Start+0xe6>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009704:	e00b      	b.n	800971e <HAL_TIM_PWM_Start+0xfe>
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	2b10      	cmp	r3, #16
 800970a:	d104      	bne.n	8009716 <HAL_TIM_PWM_Start+0xf6>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009714:	e003      	b.n	800971e <HAL_TIM_PWM_Start+0xfe>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2202      	movs	r2, #2
 800971a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2201      	movs	r2, #1
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	4618      	mov	r0, r3
 8009728:	f001 f912 	bl	800a950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a35      	ldr	r2, [pc, #212]	; (8009808 <HAL_TIM_PWM_Start+0x1e8>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d013      	beq.n	800975e <HAL_TIM_PWM_Start+0x13e>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a34      	ldr	r2, [pc, #208]	; (800980c <HAL_TIM_PWM_Start+0x1ec>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d00e      	beq.n	800975e <HAL_TIM_PWM_Start+0x13e>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a32      	ldr	r2, [pc, #200]	; (8009810 <HAL_TIM_PWM_Start+0x1f0>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d009      	beq.n	800975e <HAL_TIM_PWM_Start+0x13e>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a31      	ldr	r2, [pc, #196]	; (8009814 <HAL_TIM_PWM_Start+0x1f4>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d004      	beq.n	800975e <HAL_TIM_PWM_Start+0x13e>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a2f      	ldr	r2, [pc, #188]	; (8009818 <HAL_TIM_PWM_Start+0x1f8>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d101      	bne.n	8009762 <HAL_TIM_PWM_Start+0x142>
 800975e:	2301      	movs	r3, #1
 8009760:	e000      	b.n	8009764 <HAL_TIM_PWM_Start+0x144>
 8009762:	2300      	movs	r3, #0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d007      	beq.n	8009778 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009776:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a22      	ldr	r2, [pc, #136]	; (8009808 <HAL_TIM_PWM_Start+0x1e8>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d01d      	beq.n	80097be <HAL_TIM_PWM_Start+0x19e>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800978a:	d018      	beq.n	80097be <HAL_TIM_PWM_Start+0x19e>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a22      	ldr	r2, [pc, #136]	; (800981c <HAL_TIM_PWM_Start+0x1fc>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d013      	beq.n	80097be <HAL_TIM_PWM_Start+0x19e>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a21      	ldr	r2, [pc, #132]	; (8009820 <HAL_TIM_PWM_Start+0x200>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d00e      	beq.n	80097be <HAL_TIM_PWM_Start+0x19e>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a1f      	ldr	r2, [pc, #124]	; (8009824 <HAL_TIM_PWM_Start+0x204>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d009      	beq.n	80097be <HAL_TIM_PWM_Start+0x19e>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a17      	ldr	r2, [pc, #92]	; (800980c <HAL_TIM_PWM_Start+0x1ec>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d004      	beq.n	80097be <HAL_TIM_PWM_Start+0x19e>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a1b      	ldr	r2, [pc, #108]	; (8009828 <HAL_TIM_PWM_Start+0x208>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d115      	bne.n	80097ea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689a      	ldr	r2, [r3, #8]
 80097c4:	4b19      	ldr	r3, [pc, #100]	; (800982c <HAL_TIM_PWM_Start+0x20c>)
 80097c6:	4013      	ands	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2b06      	cmp	r3, #6
 80097ce:	d015      	beq.n	80097fc <HAL_TIM_PWM_Start+0x1dc>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097d6:	d011      	beq.n	80097fc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f042 0201 	orr.w	r2, r2, #1
 80097e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e8:	e008      	b.n	80097fc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f042 0201 	orr.w	r2, r2, #1
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	e000      	b.n	80097fe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	40010000 	.word	0x40010000
 800980c:	40010400 	.word	0x40010400
 8009810:	40014000 	.word	0x40014000
 8009814:	40014400 	.word	0x40014400
 8009818:	40014800 	.word	0x40014800
 800981c:	40000400 	.word	0x40000400
 8009820:	40000800 	.word	0x40000800
 8009824:	40000c00 	.word	0x40000c00
 8009828:	40001800 	.word	0x40001800
 800982c:	00010007 	.word	0x00010007

08009830 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e08f      	b.n	8009964 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d106      	bne.n	800985e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7f8 f951 	bl	8001b00 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2202      	movs	r2, #2
 8009862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	6899      	ldr	r1, [r3, #8]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	4b3e      	ldr	r3, [pc, #248]	; (800996c <HAL_TIM_Encoder_Init+0x13c>)
 8009872:	400b      	ands	r3, r1
 8009874:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	3304      	adds	r3, #4
 800987e:	4619      	mov	r1, r3
 8009880:	4610      	mov	r0, r2
 8009882:	f000 fc5f 	bl	800a144 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	4b31      	ldr	r3, [pc, #196]	; (8009970 <HAL_TIM_Encoder_Init+0x140>)
 80098ac:	4013      	ands	r3, r2
 80098ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	689a      	ldr	r2, [r3, #8]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	4313      	orrs	r3, r2
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	4313      	orrs	r3, r2
 80098c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	4b2b      	ldr	r3, [pc, #172]	; (8009974 <HAL_TIM_Encoder_Init+0x144>)
 80098c6:	4013      	ands	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	4b2a      	ldr	r3, [pc, #168]	; (8009978 <HAL_TIM_Encoder_Init+0x148>)
 80098ce:	4013      	ands	r3, r2
 80098d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	68da      	ldr	r2, [r3, #12]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	021b      	lsls	r3, r3, #8
 80098dc:	4313      	orrs	r3, r2
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	011a      	lsls	r2, r3, #4
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	031b      	lsls	r3, r3, #12
 80098f0:	4313      	orrs	r3, r2
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80098fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009906:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	011b      	lsls	r3, r3, #4
 8009912:	4313      	orrs	r3, r2
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4313      	orrs	r3, r2
 8009918:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2201      	movs	r2, #1
 800994e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	fffebff8 	.word	0xfffebff8
 8009970:	fffffcfc 	.word	0xfffffcfc
 8009974:	fffff3f3 	.word	0xfffff3f3
 8009978:	ffff0f0f 	.word	0xffff0f0f

0800997c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800998c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009994:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800999c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d110      	bne.n	80099ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d102      	bne.n	80099b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80099b2:	7b7b      	ldrb	r3, [r7, #13]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d001      	beq.n	80099bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e069      	b.n	8009a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2202      	movs	r2, #2
 80099c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099cc:	e031      	b.n	8009a32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d110      	bne.n	80099f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d102      	bne.n	80099e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80099da:	7b3b      	ldrb	r3, [r7, #12]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d001      	beq.n	80099e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e055      	b.n	8009a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2202      	movs	r2, #2
 80099f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099f4:	e01d      	b.n	8009a32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d108      	bne.n	8009a0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d105      	bne.n	8009a0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a02:	7b7b      	ldrb	r3, [r7, #13]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d102      	bne.n	8009a0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a08:	7b3b      	ldrb	r3, [r7, #12]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d001      	beq.n	8009a12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e03e      	b.n	8009a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2202      	movs	r2, #2
 8009a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2202      	movs	r2, #2
 8009a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <HAL_TIM_Encoder_Start+0xc4>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b04      	cmp	r3, #4
 8009a3c:	d008      	beq.n	8009a50 <HAL_TIM_Encoder_Start+0xd4>
 8009a3e:	e00f      	b.n	8009a60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2201      	movs	r2, #1
 8009a46:	2100      	movs	r1, #0
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 ff81 	bl	800a950 <TIM_CCxChannelCmd>
      break;
 8009a4e:	e016      	b.n	8009a7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2201      	movs	r2, #1
 8009a56:	2104      	movs	r1, #4
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 ff79 	bl	800a950 <TIM_CCxChannelCmd>
      break;
 8009a5e:	e00e      	b.n	8009a7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2201      	movs	r2, #1
 8009a66:	2100      	movs	r1, #0
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f000 ff71 	bl	800a950 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2201      	movs	r2, #1
 8009a74:	2104      	movs	r1, #4
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 ff6a 	bl	800a950 <TIM_CCxChannelCmd>
      break;
 8009a7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f042 0201 	orr.w	r2, r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	f003 0302 	and.w	r3, r3, #2
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d122      	bne.n	8009af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	f003 0302 	and.w	r3, r3, #2
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d11b      	bne.n	8009af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f06f 0202 	mvn.w	r2, #2
 8009ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fb14 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009ae0:	e005      	b.n	8009aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fb06 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fb17 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f003 0304 	and.w	r3, r3, #4
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	d122      	bne.n	8009b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f003 0304 	and.w	r3, r3, #4
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d11b      	bne.n	8009b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f06f 0204 	mvn.w	r2, #4
 8009b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d003      	beq.n	8009b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 faea 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009b34:	e005      	b.n	8009b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fadc 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 faed 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	f003 0308 	and.w	r3, r3, #8
 8009b52:	2b08      	cmp	r3, #8
 8009b54:	d122      	bne.n	8009b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	f003 0308 	and.w	r3, r3, #8
 8009b60:	2b08      	cmp	r3, #8
 8009b62:	d11b      	bne.n	8009b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f06f 0208 	mvn.w	r2, #8
 8009b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2204      	movs	r2, #4
 8009b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	69db      	ldr	r3, [r3, #28]
 8009b7a:	f003 0303 	and.w	r3, r3, #3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fac0 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009b88:	e005      	b.n	8009b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fab2 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fac3 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	f003 0310 	and.w	r3, r3, #16
 8009ba6:	2b10      	cmp	r3, #16
 8009ba8:	d122      	bne.n	8009bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f003 0310 	and.w	r3, r3, #16
 8009bb4:	2b10      	cmp	r3, #16
 8009bb6:	d11b      	bne.n	8009bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f06f 0210 	mvn.w	r2, #16
 8009bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2208      	movs	r2, #8
 8009bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fa96 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009bdc:	e005      	b.n	8009bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fa88 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fa99 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d10e      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d107      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f06f 0201 	mvn.w	r2, #1
 8009c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fa62 	bl	800a0e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c26:	2b80      	cmp	r3, #128	; 0x80
 8009c28:	d10e      	bne.n	8009c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c34:	2b80      	cmp	r3, #128	; 0x80
 8009c36:	d107      	bne.n	8009c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 ffba 	bl	800abbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c56:	d10e      	bne.n	8009c76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c62:	2b80      	cmp	r3, #128	; 0x80
 8009c64:	d107      	bne.n	8009c76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 ffad 	bl	800abd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c80:	2b40      	cmp	r3, #64	; 0x40
 8009c82:	d10e      	bne.n	8009ca2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c8e:	2b40      	cmp	r3, #64	; 0x40
 8009c90:	d107      	bne.n	8009ca2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fa47 	bl	800a130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	f003 0320 	and.w	r3, r3, #32
 8009cac:	2b20      	cmp	r3, #32
 8009cae:	d10e      	bne.n	8009cce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	f003 0320 	and.w	r3, r3, #32
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	d107      	bne.n	8009cce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f06f 0220 	mvn.w	r2, #32
 8009cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 ff6d 	bl	800aba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cce:	bf00      	nop
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d101      	bne.n	8009cf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009cee:	2302      	movs	r3, #2
 8009cf0:	e0fd      	b.n	8009eee <HAL_TIM_PWM_ConfigChannel+0x216>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b14      	cmp	r3, #20
 8009cfe:	f200 80f0 	bhi.w	8009ee2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009d02:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d08:	08009d5d 	.word	0x08009d5d
 8009d0c:	08009ee3 	.word	0x08009ee3
 8009d10:	08009ee3 	.word	0x08009ee3
 8009d14:	08009ee3 	.word	0x08009ee3
 8009d18:	08009d9d 	.word	0x08009d9d
 8009d1c:	08009ee3 	.word	0x08009ee3
 8009d20:	08009ee3 	.word	0x08009ee3
 8009d24:	08009ee3 	.word	0x08009ee3
 8009d28:	08009ddf 	.word	0x08009ddf
 8009d2c:	08009ee3 	.word	0x08009ee3
 8009d30:	08009ee3 	.word	0x08009ee3
 8009d34:	08009ee3 	.word	0x08009ee3
 8009d38:	08009e1f 	.word	0x08009e1f
 8009d3c:	08009ee3 	.word	0x08009ee3
 8009d40:	08009ee3 	.word	0x08009ee3
 8009d44:	08009ee3 	.word	0x08009ee3
 8009d48:	08009e61 	.word	0x08009e61
 8009d4c:	08009ee3 	.word	0x08009ee3
 8009d50:	08009ee3 	.word	0x08009ee3
 8009d54:	08009ee3 	.word	0x08009ee3
 8009d58:	08009ea1 	.word	0x08009ea1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68b9      	ldr	r1, [r7, #8]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 fa88 	bl	800a278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	699a      	ldr	r2, [r3, #24]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f042 0208 	orr.w	r2, r2, #8
 8009d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	699a      	ldr	r2, [r3, #24]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f022 0204 	bic.w	r2, r2, #4
 8009d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6999      	ldr	r1, [r3, #24]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	691a      	ldr	r2, [r3, #16]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	619a      	str	r2, [r3, #24]
      break;
 8009d9a:	e0a3      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68b9      	ldr	r1, [r7, #8]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 faf8 	bl	800a398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	699a      	ldr	r2, [r3, #24]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	699a      	ldr	r2, [r3, #24]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6999      	ldr	r1, [r3, #24]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	021a      	lsls	r2, r3, #8
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	619a      	str	r2, [r3, #24]
      break;
 8009ddc:	e082      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68b9      	ldr	r1, [r7, #8]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f000 fb61 	bl	800a4ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	69da      	ldr	r2, [r3, #28]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f042 0208 	orr.w	r2, r2, #8
 8009df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	69da      	ldr	r2, [r3, #28]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0204 	bic.w	r2, r2, #4
 8009e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	69d9      	ldr	r1, [r3, #28]
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	691a      	ldr	r2, [r3, #16]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	61da      	str	r2, [r3, #28]
      break;
 8009e1c:	e062      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68b9      	ldr	r1, [r7, #8]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 fbc7 	bl	800a5b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	69da      	ldr	r2, [r3, #28]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69da      	ldr	r2, [r3, #28]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	69d9      	ldr	r1, [r3, #28]
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	021a      	lsls	r2, r3, #8
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	61da      	str	r2, [r3, #28]
      break;
 8009e5e:	e041      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68b9      	ldr	r1, [r7, #8]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 fc0e 	bl	800a688 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f042 0208 	orr.w	r2, r2, #8
 8009e7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f022 0204 	bic.w	r2, r2, #4
 8009e8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	691a      	ldr	r2, [r3, #16]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e9e:	e021      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68b9      	ldr	r1, [r7, #8]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fc50 	bl	800a74c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009eba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009eca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	021a      	lsls	r2, r3, #8
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	430a      	orrs	r2, r1
 8009ede:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ee0:	e000      	b.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009ee2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop

08009ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d101      	bne.n	8009f10 <HAL_TIM_ConfigClockSource+0x18>
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	e0db      	b.n	800a0c8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	4b69      	ldr	r3, [pc, #420]	; (800a0d0 <HAL_TIM_ConfigClockSource+0x1d8>)
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a63      	ldr	r2, [pc, #396]	; (800a0d4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	f000 80a9 	beq.w	800a09e <HAL_TIM_ConfigClockSource+0x1a6>
 8009f4c:	4a61      	ldr	r2, [pc, #388]	; (800a0d4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	f200 80ae 	bhi.w	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f54:	4a60      	ldr	r2, [pc, #384]	; (800a0d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	f000 80a1 	beq.w	800a09e <HAL_TIM_ConfigClockSource+0x1a6>
 8009f5c:	4a5e      	ldr	r2, [pc, #376]	; (800a0d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	f200 80a6 	bhi.w	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f64:	4a5d      	ldr	r2, [pc, #372]	; (800a0dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	f000 8099 	beq.w	800a09e <HAL_TIM_ConfigClockSource+0x1a6>
 8009f6c:	4a5b      	ldr	r2, [pc, #364]	; (800a0dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	f200 809e 	bhi.w	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f78:	f000 8091 	beq.w	800a09e <HAL_TIM_ConfigClockSource+0x1a6>
 8009f7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f80:	f200 8096 	bhi.w	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f88:	f000 8089 	beq.w	800a09e <HAL_TIM_ConfigClockSource+0x1a6>
 8009f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f90:	f200 808e 	bhi.w	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f98:	d03e      	beq.n	800a018 <HAL_TIM_ConfigClockSource+0x120>
 8009f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f9e:	f200 8087 	bhi.w	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fa6:	f000 8085 	beq.w	800a0b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fae:	d87f      	bhi.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fb0:	2b70      	cmp	r3, #112	; 0x70
 8009fb2:	d01a      	beq.n	8009fea <HAL_TIM_ConfigClockSource+0xf2>
 8009fb4:	2b70      	cmp	r3, #112	; 0x70
 8009fb6:	d87b      	bhi.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fb8:	2b60      	cmp	r3, #96	; 0x60
 8009fba:	d050      	beq.n	800a05e <HAL_TIM_ConfigClockSource+0x166>
 8009fbc:	2b60      	cmp	r3, #96	; 0x60
 8009fbe:	d877      	bhi.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fc0:	2b50      	cmp	r3, #80	; 0x50
 8009fc2:	d03c      	beq.n	800a03e <HAL_TIM_ConfigClockSource+0x146>
 8009fc4:	2b50      	cmp	r3, #80	; 0x50
 8009fc6:	d873      	bhi.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fc8:	2b40      	cmp	r3, #64	; 0x40
 8009fca:	d058      	beq.n	800a07e <HAL_TIM_ConfigClockSource+0x186>
 8009fcc:	2b40      	cmp	r3, #64	; 0x40
 8009fce:	d86f      	bhi.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fd0:	2b30      	cmp	r3, #48	; 0x30
 8009fd2:	d064      	beq.n	800a09e <HAL_TIM_ConfigClockSource+0x1a6>
 8009fd4:	2b30      	cmp	r3, #48	; 0x30
 8009fd6:	d86b      	bhi.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fd8:	2b20      	cmp	r3, #32
 8009fda:	d060      	beq.n	800a09e <HAL_TIM_ConfigClockSource+0x1a6>
 8009fdc:	2b20      	cmp	r3, #32
 8009fde:	d867      	bhi.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d05c      	beq.n	800a09e <HAL_TIM_ConfigClockSource+0x1a6>
 8009fe4:	2b10      	cmp	r3, #16
 8009fe6:	d05a      	beq.n	800a09e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009fe8:	e062      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6818      	ldr	r0, [r3, #0]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	6899      	ldr	r1, [r3, #8]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f000 fc89 	bl	800a910 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a00c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	609a      	str	r2, [r3, #8]
      break;
 800a016:	e04e      	b.n	800a0b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6818      	ldr	r0, [r3, #0]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	6899      	ldr	r1, [r3, #8]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	685a      	ldr	r2, [r3, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	f000 fc72 	bl	800a910 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	689a      	ldr	r2, [r3, #8]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a03a:	609a      	str	r2, [r3, #8]
      break;
 800a03c:	e03b      	b.n	800a0b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6818      	ldr	r0, [r3, #0]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	6859      	ldr	r1, [r3, #4]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	461a      	mov	r2, r3
 800a04c:	f000 fbe2 	bl	800a814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2150      	movs	r1, #80	; 0x50
 800a056:	4618      	mov	r0, r3
 800a058:	f000 fc3c 	bl	800a8d4 <TIM_ITRx_SetConfig>
      break;
 800a05c:	e02b      	b.n	800a0b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6818      	ldr	r0, [r3, #0]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	6859      	ldr	r1, [r3, #4]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	461a      	mov	r2, r3
 800a06c:	f000 fc01 	bl	800a872 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2160      	movs	r1, #96	; 0x60
 800a076:	4618      	mov	r0, r3
 800a078:	f000 fc2c 	bl	800a8d4 <TIM_ITRx_SetConfig>
      break;
 800a07c:	e01b      	b.n	800a0b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6818      	ldr	r0, [r3, #0]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	6859      	ldr	r1, [r3, #4]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	461a      	mov	r2, r3
 800a08c:	f000 fbc2 	bl	800a814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2140      	movs	r1, #64	; 0x40
 800a096:	4618      	mov	r0, r3
 800a098:	f000 fc1c 	bl	800a8d4 <TIM_ITRx_SetConfig>
      break;
 800a09c:	e00b      	b.n	800a0b6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	f000 fc13 	bl	800a8d4 <TIM_ITRx_SetConfig>
        break;
 800a0ae:	e002      	b.n	800a0b6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a0b0:	bf00      	nop
 800a0b2:	e000      	b.n	800a0b6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a0b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	ffceff88 	.word	0xffceff88
 800a0d4:	00100040 	.word	0x00100040
 800a0d8:	00100030 	.word	0x00100030
 800a0dc:	00100020 	.word	0x00100020

0800a0e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a40      	ldr	r2, [pc, #256]	; (800a258 <TIM_Base_SetConfig+0x114>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d013      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a162:	d00f      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a3d      	ldr	r2, [pc, #244]	; (800a25c <TIM_Base_SetConfig+0x118>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00b      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a3c      	ldr	r2, [pc, #240]	; (800a260 <TIM_Base_SetConfig+0x11c>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d007      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a3b      	ldr	r2, [pc, #236]	; (800a264 <TIM_Base_SetConfig+0x120>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d003      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a3a      	ldr	r2, [pc, #232]	; (800a268 <TIM_Base_SetConfig+0x124>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d108      	bne.n	800a196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a18a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	4313      	orrs	r3, r2
 800a194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a2f      	ldr	r2, [pc, #188]	; (800a258 <TIM_Base_SetConfig+0x114>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d01f      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1a4:	d01b      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a2c      	ldr	r2, [pc, #176]	; (800a25c <TIM_Base_SetConfig+0x118>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d017      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a2b      	ldr	r2, [pc, #172]	; (800a260 <TIM_Base_SetConfig+0x11c>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d013      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a2a      	ldr	r2, [pc, #168]	; (800a264 <TIM_Base_SetConfig+0x120>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d00f      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a29      	ldr	r2, [pc, #164]	; (800a268 <TIM_Base_SetConfig+0x124>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d00b      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a28      	ldr	r2, [pc, #160]	; (800a26c <TIM_Base_SetConfig+0x128>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d007      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a27      	ldr	r2, [pc, #156]	; (800a270 <TIM_Base_SetConfig+0x12c>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d003      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a26      	ldr	r2, [pc, #152]	; (800a274 <TIM_Base_SetConfig+0x130>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d108      	bne.n	800a1f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a10      	ldr	r2, [pc, #64]	; (800a258 <TIM_Base_SetConfig+0x114>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d00f      	beq.n	800a23c <TIM_Base_SetConfig+0xf8>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a12      	ldr	r2, [pc, #72]	; (800a268 <TIM_Base_SetConfig+0x124>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d00b      	beq.n	800a23c <TIM_Base_SetConfig+0xf8>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a11      	ldr	r2, [pc, #68]	; (800a26c <TIM_Base_SetConfig+0x128>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d007      	beq.n	800a23c <TIM_Base_SetConfig+0xf8>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a10      	ldr	r2, [pc, #64]	; (800a270 <TIM_Base_SetConfig+0x12c>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d003      	beq.n	800a23c <TIM_Base_SetConfig+0xf8>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a0f      	ldr	r2, [pc, #60]	; (800a274 <TIM_Base_SetConfig+0x130>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d103      	bne.n	800a244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	691a      	ldr	r2, [r3, #16]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	615a      	str	r2, [r3, #20]
}
 800a24a:	bf00      	nop
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	40010000 	.word	0x40010000
 800a25c:	40000400 	.word	0x40000400
 800a260:	40000800 	.word	0x40000800
 800a264:	40000c00 	.word	0x40000c00
 800a268:	40010400 	.word	0x40010400
 800a26c:	40014000 	.word	0x40014000
 800a270:	40014400 	.word	0x40014400
 800a274:	40014800 	.word	0x40014800

0800a278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	f023 0201 	bic.w	r2, r3, #1
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	4b37      	ldr	r3, [pc, #220]	; (800a380 <TIM_OC1_SetConfig+0x108>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f023 0303 	bic.w	r3, r3, #3
 800a2ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f023 0302 	bic.w	r3, r3, #2
 800a2c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a2d      	ldr	r2, [pc, #180]	; (800a384 <TIM_OC1_SetConfig+0x10c>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d00f      	beq.n	800a2f4 <TIM_OC1_SetConfig+0x7c>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a2c      	ldr	r2, [pc, #176]	; (800a388 <TIM_OC1_SetConfig+0x110>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d00b      	beq.n	800a2f4 <TIM_OC1_SetConfig+0x7c>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a2b      	ldr	r2, [pc, #172]	; (800a38c <TIM_OC1_SetConfig+0x114>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d007      	beq.n	800a2f4 <TIM_OC1_SetConfig+0x7c>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a2a      	ldr	r2, [pc, #168]	; (800a390 <TIM_OC1_SetConfig+0x118>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d003      	beq.n	800a2f4 <TIM_OC1_SetConfig+0x7c>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a29      	ldr	r2, [pc, #164]	; (800a394 <TIM_OC1_SetConfig+0x11c>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d10c      	bne.n	800a30e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f023 0308 	bic.w	r3, r3, #8
 800a2fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	4313      	orrs	r3, r2
 800a304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f023 0304 	bic.w	r3, r3, #4
 800a30c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a1c      	ldr	r2, [pc, #112]	; (800a384 <TIM_OC1_SetConfig+0x10c>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d00f      	beq.n	800a336 <TIM_OC1_SetConfig+0xbe>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a1b      	ldr	r2, [pc, #108]	; (800a388 <TIM_OC1_SetConfig+0x110>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d00b      	beq.n	800a336 <TIM_OC1_SetConfig+0xbe>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a1a      	ldr	r2, [pc, #104]	; (800a38c <TIM_OC1_SetConfig+0x114>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d007      	beq.n	800a336 <TIM_OC1_SetConfig+0xbe>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a19      	ldr	r2, [pc, #100]	; (800a390 <TIM_OC1_SetConfig+0x118>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d003      	beq.n	800a336 <TIM_OC1_SetConfig+0xbe>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a18      	ldr	r2, [pc, #96]	; (800a394 <TIM_OC1_SetConfig+0x11c>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d111      	bne.n	800a35a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a33c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	4313      	orrs	r3, r2
 800a358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	621a      	str	r2, [r3, #32]
}
 800a374:	bf00      	nop
 800a376:	371c      	adds	r7, #28
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	fffeff8f 	.word	0xfffeff8f
 800a384:	40010000 	.word	0x40010000
 800a388:	40010400 	.word	0x40010400
 800a38c:	40014000 	.word	0x40014000
 800a390:	40014400 	.word	0x40014400
 800a394:	40014800 	.word	0x40014800

0800a398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	f023 0210 	bic.w	r2, r3, #16
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	4b34      	ldr	r3, [pc, #208]	; (800a494 <TIM_OC2_SetConfig+0xfc>)
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	021b      	lsls	r3, r3, #8
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f023 0320 	bic.w	r3, r3, #32
 800a3e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	011b      	lsls	r3, r3, #4
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a29      	ldr	r2, [pc, #164]	; (800a498 <TIM_OC2_SetConfig+0x100>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d003      	beq.n	800a400 <TIM_OC2_SetConfig+0x68>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a28      	ldr	r2, [pc, #160]	; (800a49c <TIM_OC2_SetConfig+0x104>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d10d      	bne.n	800a41c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	011b      	lsls	r3, r3, #4
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	4313      	orrs	r3, r2
 800a412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a41a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a1e      	ldr	r2, [pc, #120]	; (800a498 <TIM_OC2_SetConfig+0x100>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d00f      	beq.n	800a444 <TIM_OC2_SetConfig+0xac>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a1d      	ldr	r2, [pc, #116]	; (800a49c <TIM_OC2_SetConfig+0x104>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d00b      	beq.n	800a444 <TIM_OC2_SetConfig+0xac>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a1c      	ldr	r2, [pc, #112]	; (800a4a0 <TIM_OC2_SetConfig+0x108>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d007      	beq.n	800a444 <TIM_OC2_SetConfig+0xac>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a1b      	ldr	r2, [pc, #108]	; (800a4a4 <TIM_OC2_SetConfig+0x10c>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d003      	beq.n	800a444 <TIM_OC2_SetConfig+0xac>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a1a      	ldr	r2, [pc, #104]	; (800a4a8 <TIM_OC2_SetConfig+0x110>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d113      	bne.n	800a46c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a44a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	4313      	orrs	r3, r2
 800a46a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	621a      	str	r2, [r3, #32]
}
 800a486:	bf00      	nop
 800a488:	371c      	adds	r7, #28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	feff8fff 	.word	0xfeff8fff
 800a498:	40010000 	.word	0x40010000
 800a49c:	40010400 	.word	0x40010400
 800a4a0:	40014000 	.word	0x40014000
 800a4a4:	40014400 	.word	0x40014400
 800a4a8:	40014800 	.word	0x40014800

0800a4ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f023 0303 	bic.w	r3, r3, #3
 800a4e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	021b      	lsls	r3, r3, #8
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a27      	ldr	r2, [pc, #156]	; (800a5a4 <TIM_OC3_SetConfig+0xf8>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d003      	beq.n	800a512 <TIM_OC3_SetConfig+0x66>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a26      	ldr	r2, [pc, #152]	; (800a5a8 <TIM_OC3_SetConfig+0xfc>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d10d      	bne.n	800a52e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	021b      	lsls	r3, r3, #8
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	4313      	orrs	r3, r2
 800a524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a52c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a1c      	ldr	r2, [pc, #112]	; (800a5a4 <TIM_OC3_SetConfig+0xf8>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d00f      	beq.n	800a556 <TIM_OC3_SetConfig+0xaa>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a1b      	ldr	r2, [pc, #108]	; (800a5a8 <TIM_OC3_SetConfig+0xfc>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d00b      	beq.n	800a556 <TIM_OC3_SetConfig+0xaa>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a1a      	ldr	r2, [pc, #104]	; (800a5ac <TIM_OC3_SetConfig+0x100>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d007      	beq.n	800a556 <TIM_OC3_SetConfig+0xaa>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a19      	ldr	r2, [pc, #100]	; (800a5b0 <TIM_OC3_SetConfig+0x104>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d003      	beq.n	800a556 <TIM_OC3_SetConfig+0xaa>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a18      	ldr	r2, [pc, #96]	; (800a5b4 <TIM_OC3_SetConfig+0x108>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d113      	bne.n	800a57e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a55c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	011b      	lsls	r3, r3, #4
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	4313      	orrs	r3, r2
 800a570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	011b      	lsls	r3, r3, #4
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	621a      	str	r2, [r3, #32]
}
 800a598:	bf00      	nop
 800a59a:	371c      	adds	r7, #28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr
 800a5a4:	40010000 	.word	0x40010000
 800a5a8:	40010400 	.word	0x40010400
 800a5ac:	40014000 	.word	0x40014000
 800a5b0:	40014400 	.word	0x40014400
 800a5b4:	40014800 	.word	0x40014800

0800a5b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a1b      	ldr	r3, [r3, #32]
 800a5c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	021b      	lsls	r3, r3, #8
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	031b      	lsls	r3, r3, #12
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a18      	ldr	r2, [pc, #96]	; (800a674 <TIM_OC4_SetConfig+0xbc>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d00f      	beq.n	800a638 <TIM_OC4_SetConfig+0x80>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a17      	ldr	r2, [pc, #92]	; (800a678 <TIM_OC4_SetConfig+0xc0>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d00b      	beq.n	800a638 <TIM_OC4_SetConfig+0x80>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a16      	ldr	r2, [pc, #88]	; (800a67c <TIM_OC4_SetConfig+0xc4>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d007      	beq.n	800a638 <TIM_OC4_SetConfig+0x80>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a15      	ldr	r2, [pc, #84]	; (800a680 <TIM_OC4_SetConfig+0xc8>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d003      	beq.n	800a638 <TIM_OC4_SetConfig+0x80>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a14      	ldr	r2, [pc, #80]	; (800a684 <TIM_OC4_SetConfig+0xcc>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d109      	bne.n	800a64c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a63e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	019b      	lsls	r3, r3, #6
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	4313      	orrs	r3, r2
 800a64a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	621a      	str	r2, [r3, #32]
}
 800a666:	bf00      	nop
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	40010000 	.word	0x40010000
 800a678:	40010400 	.word	0x40010400
 800a67c:	40014000 	.word	0x40014000
 800a680:	40014400 	.word	0x40014400
 800a684:	40014800 	.word	0x40014800

0800a688 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a6c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	041b      	lsls	r3, r3, #16
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a17      	ldr	r2, [pc, #92]	; (800a738 <TIM_OC5_SetConfig+0xb0>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d00f      	beq.n	800a6fe <TIM_OC5_SetConfig+0x76>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a16      	ldr	r2, [pc, #88]	; (800a73c <TIM_OC5_SetConfig+0xb4>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d00b      	beq.n	800a6fe <TIM_OC5_SetConfig+0x76>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a15      	ldr	r2, [pc, #84]	; (800a740 <TIM_OC5_SetConfig+0xb8>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d007      	beq.n	800a6fe <TIM_OC5_SetConfig+0x76>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a14      	ldr	r2, [pc, #80]	; (800a744 <TIM_OC5_SetConfig+0xbc>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d003      	beq.n	800a6fe <TIM_OC5_SetConfig+0x76>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a13      	ldr	r2, [pc, #76]	; (800a748 <TIM_OC5_SetConfig+0xc0>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d109      	bne.n	800a712 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a704:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	021b      	lsls	r3, r3, #8
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	4313      	orrs	r3, r2
 800a710:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	621a      	str	r2, [r3, #32]
}
 800a72c:	bf00      	nop
 800a72e:	371c      	adds	r7, #28
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr
 800a738:	40010000 	.word	0x40010000
 800a73c:	40010400 	.word	0x40010400
 800a740:	40014000 	.word	0x40014000
 800a744:	40014400 	.word	0x40014400
 800a748:	40014800 	.word	0x40014800

0800a74c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b087      	sub	sp, #28
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a1b      	ldr	r3, [r3, #32]
 800a75a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a1b      	ldr	r3, [r3, #32]
 800a766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a77a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	021b      	lsls	r3, r3, #8
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	4313      	orrs	r3, r2
 800a786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a78e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	051b      	lsls	r3, r3, #20
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	4313      	orrs	r3, r2
 800a79a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a18      	ldr	r2, [pc, #96]	; (800a800 <TIM_OC6_SetConfig+0xb4>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d00f      	beq.n	800a7c4 <TIM_OC6_SetConfig+0x78>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a17      	ldr	r2, [pc, #92]	; (800a804 <TIM_OC6_SetConfig+0xb8>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d00b      	beq.n	800a7c4 <TIM_OC6_SetConfig+0x78>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a16      	ldr	r2, [pc, #88]	; (800a808 <TIM_OC6_SetConfig+0xbc>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d007      	beq.n	800a7c4 <TIM_OC6_SetConfig+0x78>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a15      	ldr	r2, [pc, #84]	; (800a80c <TIM_OC6_SetConfig+0xc0>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d003      	beq.n	800a7c4 <TIM_OC6_SetConfig+0x78>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a14      	ldr	r2, [pc, #80]	; (800a810 <TIM_OC6_SetConfig+0xc4>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d109      	bne.n	800a7d8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a7ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	029b      	lsls	r3, r3, #10
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	685a      	ldr	r2, [r3, #4]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	621a      	str	r2, [r3, #32]
}
 800a7f2:	bf00      	nop
 800a7f4:	371c      	adds	r7, #28
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	40010000 	.word	0x40010000
 800a804:	40010400 	.word	0x40010400
 800a808:	40014000 	.word	0x40014000
 800a80c:	40014400 	.word	0x40014400
 800a810:	40014800 	.word	0x40014800

0800a814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a814:	b480      	push	{r7}
 800a816:	b087      	sub	sp, #28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6a1b      	ldr	r3, [r3, #32]
 800a824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	f023 0201 	bic.w	r2, r3, #1
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a83e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	011b      	lsls	r3, r3, #4
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	4313      	orrs	r3, r2
 800a848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f023 030a 	bic.w	r3, r3, #10
 800a850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	4313      	orrs	r3, r2
 800a858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	621a      	str	r2, [r3, #32]
}
 800a866:	bf00      	nop
 800a868:	371c      	adds	r7, #28
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a872:	b480      	push	{r7}
 800a874:	b087      	sub	sp, #28
 800a876:	af00      	add	r7, sp, #0
 800a878:	60f8      	str	r0, [r7, #12]
 800a87a:	60b9      	str	r1, [r7, #8]
 800a87c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	f023 0210 	bic.w	r2, r3, #16
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a89c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	031b      	lsls	r3, r3, #12
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	011b      	lsls	r3, r3, #4
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	697a      	ldr	r2, [r7, #20]
 800a8be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	693a      	ldr	r2, [r7, #16]
 800a8c4:	621a      	str	r2, [r3, #32]
}
 800a8c6:	bf00      	nop
 800a8c8:	371c      	adds	r7, #28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	4b09      	ldr	r3, [pc, #36]	; (800a90c <TIM_ITRx_SetConfig+0x38>)
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	f043 0307 	orr.w	r3, r3, #7
 800a8f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	609a      	str	r2, [r3, #8]
}
 800a8fe:	bf00      	nop
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	ffcfff8f 	.word	0xffcfff8f

0800a910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
 800a91c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a92a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	021a      	lsls	r2, r3, #8
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	431a      	orrs	r2, r3
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	4313      	orrs	r3, r2
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	609a      	str	r2, [r3, #8]
}
 800a944:	bf00      	nop
 800a946:	371c      	adds	r7, #28
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a950:	b480      	push	{r7}
 800a952:	b087      	sub	sp, #28
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	f003 031f 	and.w	r3, r3, #31
 800a962:	2201      	movs	r2, #1
 800a964:	fa02 f303 	lsl.w	r3, r2, r3
 800a968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6a1a      	ldr	r2, [r3, #32]
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	43db      	mvns	r3, r3
 800a972:	401a      	ands	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6a1a      	ldr	r2, [r3, #32]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f003 031f 	and.w	r3, r3, #31
 800a982:	6879      	ldr	r1, [r7, #4]
 800a984:	fa01 f303 	lsl.w	r3, r1, r3
 800a988:	431a      	orrs	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	621a      	str	r2, [r3, #32]
}
 800a98e:	bf00      	nop
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
	...

0800a99c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d101      	bne.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	e068      	b.n	800aa86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a2e      	ldr	r2, [pc, #184]	; (800aa94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d004      	beq.n	800a9e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a2d      	ldr	r2, [pc, #180]	; (800aa98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d108      	bne.n	800a9fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a9ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a1e      	ldr	r2, [pc, #120]	; (800aa94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d01d      	beq.n	800aa5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa26:	d018      	beq.n	800aa5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a1b      	ldr	r2, [pc, #108]	; (800aa9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d013      	beq.n	800aa5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a1a      	ldr	r2, [pc, #104]	; (800aaa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d00e      	beq.n	800aa5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a18      	ldr	r2, [pc, #96]	; (800aaa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d009      	beq.n	800aa5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a13      	ldr	r2, [pc, #76]	; (800aa98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d004      	beq.n	800aa5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a14      	ldr	r2, [pc, #80]	; (800aaa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d10c      	bne.n	800aa74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	40010000 	.word	0x40010000
 800aa98:	40010400 	.word	0x40010400
 800aa9c:	40000400 	.word	0x40000400
 800aaa0:	40000800 	.word	0x40000800
 800aaa4:	40000c00 	.word	0x40000c00
 800aaa8:	40001800 	.word	0x40001800

0800aaac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d101      	bne.n	800aac8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aac4:	2302      	movs	r3, #2
 800aac6:	e065      	b.n	800ab94 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	4313      	orrs	r3, r2
 800aadc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	041b      	lsls	r3, r3, #16
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a16      	ldr	r2, [pc, #88]	; (800aba0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d004      	beq.n	800ab56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a14      	ldr	r2, [pc, #80]	; (800aba4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d115      	bne.n	800ab82 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab60:	051b      	lsls	r3, r3, #20
 800ab62:	4313      	orrs	r3, r2
 800ab64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	69db      	ldr	r3, [r3, #28]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	40010000 	.word	0x40010000
 800aba4:	40010400 	.word	0x40010400

0800aba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e042      	b.n	800ac7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d106      	bne.n	800ac0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7f7 f9cf 	bl	8001fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2224      	movs	r2, #36	; 0x24
 800ac12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f022 0201 	bic.w	r2, r2, #1
 800ac24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f82c 	bl	800ac84 <UART_SetConfig>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d101      	bne.n	800ac36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e022      	b.n	800ac7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d002      	beq.n	800ac44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fd80 	bl	800b744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	689a      	ldr	r2, [r3, #8]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f042 0201 	orr.w	r2, r2, #1
 800ac72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fe07 	bl	800b888 <UART_CheckIdleState>
 800ac7a:	4603      	mov	r3, r0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac84:	b5b0      	push	{r4, r5, r7, lr}
 800ac86:	b08e      	sub	sp, #56	; 0x38
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	689a      	ldr	r2, [r3, #8]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	431a      	orrs	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	4bbf      	ldr	r3, [pc, #764]	; (800afb0 <UART_SetConfig+0x32c>)
 800acb2:	4013      	ands	r3, r2
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6812      	ldr	r2, [r2, #0]
 800acb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800acba:	430b      	orrs	r3, r1
 800acbc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68da      	ldr	r2, [r3, #12]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	430a      	orrs	r2, r1
 800acd2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4ab5      	ldr	r2, [pc, #724]	; (800afb4 <UART_SetConfig+0x330>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d004      	beq.n	800acee <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6a1b      	ldr	r3, [r3, #32]
 800ace8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acea:	4313      	orrs	r3, r2
 800acec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	689a      	ldr	r2, [r3, #8]
 800acf4:	4bb0      	ldr	r3, [pc, #704]	; (800afb8 <UART_SetConfig+0x334>)
 800acf6:	4013      	ands	r3, r2
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	6812      	ldr	r2, [r2, #0]
 800acfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800acfe:	430b      	orrs	r3, r1
 800ad00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad08:	f023 010f 	bic.w	r1, r3, #15
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	430a      	orrs	r2, r1
 800ad16:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4aa7      	ldr	r2, [pc, #668]	; (800afbc <UART_SetConfig+0x338>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d176      	bne.n	800ae10 <UART_SetConfig+0x18c>
 800ad22:	4ba7      	ldr	r3, [pc, #668]	; (800afc0 <UART_SetConfig+0x33c>)
 800ad24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad2a:	2b28      	cmp	r3, #40	; 0x28
 800ad2c:	d86c      	bhi.n	800ae08 <UART_SetConfig+0x184>
 800ad2e:	a201      	add	r2, pc, #4	; (adr r2, 800ad34 <UART_SetConfig+0xb0>)
 800ad30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad34:	0800add9 	.word	0x0800add9
 800ad38:	0800ae09 	.word	0x0800ae09
 800ad3c:	0800ae09 	.word	0x0800ae09
 800ad40:	0800ae09 	.word	0x0800ae09
 800ad44:	0800ae09 	.word	0x0800ae09
 800ad48:	0800ae09 	.word	0x0800ae09
 800ad4c:	0800ae09 	.word	0x0800ae09
 800ad50:	0800ae09 	.word	0x0800ae09
 800ad54:	0800ade1 	.word	0x0800ade1
 800ad58:	0800ae09 	.word	0x0800ae09
 800ad5c:	0800ae09 	.word	0x0800ae09
 800ad60:	0800ae09 	.word	0x0800ae09
 800ad64:	0800ae09 	.word	0x0800ae09
 800ad68:	0800ae09 	.word	0x0800ae09
 800ad6c:	0800ae09 	.word	0x0800ae09
 800ad70:	0800ae09 	.word	0x0800ae09
 800ad74:	0800ade9 	.word	0x0800ade9
 800ad78:	0800ae09 	.word	0x0800ae09
 800ad7c:	0800ae09 	.word	0x0800ae09
 800ad80:	0800ae09 	.word	0x0800ae09
 800ad84:	0800ae09 	.word	0x0800ae09
 800ad88:	0800ae09 	.word	0x0800ae09
 800ad8c:	0800ae09 	.word	0x0800ae09
 800ad90:	0800ae09 	.word	0x0800ae09
 800ad94:	0800adf1 	.word	0x0800adf1
 800ad98:	0800ae09 	.word	0x0800ae09
 800ad9c:	0800ae09 	.word	0x0800ae09
 800ada0:	0800ae09 	.word	0x0800ae09
 800ada4:	0800ae09 	.word	0x0800ae09
 800ada8:	0800ae09 	.word	0x0800ae09
 800adac:	0800ae09 	.word	0x0800ae09
 800adb0:	0800ae09 	.word	0x0800ae09
 800adb4:	0800adf9 	.word	0x0800adf9
 800adb8:	0800ae09 	.word	0x0800ae09
 800adbc:	0800ae09 	.word	0x0800ae09
 800adc0:	0800ae09 	.word	0x0800ae09
 800adc4:	0800ae09 	.word	0x0800ae09
 800adc8:	0800ae09 	.word	0x0800ae09
 800adcc:	0800ae09 	.word	0x0800ae09
 800add0:	0800ae09 	.word	0x0800ae09
 800add4:	0800ae01 	.word	0x0800ae01
 800add8:	2301      	movs	r3, #1
 800adda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adde:	e222      	b.n	800b226 <UART_SetConfig+0x5a2>
 800ade0:	2304      	movs	r3, #4
 800ade2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ade6:	e21e      	b.n	800b226 <UART_SetConfig+0x5a2>
 800ade8:	2308      	movs	r3, #8
 800adea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adee:	e21a      	b.n	800b226 <UART_SetConfig+0x5a2>
 800adf0:	2310      	movs	r3, #16
 800adf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adf6:	e216      	b.n	800b226 <UART_SetConfig+0x5a2>
 800adf8:	2320      	movs	r3, #32
 800adfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adfe:	e212      	b.n	800b226 <UART_SetConfig+0x5a2>
 800ae00:	2340      	movs	r3, #64	; 0x40
 800ae02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae06:	e20e      	b.n	800b226 <UART_SetConfig+0x5a2>
 800ae08:	2380      	movs	r3, #128	; 0x80
 800ae0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae0e:	e20a      	b.n	800b226 <UART_SetConfig+0x5a2>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a6b      	ldr	r2, [pc, #428]	; (800afc4 <UART_SetConfig+0x340>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d130      	bne.n	800ae7c <UART_SetConfig+0x1f8>
 800ae1a:	4b69      	ldr	r3, [pc, #420]	; (800afc0 <UART_SetConfig+0x33c>)
 800ae1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae1e:	f003 0307 	and.w	r3, r3, #7
 800ae22:	2b05      	cmp	r3, #5
 800ae24:	d826      	bhi.n	800ae74 <UART_SetConfig+0x1f0>
 800ae26:	a201      	add	r2, pc, #4	; (adr r2, 800ae2c <UART_SetConfig+0x1a8>)
 800ae28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2c:	0800ae45 	.word	0x0800ae45
 800ae30:	0800ae4d 	.word	0x0800ae4d
 800ae34:	0800ae55 	.word	0x0800ae55
 800ae38:	0800ae5d 	.word	0x0800ae5d
 800ae3c:	0800ae65 	.word	0x0800ae65
 800ae40:	0800ae6d 	.word	0x0800ae6d
 800ae44:	2300      	movs	r3, #0
 800ae46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae4a:	e1ec      	b.n	800b226 <UART_SetConfig+0x5a2>
 800ae4c:	2304      	movs	r3, #4
 800ae4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae52:	e1e8      	b.n	800b226 <UART_SetConfig+0x5a2>
 800ae54:	2308      	movs	r3, #8
 800ae56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae5a:	e1e4      	b.n	800b226 <UART_SetConfig+0x5a2>
 800ae5c:	2310      	movs	r3, #16
 800ae5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae62:	e1e0      	b.n	800b226 <UART_SetConfig+0x5a2>
 800ae64:	2320      	movs	r3, #32
 800ae66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6a:	e1dc      	b.n	800b226 <UART_SetConfig+0x5a2>
 800ae6c:	2340      	movs	r3, #64	; 0x40
 800ae6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae72:	e1d8      	b.n	800b226 <UART_SetConfig+0x5a2>
 800ae74:	2380      	movs	r3, #128	; 0x80
 800ae76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae7a:	e1d4      	b.n	800b226 <UART_SetConfig+0x5a2>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a51      	ldr	r2, [pc, #324]	; (800afc8 <UART_SetConfig+0x344>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d130      	bne.n	800aee8 <UART_SetConfig+0x264>
 800ae86:	4b4e      	ldr	r3, [pc, #312]	; (800afc0 <UART_SetConfig+0x33c>)
 800ae88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae8a:	f003 0307 	and.w	r3, r3, #7
 800ae8e:	2b05      	cmp	r3, #5
 800ae90:	d826      	bhi.n	800aee0 <UART_SetConfig+0x25c>
 800ae92:	a201      	add	r2, pc, #4	; (adr r2, 800ae98 <UART_SetConfig+0x214>)
 800ae94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae98:	0800aeb1 	.word	0x0800aeb1
 800ae9c:	0800aeb9 	.word	0x0800aeb9
 800aea0:	0800aec1 	.word	0x0800aec1
 800aea4:	0800aec9 	.word	0x0800aec9
 800aea8:	0800aed1 	.word	0x0800aed1
 800aeac:	0800aed9 	.word	0x0800aed9
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeb6:	e1b6      	b.n	800b226 <UART_SetConfig+0x5a2>
 800aeb8:	2304      	movs	r3, #4
 800aeba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aebe:	e1b2      	b.n	800b226 <UART_SetConfig+0x5a2>
 800aec0:	2308      	movs	r3, #8
 800aec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aec6:	e1ae      	b.n	800b226 <UART_SetConfig+0x5a2>
 800aec8:	2310      	movs	r3, #16
 800aeca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aece:	e1aa      	b.n	800b226 <UART_SetConfig+0x5a2>
 800aed0:	2320      	movs	r3, #32
 800aed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aed6:	e1a6      	b.n	800b226 <UART_SetConfig+0x5a2>
 800aed8:	2340      	movs	r3, #64	; 0x40
 800aeda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aede:	e1a2      	b.n	800b226 <UART_SetConfig+0x5a2>
 800aee0:	2380      	movs	r3, #128	; 0x80
 800aee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee6:	e19e      	b.n	800b226 <UART_SetConfig+0x5a2>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a37      	ldr	r2, [pc, #220]	; (800afcc <UART_SetConfig+0x348>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d130      	bne.n	800af54 <UART_SetConfig+0x2d0>
 800aef2:	4b33      	ldr	r3, [pc, #204]	; (800afc0 <UART_SetConfig+0x33c>)
 800aef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef6:	f003 0307 	and.w	r3, r3, #7
 800aefa:	2b05      	cmp	r3, #5
 800aefc:	d826      	bhi.n	800af4c <UART_SetConfig+0x2c8>
 800aefe:	a201      	add	r2, pc, #4	; (adr r2, 800af04 <UART_SetConfig+0x280>)
 800af00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af04:	0800af1d 	.word	0x0800af1d
 800af08:	0800af25 	.word	0x0800af25
 800af0c:	0800af2d 	.word	0x0800af2d
 800af10:	0800af35 	.word	0x0800af35
 800af14:	0800af3d 	.word	0x0800af3d
 800af18:	0800af45 	.word	0x0800af45
 800af1c:	2300      	movs	r3, #0
 800af1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af22:	e180      	b.n	800b226 <UART_SetConfig+0x5a2>
 800af24:	2304      	movs	r3, #4
 800af26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af2a:	e17c      	b.n	800b226 <UART_SetConfig+0x5a2>
 800af2c:	2308      	movs	r3, #8
 800af2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af32:	e178      	b.n	800b226 <UART_SetConfig+0x5a2>
 800af34:	2310      	movs	r3, #16
 800af36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af3a:	e174      	b.n	800b226 <UART_SetConfig+0x5a2>
 800af3c:	2320      	movs	r3, #32
 800af3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af42:	e170      	b.n	800b226 <UART_SetConfig+0x5a2>
 800af44:	2340      	movs	r3, #64	; 0x40
 800af46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af4a:	e16c      	b.n	800b226 <UART_SetConfig+0x5a2>
 800af4c:	2380      	movs	r3, #128	; 0x80
 800af4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af52:	e168      	b.n	800b226 <UART_SetConfig+0x5a2>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a1d      	ldr	r2, [pc, #116]	; (800afd0 <UART_SetConfig+0x34c>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d142      	bne.n	800afe4 <UART_SetConfig+0x360>
 800af5e:	4b18      	ldr	r3, [pc, #96]	; (800afc0 <UART_SetConfig+0x33c>)
 800af60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	2b05      	cmp	r3, #5
 800af68:	d838      	bhi.n	800afdc <UART_SetConfig+0x358>
 800af6a:	a201      	add	r2, pc, #4	; (adr r2, 800af70 <UART_SetConfig+0x2ec>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800af89 	.word	0x0800af89
 800af74:	0800af91 	.word	0x0800af91
 800af78:	0800af99 	.word	0x0800af99
 800af7c:	0800afa1 	.word	0x0800afa1
 800af80:	0800afa9 	.word	0x0800afa9
 800af84:	0800afd5 	.word	0x0800afd5
 800af88:	2300      	movs	r3, #0
 800af8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af8e:	e14a      	b.n	800b226 <UART_SetConfig+0x5a2>
 800af90:	2304      	movs	r3, #4
 800af92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af96:	e146      	b.n	800b226 <UART_SetConfig+0x5a2>
 800af98:	2308      	movs	r3, #8
 800af9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af9e:	e142      	b.n	800b226 <UART_SetConfig+0x5a2>
 800afa0:	2310      	movs	r3, #16
 800afa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afa6:	e13e      	b.n	800b226 <UART_SetConfig+0x5a2>
 800afa8:	2320      	movs	r3, #32
 800afaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afae:	e13a      	b.n	800b226 <UART_SetConfig+0x5a2>
 800afb0:	cfff69f3 	.word	0xcfff69f3
 800afb4:	58000c00 	.word	0x58000c00
 800afb8:	11fff4ff 	.word	0x11fff4ff
 800afbc:	40011000 	.word	0x40011000
 800afc0:	58024400 	.word	0x58024400
 800afc4:	40004400 	.word	0x40004400
 800afc8:	40004800 	.word	0x40004800
 800afcc:	40004c00 	.word	0x40004c00
 800afd0:	40005000 	.word	0x40005000
 800afd4:	2340      	movs	r3, #64	; 0x40
 800afd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afda:	e124      	b.n	800b226 <UART_SetConfig+0x5a2>
 800afdc:	2380      	movs	r3, #128	; 0x80
 800afde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe2:	e120      	b.n	800b226 <UART_SetConfig+0x5a2>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4acc      	ldr	r2, [pc, #816]	; (800b31c <UART_SetConfig+0x698>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d176      	bne.n	800b0dc <UART_SetConfig+0x458>
 800afee:	4bcc      	ldr	r3, [pc, #816]	; (800b320 <UART_SetConfig+0x69c>)
 800aff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aff6:	2b28      	cmp	r3, #40	; 0x28
 800aff8:	d86c      	bhi.n	800b0d4 <UART_SetConfig+0x450>
 800affa:	a201      	add	r2, pc, #4	; (adr r2, 800b000 <UART_SetConfig+0x37c>)
 800affc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b000:	0800b0a5 	.word	0x0800b0a5
 800b004:	0800b0d5 	.word	0x0800b0d5
 800b008:	0800b0d5 	.word	0x0800b0d5
 800b00c:	0800b0d5 	.word	0x0800b0d5
 800b010:	0800b0d5 	.word	0x0800b0d5
 800b014:	0800b0d5 	.word	0x0800b0d5
 800b018:	0800b0d5 	.word	0x0800b0d5
 800b01c:	0800b0d5 	.word	0x0800b0d5
 800b020:	0800b0ad 	.word	0x0800b0ad
 800b024:	0800b0d5 	.word	0x0800b0d5
 800b028:	0800b0d5 	.word	0x0800b0d5
 800b02c:	0800b0d5 	.word	0x0800b0d5
 800b030:	0800b0d5 	.word	0x0800b0d5
 800b034:	0800b0d5 	.word	0x0800b0d5
 800b038:	0800b0d5 	.word	0x0800b0d5
 800b03c:	0800b0d5 	.word	0x0800b0d5
 800b040:	0800b0b5 	.word	0x0800b0b5
 800b044:	0800b0d5 	.word	0x0800b0d5
 800b048:	0800b0d5 	.word	0x0800b0d5
 800b04c:	0800b0d5 	.word	0x0800b0d5
 800b050:	0800b0d5 	.word	0x0800b0d5
 800b054:	0800b0d5 	.word	0x0800b0d5
 800b058:	0800b0d5 	.word	0x0800b0d5
 800b05c:	0800b0d5 	.word	0x0800b0d5
 800b060:	0800b0bd 	.word	0x0800b0bd
 800b064:	0800b0d5 	.word	0x0800b0d5
 800b068:	0800b0d5 	.word	0x0800b0d5
 800b06c:	0800b0d5 	.word	0x0800b0d5
 800b070:	0800b0d5 	.word	0x0800b0d5
 800b074:	0800b0d5 	.word	0x0800b0d5
 800b078:	0800b0d5 	.word	0x0800b0d5
 800b07c:	0800b0d5 	.word	0x0800b0d5
 800b080:	0800b0c5 	.word	0x0800b0c5
 800b084:	0800b0d5 	.word	0x0800b0d5
 800b088:	0800b0d5 	.word	0x0800b0d5
 800b08c:	0800b0d5 	.word	0x0800b0d5
 800b090:	0800b0d5 	.word	0x0800b0d5
 800b094:	0800b0d5 	.word	0x0800b0d5
 800b098:	0800b0d5 	.word	0x0800b0d5
 800b09c:	0800b0d5 	.word	0x0800b0d5
 800b0a0:	0800b0cd 	.word	0x0800b0cd
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0aa:	e0bc      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b0ac:	2304      	movs	r3, #4
 800b0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0b2:	e0b8      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b0b4:	2308      	movs	r3, #8
 800b0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ba:	e0b4      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b0bc:	2310      	movs	r3, #16
 800b0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0c2:	e0b0      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b0c4:	2320      	movs	r3, #32
 800b0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ca:	e0ac      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b0cc:	2340      	movs	r3, #64	; 0x40
 800b0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d2:	e0a8      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b0d4:	2380      	movs	r3, #128	; 0x80
 800b0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0da:	e0a4      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a90      	ldr	r2, [pc, #576]	; (800b324 <UART_SetConfig+0x6a0>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d130      	bne.n	800b148 <UART_SetConfig+0x4c4>
 800b0e6:	4b8e      	ldr	r3, [pc, #568]	; (800b320 <UART_SetConfig+0x69c>)
 800b0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ea:	f003 0307 	and.w	r3, r3, #7
 800b0ee:	2b05      	cmp	r3, #5
 800b0f0:	d826      	bhi.n	800b140 <UART_SetConfig+0x4bc>
 800b0f2:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <UART_SetConfig+0x474>)
 800b0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f8:	0800b111 	.word	0x0800b111
 800b0fc:	0800b119 	.word	0x0800b119
 800b100:	0800b121 	.word	0x0800b121
 800b104:	0800b129 	.word	0x0800b129
 800b108:	0800b131 	.word	0x0800b131
 800b10c:	0800b139 	.word	0x0800b139
 800b110:	2300      	movs	r3, #0
 800b112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b116:	e086      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b118:	2304      	movs	r3, #4
 800b11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b11e:	e082      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b120:	2308      	movs	r3, #8
 800b122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b126:	e07e      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b128:	2310      	movs	r3, #16
 800b12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b12e:	e07a      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b130:	2320      	movs	r3, #32
 800b132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b136:	e076      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b138:	2340      	movs	r3, #64	; 0x40
 800b13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b13e:	e072      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b140:	2380      	movs	r3, #128	; 0x80
 800b142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b146:	e06e      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a76      	ldr	r2, [pc, #472]	; (800b328 <UART_SetConfig+0x6a4>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d130      	bne.n	800b1b4 <UART_SetConfig+0x530>
 800b152:	4b73      	ldr	r3, [pc, #460]	; (800b320 <UART_SetConfig+0x69c>)
 800b154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b156:	f003 0307 	and.w	r3, r3, #7
 800b15a:	2b05      	cmp	r3, #5
 800b15c:	d826      	bhi.n	800b1ac <UART_SetConfig+0x528>
 800b15e:	a201      	add	r2, pc, #4	; (adr r2, 800b164 <UART_SetConfig+0x4e0>)
 800b160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b164:	0800b17d 	.word	0x0800b17d
 800b168:	0800b185 	.word	0x0800b185
 800b16c:	0800b18d 	.word	0x0800b18d
 800b170:	0800b195 	.word	0x0800b195
 800b174:	0800b19d 	.word	0x0800b19d
 800b178:	0800b1a5 	.word	0x0800b1a5
 800b17c:	2300      	movs	r3, #0
 800b17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b182:	e050      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b184:	2304      	movs	r3, #4
 800b186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b18a:	e04c      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b18c:	2308      	movs	r3, #8
 800b18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b192:	e048      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b194:	2310      	movs	r3, #16
 800b196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b19a:	e044      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b19c:	2320      	movs	r3, #32
 800b19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1a2:	e040      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b1a4:	2340      	movs	r3, #64	; 0x40
 800b1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1aa:	e03c      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b1ac:	2380      	movs	r3, #128	; 0x80
 800b1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1b2:	e038      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a5c      	ldr	r2, [pc, #368]	; (800b32c <UART_SetConfig+0x6a8>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d130      	bne.n	800b220 <UART_SetConfig+0x59c>
 800b1be:	4b58      	ldr	r3, [pc, #352]	; (800b320 <UART_SetConfig+0x69c>)
 800b1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c2:	f003 0307 	and.w	r3, r3, #7
 800b1c6:	2b05      	cmp	r3, #5
 800b1c8:	d826      	bhi.n	800b218 <UART_SetConfig+0x594>
 800b1ca:	a201      	add	r2, pc, #4	; (adr r2, 800b1d0 <UART_SetConfig+0x54c>)
 800b1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d0:	0800b1e9 	.word	0x0800b1e9
 800b1d4:	0800b1f1 	.word	0x0800b1f1
 800b1d8:	0800b1f9 	.word	0x0800b1f9
 800b1dc:	0800b201 	.word	0x0800b201
 800b1e0:	0800b209 	.word	0x0800b209
 800b1e4:	0800b211 	.word	0x0800b211
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ee:	e01a      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b1f0:	2304      	movs	r3, #4
 800b1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1f6:	e016      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b1f8:	2308      	movs	r3, #8
 800b1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1fe:	e012      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b200:	2310      	movs	r3, #16
 800b202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b206:	e00e      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b208:	2320      	movs	r3, #32
 800b20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b20e:	e00a      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b210:	2340      	movs	r3, #64	; 0x40
 800b212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b216:	e006      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b218:	2380      	movs	r3, #128	; 0x80
 800b21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b21e:	e002      	b.n	800b226 <UART_SetConfig+0x5a2>
 800b220:	2380      	movs	r3, #128	; 0x80
 800b222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a40      	ldr	r2, [pc, #256]	; (800b32c <UART_SetConfig+0x6a8>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	f040 80ef 	bne.w	800b410 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b232:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b236:	2b20      	cmp	r3, #32
 800b238:	dc46      	bgt.n	800b2c8 <UART_SetConfig+0x644>
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	f2c0 8081 	blt.w	800b342 <UART_SetConfig+0x6be>
 800b240:	3b02      	subs	r3, #2
 800b242:	2b1e      	cmp	r3, #30
 800b244:	d87d      	bhi.n	800b342 <UART_SetConfig+0x6be>
 800b246:	a201      	add	r2, pc, #4	; (adr r2, 800b24c <UART_SetConfig+0x5c8>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b2cf 	.word	0x0800b2cf
 800b250:	0800b343 	.word	0x0800b343
 800b254:	0800b2d7 	.word	0x0800b2d7
 800b258:	0800b343 	.word	0x0800b343
 800b25c:	0800b343 	.word	0x0800b343
 800b260:	0800b343 	.word	0x0800b343
 800b264:	0800b2e7 	.word	0x0800b2e7
 800b268:	0800b343 	.word	0x0800b343
 800b26c:	0800b343 	.word	0x0800b343
 800b270:	0800b343 	.word	0x0800b343
 800b274:	0800b343 	.word	0x0800b343
 800b278:	0800b343 	.word	0x0800b343
 800b27c:	0800b343 	.word	0x0800b343
 800b280:	0800b343 	.word	0x0800b343
 800b284:	0800b2f7 	.word	0x0800b2f7
 800b288:	0800b343 	.word	0x0800b343
 800b28c:	0800b343 	.word	0x0800b343
 800b290:	0800b343 	.word	0x0800b343
 800b294:	0800b343 	.word	0x0800b343
 800b298:	0800b343 	.word	0x0800b343
 800b29c:	0800b343 	.word	0x0800b343
 800b2a0:	0800b343 	.word	0x0800b343
 800b2a4:	0800b343 	.word	0x0800b343
 800b2a8:	0800b343 	.word	0x0800b343
 800b2ac:	0800b343 	.word	0x0800b343
 800b2b0:	0800b343 	.word	0x0800b343
 800b2b4:	0800b343 	.word	0x0800b343
 800b2b8:	0800b343 	.word	0x0800b343
 800b2bc:	0800b343 	.word	0x0800b343
 800b2c0:	0800b343 	.word	0x0800b343
 800b2c4:	0800b335 	.word	0x0800b335
 800b2c8:	2b40      	cmp	r3, #64	; 0x40
 800b2ca:	d036      	beq.n	800b33a <UART_SetConfig+0x6b6>
 800b2cc:	e039      	b.n	800b342 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b2ce:	f7fd fa67 	bl	80087a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b2d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b2d4:	e03b      	b.n	800b34e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2d6:	f107 0314 	add.w	r3, r7, #20
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fd fa76 	bl	80087cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2e4:	e033      	b.n	800b34e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2e6:	f107 0308 	add.w	r3, r7, #8
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fd fbc2 	bl	8008a74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2f4:	e02b      	b.n	800b34e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2f6:	4b0a      	ldr	r3, [pc, #40]	; (800b320 <UART_SetConfig+0x69c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f003 0320 	and.w	r3, r3, #32
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d009      	beq.n	800b316 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b302:	4b07      	ldr	r3, [pc, #28]	; (800b320 <UART_SetConfig+0x69c>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	08db      	lsrs	r3, r3, #3
 800b308:	f003 0303 	and.w	r3, r3, #3
 800b30c:	4a08      	ldr	r2, [pc, #32]	; (800b330 <UART_SetConfig+0x6ac>)
 800b30e:	fa22 f303 	lsr.w	r3, r2, r3
 800b312:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b314:	e01b      	b.n	800b34e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b316:	4b06      	ldr	r3, [pc, #24]	; (800b330 <UART_SetConfig+0x6ac>)
 800b318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b31a:	e018      	b.n	800b34e <UART_SetConfig+0x6ca>
 800b31c:	40011400 	.word	0x40011400
 800b320:	58024400 	.word	0x58024400
 800b324:	40007800 	.word	0x40007800
 800b328:	40007c00 	.word	0x40007c00
 800b32c:	58000c00 	.word	0x58000c00
 800b330:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b334:	4bc4      	ldr	r3, [pc, #784]	; (800b648 <UART_SetConfig+0x9c4>)
 800b336:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b338:	e009      	b.n	800b34e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b33a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b33e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b340:	e005      	b.n	800b34e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b342:	2300      	movs	r3, #0
 800b344:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b34c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 81da 	beq.w	800b70a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35a:	4abc      	ldr	r2, [pc, #752]	; (800b64c <UART_SetConfig+0x9c8>)
 800b35c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b360:	461a      	mov	r2, r3
 800b362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b364:	fbb3 f3f2 	udiv	r3, r3, r2
 800b368:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	685a      	ldr	r2, [r3, #4]
 800b36e:	4613      	mov	r3, r2
 800b370:	005b      	lsls	r3, r3, #1
 800b372:	4413      	add	r3, r2
 800b374:	6a3a      	ldr	r2, [r7, #32]
 800b376:	429a      	cmp	r2, r3
 800b378:	d305      	bcc.n	800b386 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b380:	6a3a      	ldr	r2, [r7, #32]
 800b382:	429a      	cmp	r2, r3
 800b384:	d903      	bls.n	800b38e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b38c:	e1bd      	b.n	800b70a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b390:	4618      	mov	r0, r3
 800b392:	f04f 0100 	mov.w	r1, #0
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39a:	4aac      	ldr	r2, [pc, #688]	; (800b64c <UART_SetConfig+0x9c8>)
 800b39c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	f04f 0300 	mov.w	r3, #0
 800b3a6:	f7f4 ff97 	bl	80002d8 <__aeabi_uldivmod>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	f04f 0200 	mov.w	r2, #0
 800b3b6:	f04f 0300 	mov.w	r3, #0
 800b3ba:	020b      	lsls	r3, r1, #8
 800b3bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b3c0:	0202      	lsls	r2, r0, #8
 800b3c2:	6879      	ldr	r1, [r7, #4]
 800b3c4:	6849      	ldr	r1, [r1, #4]
 800b3c6:	0849      	lsrs	r1, r1, #1
 800b3c8:	4608      	mov	r0, r1
 800b3ca:	f04f 0100 	mov.w	r1, #0
 800b3ce:	1814      	adds	r4, r2, r0
 800b3d0:	eb43 0501 	adc.w	r5, r3, r1
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	f04f 0300 	mov.w	r3, #0
 800b3de:	4620      	mov	r0, r4
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	f7f4 ff79 	bl	80002d8 <__aeabi_uldivmod>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3f4:	d308      	bcc.n	800b408 <UART_SetConfig+0x784>
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3fc:	d204      	bcs.n	800b408 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b404:	60da      	str	r2, [r3, #12]
 800b406:	e180      	b.n	800b70a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b40e:	e17c      	b.n	800b70a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	69db      	ldr	r3, [r3, #28]
 800b414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b418:	f040 80bf 	bne.w	800b59a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800b41c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b420:	2b20      	cmp	r3, #32
 800b422:	dc49      	bgt.n	800b4b8 <UART_SetConfig+0x834>
 800b424:	2b00      	cmp	r3, #0
 800b426:	db7c      	blt.n	800b522 <UART_SetConfig+0x89e>
 800b428:	2b20      	cmp	r3, #32
 800b42a:	d87a      	bhi.n	800b522 <UART_SetConfig+0x89e>
 800b42c:	a201      	add	r2, pc, #4	; (adr r2, 800b434 <UART_SetConfig+0x7b0>)
 800b42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b432:	bf00      	nop
 800b434:	0800b4bf 	.word	0x0800b4bf
 800b438:	0800b4c7 	.word	0x0800b4c7
 800b43c:	0800b523 	.word	0x0800b523
 800b440:	0800b523 	.word	0x0800b523
 800b444:	0800b4cf 	.word	0x0800b4cf
 800b448:	0800b523 	.word	0x0800b523
 800b44c:	0800b523 	.word	0x0800b523
 800b450:	0800b523 	.word	0x0800b523
 800b454:	0800b4df 	.word	0x0800b4df
 800b458:	0800b523 	.word	0x0800b523
 800b45c:	0800b523 	.word	0x0800b523
 800b460:	0800b523 	.word	0x0800b523
 800b464:	0800b523 	.word	0x0800b523
 800b468:	0800b523 	.word	0x0800b523
 800b46c:	0800b523 	.word	0x0800b523
 800b470:	0800b523 	.word	0x0800b523
 800b474:	0800b4ef 	.word	0x0800b4ef
 800b478:	0800b523 	.word	0x0800b523
 800b47c:	0800b523 	.word	0x0800b523
 800b480:	0800b523 	.word	0x0800b523
 800b484:	0800b523 	.word	0x0800b523
 800b488:	0800b523 	.word	0x0800b523
 800b48c:	0800b523 	.word	0x0800b523
 800b490:	0800b523 	.word	0x0800b523
 800b494:	0800b523 	.word	0x0800b523
 800b498:	0800b523 	.word	0x0800b523
 800b49c:	0800b523 	.word	0x0800b523
 800b4a0:	0800b523 	.word	0x0800b523
 800b4a4:	0800b523 	.word	0x0800b523
 800b4a8:	0800b523 	.word	0x0800b523
 800b4ac:	0800b523 	.word	0x0800b523
 800b4b0:	0800b523 	.word	0x0800b523
 800b4b4:	0800b515 	.word	0x0800b515
 800b4b8:	2b40      	cmp	r3, #64	; 0x40
 800b4ba:	d02e      	beq.n	800b51a <UART_SetConfig+0x896>
 800b4bc:	e031      	b.n	800b522 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4be:	f7fb fd31 	bl	8006f24 <HAL_RCC_GetPCLK1Freq>
 800b4c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b4c4:	e033      	b.n	800b52e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4c6:	f7fb fd43 	bl	8006f50 <HAL_RCC_GetPCLK2Freq>
 800b4ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b4cc:	e02f      	b.n	800b52e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4ce:	f107 0314 	add.w	r3, r7, #20
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fd f97a 	bl	80087cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4dc:	e027      	b.n	800b52e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4de:	f107 0308 	add.w	r3, r7, #8
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fd fac6 	bl	8008a74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4ec:	e01f      	b.n	800b52e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4ee:	4b58      	ldr	r3, [pc, #352]	; (800b650 <UART_SetConfig+0x9cc>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0320 	and.w	r3, r3, #32
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d009      	beq.n	800b50e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4fa:	4b55      	ldr	r3, [pc, #340]	; (800b650 <UART_SetConfig+0x9cc>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	08db      	lsrs	r3, r3, #3
 800b500:	f003 0303 	and.w	r3, r3, #3
 800b504:	4a53      	ldr	r2, [pc, #332]	; (800b654 <UART_SetConfig+0x9d0>)
 800b506:	fa22 f303 	lsr.w	r3, r2, r3
 800b50a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b50c:	e00f      	b.n	800b52e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b50e:	4b51      	ldr	r3, [pc, #324]	; (800b654 <UART_SetConfig+0x9d0>)
 800b510:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b512:	e00c      	b.n	800b52e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b514:	4b4c      	ldr	r3, [pc, #304]	; (800b648 <UART_SetConfig+0x9c4>)
 800b516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b518:	e009      	b.n	800b52e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b51a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b51e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b520:	e005      	b.n	800b52e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b522:	2300      	movs	r3, #0
 800b524:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b52c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b530:	2b00      	cmp	r3, #0
 800b532:	f000 80ea 	beq.w	800b70a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53a:	4a44      	ldr	r2, [pc, #272]	; (800b64c <UART_SetConfig+0x9c8>)
 800b53c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b540:	461a      	mov	r2, r3
 800b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b544:	fbb3 f3f2 	udiv	r3, r3, r2
 800b548:	005a      	lsls	r2, r3, #1
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	085b      	lsrs	r3, r3, #1
 800b550:	441a      	add	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	fbb2 f3f3 	udiv	r3, r2, r3
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	2b0f      	cmp	r3, #15
 800b562:	d916      	bls.n	800b592 <UART_SetConfig+0x90e>
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b56a:	d212      	bcs.n	800b592 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	b29b      	uxth	r3, r3
 800b570:	f023 030f 	bic.w	r3, r3, #15
 800b574:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b578:	085b      	lsrs	r3, r3, #1
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	f003 0307 	and.w	r3, r3, #7
 800b580:	b29a      	uxth	r2, r3
 800b582:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b584:	4313      	orrs	r3, r2
 800b586:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b58e:	60da      	str	r2, [r3, #12]
 800b590:	e0bb      	b.n	800b70a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b598:	e0b7      	b.n	800b70a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b59a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b59e:	2b20      	cmp	r3, #32
 800b5a0:	dc4a      	bgt.n	800b638 <UART_SetConfig+0x9b4>
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f2c0 8086 	blt.w	800b6b4 <UART_SetConfig+0xa30>
 800b5a8:	2b20      	cmp	r3, #32
 800b5aa:	f200 8083 	bhi.w	800b6b4 <UART_SetConfig+0xa30>
 800b5ae:	a201      	add	r2, pc, #4	; (adr r2, 800b5b4 <UART_SetConfig+0x930>)
 800b5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b4:	0800b63f 	.word	0x0800b63f
 800b5b8:	0800b659 	.word	0x0800b659
 800b5bc:	0800b6b5 	.word	0x0800b6b5
 800b5c0:	0800b6b5 	.word	0x0800b6b5
 800b5c4:	0800b661 	.word	0x0800b661
 800b5c8:	0800b6b5 	.word	0x0800b6b5
 800b5cc:	0800b6b5 	.word	0x0800b6b5
 800b5d0:	0800b6b5 	.word	0x0800b6b5
 800b5d4:	0800b671 	.word	0x0800b671
 800b5d8:	0800b6b5 	.word	0x0800b6b5
 800b5dc:	0800b6b5 	.word	0x0800b6b5
 800b5e0:	0800b6b5 	.word	0x0800b6b5
 800b5e4:	0800b6b5 	.word	0x0800b6b5
 800b5e8:	0800b6b5 	.word	0x0800b6b5
 800b5ec:	0800b6b5 	.word	0x0800b6b5
 800b5f0:	0800b6b5 	.word	0x0800b6b5
 800b5f4:	0800b681 	.word	0x0800b681
 800b5f8:	0800b6b5 	.word	0x0800b6b5
 800b5fc:	0800b6b5 	.word	0x0800b6b5
 800b600:	0800b6b5 	.word	0x0800b6b5
 800b604:	0800b6b5 	.word	0x0800b6b5
 800b608:	0800b6b5 	.word	0x0800b6b5
 800b60c:	0800b6b5 	.word	0x0800b6b5
 800b610:	0800b6b5 	.word	0x0800b6b5
 800b614:	0800b6b5 	.word	0x0800b6b5
 800b618:	0800b6b5 	.word	0x0800b6b5
 800b61c:	0800b6b5 	.word	0x0800b6b5
 800b620:	0800b6b5 	.word	0x0800b6b5
 800b624:	0800b6b5 	.word	0x0800b6b5
 800b628:	0800b6b5 	.word	0x0800b6b5
 800b62c:	0800b6b5 	.word	0x0800b6b5
 800b630:	0800b6b5 	.word	0x0800b6b5
 800b634:	0800b6a7 	.word	0x0800b6a7
 800b638:	2b40      	cmp	r3, #64	; 0x40
 800b63a:	d037      	beq.n	800b6ac <UART_SetConfig+0xa28>
 800b63c:	e03a      	b.n	800b6b4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b63e:	f7fb fc71 	bl	8006f24 <HAL_RCC_GetPCLK1Freq>
 800b642:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b644:	e03c      	b.n	800b6c0 <UART_SetConfig+0xa3c>
 800b646:	bf00      	nop
 800b648:	003d0900 	.word	0x003d0900
 800b64c:	0800c228 	.word	0x0800c228
 800b650:	58024400 	.word	0x58024400
 800b654:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b658:	f7fb fc7a 	bl	8006f50 <HAL_RCC_GetPCLK2Freq>
 800b65c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b65e:	e02f      	b.n	800b6c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b660:	f107 0314 	add.w	r3, r7, #20
 800b664:	4618      	mov	r0, r3
 800b666:	f7fd f8b1 	bl	80087cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b66e:	e027      	b.n	800b6c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b670:	f107 0308 	add.w	r3, r7, #8
 800b674:	4618      	mov	r0, r3
 800b676:	f7fd f9fd 	bl	8008a74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b67e:	e01f      	b.n	800b6c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b680:	4b2c      	ldr	r3, [pc, #176]	; (800b734 <UART_SetConfig+0xab0>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 0320 	and.w	r3, r3, #32
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d009      	beq.n	800b6a0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b68c:	4b29      	ldr	r3, [pc, #164]	; (800b734 <UART_SetConfig+0xab0>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	08db      	lsrs	r3, r3, #3
 800b692:	f003 0303 	and.w	r3, r3, #3
 800b696:	4a28      	ldr	r2, [pc, #160]	; (800b738 <UART_SetConfig+0xab4>)
 800b698:	fa22 f303 	lsr.w	r3, r2, r3
 800b69c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b69e:	e00f      	b.n	800b6c0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b6a0:	4b25      	ldr	r3, [pc, #148]	; (800b738 <UART_SetConfig+0xab4>)
 800b6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6a4:	e00c      	b.n	800b6c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6a6:	4b25      	ldr	r3, [pc, #148]	; (800b73c <UART_SetConfig+0xab8>)
 800b6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6aa:	e009      	b.n	800b6c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6b2:	e005      	b.n	800b6c0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b6be:	bf00      	nop
    }

    if (pclk != 0U)
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d021      	beq.n	800b70a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ca:	4a1d      	ldr	r2, [pc, #116]	; (800b740 <UART_SetConfig+0xabc>)
 800b6cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	085b      	lsrs	r3, r3, #1
 800b6de:	441a      	add	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	2b0f      	cmp	r3, #15
 800b6f0:	d908      	bls.n	800b704 <UART_SetConfig+0xa80>
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6f8:	d204      	bcs.n	800b704 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b700:	60da      	str	r2, [r3, #12]
 800b702:	e002      	b.n	800b70a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2201      	movs	r2, #1
 800b70e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b726:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3738      	adds	r7, #56	; 0x38
 800b72e:	46bd      	mov	sp, r7
 800b730:	bdb0      	pop	{r4, r5, r7, pc}
 800b732:	bf00      	nop
 800b734:	58024400 	.word	0x58024400
 800b738:	03d09000 	.word	0x03d09000
 800b73c:	003d0900 	.word	0x003d0900
 800b740:	0800c228 	.word	0x0800c228

0800b744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b750:	f003 0301 	and.w	r3, r3, #1
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00a      	beq.n	800b76e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	430a      	orrs	r2, r1
 800b76c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b772:	f003 0302 	and.w	r3, r3, #2
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00a      	beq.n	800b790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	430a      	orrs	r2, r1
 800b78e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b794:	f003 0304 	and.w	r3, r3, #4
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00a      	beq.n	800b7b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b6:	f003 0308 	and.w	r3, r3, #8
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00a      	beq.n	800b7d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	430a      	orrs	r2, r1
 800b7d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d8:	f003 0310 	and.w	r3, r3, #16
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00a      	beq.n	800b7f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	430a      	orrs	r2, r1
 800b7f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7fa:	f003 0320 	and.w	r3, r3, #32
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00a      	beq.n	800b818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	430a      	orrs	r2, r1
 800b816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b81c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b820:	2b00      	cmp	r3, #0
 800b822:	d01a      	beq.n	800b85a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	430a      	orrs	r2, r1
 800b838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b83e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b842:	d10a      	bne.n	800b85a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	430a      	orrs	r2, r1
 800b858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00a      	beq.n	800b87c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	430a      	orrs	r2, r1
 800b87a:	605a      	str	r2, [r3, #4]
  }
}
 800b87c:	bf00      	nop
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af02      	add	r7, sp, #8
 800b88e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b898:	f7f6 fe80 	bl	800259c <HAL_GetTick>
 800b89c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 0308 	and.w	r3, r3, #8
 800b8a8:	2b08      	cmp	r3, #8
 800b8aa:	d10e      	bne.n	800b8ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f82f 	bl	800b91e <UART_WaitOnFlagUntilTimeout>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	e025      	b.n	800b916 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 0304 	and.w	r3, r3, #4
 800b8d4:	2b04      	cmp	r3, #4
 800b8d6:	d10e      	bne.n	800b8f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 f819 	bl	800b91e <UART_WaitOnFlagUntilTimeout>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d001      	beq.n	800b8f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	e00f      	b.n	800b916 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2220      	movs	r2, #32
 800b8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2220      	movs	r2, #32
 800b902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b084      	sub	sp, #16
 800b922:	af00      	add	r7, sp, #0
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	603b      	str	r3, [r7, #0]
 800b92a:	4613      	mov	r3, r2
 800b92c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b92e:	e062      	b.n	800b9f6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b936:	d05e      	beq.n	800b9f6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b938:	f7f6 fe30 	bl	800259c <HAL_GetTick>
 800b93c:	4602      	mov	r2, r0
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	69ba      	ldr	r2, [r7, #24]
 800b944:	429a      	cmp	r2, r3
 800b946:	d302      	bcc.n	800b94e <UART_WaitOnFlagUntilTimeout+0x30>
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d11d      	bne.n	800b98a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b95c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	689a      	ldr	r2, [r3, #8]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 0201 	bic.w	r2, r2, #1
 800b96c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2220      	movs	r2, #32
 800b972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2220      	movs	r2, #32
 800b97a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b986:	2303      	movs	r3, #3
 800b988:	e045      	b.n	800ba16 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 0304 	and.w	r3, r3, #4
 800b994:	2b00      	cmp	r3, #0
 800b996:	d02e      	beq.n	800b9f6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	69db      	ldr	r3, [r3, #28]
 800b99e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9a6:	d126      	bne.n	800b9f6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	689a      	ldr	r2, [r3, #8]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f022 0201 	bic.w	r2, r2, #1
 800b9d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2220      	movs	r2, #32
 800b9e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	e00f      	b.n	800ba16 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	69da      	ldr	r2, [r3, #28]
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	4013      	ands	r3, r2
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	bf0c      	ite	eq
 800ba06:	2301      	moveq	r3, #1
 800ba08:	2300      	movne	r3, #0
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	79fb      	ldrb	r3, [r7, #7]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d08d      	beq.n	800b930 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b085      	sub	sp, #20
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d101      	bne.n	800ba34 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e027      	b.n	800ba84 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2224      	movs	r2, #36	; 0x24
 800ba40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f022 0201 	bic.w	r2, r2, #1
 800ba5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ba62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2220      	movs	r2, #32
 800ba76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3714      	adds	r7, #20
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d101      	bne.n	800baa8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800baa4:	2302      	movs	r3, #2
 800baa6:	e02d      	b.n	800bb04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2224      	movs	r2, #36	; 0x24
 800bab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f022 0201 	bic.w	r2, r2, #1
 800bace:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	430a      	orrs	r2, r1
 800bae2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 f84f 	bl	800bb88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2220      	movs	r2, #32
 800baf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d101      	bne.n	800bb24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb20:	2302      	movs	r3, #2
 800bb22:	e02d      	b.n	800bb80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2224      	movs	r2, #36	; 0x24
 800bb30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f022 0201 	bic.w	r2, r2, #1
 800bb4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	430a      	orrs	r2, r1
 800bb5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f811 	bl	800bb88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2220      	movs	r2, #32
 800bb72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d108      	bne.n	800bbaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bba8:	e031      	b.n	800bc0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bbaa:	2310      	movs	r3, #16
 800bbac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bbae:	2310      	movs	r3, #16
 800bbb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	0e5b      	lsrs	r3, r3, #25
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	f003 0307 	and.w	r3, r3, #7
 800bbc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	0f5b      	lsrs	r3, r3, #29
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	f003 0307 	and.w	r3, r3, #7
 800bbd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	7b3a      	ldrb	r2, [r7, #12]
 800bbd6:	4911      	ldr	r1, [pc, #68]	; (800bc1c <UARTEx_SetNbDataToProcess+0x94>)
 800bbd8:	5c8a      	ldrb	r2, [r1, r2]
 800bbda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bbde:	7b3a      	ldrb	r2, [r7, #12]
 800bbe0:	490f      	ldr	r1, [pc, #60]	; (800bc20 <UARTEx_SetNbDataToProcess+0x98>)
 800bbe2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bbe4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
 800bbf2:	7b7a      	ldrb	r2, [r7, #13]
 800bbf4:	4909      	ldr	r1, [pc, #36]	; (800bc1c <UARTEx_SetNbDataToProcess+0x94>)
 800bbf6:	5c8a      	ldrb	r2, [r1, r2]
 800bbf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bbfc:	7b7a      	ldrb	r2, [r7, #13]
 800bbfe:	4908      	ldr	r1, [pc, #32]	; (800bc20 <UARTEx_SetNbDataToProcess+0x98>)
 800bc00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc02:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bc0e:	bf00      	nop
 800bc10:	3714      	adds	r7, #20
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	0800c240 	.word	0x0800c240
 800bc20:	0800c248 	.word	0x0800c248

0800bc24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc24:	b084      	sub	sp, #16
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b084      	sub	sp, #16
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	f107 001c 	add.w	r0, r7, #28
 800bc32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d120      	bne.n	800bc7e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68da      	ldr	r2, [r3, #12]
 800bc4c:	4b2a      	ldr	r3, [pc, #168]	; (800bcf8 <USB_CoreInit+0xd4>)
 800bc4e:	4013      	ands	r3, r2
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bc60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d105      	bne.n	800bc72 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 fa60 	bl	800c138 <USB_CoreReset>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	73fb      	strb	r3, [r7, #15]
 800bc7c:	e01a      	b.n	800bcb4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 fa54 	bl	800c138 <USB_CoreReset>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bc94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d106      	bne.n	800bca8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	639a      	str	r2, [r3, #56]	; 0x38
 800bca6:	e005      	b.n	800bcb4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d116      	bne.n	800bce8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bcc8:	4b0c      	ldr	r3, [pc, #48]	; (800bcfc <USB_CoreInit+0xd8>)
 800bcca:	4313      	orrs	r3, r2
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	f043 0206 	orr.w	r2, r3, #6
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	f043 0220 	orr.w	r2, r3, #32
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bcf4:	b004      	add	sp, #16
 800bcf6:	4770      	bx	lr
 800bcf8:	ffbdffbf 	.word	0xffbdffbf
 800bcfc:	03ee0000 	.word	0x03ee0000

0800bd00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	f023 0201 	bic.w	r2, r3, #1
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b082      	sub	sp, #8
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bd3a:	78fb      	ldrb	r3, [r7, #3]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d106      	bne.n	800bd4e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	60da      	str	r2, [r3, #12]
 800bd4c:	e00b      	b.n	800bd66 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bd4e:	78fb      	ldrb	r3, [r7, #3]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d106      	bne.n	800bd62 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	60da      	str	r2, [r3, #12]
 800bd60:	e001      	b.n	800bd66 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	e003      	b.n	800bd6e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bd66:	2032      	movs	r0, #50	; 0x32
 800bd68:	f7f6 fc24 	bl	80025b4 <HAL_Delay>

  return HAL_OK;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
	...

0800bd78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd78:	b084      	sub	sp, #16
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b086      	sub	sp, #24
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
 800bd82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bd86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bd92:	2300      	movs	r3, #0
 800bd94:	613b      	str	r3, [r7, #16]
 800bd96:	e009      	b.n	800bdac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	3340      	adds	r3, #64	; 0x40
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	4413      	add	r3, r2
 800bda2:	2200      	movs	r2, #0
 800bda4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	613b      	str	r3, [r7, #16]
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	2b0e      	cmp	r3, #14
 800bdb0:	d9f2      	bls.n	800bd98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bdb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d11c      	bne.n	800bdf2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdc6:	f043 0302 	orr.w	r3, r3, #2
 800bdca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	601a      	str	r2, [r3, #0]
 800bdf0:	e005      	b.n	800bdfe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be04:	461a      	mov	r2, r3
 800be06:	2300      	movs	r3, #0
 800be08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be10:	4619      	mov	r1, r3
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be18:	461a      	mov	r2, r3
 800be1a:	680b      	ldr	r3, [r1, #0]
 800be1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be20:	2b01      	cmp	r3, #1
 800be22:	d10c      	bne.n	800be3e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	2b00      	cmp	r3, #0
 800be28:	d104      	bne.n	800be34 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800be2a:	2100      	movs	r1, #0
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 f949 	bl	800c0c4 <USB_SetDevSpeed>
 800be32:	e008      	b.n	800be46 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800be34:	2101      	movs	r1, #1
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f944 	bl	800c0c4 <USB_SetDevSpeed>
 800be3c:	e003      	b.n	800be46 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800be3e:	2103      	movs	r1, #3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 f93f 	bl	800c0c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800be46:	2110      	movs	r1, #16
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 f8f3 	bl	800c034 <USB_FlushTxFifo>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d001      	beq.n	800be58 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800be54:	2301      	movs	r3, #1
 800be56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 f911 	bl	800c080 <USB_FlushRxFifo>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be6e:	461a      	mov	r2, r3
 800be70:	2300      	movs	r3, #0
 800be72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be7a:	461a      	mov	r2, r3
 800be7c:	2300      	movs	r3, #0
 800be7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be86:	461a      	mov	r2, r3
 800be88:	2300      	movs	r3, #0
 800be8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be8c:	2300      	movs	r3, #0
 800be8e:	613b      	str	r3, [r7, #16]
 800be90:	e043      	b.n	800bf1a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	015a      	lsls	r2, r3, #5
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	4413      	add	r3, r2
 800be9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bea8:	d118      	bne.n	800bedc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10a      	bne.n	800bec6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	015a      	lsls	r2, r3, #5
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	4413      	add	r3, r2
 800beb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bebc:	461a      	mov	r2, r3
 800bebe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bec2:	6013      	str	r3, [r2, #0]
 800bec4:	e013      	b.n	800beee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	015a      	lsls	r2, r3, #5
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	4413      	add	r3, r2
 800bece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bed2:	461a      	mov	r2, r3
 800bed4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bed8:	6013      	str	r3, [r2, #0]
 800beda:	e008      	b.n	800beee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	015a      	lsls	r2, r3, #5
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	4413      	add	r3, r2
 800bee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee8:	461a      	mov	r2, r3
 800beea:	2300      	movs	r3, #0
 800beec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	015a      	lsls	r2, r3, #5
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	4413      	add	r3, r2
 800bef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800befa:	461a      	mov	r2, r3
 800befc:	2300      	movs	r3, #0
 800befe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	015a      	lsls	r2, r3, #5
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	4413      	add	r3, r2
 800bf08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	3301      	adds	r3, #1
 800bf18:	613b      	str	r3, [r7, #16]
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	693a      	ldr	r2, [r7, #16]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d3b7      	bcc.n	800be92 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf22:	2300      	movs	r3, #0
 800bf24:	613b      	str	r3, [r7, #16]
 800bf26:	e043      	b.n	800bfb0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	4413      	add	r3, r2
 800bf30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf3e:	d118      	bne.n	800bf72 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10a      	bne.n	800bf5c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	015a      	lsls	r2, r3, #5
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf52:	461a      	mov	r2, r3
 800bf54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	e013      	b.n	800bf84 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf68:	461a      	mov	r2, r3
 800bf6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bf6e:	6013      	str	r3, [r2, #0]
 800bf70:	e008      	b.n	800bf84 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	015a      	lsls	r2, r3, #5
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	4413      	add	r3, r2
 800bf7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf7e:	461a      	mov	r2, r3
 800bf80:	2300      	movs	r3, #0
 800bf82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	015a      	lsls	r2, r3, #5
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf90:	461a      	mov	r2, r3
 800bf92:	2300      	movs	r3, #0
 800bf94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	015a      	lsls	r2, r3, #5
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bfa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	3301      	adds	r3, #1
 800bfae:	613b      	str	r3, [r7, #16]
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	693a      	ldr	r2, [r7, #16]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d3b7      	bcc.n	800bf28 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bfd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d105      	bne.n	800bfec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	699b      	ldr	r3, [r3, #24]
 800bfe4:	f043 0210 	orr.w	r2, r3, #16
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	699a      	ldr	r2, [r3, #24]
 800bff0:	4b0e      	ldr	r3, [pc, #56]	; (800c02c <USB_DevInit+0x2b4>)
 800bff2:	4313      	orrs	r3, r2
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d005      	beq.n	800c00a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	f043 0208 	orr.w	r2, r3, #8
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c00a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d105      	bne.n	800c01c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	699a      	ldr	r2, [r3, #24]
 800c014:	4b06      	ldr	r3, [pc, #24]	; (800c030 <USB_DevInit+0x2b8>)
 800c016:	4313      	orrs	r3, r2
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c01c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3718      	adds	r7, #24
 800c022:	46bd      	mov	sp, r7
 800c024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c028:	b004      	add	sp, #16
 800c02a:	4770      	bx	lr
 800c02c:	803c3800 	.word	0x803c3800
 800c030:	40000004 	.word	0x40000004

0800c034 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c03e:	2300      	movs	r3, #0
 800c040:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	019b      	lsls	r3, r3, #6
 800c046:	f043 0220 	orr.w	r2, r3, #32
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3301      	adds	r3, #1
 800c052:	60fb      	str	r3, [r7, #12]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	4a09      	ldr	r2, [pc, #36]	; (800c07c <USB_FlushTxFifo+0x48>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d901      	bls.n	800c060 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e006      	b.n	800c06e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	f003 0320 	and.w	r3, r3, #32
 800c068:	2b20      	cmp	r3, #32
 800c06a:	d0f0      	beq.n	800c04e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3714      	adds	r7, #20
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	00030d40 	.word	0x00030d40

0800c080 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c088:	2300      	movs	r3, #0
 800c08a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2210      	movs	r2, #16
 800c090:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	3301      	adds	r3, #1
 800c096:	60fb      	str	r3, [r7, #12]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	4a09      	ldr	r2, [pc, #36]	; (800c0c0 <USB_FlushRxFifo+0x40>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d901      	bls.n	800c0a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c0a0:	2303      	movs	r3, #3
 800c0a2:	e006      	b.n	800c0b2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	f003 0310 	and.w	r3, r3, #16
 800c0ac:	2b10      	cmp	r3, #16
 800c0ae:	d0f0      	beq.n	800c092 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3714      	adds	r7, #20
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	00030d40 	.word	0x00030d40

0800c0c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	78fb      	ldrb	r3, [r7, #3]
 800c0de:	68f9      	ldr	r1, [r7, #12]
 800c0e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3714      	adds	r7, #20
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b085      	sub	sp, #20
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c110:	f023 0303 	bic.w	r3, r3, #3
 800c114:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c124:	f043 0302 	orr.w	r3, r3, #2
 800c128:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3714      	adds	r7, #20
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c140:	2300      	movs	r3, #0
 800c142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	3301      	adds	r3, #1
 800c148:	60fb      	str	r3, [r7, #12]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	4a13      	ldr	r2, [pc, #76]	; (800c19c <USB_CoreReset+0x64>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d901      	bls.n	800c156 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c152:	2303      	movs	r3, #3
 800c154:	e01b      	b.n	800c18e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	daf2      	bge.n	800c144 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c15e:	2300      	movs	r3, #0
 800c160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	f043 0201 	orr.w	r2, r3, #1
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3301      	adds	r3, #1
 800c172:	60fb      	str	r3, [r7, #12]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	4a09      	ldr	r2, [pc, #36]	; (800c19c <USB_CoreReset+0x64>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d901      	bls.n	800c180 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c17c:	2303      	movs	r3, #3
 800c17e:	e006      	b.n	800c18e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	f003 0301 	and.w	r3, r3, #1
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d0f0      	beq.n	800c16e <USB_CoreReset+0x36>

  return HAL_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	00030d40 	.word	0x00030d40

0800c1a0 <__libc_init_array>:
 800c1a0:	b570      	push	{r4, r5, r6, lr}
 800c1a2:	4d0d      	ldr	r5, [pc, #52]	; (800c1d8 <__libc_init_array+0x38>)
 800c1a4:	4c0d      	ldr	r4, [pc, #52]	; (800c1dc <__libc_init_array+0x3c>)
 800c1a6:	1b64      	subs	r4, r4, r5
 800c1a8:	10a4      	asrs	r4, r4, #2
 800c1aa:	2600      	movs	r6, #0
 800c1ac:	42a6      	cmp	r6, r4
 800c1ae:	d109      	bne.n	800c1c4 <__libc_init_array+0x24>
 800c1b0:	4d0b      	ldr	r5, [pc, #44]	; (800c1e0 <__libc_init_array+0x40>)
 800c1b2:	4c0c      	ldr	r4, [pc, #48]	; (800c1e4 <__libc_init_array+0x44>)
 800c1b4:	f000 f820 	bl	800c1f8 <_init>
 800c1b8:	1b64      	subs	r4, r4, r5
 800c1ba:	10a4      	asrs	r4, r4, #2
 800c1bc:	2600      	movs	r6, #0
 800c1be:	42a6      	cmp	r6, r4
 800c1c0:	d105      	bne.n	800c1ce <__libc_init_array+0x2e>
 800c1c2:	bd70      	pop	{r4, r5, r6, pc}
 800c1c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1c8:	4798      	blx	r3
 800c1ca:	3601      	adds	r6, #1
 800c1cc:	e7ee      	b.n	800c1ac <__libc_init_array+0xc>
 800c1ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1d2:	4798      	blx	r3
 800c1d4:	3601      	adds	r6, #1
 800c1d6:	e7f2      	b.n	800c1be <__libc_init_array+0x1e>
 800c1d8:	0800c258 	.word	0x0800c258
 800c1dc:	0800c258 	.word	0x0800c258
 800c1e0:	0800c258 	.word	0x0800c258
 800c1e4:	0800c25c 	.word	0x0800c25c

0800c1e8 <memset>:
 800c1e8:	4402      	add	r2, r0
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d100      	bne.n	800c1f2 <memset+0xa>
 800c1f0:	4770      	bx	lr
 800c1f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c1f6:	e7f9      	b.n	800c1ec <memset+0x4>

0800c1f8 <_init>:
 800c1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fa:	bf00      	nop
 800c1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1fe:	bc08      	pop	{r3}
 800c200:	469e      	mov	lr, r3
 800c202:	4770      	bx	lr

0800c204 <_fini>:
 800c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c206:	bf00      	nop
 800c208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c20a:	bc08      	pop	{r3}
 800c20c:	469e      	mov	lr, r3
 800c20e:	4770      	bx	lr
