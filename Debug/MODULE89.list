
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efc4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800f25c  0800f25c  0001f25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f29c  0800f29c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f29c  0800f29c  0001f29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2a4  0800f2a4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2a4  0800f2a4  0001f2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2a8  0800f2a8  0001f2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800f2ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800f2bc  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800f31c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000eac  240000d0  0800f37c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000f7c  0800f37c  00020f7c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00032564  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000488e  00000000  00000000  00052662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b78  00000000  00000000  00056ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001a10  00000000  00000000  00058a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bb25  00000000  00000000  0005a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021f61  00000000  00000000  00095f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00181b77  00000000  00000000  000b7efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00239a75  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007704  00000000  00000000  00239ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f244 	.word	0x0800f244

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800f244 	.word	0x0800f244

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 80005d0:	b480      	push	{r7}
 80005d2:	b08b      	sub	sp, #44	; 0x2c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	61f8      	str	r0, [r7, #28]
 80005d8:	ed87 0a06 	vstr	s0, [r7, #24]
 80005dc:	edc7 0a05 	vstr	s1, [r7, #20]
 80005e0:	ed87 1a04 	vstr	s2, [r7, #16]
 80005e4:	edc7 1a03 	vstr	s3, [r7, #12]
 80005e8:	ed87 2a02 	vstr	s4, [r7, #8]
 80005ec:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	222c      	movs	r2, #44	; 0x2c
 80005f4:	fb02 f303 	mul.w	r3, r2, r3
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <setupPID+0x64>)
 80005fa:	4413      	add	r3, r2
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	69fa      	ldr	r2, [r7, #28]
 8000602:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 8000604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 800060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	611a      	str	r2, [r3, #16]
}
 8000628:	bf00      	nop
 800062a:	372c      	adds	r7, #44	; 0x2c
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	240000ec 	.word	0x240000ec

08000638 <calculator>:


float calculator(int num, int input, float setpoint){
 8000638:	b480      	push	{r7}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	ed87 0a01 	vstr	s0, [r7, #4]
	pid_state * pid = &pids[num];
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	222c      	movs	r2, #44	; 0x2c
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	4a50      	ldr	r2, [pc, #320]	; (8000790 <calculator+0x158>)
 8000650:	4413      	add	r3, r2
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
	// Calculate error
	pid->error = setpoint - input;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	ee07 3a90 	vmov	s15, r3
 800065a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800065e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Proportional term
	float Pout = pid->Kp * pid->error;
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067c:	edc7 7a08 	vstr	s15, [r7, #32]

	// Integral term
	pid->integral += pid->error * pid->Dt;
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	edd3 7a01 	vldr	s15, [r3, #4]
 800068c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	float Iout = pid->Ki * pid->integral;
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b0:	edc7 7a07 	vstr	s15, [r7, #28]
	if (pid->integral > 4095) {
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ba:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000794 <calculator+0x15c>
 80006be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c6:	dd02      	ble.n	80006ce <calculator+0x96>
		pid->integral = 4095;
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	4a33      	ldr	r2, [pc, #204]	; (8000798 <calculator+0x160>)
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if (pid->integral < -4095) {
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006d4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800079c <calculator+0x164>
 80006d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e0:	d502      	bpl.n	80006e8 <calculator+0xb0>
		pid->integral = -4095;
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <calculator+0x168>)
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
	}
	// Derivative term
	float derivative = (pid->error - pid->error_pre) / pid->Dt;
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80006f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80006fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000702:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dout = pid->Kd * derivative;
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	edd3 7a04 	vldr	s15, [r3, #16]
 800070c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000714:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate total output
	pid->output = Pout + Iout + Dout;
 8000718:	ed97 7a08 	vldr	s14, [r7, #32]
 800071c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000724:	edd7 7a05 	vldr	s15, [r7, #20]
 8000728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	edc3 7a07 	vstr	s15, [r3, #28]

	// Restrict to max/min
	if( pid->output > pid->Vmax){
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	ed93 7a07 	vldr	s14, [r3, #28]
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	edd3 7a05 	vldr	s15, [r3, #20]
 800073e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000746:	dd04      	ble.n	8000752 <calculator+0x11a>
		pid->output = pid->Vmax;}
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	61da      	str	r2, [r3, #28]
 8000750:	e00e      	b.n	8000770 <calculator+0x138>
	else if( pid->output < pid->Vmin){
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	ed93 7a07 	vldr	s14, [r3, #28]
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	edd3 7a06 	vldr	s15, [r3, #24]
 800075e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000766:	d503      	bpl.n	8000770 <calculator+0x138>
		pid->output = pid->Vmin;}
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	61da      	str	r2, [r3, #28]

	// Save error to previous error
	pid->error_pre = pid->error;
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	621a      	str	r2, [r3, #32]

	return pid->output;
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	ee07 3a90 	vmov	s15, r3
}
 8000780:	eeb0 0a67 	vmov.f32	s0, s15
 8000784:	372c      	adds	r7, #44	; 0x2c
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	240000ec 	.word	0x240000ec
 8000794:	457ff000 	.word	0x457ff000
 8000798:	457ff000 	.word	0x457ff000
 800079c:	c57ff000 	.word	0xc57ff000
 80007a0:	c57ff000 	.word	0xc57ff000

080007a4 <enable_Encoder_OE>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare

static encoder_state encoders[NUM_ENCODER];

void enable_Encoder_OE(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ae:	4802      	ldr	r0, [pc, #8]	; (80007b8 <enable_Encoder_OE+0x14>)
 80007b0:	f007 fc2e 	bl	8008010 <HAL_GPIO_WritePin>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58020400 	.word	0x58020400

080007bc <Encoder_Start>:

void disable_Encoder_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
}

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <Encoder_Start+0x48>)
 80007d4:	4413      	add	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	68b8      	ldr	r0, [r7, #8]
 80007dc:	f00b fb8a 	bl	800bef4 <HAL_TIM_Encoder_Start>
	encoder->number = num;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	609a      	str	r2, [r3, #8]
	enable_Encoder_OE();
 80007f2:	f7ff ffd7 	bl	80007a4 <enable_Encoder_OE>
	Set_Encoder_Zero(num);
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f000 f824 	bl	8000844 <Set_Encoder_Zero>
}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	240001c8 	.word	0x240001c8

08000808 <Get_Value_Encoder>:

uint16_t Get_Value_Encoder(int num){ //Read Encoder Select by input num
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <Get_Value_Encoder+0x38>)
 800081c:	4413      	add	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
	if(__HAL_TIM_GET_COUNTER(encoder->QEI_TIMER) >= 0){
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		return __HAL_TIM_GET_COUNTER(encoder->QEI_TIMER); //return value to use
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000830:	b29b      	uxth	r3, r3
	}
}
 8000832:	4618      	mov	r0, r3
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	240001c8 	.word	0x240001c8

08000844 <Set_Encoder_Zero>:

void Set_Encoder_Zero(int num){
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4a07      	ldr	r2, [pc, #28]	; (8000874 <Set_Encoder_Zero+0x30>)
 8000858:	4413      	add	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(encoder->QEI_TIMER, OFFSET);
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	240001c8 	.word	0x240001c8

08000878 <Stepper_Setup>:
#include "PID.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	224c      	movs	r2, #76	; 0x4c
 800088a:	fb02 f303 	mul.w	r3, r2, r3
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <Stepper_Setup+0x54>)
 8000890:	4413      	add	r3, r2
 8000892:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	68ba      	ldr	r2, [r7, #8]
 800089e:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	8c3a      	ldrh	r2, [r7, #32]
 80008b0:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80008b8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	return SERR_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	371c      	adds	r7, #28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	24000204 	.word	0x24000204

080008d0 <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d02d      	beq.n	800093c <Stepper_SetStepTimer+0x6c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d028      	beq.n	800093c <Stepper_SetStepTimer+0x6c>
		//    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
		uint32_t prescaler = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
		uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSpeed;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <Stepper_SetStepTimer+0x78>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80008f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]

		if (timerTicks > 0xFFFF) {
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000902:	d30b      	bcc.n	800091c <Stepper_SetStepTimer+0x4c>
			// calculate the minimum prescaler
			prescaler = timerTicks/0xFFFF;
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <Stepper_SetStepTimer+0x7c>)
 8000908:	fba2 2303 	umull	r2, r3, r2, r3
 800090c:	0bdb      	lsrs	r3, r3, #15
 800090e:	60fb      	str	r3, [r7, #12]
			timerTicks /= (prescaler + 1);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3301      	adds	r3, #1
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	60bb      	str	r3, [r7, #8]
		}
		stepper -> STEP_TIMER -> Instance -> PSC = prescaler;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = timerTicks;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68ba      	ldr	r2, [r7, #8]
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = timerTicks/2;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	0852      	lsrs	r2, r2, #1
 800093a:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	24000ce4 	.word	0x24000ce4
 800094c:	80008001 	.word	0x80008001

08000950 <Stepper_DefaultState>:

stepper_error Stepper_DefaultState(int num){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	224c      	movs	r2, #76	; 0x4c
 800095c:	fb02 f303 	mul.w	r3, r2, r3
 8000960:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <Stepper_DefaultState+0x60>)
 8000962:	4413      	add	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
	stepper -> status = SS_STOPPED;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2201      	movs	r2, #1
 8000972:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <Stepper_DefaultState+0x64>)
 8000978:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	699a      	ldr	r2, [r3, #24]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = OFFSET;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000988:	635a      	str	r2, [r3, #52]	; 0x34
//	stepper -> currentPosition = 0;

	Stepper_SetStepTimer(stepper);
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f7ff ffa0 	bl	80008d0 <Stepper_SetStepTimer>
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	4619      	mov	r1, r3
 800099a:	4610      	mov	r0, r2
 800099c:	f00b f866 	bl	800ba6c <HAL_TIM_PWM_Start>
	enable_Stepper_OE();
 80009a0:	f000 f938 	bl	8000c14 <enable_Stepper_OE>

	return SERR_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	24000204 	.word	0x24000204
 80009b4:	00061a80 	.word	0x00061a80

080009b8 <Stepper_SetMinPosition>:

stepper_error Stepper_SetMinPosition(int num, uint16_t value){
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	224c      	movs	r2, #76	; 0x4c
 80009c8:	fb02 f303 	mul.w	r3, r2, r3
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <Stepper_SetMinPosition+0x30>)
 80009ce:	4413      	add	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
	stepper->minPosition = value;
 80009d2:	887a      	ldrh	r2, [r7, #2]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	621a      	str	r2, [r3, #32]
}
 80009d8:	bf00      	nop
 80009da:	4618      	mov	r0, r3
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	24000204 	.word	0x24000204

080009ec <Stepper_SetMaxPosition>:

stepper_error Stepper_SetMaxPosition(int num, uint16_t value){
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	224c      	movs	r2, #76	; 0x4c
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <Stepper_SetMaxPosition+0x30>)
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
	stepper->maxPosition = value;
 8000a06:	887a      	ldrh	r2, [r7, #2]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a0c:	bf00      	nop
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	24000204 	.word	0x24000204

08000a20 <Stepper_SetMinSpeed>:

stepper_error Stepper_SetMinSpeed(int num, uint16_t value){
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	224c      	movs	r2, #76	; 0x4c
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <Stepper_SetMinSpeed+0x30>)
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
	stepper->minSpeed = value;
 8000a3a:	887a      	ldrh	r2, [r7, #2]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	619a      	str	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	4618      	mov	r0, r3
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	24000204 	.word	0x24000204

08000a54 <Stepper_SetMaxSpeed>:

stepper_error Stepper_SetMaxSpeed(int num, uint16_t value){
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	224c      	movs	r2, #76	; 0x4c
 8000a64:	fb02 f303 	mul.w	r3, r2, r3
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <Stepper_SetMaxSpeed+0x30>)
 8000a6a:	4413      	add	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
	stepper->maxSpeed = value;
 8000a6e:	887a      	ldrh	r2, [r7, #2]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	61da      	str	r2, [r3, #28]
}
 8000a74:	bf00      	nop
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	24000204 	.word	0x24000204

08000a88 <Stepper_SetTraget>:

stepper_error Stepper_SetTraget(int num, uint16_t value){
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	224c      	movs	r2, #76	; 0x4c
 8000a98:	fb02 f303 	mul.w	r3, r2, r3
 8000a9c:	4a21      	ldr	r2, [pc, #132]	; (8000b24 <Stepper_SetTraget+0x9c>)
 8000a9e:	4413      	add	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b80      	cmp	r3, #128	; 0x80
 8000aac:	d032      	beq.n	8000b14 <Stepper_SetTraget+0x8c>
		if(value<stepper->minPosition){
 8000aae:	887a      	ldrh	r2, [r7, #2]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	6a1b      	ldr	r3, [r3, #32]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	da01      	bge.n	8000abc <Stepper_SetTraget+0x34>
			return SERR_LIMIT;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	e02c      	b.n	8000b16 <Stepper_SetTraget+0x8e>
		}
		else if (value>stepper->maxPosition) {
 8000abc:	887a      	ldrh	r2, [r7, #2]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	dd01      	ble.n	8000aca <Stepper_SetTraget+0x42>
			return SERR_LIMIT;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	e025      	b.n	8000b16 <Stepper_SetTraget+0x8e>
		}
		else {
			if(stepper->modeStepper == M_ANGLE){
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10d      	bne.n	8000af2 <Stepper_SetTraget+0x6a>
				stepper->targetPosition = value*ANGLE_TO_ENCODER + OFFSET;
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	035b      	lsls	r3, r3, #13
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <Stepper_SetTraget+0xa0>)
 8000adc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae0:	1392      	asrs	r2, r2, #14
 8000ae2:	17db      	asrs	r3, r3, #31
 8000ae4:	1ad2      	subs	r2, r2, r3
 8000ae6:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000aea:	4413      	add	r3, r2
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	6353      	str	r3, [r2, #52]	; 0x34
 8000af0:	e00c      	b.n	8000b0c <Stepper_SetTraget+0x84>
			}
			else {
				stepper->targetPosition = value*SCALAR_TO_ENCODER + OFFSET;
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	035b      	lsls	r3, r3, #13
 8000af6:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <Stepper_SetTraget+0xa4>)
 8000af8:	fb82 1203 	smull	r1, r2, r2, r3
 8000afc:	1152      	asrs	r2, r2, #5
 8000afe:	17db      	asrs	r3, r3, #31
 8000b00:	1ad2      	subs	r2, r2, r3
 8000b02:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000b06:	4413      	add	r3, r2
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	6353      	str	r3, [r2, #52]	; 0x34
			}
			stepper->status = SS_STARTING;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2204      	movs	r2, #4
 8000b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}
	}
	return SERR_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	24000204 	.word	0x24000204
 8000b28:	7482296b 	.word	0x7482296b
 8000b2c:	51eb851f 	.word	0x51eb851f

08000b30 <Stepper_SetSpeed>:

stepper_error Stepper_SetSpeed(int num, int32_t value){
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	224c      	movs	r2, #76	; 0x4c
 8000b3e:	fb02 f303 	mul.w	r3, r2, r3
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <Stepper_SetSpeed+0x54>)
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
	if(value<stepper->minSpeed){
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	da04      	bge.n	8000b5c <Stepper_SetSpeed+0x2c>
		stepper->currentSpeed = stepper->minSpeed;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	699a      	ldr	r2, [r3, #24]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b5a:	e00c      	b.n	8000b76 <Stepper_SetSpeed+0x46>
	}
	else if (value>stepper->maxSpeed) {
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	69db      	ldr	r3, [r3, #28]
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	dd04      	ble.n	8000b70 <Stepper_SetSpeed+0x40>
		stepper->currentSpeed = stepper->maxSpeed;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	69da      	ldr	r2, [r3, #28]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b6e:	e002      	b.n	8000b76 <Stepper_SetSpeed+0x46>
	}
	else{
		stepper->currentSpeed = value;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000b76:	bf00      	nop
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	24000204 	.word	0x24000204

08000b88 <Stepper_Direction>:

void Stepper_Direction(stepper_state * stepper){
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	int32_t input = calculator(stepper->number, Get_Value_Encoder(stepper->number), stepper->targetPosition);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681c      	ldr	r4, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fe35 	bl	8000808 <Get_Value_Encoder>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba6:	ee07 3a90 	vmov	s15, r3
 8000baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bae:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f7ff fd3f 	bl	8000638 <calculator>
 8000bba:	eef0 7a40 	vmov.f32	s15, s0
 8000bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bc2:	ee17 3a90 	vmov	r3, s15
 8000bc6:	60fb      	str	r3, [r7, #12]
	Stepper_SetSpeed(stepper->number, abs(input));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bfb8      	it	lt
 8000bd2:	425b      	neglt	r3, r3
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4610      	mov	r0, r2
 8000bd8:	f7ff ffaa 	bl	8000b30 <Stepper_SetSpeed>
	if(input<0){
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	da0b      	bge.n	8000bfa <Stepper_Direction+0x72>
		stepper->status = SS_RUNNING_FORWARD;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2202      	movs	r2, #2
 8000be6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	8a1b      	ldrh	r3, [r3, #16]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0412      	lsls	r2, r2, #16
 8000bf6:	619a      	str	r2, [r3, #24]
	}
	else {
		stepper->status = SS_RUNNING_BACKWARD;
		stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
	}
}
 8000bf8:	e008      	b.n	8000c0c <Stepper_Direction+0x84>
		stepper->status = SS_RUNNING_BACKWARD;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	8a1a      	ldrh	r2, [r3, #16]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	619a      	str	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd90      	pop	{r4, r7, pc}

08000c14 <enable_Stepper_OE>:

void enable_Stepper_OE(){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1e:	4802      	ldr	r0, [pc, #8]	; (8000c28 <enable_Stepper_OE+0x14>)
 8000c20:	f007 f9f6 	bl	8008010 <HAL_GPIO_WritePin>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	58020400 	.word	0x58020400

08000c2c <Stepper_runStep>:

void disable_Stepper_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
}

void Stepper_runStep(int num){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	224c      	movs	r2, #76	; 0x4c
 8000c38:	fb02 f303 	mul.w	r3, r2, r3
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <Stepper_runStep+0x64>)
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b80      	cmp	r3, #128	; 0x80
 8000c4c:	d014      	beq.n	8000c78 <Stepper_runStep+0x4c>
//		enable_Stepper_OE();
		HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	4619      	mov	r1, r3
 8000c58:	4610      	mov	r0, r2
 8000c5a:	f00a ff07 	bl	800ba6c <HAL_TIM_PWM_Start>
		if(stepper->home_status){
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00e      	beq.n	8000c88 <Stepper_runStep+0x5c>
			Stepper_Direction(stepper);
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f7ff ff8c 	bl	8000b88 <Stepper_Direction>
			Stepper_SetStepTimer(stepper);
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f7ff fe2d 	bl	80008d0 <Stepper_SetStepTimer>
	}
	else{
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
//		disable_Stepper_OE();
	}
}
 8000c76:	e007      	b.n	8000c88 <Stepper_runStep+0x5c>
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	4619      	mov	r1, r3
 8000c82:	4610      	mov	r0, r2
 8000c84:	f00a fffa 	bl	800bc7c <HAL_TIM_PWM_Stop>
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	24000204 	.word	0x24000204

08000c94 <Stepper_StartStop>:

void Stepper_StartStop(int num, uint8_t j){
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
	stepper_state * stepper = &steppers[num];
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	224c      	movs	r2, #76	; 0x4c
 8000ca4:	fb02 f303 	mul.w	r3, r2, r3
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <Stepper_StartStop+0x40>)
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
	if(j == 1){
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d104      	bne.n	8000cbe <Stepper_StartStop+0x2a>
		stepper->status = SS_STARTING;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}
	else {
		stepper->status = SS_STOPPED;
	}
}
 8000cbc:	e003      	b.n	8000cc6 <Stepper_StartStop+0x32>
		stepper->status = SS_STOPPED;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	24000204 	.word	0x24000204

08000cd8 <Stepper_updateHome>:

void Stepper_updateHome(int num, int value){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	224c      	movs	r2, #76	; 0x4c
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <Stepper_updateHome+0x4c>)
 8000cec:	4413      	add	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
	if(stepper->home_status == 0){
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10e      	bne.n	8000d1a <Stepper_updateHome+0x42>
		Set_Encoder_Zero(num);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fda1 	bl	8000844 <Set_Encoder_Zero>
		stepper->home_status = value;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b25a      	sxtb	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		Stepper_DefaultState(num);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fe1f 	bl	8000950 <Stepper_DefaultState>
		stepper -> status = SS_STARTING;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2204      	movs	r2, #4
 8000d16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	24000204 	.word	0x24000204

08000d28 <Stepper_SetHome>:
int8_t Stepper_Checkhome(int num){
	stepper_state * stepper = &steppers[num];
	return stepper->home_status;
}

void Stepper_SetHome(int num, int dir, int on){
 8000d28:	b480      	push	{r7}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	224c      	movs	r2, #76	; 0x4c
 8000d38:	fb02 f303 	mul.w	r3, r2, r3
 8000d3c:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <Stepper_SetHome+0x60>)
 8000d3e:	4413      	add	r3, r2
 8000d40:	617b      	str	r3, [r7, #20]
	if(on){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d019      	beq.n	8000d7c <Stepper_SetHome+0x54>
		stepper->home_status = 0;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	8a1a      	ldrh	r2, [r3, #16]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	619a      	str	r2, [r3, #24]
		stepper -> STEP_TIMER -> Instance -> PSC = 5;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2205      	movs	r2, #5
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = 25000;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = 25000/2;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	24000204 	.word	0x24000204

08000d8c <Serial_Setup>:
#include "Serial.h"
#include "STEPPER.h"

serial_state Serials[NUM_SERIAL];

void Serial_Setup(int num, UART_HandleTypeDef *uart){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	serial_state * serial = &Serials[num];
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2258      	movs	r2, #88	; 0x58
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <Serial_Setup+0x3c>)
 8000da0:	4413      	add	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
	serial->number = num;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	601a      	str	r2, [r3, #0]
	serial->UART_NAME = uart;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_DMA(serial->UART_NAME, &serial->rPacket, 14);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6858      	ldr	r0, [r3, #4]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3335      	adds	r3, #53	; 0x35
 8000db8:	220e      	movs	r2, #14
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f00c faaa 	bl	800d314 <HAL_UART_Receive_DMA>
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	24000384 	.word	0x24000384

08000dcc <Cal_sum>:

uint8_t Cal_sum(serial_state * serial){
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	e00b      	b.n	8000df6 <Cal_sum+0x2a>
		sum += serial->iPacket[i];
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4413      	add	r3, r2
 8000de4:	3326      	adds	r3, #38	; 0x26
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	89fb      	ldrh	r3, [r7, #14]
 8000dec:	4413      	add	r3, r2
 8000dee:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	3301      	adds	r3, #1
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	ddec      	ble.n	8000dde <Cal_sum+0x12>
	}
	return ~(sum & 0xFF);
 8000e04:	89fb      	ldrh	r3, [r7, #14]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	b2db      	uxtb	r3, r3
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SHIFT_TO_LSB>:

uint8_t SHIFT_TO_LSB(uint16_t w){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
	return w & 0x00ff;
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	b2db      	uxtb	r3, r3
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <SHIFT_TO_MSB>:

uint8_t SHIFT_TO_MSB(uint16_t w){
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	80fb      	strh	r3, [r7, #6]
	return (w >> 8) & 0x00ff;
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	0a1b      	lsrs	r3, r3, #8
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b2db      	uxtb	r3, r3
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <Servo_gripperChess>:

void Servo_gripperChess(int num, uint8_t value){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
	serial_state * serial = &Serials[num];
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2258      	movs	r2, #88	; 0x58
 8000e60:	fb02 f303 	mul.w	r3, r2, r3
 8000e64:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <Servo_gripperChess+0x70>)
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2202      	movs	r2, #2
 8000e76:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = GRIP_CHESS;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2214      	movs	r2, #20
 8000e7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 8000e82:	78fb      	ldrb	r3, [r7, #3]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ffc6 	bl	8000e18 <SHIFT_TO_LSB>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ffc9 	bl	8000e32 <SHIFT_TO_MSB>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f000 f87a 	bl	8000fa4 <iWrite>
	sendIPacket(serial);
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f000 f8c6 	bl	8001042 <sendIPacket>
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	24000384 	.word	0x24000384

08000ec4 <Servo_tragetPos>:

void Servo_tragetPos(int num, uint16_t pos){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2258      	movs	r2, #88	; 0x58
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <Servo_tragetPos+0x6c>)
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2202      	movs	r2, #2
 8000eea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = SERVO_JOINT;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(pos);
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff8d 	bl	8000e18 <SHIFT_TO_LSB>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(pos);
 8000f08:	887b      	ldrh	r3, [r7, #2]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff91 	bl	8000e32 <SHIFT_TO_MSB>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f000 f842 	bl	8000fa4 <iWrite>
	sendIPacket(serial);
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 f88e 	bl	8001042 <sendIPacket>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	24000384 	.word	0x24000384

08000f34 <Servo_StartStop>:

void Servo_StartStop(int num, uint16_t value){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2258      	movs	r2, #88	; 0x58
 8000f44:	fb02 f303 	mul.w	r3, r2, r3
 8000f48:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <Servo_StartStop+0x6c>)
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2202      	movs	r2, #2
 8000f52:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2202      	movs	r2, #2
 8000f5a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = START_STOP_MOVE;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2211      	movs	r2, #17
 8000f62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff55 	bl	8000e18 <SHIFT_TO_LSB>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff59 	bl	8000e32 <SHIFT_TO_MSB>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f000 f80a 	bl	8000fa4 <iWrite>
	sendIPacket(serial);
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 f856 	bl	8001042 <sendIPacket>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	24000384 	.word	0x24000384

08000fa4 <iWrite>:
	serial->iPacket[7] = Cal_sum(serial);

	serial->iPacketLength = 8;
}

void iWrite(serial_state * serial){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	int i;
	serial->iPacket[0] = HEADER1;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	22ff      	movs	r2, #255	; 0xff
 8000fb0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	serial->iPacket[1] = HEADER2;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	22fd      	movs	r2, #253	; 0xfd
 8000fb8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	serial->iPacket[2] = 3+serial->length;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000fc2:	3303      	adds	r3, #3
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	serial->iPacket[3] = serial->instruction;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	serial->iPacket[4] = serial->address;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	for(i = 5; i < 5+serial->length ; i++)
 8000fe4:	2305      	movs	r3, #5
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	e00e      	b.n	8001008 <iWrite+0x64>
	{
		serial->iPacket[i] = serial->parameter[i-5]; //Instruction Packet's parameter field 2 and so on (write data n-th byte)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3b05      	subs	r3, #5
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3326      	adds	r3, #38	; 0x26
 8000ffe:	460a      	mov	r2, r1
 8001000:	701a      	strb	r2, [r3, #0]
	for(i = 5; i < 5+serial->length ; i++)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3301      	adds	r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800100e:	3304      	adds	r3, #4
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	429a      	cmp	r2, r3
 8001014:	dde9      	ble.n	8000fea <iWrite+0x46>
	}
	serial->iPacket[i] = Cal_sum(serial);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fed8 	bl	8000dcc <Cal_sum>
 800101c:	4603      	mov	r3, r0
 800101e:	4619      	mov	r1, r3
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	3326      	adds	r3, #38	; 0x26
 8001028:	460a      	mov	r2, r1
 800102a:	701a      	strb	r2, [r3, #0]

	serial->iPacketLength = i+1;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	3301      	adds	r3, #1
 8001032:	b2da      	uxtb	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <sendIPacket>:

void sendIPacket(serial_state * serial){
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(serial->UART_NAME, &serial->iPacket, serial->iPacketLength, 10);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6858      	ldr	r0, [r3, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800105a:	b29a      	uxth	r2, r3
 800105c:	230a      	movs	r3, #10
 800105e:	f00c f8c3 	bl	800d1e8 <HAL_UART_Transmit>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <data_in>:
//void getRPacket(int num){
//	serial_state * serial = &Serials[num];
//	HAL_UART_Transmit(serial->UART_NAME, &serial->rPacket, 14, 5);
//}

void data_in(int num){
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2258      	movs	r2, #88	; 0x58
 8001078:	fb02 f303 	mul.w	r3, r2, r3
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <data_in+0x2c>)
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
	serial->state = 1;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	24000384 	.word	0x24000384

0800109c <selectPacket>:

void selectPacket(int num){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2258      	movs	r2, #88	; 0x58
 80010a8:	fb02 f303 	mul.w	r3, r2, r3
 80010ac:	4ab6      	ldr	r2, [pc, #728]	; (8001388 <selectPacket+0x2ec>)
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
	if(serial->state){
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 81bb 	beq.w	8001434 <selectPacket+0x398>
		if(serial->rPacket[0] == HEADER1 && serial->rPacket[1] == HEADER2){
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010c4:	2bff      	cmp	r3, #255	; 0xff
 80010c6:	f040 81ac 	bne.w	8001422 <selectPacket+0x386>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80010d0:	2bfd      	cmp	r3, #253	; 0xfd
 80010d2:	f040 81a6 	bne.w	8001422 <selectPacket+0x386>
			switch (serial->rPacket[3]) {
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010dc:	2b03      	cmp	r3, #3
 80010de:	f000 81a2 	beq.w	8001426 <selectPacket+0x38a>
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	f300 81a1 	bgt.w	800142a <selectPacket+0x38e>
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d002      	beq.n	80010f2 <selectPacket+0x56>
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d009      	beq.n	8001104 <selectPacket+0x68>
					break;
					case FACTORY_RESET:

						break;
					default:
						break;
 80010f0:	e19b      	b.n	800142a <selectPacket+0x38e>
				switch (serial->rPacket[4]) {
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010f8:	2b15      	cmp	r3, #21
 80010fa:	d001      	beq.n	8001100 <selectPacket+0x64>
 80010fc:	2b16      	cmp	r3, #22
					break;
 80010fe:	e000      	b.n	8001102 <selectPacket+0x66>
					break;
 8001100:	bf00      	nop
				break;
 8001102:	e193      	b.n	800142c <selectPacket+0x390>
					switch (serial->rPacket[4]) {
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800110a:	3b02      	subs	r3, #2
 800110c:	2b12      	cmp	r3, #18
 800110e:	f200 8186 	bhi.w	800141e <selectPacket+0x382>
 8001112:	a201      	add	r2, pc, #4	; (adr r2, 8001118 <selectPacket+0x7c>)
 8001114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001118:	0800141f 	.word	0x0800141f
 800111c:	08001165 	.word	0x08001165
 8001120:	080011c7 	.word	0x080011c7
 8001124:	08001229 	.word	0x08001229
 8001128:	0800128b 	.word	0x0800128b
 800112c:	0800141f 	.word	0x0800141f
 8001130:	0800141f 	.word	0x0800141f
 8001134:	0800141f 	.word	0x0800141f
 8001138:	0800141f 	.word	0x0800141f
 800113c:	0800141f 	.word	0x0800141f
 8001140:	0800141f 	.word	0x0800141f
 8001144:	0800141f 	.word	0x0800141f
 8001148:	0800141f 	.word	0x0800141f
 800114c:	0800141f 	.word	0x0800141f
 8001150:	080012ed 	.word	0x080012ed
 8001154:	0800133d 	.word	0x0800133d
 8001158:	0800138d 	.word	0x0800138d
 800115c:	0800141f 	.word	0x0800141f
 8001160:	0800140f 	.word	0x0800140f
						Stepper_SetMinPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800116a:	b29b      	uxth	r3, r3
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b29a      	uxth	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b29b      	uxth	r3, r3
 800117c:	4619      	mov	r1, r3
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff fc1a 	bl	80009b8 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800118a:	b29b      	uxth	r3, r3
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b29a      	uxth	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001196:	b29b      	uxth	r3, r3
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
 800119c:	4619      	mov	r1, r3
 800119e:	2002      	movs	r0, #2
 80011a0:	f7ff fc0a 	bl	80009b8 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4413      	add	r3, r2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4619      	mov	r1, r3
 80011be:	2003      	movs	r0, #3
 80011c0:	f7ff fbfa 	bl	80009b8 <Stepper_SetMinPosition>
						break;
 80011c4:	e12c      	b.n	8001420 <selectPacket+0x384>
						Stepper_SetMaxPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4413      	add	r3, r2
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff fc03 	bl	80009ec <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	2002      	movs	r0, #2
 8001202:	f7ff fbf3 	bl	80009ec <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800120c:	b29b      	uxth	r3, r3
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b29a      	uxth	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001218:	b29b      	uxth	r3, r3
 800121a:	4413      	add	r3, r2
 800121c:	b29b      	uxth	r3, r3
 800121e:	4619      	mov	r1, r3
 8001220:	2003      	movs	r0, #3
 8001222:	f7ff fbe3 	bl	80009ec <Stepper_SetMaxPosition>
						break;
 8001226:	e0fb      	b.n	8001420 <selectPacket+0x384>
						Stepper_SetMinSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800122e:	b29b      	uxth	r3, r3
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b29a      	uxth	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800123a:	b29b      	uxth	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b29b      	uxth	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	2001      	movs	r0, #1
 8001244:	f7ff fbec 	bl	8000a20 <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800124e:	b29b      	uxth	r3, r3
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b29a      	uxth	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800125a:	b29b      	uxth	r3, r3
 800125c:	4413      	add	r3, r2
 800125e:	b29b      	uxth	r3, r3
 8001260:	4619      	mov	r1, r3
 8001262:	2002      	movs	r0, #2
 8001264:	f7ff fbdc 	bl	8000a20 <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800126e:	b29b      	uxth	r3, r3
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b29a      	uxth	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800127a:	b29b      	uxth	r3, r3
 800127c:	4413      	add	r3, r2
 800127e:	b29b      	uxth	r3, r3
 8001280:	4619      	mov	r1, r3
 8001282:	2003      	movs	r0, #3
 8001284:	f7ff fbcc 	bl	8000a20 <Stepper_SetMinSpeed>
						break;
 8001288:	e0ca      	b.n	8001420 <selectPacket+0x384>
						Stepper_SetMaxSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001290:	b29b      	uxth	r3, r3
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b29a      	uxth	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800129c:	b29b      	uxth	r3, r3
 800129e:	4413      	add	r3, r2
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	4619      	mov	r1, r3
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff fbd5 	bl	8000a54 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4413      	add	r3, r2
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	2002      	movs	r0, #2
 80012c6:	f7ff fbc5 	bl	8000a54 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4413      	add	r3, r2
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	2003      	movs	r0, #3
 80012e6:	f7ff fbb5 	bl	8000a54 <Stepper_SetMaxSpeed>
						break;
 80012ea:	e099      	b.n	8001420 <selectPacket+0x384>
						Stepper_SetHome(1, 0, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80012fa:	4413      	add	r3, r2
 80012fc:	461a      	mov	r2, r3
 80012fe:	2100      	movs	r1, #0
 8001300:	2001      	movs	r0, #1
 8001302:	f7ff fd11 	bl	8000d28 <Stepper_SetHome>
						Stepper_SetHome(2, 0, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001314:	4413      	add	r3, r2
 8001316:	461a      	mov	r2, r3
 8001318:	2100      	movs	r1, #0
 800131a:	2002      	movs	r0, #2
 800131c:	f7ff fd04 	bl	8000d28 <Stepper_SetHome>
						Stepper_SetHome(3, 0, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800132e:	4413      	add	r3, r2
 8001330:	461a      	mov	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	2003      	movs	r0, #3
 8001336:	f7ff fcf7 	bl	8000d28 <Stepper_SetHome>
						break;
 800133a:	e071      	b.n	8001420 <selectPacket+0x384>
						Stepper_StartStop(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001342:	4619      	mov	r1, r3
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fca5 	bl	8000c94 <Stepper_StartStop>
						Stepper_StartStop(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001350:	4619      	mov	r1, r3
 8001352:	2002      	movs	r0, #2
 8001354:	f7ff fc9e 	bl	8000c94 <Stepper_StartStop>
						Stepper_StartStop(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800135e:	4619      	mov	r1, r3
 8001360:	2003      	movs	r0, #3
 8001362:	f7ff fc97 	bl	8000c94 <Stepper_StartStop>
						Servo_StartStop(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800136c:	b29b      	uxth	r3, r3
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	4619      	mov	r1, r3
 8001380:	2002      	movs	r0, #2
 8001382:	f7ff fdd7 	bl	8000f34 <Servo_StartStop>
						break;
 8001386:	e04b      	b.n	8001420 <selectPacket+0x384>
 8001388:	24000384 	.word	0x24000384
						Stepper_SetTraget(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001392:	b29b      	uxth	r3, r3
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	b29a      	uxth	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4413      	add	r3, r2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff fb6e 	bl	8000a88 <Stepper_SetTraget>
						Stepper_SetTraget(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	2002      	movs	r0, #2
 80013c8:	f7ff fb5e 	bl	8000a88 <Stepper_SetTraget>
						Stepper_SetTraget(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4413      	add	r3, r2
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	2003      	movs	r0, #3
 80013e8:	f7ff fb4e 	bl	8000a88 <Stepper_SetTraget>
						Servo_tragetPos(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b29b      	uxth	r3, r3
 8001404:	4619      	mov	r1, r3
 8001406:	2002      	movs	r0, #2
 8001408:	f7ff fd5c 	bl	8000ec4 <Servo_tragetPos>
						break;
 800140c:	e008      	b.n	8001420 <selectPacket+0x384>
						Servo_gripperChess(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001414:	4619      	mov	r1, r3
 8001416:	2002      	movs	r0, #2
 8001418:	f7ff fd1a 	bl	8000e50 <Servo_gripperChess>
						break;
 800141c:	e000      	b.n	8001420 <selectPacket+0x384>
						break;
 800141e:	bf00      	nop
					break;
 8001420:	e004      	b.n	800142c <selectPacket+0x390>
			}
		}
 8001422:	bf00      	nop
 8001424:	e002      	b.n	800142c <selectPacket+0x390>
						break;
 8001426:	bf00      	nop
 8001428:	e000      	b.n	800142c <selectPacket+0x390>
						break;
 800142a:	bf00      	nop
		serial->state = 0;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	}
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001442:	f002 f863 	bl	800350c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001446:	f000 f92b 	bl	80016a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144a:	f000 ff21 	bl	8002290 <MX_GPIO_Init>
  MX_BDMA_Init();
 800144e:	f000 fed7 	bl	8002200 <MX_BDMA_Init>
  MX_DMA_Init();
 8001452:	f000 fef5 	bl	8002240 <MX_DMA_Init>
  MX_ETH_Init();
 8001456:	f000 fa0f 	bl	8001878 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 800145a:	f000 fe9f 	bl	800219c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800145e:	f000 fb0d 	bl	8001a7c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001462:	f000 fb5f 	bl	8001b24 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001466:	f000 fbb3 	bl	8001bd0 <MX_TIM4_Init>
  MX_TIM1_Init();
 800146a:	f000 faad 	bl	80019c8 <MX_TIM1_Init>
  MX_SPI3_Init();
 800146e:	f000 fa55 	bl	800191c <MX_SPI3_Init>
  MX_ADC3_Init();
 8001472:	f000 f99b 	bl	80017ac <MX_ADC3_Init>
  MX_TIM5_Init();
 8001476:	f000 fc01 	bl	8001c7c <MX_TIM5_Init>
  MX_UART7_Init();
 800147a:	f000 fe41 	bl	8002100 <MX_UART7_Init>
  MX_TIM12_Init();
 800147e:	f000 fc4b 	bl	8001d18 <MX_TIM12_Init>
  MX_TIM13_Init();
 8001482:	f000 fcad 	bl	8001de0 <MX_TIM13_Init>
  MX_TIM16_Init();
 8001486:	f000 fcf9 	bl	8001e7c <MX_TIM16_Init>
  MX_TIM17_Init();
 800148a:	f000 fd71 	bl	8001f70 <MX_TIM17_Init>
  MX_UART5_Init();
 800148e:	f000 fde9 	bl	8002064 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 8001492:	f007 fec3 	bl	800921c <HAL_RCC_GetHCLKFreq>
 8001496:	4603      	mov	r3, r0
 8001498:	4a6c      	ldr	r2, [pc, #432]	; (800164c <main+0x210>)
 800149a:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 800149c:	f007 febe 	bl	800921c <HAL_RCC_GetHCLKFreq>
 80014a0:	4602      	mov	r2, r0
 80014a2:	4b6b      	ldr	r3, [pc, #428]	; (8001650 <main+0x214>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	4a6a      	ldr	r2, [pc, #424]	; (8001654 <main+0x218>)
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b0:	4a69      	ldr	r2, [pc, #420]	; (8001658 <main+0x21c>)
 80014b2:	6013      	str	r3, [r2, #0]
  //htim12 stepper 4



  //Stepper Setup
  Stepper_Setup(1, &htim16, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR1_Pin, 0);
 80014b4:	2300      	movs	r3, #0
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	2320      	movs	r3, #32
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4b67      	ldr	r3, [pc, #412]	; (800165c <main+0x220>)
 80014be:	2200      	movs	r2, #0
 80014c0:	4967      	ldr	r1, [pc, #412]	; (8001660 <main+0x224>)
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff f9d8 	bl	8000878 <Stepper_Setup>
  Stepper_SetMinPosition(1, 0);
 80014c8:	2100      	movs	r1, #0
 80014ca:	2001      	movs	r0, #1
 80014cc:	f7ff fa74 	bl	80009b8 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(1, 36000);
 80014d0:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80014d4:	2001      	movs	r0, #1
 80014d6:	f7ff fa89 	bl	80009ec <Stepper_SetMaxPosition>
  Stepper_Setup(2, &htim17, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 80014da:	2300      	movs	r3, #0
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	2310      	movs	r3, #16
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4b5e      	ldr	r3, [pc, #376]	; (800165c <main+0x220>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	495f      	ldr	r1, [pc, #380]	; (8001664 <main+0x228>)
 80014e8:	2002      	movs	r0, #2
 80014ea:	f7ff f9c5 	bl	8000878 <Stepper_Setup>
  Stepper_SetMinPosition(2, 0);
 80014ee:	2100      	movs	r1, #0
 80014f0:	2002      	movs	r0, #2
 80014f2:	f7ff fa61 	bl	80009b8 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(2, 36000);
 80014f6:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80014fa:	2002      	movs	r0, #2
 80014fc:	f7ff fa76 	bl	80009ec <Stepper_SetMaxPosition>
  Stepper_Setup(3, &htim13, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
 8001500:	2301      	movs	r3, #1
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4b57      	ldr	r3, [pc, #348]	; (8001668 <main+0x22c>)
 800150c:	2200      	movs	r2, #0
 800150e:	4957      	ldr	r1, [pc, #348]	; (800166c <main+0x230>)
 8001510:	2003      	movs	r0, #3
 8001512:	f7ff f9b1 	bl	8000878 <Stepper_Setup>
  Stepper_SetMinPosition(3, 0);
 8001516:	2100      	movs	r1, #0
 8001518:	2003      	movs	r0, #3
 800151a:	f7ff fa4d 	bl	80009b8 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(3, 36000);
 800151e:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8001522:	2003      	movs	r0, #3
 8001524:	f7ff fa62 	bl	80009ec <Stepper_SetMaxPosition>
  Stepper_Setup(4, &htim12, TIM_CHANNEL_2, DIR4_GPIO_Port, DIR4_Pin, 1);
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4b4a      	ldr	r3, [pc, #296]	; (800165c <main+0x220>)
 8001534:	2204      	movs	r2, #4
 8001536:	494e      	ldr	r1, [pc, #312]	; (8001670 <main+0x234>)
 8001538:	2004      	movs	r0, #4
 800153a:	f7ff f99d 	bl	8000878 <Stepper_Setup>
  Stepper_SetMinPosition(4, 0);
 800153e:	2100      	movs	r1, #0
 8001540:	2004      	movs	r0, #4
 8001542:	f7ff fa39 	bl	80009b8 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(4, 36000);
 8001546:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 800154a:	2004      	movs	r0, #4
 800154c:	f7ff fa4e 	bl	80009ec <Stepper_SetMaxPosition>
  Stepper_DefaultState(1);
 8001550:	2001      	movs	r0, #1
 8001552:	f7ff f9fd 	bl	8000950 <Stepper_DefaultState>
  Stepper_DefaultState(2);
 8001556:	2002      	movs	r0, #2
 8001558:	f7ff f9fa 	bl	8000950 <Stepper_DefaultState>
  Stepper_DefaultState(3);
 800155c:	2003      	movs	r0, #3
 800155e:	f7ff f9f7 	bl	8000950 <Stepper_DefaultState>
  Stepper_DefaultState(4);
 8001562:	2004      	movs	r0, #4
 8001564:	f7ff f9f4 	bl	8000950 <Stepper_DefaultState>
//  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 8001568:	4839      	ldr	r0, [pc, #228]	; (8001650 <main+0x214>)
 800156a:	f00a f9ad 	bl	800b8c8 <HAL_TIM_Base_Start_IT>

  //PID Setup
  setupPID(1, 0.05, -3200, 3200, 1, 0, 0);
 800156e:	eddf 2a41 	vldr	s5, [pc, #260]	; 8001674 <main+0x238>
 8001572:	ed9f 2a40 	vldr	s4, [pc, #256]	; 8001674 <main+0x238>
 8001576:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800157a:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8001678 <main+0x23c>
 800157e:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800167c <main+0x240>
 8001582:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8001680 <main+0x244>
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff f822 	bl	80005d0 <setupPID>
  setupPID(2, 0.05, -3200, 3200, 1, 0, 0);
 800158c:	eddf 2a39 	vldr	s5, [pc, #228]	; 8001674 <main+0x238>
 8001590:	ed9f 2a38 	vldr	s4, [pc, #224]	; 8001674 <main+0x238>
 8001594:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001598:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8001678 <main+0x23c>
 800159c:	eddf 0a37 	vldr	s1, [pc, #220]	; 800167c <main+0x240>
 80015a0:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001680 <main+0x244>
 80015a4:	2002      	movs	r0, #2
 80015a6:	f7ff f813 	bl	80005d0 <setupPID>
  setupPID(3, 0.05, -3200, 3200, 1, 0, 0);
 80015aa:	eddf 2a32 	vldr	s5, [pc, #200]	; 8001674 <main+0x238>
 80015ae:	ed9f 2a31 	vldr	s4, [pc, #196]	; 8001674 <main+0x238>
 80015b2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80015b6:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8001678 <main+0x23c>
 80015ba:	eddf 0a30 	vldr	s1, [pc, #192]	; 800167c <main+0x240>
 80015be:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8001680 <main+0x244>
 80015c2:	2003      	movs	r0, #3
 80015c4:	f7ff f804 	bl	80005d0 <setupPID>
  setupPID(4, 0.05, -3200, 3200, 1, 0, 0);
 80015c8:	eddf 2a2a 	vldr	s5, [pc, #168]	; 8001674 <main+0x238>
 80015cc:	ed9f 2a29 	vldr	s4, [pc, #164]	; 8001674 <main+0x238>
 80015d0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80015d4:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8001678 <main+0x23c>
 80015d8:	eddf 0a28 	vldr	s1, [pc, #160]	; 800167c <main+0x240>
 80015dc:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001680 <main+0x244>
 80015e0:	2004      	movs	r0, #4
 80015e2:	f7fe fff5 	bl	80005d0 <setupPID>

  //Encoder Setup
  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
 80015e6:	223c      	movs	r2, #60	; 0x3c
 80015e8:	4926      	ldr	r1, [pc, #152]	; (8001684 <main+0x248>)
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff f8e6 	bl	80007bc <Encoder_Start>
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 80015f0:	223c      	movs	r2, #60	; 0x3c
 80015f2:	4925      	ldr	r1, [pc, #148]	; (8001688 <main+0x24c>)
 80015f4:	2002      	movs	r0, #2
 80015f6:	f7ff f8e1 	bl	80007bc <Encoder_Start>
  Encoder_Start(3, &htim4, TIM_CHANNEL_ALL);
 80015fa:	223c      	movs	r2, #60	; 0x3c
 80015fc:	4923      	ldr	r1, [pc, #140]	; (800168c <main+0x250>)
 80015fe:	2003      	movs	r0, #3
 8001600:	f7ff f8dc 	bl	80007bc <Encoder_Start>
  Encoder_Start(4, &htim2, TIM_CHANNEL_ALL);
 8001604:	223c      	movs	r2, #60	; 0x3c
 8001606:	4922      	ldr	r1, [pc, #136]	; (8001690 <main+0x254>)
 8001608:	2004      	movs	r0, #4
 800160a:	f7ff f8d7 	bl	80007bc <Encoder_Start>

  // Uart
  Serial_Setup(1, &huart5);
 800160e:	4921      	ldr	r1, [pc, #132]	; (8001694 <main+0x258>)
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff fbbb 	bl	8000d8c <Serial_Setup>
  Serial_Setup(2, &huart7);
 8001616:	4920      	ldr	r1, [pc, #128]	; (8001698 <main+0x25c>)
 8001618:	2002      	movs	r0, #2
 800161a:	f7ff fbb7 	bl	8000d8c <Serial_Setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  a = HAL_GPIO_ReadPin(PROXIMITY2_GPIO_Port, PROXIMITY2_Pin);
	  if(state){
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <main+0x260>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00e      	beq.n	8001644 <main+0x208>
		  Stepper_runStep(1);
 8001626:	2001      	movs	r0, #1
 8001628:	f7ff fb00 	bl	8000c2c <Stepper_runStep>
		  Stepper_runStep(2);
 800162c:	2002      	movs	r0, #2
 800162e:	f7ff fafd 	bl	8000c2c <Stepper_runStep>
		  Stepper_runStep(3);
 8001632:	2003      	movs	r0, #3
 8001634:	f7ff fafa 	bl	8000c2c <Stepper_runStep>
		  Stepper_runStep(4);
 8001638:	2004      	movs	r0, #4
 800163a:	f7ff faf7 	bl	8000c2c <Stepper_runStep>
		  state = 0;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <main+0x260>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
	  }

	  selectPacket(1);
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff fd29 	bl	800109c <selectPacket>
	  if(state){
 800164a:	e7e8      	b.n	800161e <main+0x1e2>
 800164c:	24000ce4 	.word	0x24000ce4
 8001650:	24000a34 	.word	0x24000a34
 8001654:	000f4240 	.word	0x000f4240
 8001658:	24000c94 	.word	0x24000c94
 800165c:	58021400 	.word	0x58021400
 8001660:	24000eb4 	.word	0x24000eb4
 8001664:	24000970 	.word	0x24000970
 8001668:	58021000 	.word	0x58021000
 800166c:	24000c48 	.word	0x24000c48
 8001670:	24000dac 	.word	0x24000dac
 8001674:	00000000 	.word	0x00000000
 8001678:	45480000 	.word	0x45480000
 800167c:	c5480000 	.word	0xc5480000
 8001680:	3d4ccccd 	.word	0x3d4ccccd
 8001684:	24000c98 	.word	0x24000c98
 8001688:	24000a80 	.word	0x24000a80
 800168c:	2400051c 	.word	0x2400051c
 8001690:	24000ce8 	.word	0x24000ce8
 8001694:	24000b54 	.word	0x24000b54
 8001698:	2400048c 	.word	0x2400048c
 800169c:	24000380 	.word	0x24000380

080016a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b09c      	sub	sp, #112	; 0x70
 80016a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	224c      	movs	r2, #76	; 0x4c
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00d fdc0 	bl	800f234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2220      	movs	r2, #32
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f00d fdba 	bl	800f234 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016c0:	2002      	movs	r0, #2
 80016c2:	f006 fe21 	bl	8008308 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016c6:	2300      	movs	r3, #0
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <SystemClock_Config+0x100>)
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	4a34      	ldr	r2, [pc, #208]	; (80017a0 <SystemClock_Config+0x100>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80016d6:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <SystemClock_Config+0x100>)
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <SystemClock_Config+0x104>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016e8:	4a2e      	ldr	r2, [pc, #184]	; (80017a4 <SystemClock_Config+0x104>)
 80016ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <SystemClock_Config+0x104>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016fc:	bf00      	nop
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <SystemClock_Config+0x104>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800170a:	d1f8      	bne.n	80016fe <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <SystemClock_Config+0x108>)
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	4a25      	ldr	r2, [pc, #148]	; (80017a8 <SystemClock_Config+0x108>)
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001718:	2322      	movs	r3, #34	; 0x22
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800171c:	2301      	movs	r3, #1
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001720:	2340      	movs	r3, #64	; 0x40
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001724:	2301      	movs	r3, #1
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001728:	2302      	movs	r3, #2
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800172c:	2300      	movs	r3, #0
 800172e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001730:	2304      	movs	r3, #4
 8001732:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001734:	2319      	movs	r3, #25
 8001736:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001738:	2302      	movs	r3, #2
 800173a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800173c:	2304      	movs	r3, #4
 800173e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001740:	2302      	movs	r3, #2
 8001742:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001744:	230c      	movs	r3, #12
 8001746:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001748:	2300      	movs	r3, #0
 800174a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4618      	mov	r0, r3
 8001756:	f006 fe21 	bl	800839c <HAL_RCC_OscConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001760:	f000 ff38 	bl	80025d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001764:	233f      	movs	r3, #63	; 0x3f
 8001766:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001768:	2303      	movs	r3, #3
 800176a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001770:	2308      	movs	r3, #8
 8001772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001778:	2340      	movs	r3, #64	; 0x40
 800177a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2102      	movs	r1, #2
 8001788:	4618      	mov	r0, r3
 800178a:	f007 fa17 	bl	8008bbc <HAL_RCC_ClockConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001794:	f000 ff1e 	bl	80025d4 <Error_Handler>
  }
}
 8001798:	bf00      	nop
 800179a:	3770      	adds	r7, #112	; 0x70
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	58000400 	.word	0x58000400
 80017a4:	58024800 	.word	0x58024800
 80017a8:	58024400 	.word	0x58024400

080017ac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	615a      	str	r2, [r3, #20]
 80017c2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80017c4:	4b29      	ldr	r3, [pc, #164]	; (800186c <MX_ADC3_Init+0xc0>)
 80017c6:	4a2a      	ldr	r2, [pc, #168]	; (8001870 <MX_ADC3_Init+0xc4>)
 80017c8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <MX_ADC3_Init+0xc0>)
 80017cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017d0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <MX_ADC3_Init+0xc0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <MX_ADC3_Init+0xc0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <MX_ADC3_Init+0xc0>)
 80017e0:	2204      	movs	r2, #4
 80017e2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80017e4:	4b21      	ldr	r3, [pc, #132]	; (800186c <MX_ADC3_Init+0xc0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <MX_ADC3_Init+0xc0>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <MX_ADC3_Init+0xc0>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <MX_ADC3_Init+0xc0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <MX_ADC3_Init+0xc0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <MX_ADC3_Init+0xc0>)
 8001804:	2200      	movs	r2, #0
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <MX_ADC3_Init+0xc0>)
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_ADC3_Init+0xc0>)
 8001810:	2200      	movs	r2, #0
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_ADC3_Init+0xc0>)
 8001816:	2200      	movs	r2, #0
 8001818:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_ADC3_Init+0xc0>)
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001822:	4812      	ldr	r0, [pc, #72]	; (800186c <MX_ADC3_Init+0xc0>)
 8001824:	f002 f8ea 	bl	80039fc <HAL_ADC_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800182e:	f000 fed1 	bl	80025d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <MX_ADC3_Init+0xc8>)
 8001834:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001836:	2306      	movs	r3, #6
 8001838:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800183e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001842:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001844:	2304      	movs	r3, #4
 8001846:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_ADC3_Init+0xc0>)
 8001856:	f002 fa71 	bl	8003d3c <HAL_ADC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8001860:	f000 feb8 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	24000be4 	.word	0x24000be4
 8001870:	58026000 	.word	0x58026000
 8001874:	04300002 	.word	0x04300002

08001878 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <MX_ETH_Init+0x90>)
 800187e:	4a23      	ldr	r2, [pc, #140]	; (800190c <MX_ETH_Init+0x94>)
 8001880:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <MX_ETH_Init+0x90>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <MX_ETH_Init+0x90>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	3301      	adds	r3, #1
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001894:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <MX_ETH_Init+0x90>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	3302      	adds	r3, #2
 800189a:	22e1      	movs	r2, #225	; 0xe1
 800189c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <MX_ETH_Init+0x90>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	3303      	adds	r3, #3
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <MX_ETH_Init+0x90>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <MX_ETH_Init+0x90>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	3305      	adds	r3, #5
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <MX_ETH_Init+0x90>)
 80018be:	2201      	movs	r2, #1
 80018c0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_ETH_Init+0x90>)
 80018c4:	4a12      	ldr	r2, [pc, #72]	; (8001910 <MX_ETH_Init+0x98>)
 80018c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_ETH_Init+0x90>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <MX_ETH_Init+0x9c>)
 80018cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_ETH_Init+0x90>)
 80018d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <MX_ETH_Init+0x90>)
 80018d8:	f005 fdd4 	bl	8007484 <HAL_ETH_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80018e2:	f000 fe77 	bl	80025d4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80018e6:	2234      	movs	r2, #52	; 0x34
 80018e8:	2100      	movs	r1, #0
 80018ea:	480b      	ldr	r0, [pc, #44]	; (8001918 <MX_ETH_Init+0xa0>)
 80018ec:	f00d fca2 	bl	800f234 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_ETH_Init+0xa0>)
 80018f2:	2221      	movs	r2, #33	; 0x21
 80018f4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_ETH_Init+0xa0>)
 80018f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018fc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_ETH_Init+0xa0>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	24000df8 	.word	0x24000df8
 800190c:	40028000 	.word	0x40028000
 8001910:	24000070 	.word	0x24000070
 8001914:	24000010 	.word	0x24000010
 8001918:	24000e80 	.word	0x24000e80

0800191c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001922:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <MX_SPI3_Init+0xa8>)
 8001924:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001926:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001928:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800192c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001936:	2203      	movs	r2, #3
 8001938:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <MX_SPI3_Init+0xa4>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001948:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800194c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001950:	2200      	movs	r2, #0
 8001952:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001956:	2200      	movs	r2, #0
 8001958:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_SPI3_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001962:	2200      	movs	r2, #0
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001968:	2200      	movs	r2, #0
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_SPI3_Init+0xa4>)
 800196e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001972:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001976:	2200      	movs	r2, #0
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_SPI3_Init+0xa4>)
 800197c:	2200      	movs	r2, #0
 800197e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_SPI3_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <MX_SPI3_Init+0xa4>)
 8001994:	2200      	movs	r2, #0
 8001996:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_SPI3_Init+0xa4>)
 800199a:	2200      	movs	r2, #0
 800199c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <MX_SPI3_Init+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_SPI3_Init+0xa4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_SPI3_Init+0xa4>)
 80019ac:	f009 fe18 	bl	800b5e0 <HAL_SPI_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80019b6:	f000 fe0d 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	24000acc 	.word	0x24000acc
 80019c4:	40003c00 	.word	0x40003c00

080019c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	; 0x30
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	2224      	movs	r2, #36	; 0x24
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f00d fc2c 	bl	800f234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	463b      	mov	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <MX_TIM1_Init+0xac>)
 80019e8:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <MX_TIM1_Init+0xb0>)
 80019ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <MX_TIM1_Init+0xac>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <MX_TIM1_Init+0xac>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <MX_TIM1_Init+0xac>)
 80019fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <MX_TIM1_Init+0xac>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_TIM1_Init+0xac>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <MX_TIM1_Init+0xac>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a12:	2303      	movs	r3, #3
 8001a14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <MX_TIM1_Init+0xac>)
 8001a3e:	f00a f9b3 	bl	800bda8 <HAL_TIM_Encoder_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001a48:	f000 fdc4 	bl	80025d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_TIM1_Init+0xac>)
 8001a5e:	f00b fa4f 	bl	800cf00 <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a68:	f000 fdb4 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	3730      	adds	r7, #48	; 0x30
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	24000c98 	.word	0x24000c98
 8001a78:	40010000 	.word	0x40010000

08001a7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	2224      	movs	r2, #36	; 0x24
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00d fbd2 	bl	800f234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	463b      	mov	r3, r7
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <MX_TIM2_Init+0xa4>)
 8001a9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <MX_TIM2_Init+0xa4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <MX_TIM2_Init+0xa4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <MX_TIM2_Init+0xa4>)
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_TIM2_Init+0xa4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <MX_TIM2_Init+0xa4>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aca:	2301      	movs	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ada:	2301      	movs	r3, #1
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4619      	mov	r1, r3
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <MX_TIM2_Init+0xa4>)
 8001aee:	f00a f95b 	bl	800bda8 <HAL_TIM_Encoder_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001af8:	f000 fd6c 	bl	80025d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_TIM2_Init+0xa4>)
 8001b0a:	f00b f9f9 	bl	800cf00 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001b14:	f000 fd5e 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	3730      	adds	r7, #48	; 0x30
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	24000ce8 	.word	0x24000ce8

08001b24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08c      	sub	sp, #48	; 0x30
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	2224      	movs	r2, #36	; 0x24
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f00d fb7e 	bl	800f234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <MX_TIM3_Init+0xa4>)
 8001b44:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <MX_TIM3_Init+0xa8>)
 8001b46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b48:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <MX_TIM3_Init+0xa4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <MX_TIM3_Init+0xa4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <MX_TIM3_Init+0xa4>)
 8001b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MX_TIM3_Init+0xa4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <MX_TIM3_Init+0xa4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b70:	2301      	movs	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b80:	2301      	movs	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4619      	mov	r1, r3
 8001b92:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <MX_TIM3_Init+0xa4>)
 8001b94:	f00a f908 	bl	800bda8 <HAL_TIM_Encoder_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001b9e:	f000 fd19 	bl	80025d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001baa:	463b      	mov	r3, r7
 8001bac:	4619      	mov	r1, r3
 8001bae:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <MX_TIM3_Init+0xa4>)
 8001bb0:	f00b f9a6 	bl	800cf00 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001bba:	f000 fd0b 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	3730      	adds	r7, #48	; 0x30
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	24000a80 	.word	0x24000a80
 8001bcc:	40000400 	.word	0x40000400

08001bd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2224      	movs	r2, #36	; 0x24
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f00d fb28 	bl	800f234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be4:	463b      	mov	r3, r7
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bee:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <MX_TIM4_Init+0xa4>)
 8001bf0:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <MX_TIM4_Init+0xa8>)
 8001bf2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <MX_TIM4_Init+0xa4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <MX_TIM4_Init+0xa4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <MX_TIM4_Init+0xa4>)
 8001c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MX_TIM4_Init+0xa4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_TIM4_Init+0xa4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c14:	2303      	movs	r3, #3
 8001c16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <MX_TIM4_Init+0xa4>)
 8001c40:	f00a f8b2 	bl	800bda8 <HAL_TIM_Encoder_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001c4a:	f000 fcc3 	bl	80025d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c56:	463b      	mov	r3, r7
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <MX_TIM4_Init+0xa4>)
 8001c5c:	f00b f950 	bl	800cf00 <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001c66:	f000 fcb5 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3730      	adds	r7, #48	; 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2400051c 	.word	0x2400051c
 8001c78:	40000800 	.word	0x40000800

08001c7c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0310 	add.w	r3, r7, #16
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <MX_TIM5_Init+0x94>)
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <MX_TIM5_Init+0x98>)
 8001c9e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <MX_TIM5_Init+0x94>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_TIM5_Init+0x94>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_TIM5_Init+0x94>)
 8001cae:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001cb2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_TIM5_Init+0x94>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_TIM5_Init+0x94>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001cc0:	4813      	ldr	r0, [pc, #76]	; (8001d10 <MX_TIM5_Init+0x94>)
 8001cc2:	f009 fdaa 	bl	800b81a <HAL_TIM_Base_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001ccc:	f000 fc82 	bl	80025d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <MX_TIM5_Init+0x94>)
 8001cde:	f00a fbc7 	bl	800c470 <HAL_TIM_ConfigClockSource>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001ce8:	f000 fc74 	bl	80025d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_TIM5_Init+0x94>)
 8001cfa:	f00b f901 	bl	800cf00 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001d04:	f000 fc66 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	24000a34 	.word	0x24000a34
 8001d14:	40000c00 	.word	0x40000c00

08001d18 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	; 0x30
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d3e:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <MX_TIM12_Init+0xc0>)
 8001d40:	4a26      	ldr	r2, [pc, #152]	; (8001ddc <MX_TIM12_Init+0xc4>)
 8001d42:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <MX_TIM12_Init+0xc0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <MX_TIM12_Init+0xc0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <MX_TIM12_Init+0xc0>)
 8001d52:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001d56:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <MX_TIM12_Init+0xc0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <MX_TIM12_Init+0xc0>)
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001d64:	481c      	ldr	r0, [pc, #112]	; (8001dd8 <MX_TIM12_Init+0xc0>)
 8001d66:	f009 fd58 	bl	800b81a <HAL_TIM_Base_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001d70:	f000 fc30 	bl	80025d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d78:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001d7a:	f107 0320 	add.w	r3, r7, #32
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4815      	ldr	r0, [pc, #84]	; (8001dd8 <MX_TIM12_Init+0xc0>)
 8001d82:	f00a fb75 	bl	800c470 <HAL_TIM_ConfigClockSource>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001d8c:	f000 fc22 	bl	80025d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001d90:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <MX_TIM12_Init+0xc0>)
 8001d92:	f009 fe09 	bl	800b9a8 <HAL_TIM_PWM_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001d9c:	f000 fc1a 	bl	80025d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da0:	2360      	movs	r3, #96	; 0x60
 8001da2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8001da4:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001da8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2204      	movs	r2, #4
 8001db6:	4619      	mov	r1, r3
 8001db8:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <MX_TIM12_Init+0xc0>)
 8001dba:	f00a fa49 	bl	800c250 <HAL_TIM_PWM_ConfigChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8001dc4:	f000 fc06 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001dc8:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <MX_TIM12_Init+0xc0>)
 8001dca:	f000 fff1 	bl	8002db0 <HAL_TIM_MspPostInit>

}
 8001dce:	bf00      	nop
 8001dd0:	3730      	adds	r7, #48	; 0x30
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	24000dac 	.word	0x24000dac
 8001ddc:	40001800 	.word	0x40001800

08001de0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
 8001df4:	615a      	str	r2, [r3, #20]
 8001df6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <MX_TIM13_Init+0x94>)
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <MX_TIM13_Init+0x98>)
 8001dfc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <MX_TIM13_Init+0x94>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <MX_TIM13_Init+0x94>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <MX_TIM13_Init+0x94>)
 8001e0c:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001e10:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <MX_TIM13_Init+0x94>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <MX_TIM13_Init+0x94>)
 8001e1a:	2280      	movs	r2, #128	; 0x80
 8001e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e1e:	4815      	ldr	r0, [pc, #84]	; (8001e74 <MX_TIM13_Init+0x94>)
 8001e20:	f009 fcfb 	bl	800b81a <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001e2a:	f000 fbd3 	bl	80025d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001e2e:	4811      	ldr	r0, [pc, #68]	; (8001e74 <MX_TIM13_Init+0x94>)
 8001e30:	f009 fdba 	bl	800b9a8 <HAL_TIM_PWM_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001e3a:	f000 fbcb 	bl	80025d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3e:	2360      	movs	r3, #96	; 0x60
 8001e40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8001e42:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	4619      	mov	r1, r3
 8001e56:	4807      	ldr	r0, [pc, #28]	; (8001e74 <MX_TIM13_Init+0x94>)
 8001e58:	f00a f9fa 	bl	800c250 <HAL_TIM_PWM_ConfigChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8001e62:	f000 fbb7 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001e66:	4803      	ldr	r0, [pc, #12]	; (8001e74 <MX_TIM13_Init+0x94>)
 8001e68:	f000 ffa2 	bl	8002db0 <HAL_TIM_MspPostInit>

}
 8001e6c:	bf00      	nop
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	24000c48 	.word	0x24000c48
 8001e78:	40001c00 	.word	0x40001c00

08001e7c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b092      	sub	sp, #72	; 0x48
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]
 8001e92:	615a      	str	r2, [r3, #20]
 8001e94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e96:	463b      	mov	r3, r7
 8001e98:	222c      	movs	r2, #44	; 0x2c
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f00d f9c9 	bl	800f234 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ea2:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <MX_TIM16_Init+0xec>)
 8001ea4:	4a31      	ldr	r2, [pc, #196]	; (8001f6c <MX_TIM16_Init+0xf0>)
 8001ea6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <MX_TIM16_Init+0xec>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <MX_TIM16_Init+0xec>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <MX_TIM16_Init+0xec>)
 8001eb6:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001eba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <MX_TIM16_Init+0xec>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ec2:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <MX_TIM16_Init+0xec>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <MX_TIM16_Init+0xec>)
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ece:	4826      	ldr	r0, [pc, #152]	; (8001f68 <MX_TIM16_Init+0xec>)
 8001ed0:	f009 fca3 	bl	800b81a <HAL_TIM_Base_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001eda:	f000 fb7b 	bl	80025d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001ede:	4822      	ldr	r0, [pc, #136]	; (8001f68 <MX_TIM16_Init+0xec>)
 8001ee0:	f009 fd62 	bl	800b9a8 <HAL_TIM_PWM_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001eea:	f000 fb73 	bl	80025d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eee:	2360      	movs	r3, #96	; 0x60
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8001ef2:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f10:	2200      	movs	r2, #0
 8001f12:	4619      	mov	r1, r3
 8001f14:	4814      	ldr	r0, [pc, #80]	; (8001f68 <MX_TIM16_Init+0xec>)
 8001f16:	f00a f99b 	bl	800c250 <HAL_TIM_PWM_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001f20:	f000 fb58 	bl	80025d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001f46:	463b      	mov	r3, r7
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4807      	ldr	r0, [pc, #28]	; (8001f68 <MX_TIM16_Init+0xec>)
 8001f4c:	f00b f860 	bl	800d010 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8001f56:	f000 fb3d 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001f5a:	4803      	ldr	r0, [pc, #12]	; (8001f68 <MX_TIM16_Init+0xec>)
 8001f5c:	f000 ff28 	bl	8002db0 <HAL_TIM_MspPostInit>

}
 8001f60:	bf00      	nop
 8001f62:	3748      	adds	r7, #72	; 0x48
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	24000eb4 	.word	0x24000eb4
 8001f6c:	40014400 	.word	0x40014400

08001f70 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b092      	sub	sp, #72	; 0x48
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]
 8001f86:	615a      	str	r2, [r3, #20]
 8001f88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	222c      	movs	r2, #44	; 0x2c
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f00d f94f 	bl	800f234 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <MX_TIM17_Init+0xec>)
 8001f98:	4a31      	ldr	r2, [pc, #196]	; (8002060 <MX_TIM17_Init+0xf0>)
 8001f9a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	; (800205c <MX_TIM17_Init+0xec>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <MX_TIM17_Init+0xec>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <MX_TIM17_Init+0xec>)
 8001faa:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001fae:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	; (800205c <MX_TIM17_Init+0xec>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001fb6:	4b29      	ldr	r3, [pc, #164]	; (800205c <MX_TIM17_Init+0xec>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <MX_TIM17_Init+0xec>)
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001fc2:	4826      	ldr	r0, [pc, #152]	; (800205c <MX_TIM17_Init+0xec>)
 8001fc4:	f009 fc29 	bl	800b81a <HAL_TIM_Base_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001fce:	f000 fb01 	bl	80025d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001fd2:	4822      	ldr	r0, [pc, #136]	; (800205c <MX_TIM17_Init+0xec>)
 8001fd4:	f009 fce8 	bl	800b9a8 <HAL_TIM_PWM_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001fde:	f000 faf9 	bl	80025d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe2:	2360      	movs	r3, #96	; 0x60
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8001fe6:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fec:	2300      	movs	r3, #0
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	4814      	ldr	r0, [pc, #80]	; (800205c <MX_TIM17_Init+0xec>)
 800200a:	f00a f921 	bl	800c250 <HAL_TIM_PWM_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002014:	f000 fade 	bl	80025d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800202c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002030:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800203a:	463b      	mov	r3, r7
 800203c:	4619      	mov	r1, r3
 800203e:	4807      	ldr	r0, [pc, #28]	; (800205c <MX_TIM17_Init+0xec>)
 8002040:	f00a ffe6 	bl	800d010 <HAL_TIMEx_ConfigBreakDeadTime>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 800204a:	f000 fac3 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800204e:	4803      	ldr	r0, [pc, #12]	; (800205c <MX_TIM17_Init+0xec>)
 8002050:	f000 feae 	bl	8002db0 <HAL_TIM_MspPostInit>

}
 8002054:	bf00      	nop
 8002056:	3748      	adds	r7, #72	; 0x48
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	24000970 	.word	0x24000970
 8002060:	40014800 	.word	0x40014800

08002064 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <MX_UART5_Init+0x90>)
 800206a:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <MX_UART5_Init+0x94>)
 800206c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <MX_UART5_Init+0x90>)
 8002070:	4a22      	ldr	r2, [pc, #136]	; (80020fc <MX_UART5_Init+0x98>)
 8002072:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <MX_UART5_Init+0x90>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <MX_UART5_Init+0x90>)
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <MX_UART5_Init+0x90>)
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <MX_UART5_Init+0x90>)
 8002088:	220c      	movs	r2, #12
 800208a:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <MX_UART5_Init+0x90>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <MX_UART5_Init+0x90>)
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <MX_UART5_Init+0x90>)
 800209a:	2200      	movs	r2, #0
 800209c:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <MX_UART5_Init+0x90>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <MX_UART5_Init+0x90>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80020aa:	4812      	ldr	r0, [pc, #72]	; (80020f4 <MX_UART5_Init+0x90>)
 80020ac:	f00b f84c 	bl	800d148 <HAL_UART_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_UART5_Init+0x56>
  {
    Error_Handler();
 80020b6:	f000 fa8d 	bl	80025d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ba:	2100      	movs	r1, #0
 80020bc:	480d      	ldr	r0, [pc, #52]	; (80020f4 <MX_UART5_Init+0x90>)
 80020be:	f00c fd0d 	bl	800eadc <HAL_UARTEx_SetTxFifoThreshold>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_UART5_Init+0x68>
  {
    Error_Handler();
 80020c8:	f000 fa84 	bl	80025d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020cc:	2100      	movs	r1, #0
 80020ce:	4809      	ldr	r0, [pc, #36]	; (80020f4 <MX_UART5_Init+0x90>)
 80020d0:	f00c fd42 	bl	800eb58 <HAL_UARTEx_SetRxFifoThreshold>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_UART5_Init+0x7a>
  {
    Error_Handler();
 80020da:	f000 fa7b 	bl	80025d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80020de:	4805      	ldr	r0, [pc, #20]	; (80020f4 <MX_UART5_Init+0x90>)
 80020e0:	f00c fcc3 	bl	800ea6a <HAL_UARTEx_DisableFifoMode>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_UART5_Init+0x8a>
  {
    Error_Handler();
 80020ea:	f000 fa73 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	24000b54 	.word	0x24000b54
 80020f8:	40005000 	.word	0x40005000
 80020fc:	000f4240 	.word	0x000f4240

08002100 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <MX_UART7_Init+0x90>)
 8002106:	4a23      	ldr	r2, [pc, #140]	; (8002194 <MX_UART7_Init+0x94>)
 8002108:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <MX_UART7_Init+0x90>)
 800210c:	4a22      	ldr	r2, [pc, #136]	; (8002198 <MX_UART7_Init+0x98>)
 800210e:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <MX_UART7_Init+0x90>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <MX_UART7_Init+0x90>)
 8002118:	2200      	movs	r2, #0
 800211a:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <MX_UART7_Init+0x90>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <MX_UART7_Init+0x90>)
 8002124:	220c      	movs	r2, #12
 8002126:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <MX_UART7_Init+0x90>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <MX_UART7_Init+0x90>)
 8002130:	2200      	movs	r2, #0
 8002132:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002134:	4b16      	ldr	r3, [pc, #88]	; (8002190 <MX_UART7_Init+0x90>)
 8002136:	2200      	movs	r2, #0
 8002138:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <MX_UART7_Init+0x90>)
 800213c:	2200      	movs	r2, #0
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <MX_UART7_Init+0x90>)
 8002142:	2200      	movs	r2, #0
 8002144:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002146:	4812      	ldr	r0, [pc, #72]	; (8002190 <MX_UART7_Init+0x90>)
 8002148:	f00a fffe 	bl	800d148 <HAL_UART_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8002152:	f000 fa3f 	bl	80025d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002156:	2100      	movs	r1, #0
 8002158:	480d      	ldr	r0, [pc, #52]	; (8002190 <MX_UART7_Init+0x90>)
 800215a:	f00c fcbf 	bl	800eadc <HAL_UARTEx_SetTxFifoThreshold>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8002164:	f000 fa36 	bl	80025d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002168:	2100      	movs	r1, #0
 800216a:	4809      	ldr	r0, [pc, #36]	; (8002190 <MX_UART7_Init+0x90>)
 800216c:	f00c fcf4 	bl	800eb58 <HAL_UARTEx_SetRxFifoThreshold>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8002176:	f000 fa2d 	bl	80025d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_UART7_Init+0x90>)
 800217c:	f00c fc75 	bl	800ea6a <HAL_UARTEx_DisableFifoMode>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8002186:	f000 fa25 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2400048c 	.word	0x2400048c
 8002194:	40007800 	.word	0x40007800
 8002198:	000f4240 	.word	0x000f4240

0800219c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021a2:	4a16      	ldr	r2, [pc, #88]	; (80021fc <MX_USB_OTG_FS_PCD_Init+0x60>)
 80021a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021a8:	2209      	movs	r2, #9
 80021aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021ae:	2202      	movs	r2, #2
 80021b0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021ba:	2202      	movs	r2, #2
 80021bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021d8:	2201      	movs	r2, #1
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021e4:	f005 ff47 	bl	8008076 <HAL_PCD_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80021ee:	f000 f9f1 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	24000568 	.word	0x24000568
 80021fc:	40080000 	.word	0x40080000

08002200 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <MX_BDMA_Init+0x3c>)
 8002208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220c:	4a0b      	ldr	r2, [pc, #44]	; (800223c <MX_BDMA_Init+0x3c>)
 800220e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_BDMA_Init+0x3c>)
 8002218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	2081      	movs	r0, #129	; 0x81
 800222a:	f002 fabc 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 800222e:	2081      	movs	r0, #129	; 0x81
 8002230:	f002 fad3 	bl	80047da <HAL_NVIC_EnableIRQ>

}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	58024400 	.word	0x58024400

08002240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <MX_DMA_Init+0x4c>)
 8002248:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800224c:	4a0f      	ldr	r2, [pc, #60]	; (800228c <MX_DMA_Init+0x4c>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002256:	4b0d      	ldr	r3, [pc, #52]	; (800228c <MX_DMA_Init+0x4c>)
 8002258:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	200b      	movs	r0, #11
 800226a:	f002 fa9c 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800226e:	200b      	movs	r0, #11
 8002270:	f002 fab3 	bl	80047da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	200c      	movs	r0, #12
 800227a:	f002 fa94 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800227e:	200c      	movs	r0, #12
 8002280:	f002 faab 	bl	80047da <HAL_NVIC_EnableIRQ>

}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	58024400 	.word	0x58024400

08002290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08e      	sub	sp, #56	; 0x38
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	4b9b      	ldr	r3, [pc, #620]	; (8002514 <MX_GPIO_Init+0x284>)
 80022a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ac:	4a99      	ldr	r2, [pc, #612]	; (8002514 <MX_GPIO_Init+0x284>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b6:	4b97      	ldr	r3, [pc, #604]	; (8002514 <MX_GPIO_Init+0x284>)
 80022b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022c4:	4b93      	ldr	r3, [pc, #588]	; (8002514 <MX_GPIO_Init+0x284>)
 80022c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ca:	4a92      	ldr	r2, [pc, #584]	; (8002514 <MX_GPIO_Init+0x284>)
 80022cc:	f043 0320 	orr.w	r3, r3, #32
 80022d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d4:	4b8f      	ldr	r3, [pc, #572]	; (8002514 <MX_GPIO_Init+0x284>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022e2:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <MX_GPIO_Init+0x284>)
 80022e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e8:	4a8a      	ldr	r2, [pc, #552]	; (8002514 <MX_GPIO_Init+0x284>)
 80022ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f2:	4b88      	ldr	r3, [pc, #544]	; (8002514 <MX_GPIO_Init+0x284>)
 80022f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002300:	4b84      	ldr	r3, [pc, #528]	; (8002514 <MX_GPIO_Init+0x284>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002306:	4a83      	ldr	r2, [pc, #524]	; (8002514 <MX_GPIO_Init+0x284>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002310:	4b80      	ldr	r3, [pc, #512]	; (8002514 <MX_GPIO_Init+0x284>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	4b7d      	ldr	r3, [pc, #500]	; (8002514 <MX_GPIO_Init+0x284>)
 8002320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002324:	4a7b      	ldr	r2, [pc, #492]	; (8002514 <MX_GPIO_Init+0x284>)
 8002326:	f043 0302 	orr.w	r3, r3, #2
 800232a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800232e:	4b79      	ldr	r3, [pc, #484]	; (8002514 <MX_GPIO_Init+0x284>)
 8002330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800233c:	4b75      	ldr	r3, [pc, #468]	; (8002514 <MX_GPIO_Init+0x284>)
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002342:	4a74      	ldr	r2, [pc, #464]	; (8002514 <MX_GPIO_Init+0x284>)
 8002344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002348:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800234c:	4b71      	ldr	r3, [pc, #452]	; (8002514 <MX_GPIO_Init+0x284>)
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800235a:	4b6e      	ldr	r3, [pc, #440]	; (8002514 <MX_GPIO_Init+0x284>)
 800235c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002360:	4a6c      	ldr	r2, [pc, #432]	; (8002514 <MX_GPIO_Init+0x284>)
 8002362:	f043 0310 	orr.w	r3, r3, #16
 8002366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800236a:	4b6a      	ldr	r3, [pc, #424]	; (8002514 <MX_GPIO_Init+0x284>)
 800236c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <MX_GPIO_Init+0x284>)
 800237a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800237e:	4a65      	ldr	r2, [pc, #404]	; (8002514 <MX_GPIO_Init+0x284>)
 8002380:	f043 0308 	orr.w	r3, r3, #8
 8002384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002388:	4b62      	ldr	r3, [pc, #392]	; (8002514 <MX_GPIO_Init+0x284>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 8002396:	2200      	movs	r2, #0
 8002398:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800239c:	485e      	ldr	r0, [pc, #376]	; (8002518 <MX_GPIO_Init+0x288>)
 800239e:	f005 fe37 	bl	8008010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin, GPIO_PIN_RESET);
 80023a2:	2200      	movs	r2, #0
 80023a4:	f644 4101 	movw	r1, #19457	; 0x4c01
 80023a8:	485c      	ldr	r0, [pc, #368]	; (800251c <MX_GPIO_Init+0x28c>)
 80023aa:	f005 fe31 	bl	8008010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80023ae:	2200      	movs	r2, #0
 80023b0:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80023b4:	485a      	ldr	r0, [pc, #360]	; (8002520 <MX_GPIO_Init+0x290>)
 80023b6:	f005 fe2b 	bl	8008010 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 7181 	mov.w	r1, #258	; 0x102
 80023c0:	4858      	ldr	r0, [pc, #352]	; (8002524 <MX_GPIO_Init+0x294>)
 80023c2:	f005 fe25 	bl	8008010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80023c6:	2200      	movs	r2, #0
 80023c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023cc:	4856      	ldr	r0, [pc, #344]	; (8002528 <MX_GPIO_Init+0x298>)
 80023ce:	f005 fe1f 	bl	8008010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e4:	4619      	mov	r1, r3
 80023e6:	4851      	ldr	r0, [pc, #324]	; (800252c <MX_GPIO_Init+0x29c>)
 80023e8:	f005 fc62 	bl	8007cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin PF9 DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin;
 80023ec:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002402:	4619      	mov	r1, r3
 8002404:	4844      	ldr	r0, [pc, #272]	; (8002518 <MX_GPIO_Init+0x288>)
 8002406:	f005 fc53 	bl	8007cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin OE_ENCODER_Pin OE_STEPPER_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin;
 800240a:	f644 4301 	movw	r3, #19457	; 0x4c01
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002420:	4619      	mov	r1, r3
 8002422:	483e      	ldr	r0, [pc, #248]	; (800251c <MX_GPIO_Init+0x28c>)
 8002424:	f005 fc44 	bl	8007cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002428:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800243a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243e:	4619      	mov	r1, r3
 8002440:	4837      	ldr	r0, [pc, #220]	; (8002520 <MX_GPIO_Init+0x290>)
 8002442:	f005 fc35 	bl	8007cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|LD2_Pin;
 8002446:	f44f 7381 	mov.w	r3, #258	; 0x102
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244c:	2301      	movs	r3, #1
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245c:	4619      	mov	r1, r3
 800245e:	4831      	ldr	r0, [pc, #196]	; (8002524 <MX_GPIO_Init+0x294>)
 8002460:	f005 fc26 	bl	8007cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002464:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002476:	2307      	movs	r3, #7
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247e:	4619      	mov	r1, r3
 8002480:	4829      	ldr	r0, [pc, #164]	; (8002528 <MX_GPIO_Init+0x298>)
 8002482:	f005 fc15 	bl	8007cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248c:	2301      	movs	r3, #1
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249c:	4619      	mov	r1, r3
 800249e:	4822      	ldr	r0, [pc, #136]	; (8002528 <MX_GPIO_Init+0x298>)
 80024a0:	f005 fc06 	bl	8007cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024a4:	2304      	movs	r3, #4
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <MX_GPIO_Init+0x2a0>)
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b4:	4619      	mov	r1, r3
 80024b6:	481a      	ldr	r0, [pc, #104]	; (8002520 <MX_GPIO_Init+0x290>)
 80024b8:	f005 fbfa 	bl	8007cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024bc:	2308      	movs	r3, #8
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <MX_GPIO_Init+0x2a0>)
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024cc:	4619      	mov	r1, r3
 80024ce:	4816      	ldr	r0, [pc, #88]	; (8002528 <MX_GPIO_Init+0x298>)
 80024d0:	f005 fbee 	bl	8007cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin|PROXIMITY4_Pin;
 80024d4:	23f0      	movs	r3, #240	; 0xf0
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024d8:	4b16      	ldr	r3, [pc, #88]	; (8002534 <MX_GPIO_Init+0x2a4>)
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e4:	4619      	mov	r1, r3
 80024e6:	4810      	ldr	r0, [pc, #64]	; (8002528 <MX_GPIO_Init+0x298>)
 80024e8:	f005 fbe2 	bl	8007cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2100      	movs	r1, #0
 80024f0:	200a      	movs	r0, #10
 80024f2:	f002 f958 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80024f6:	200a      	movs	r0, #10
 80024f8:	f002 f96f 	bl	80047da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2100      	movs	r1, #0
 8002500:	2017      	movs	r0, #23
 8002502:	f002 f950 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002506:	2017      	movs	r0, #23
 8002508:	f002 f967 	bl	80047da <HAL_NVIC_EnableIRQ>

}
 800250c:	bf00      	nop
 800250e:	3738      	adds	r7, #56	; 0x38
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	58024400 	.word	0x58024400
 8002518:	58021400 	.word	0x58021400
 800251c:	58020400 	.word	0x58020400
 8002520:	58021800 	.word	0x58021800
 8002524:	58021000 	.word	0x58021000
 8002528:	58020c00 	.word	0x58020c00
 800252c:	58020800 	.word	0x58020800
 8002530:	11110000 	.word	0x11110000
 8002534:	11210000 	.word	0x11210000

08002538 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	if(huart==&huart5){
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a08      	ldr	r2, [pc, #32]	; (8002564 <HAL_UART_RxCpltCallback+0x2c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d102      	bne.n	800254e <HAL_UART_RxCpltCallback+0x16>
		data_in(1);
 8002548:	2001      	movs	r0, #1
 800254a:	f7fe fd8f 	bl	800106c <data_in>
	}
	if(huart==&huart7){
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a05      	ldr	r2, [pc, #20]	; (8002568 <HAL_UART_RxCpltCallback+0x30>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d102      	bne.n	800255c <HAL_UART_RxCpltCallback+0x24>
		data_in(2);
 8002556:	2002      	movs	r0, #2
 8002558:	f7fe fd88 	bl	800106c <data_in>
	}
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	24000b54 	.word	0x24000b54
 8002568:	2400048c 	.word	0x2400048c

0800256c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a06      	ldr	r2, [pc, #24]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d102      	bne.n	8002582 <HAL_TIM_PeriodElapsedCallback+0x16>
		state = 1;
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]
	}
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	24000a34 	.word	0x24000a34
 8002594:	24000380 	.word	0x24000380

08002598 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d103      	bne.n	80025b0 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	Stepper_updateHome(1, 1);
 80025a8:	2101      	movs	r1, #1
 80025aa:	2001      	movs	r0, #1
 80025ac:	f7fe fb94 	bl	8000cd8 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	d103      	bne.n	80025be <HAL_GPIO_EXTI_Callback+0x26>
    {
    	Stepper_updateHome(2, 1);
 80025b6:	2101      	movs	r1, #1
 80025b8:	2002      	movs	r0, #2
 80025ba:	f7fe fb8d 	bl	8000cd8 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_6) // If The INT Source Is EXTI Line9 (A9 Pin)
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d103      	bne.n	80025cc <HAL_GPIO_EXTI_Callback+0x34>
    {
    	Stepper_updateHome(3, 1);
 80025c4:	2101      	movs	r1, #1
 80025c6:	2003      	movs	r0, #3
 80025c8:	f7fe fb86 	bl	8000cd8 <Stepper_updateHome>
    }
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025d8:	b672      	cpsid	i
}
 80025da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025dc:	e7fe      	b.n	80025dc <Error_Handler+0x8>
	...

080025e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_MspInit+0x30>)
 80025e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025ec:	4a08      	ldr	r2, [pc, #32]	; (8002610 <HAL_MspInit+0x30>)
 80025ee:	f043 0302 	orr.w	r3, r3, #2
 80025f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_MspInit+0x30>)
 80025f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	58024400 	.word	0x58024400

08002614 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b0ba      	sub	sp, #232	; 0xe8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800262c:	f107 0318 	add.w	r3, r7, #24
 8002630:	22bc      	movs	r2, #188	; 0xbc
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f00c fdfd 	bl	800f234 <memset>
  if(hadc->Instance==ADC3)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a50      	ldr	r2, [pc, #320]	; (8002780 <HAL_ADC_MspInit+0x16c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	f040 8099 	bne.w	8002778 <HAL_ADC_MspInit+0x164>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002646:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800264a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 800264c:	2304      	movs	r3, #4
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8002650:	230a      	movs	r3, #10
 8002652:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002654:	2302      	movs	r3, #2
 8002656:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002658:	2302      	movs	r3, #2
 800265a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 800265c:	2304      	movs	r3, #4
 800265e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002660:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002664:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800266a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8002670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002678:	f107 0318 	add.w	r3, r7, #24
 800267c:	4618      	mov	r0, r3
 800267e:	f006 fe29 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8002688:	f7ff ffa4 	bl	80025d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800268c:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_ADC_MspInit+0x170>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002692:	4a3c      	ldr	r2, [pc, #240]	; (8002784 <HAL_ADC_MspInit+0x170>)
 8002694:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800269c:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_ADC_MspInit+0x170>)
 800269e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_ADC_MspInit+0x170>)
 80026ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b0:	4a34      	ldr	r2, [pc, #208]	; (8002784 <HAL_ADC_MspInit+0x170>)
 80026b2:	f043 0320 	orr.w	r3, r3, #32
 80026b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ba:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_ADC_MspInit+0x170>)
 80026bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c8:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <HAL_ADC_MspInit+0x170>)
 80026ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ce:	4a2d      	ldr	r2, [pc, #180]	; (8002784 <HAL_ADC_MspInit+0x170>)
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d8:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_ADC_MspInit+0x170>)
 80026da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ee:	2303      	movs	r3, #3
 80026f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026fe:	4619      	mov	r1, r3
 8002700:	4821      	ldr	r0, [pc, #132]	; (8002788 <HAL_ADC_MspInit+0x174>)
 8002702:	f005 fad5 	bl	8007cb0 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002706:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800270a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800270e:	f000 ffd3 	bl	80036b8 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002712:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002716:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800271a:	f000 ffcd 	bl	80036b8 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_ADC_MspInit+0x178>)
 8002720:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <HAL_ADC_MspInit+0x17c>)
 8002722:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_ADC_MspInit+0x178>)
 8002726:	2211      	movs	r2, #17
 8002728:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_ADC_MspInit+0x178>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_ADC_MspInit+0x178>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_ADC_MspInit+0x178>)
 8002738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800273c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_ADC_MspInit+0x178>)
 8002740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002744:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_ADC_MspInit+0x178>)
 8002748:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800274c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <HAL_ADC_MspInit+0x178>)
 8002750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002754:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_ADC_MspInit+0x178>)
 8002758:	2200      	movs	r2, #0
 800275a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800275c:	480b      	ldr	r0, [pc, #44]	; (800278c <HAL_ADC_MspInit+0x178>)
 800275e:	f002 f857 	bl	8004810 <HAL_DMA_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 8002768:	f7ff ff34 	bl	80025d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a07      	ldr	r2, [pc, #28]	; (800278c <HAL_ADC_MspInit+0x178>)
 8002770:	64da      	str	r2, [r3, #76]	; 0x4c
 8002772:	4a06      	ldr	r2, [pc, #24]	; (800278c <HAL_ADC_MspInit+0x178>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002778:	bf00      	nop
 800277a:	37e8      	adds	r7, #232	; 0xe8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	58026000 	.word	0x58026000
 8002784:	58024400 	.word	0x58024400
 8002788:	58021400 	.word	0x58021400
 800278c:	240009bc 	.word	0x240009bc
 8002790:	58025408 	.word	0x58025408

08002794 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08e      	sub	sp, #56	; 0x38
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a59      	ldr	r2, [pc, #356]	; (8002918 <HAL_ETH_MspInit+0x184>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	f040 80ab 	bne.w	800290e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80027b8:	4b58      	ldr	r3, [pc, #352]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027be:	4a57      	ldr	r2, [pc, #348]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027c8:	4b54      	ldr	r3, [pc, #336]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80027d6:	4b51      	ldr	r3, [pc, #324]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027dc:	4a4f      	ldr	r2, [pc, #316]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027e6:	4b4d      	ldr	r3, [pc, #308]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80027f4:	4b49      	ldr	r3, [pc, #292]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027fa:	4a48      	ldr	r2, [pc, #288]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002800:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002804:	4b45      	ldr	r3, [pc, #276]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002806:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002812:	4b42      	ldr	r3, [pc, #264]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002818:	4a40      	ldr	r2, [pc, #256]	; (800291c <HAL_ETH_MspInit+0x188>)
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002822:	4b3e      	ldr	r3, [pc, #248]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002830:	4b3a      	ldr	r3, [pc, #232]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002836:	4a39      	ldr	r2, [pc, #228]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002840:	4b36      	ldr	r3, [pc, #216]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b33      	ldr	r3, [pc, #204]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002854:	4a31      	ldr	r2, [pc, #196]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800285e:	4b2f      	ldr	r3, [pc, #188]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_ETH_MspInit+0x188>)
 800286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002872:	4a2a      	ldr	r2, [pc, #168]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_ETH_MspInit+0x188>)
 800287e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800288a:	2332      	movs	r3, #50	; 0x32
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800289a:	230b      	movs	r3, #11
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a2:	4619      	mov	r1, r3
 80028a4:	481e      	ldr	r0, [pc, #120]	; (8002920 <HAL_ETH_MspInit+0x18c>)
 80028a6:	f005 fa03 	bl	8007cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80028aa:	2386      	movs	r3, #134	; 0x86
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028ba:	230b      	movs	r3, #11
 80028bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c2:	4619      	mov	r1, r3
 80028c4:	4817      	ldr	r0, [pc, #92]	; (8002924 <HAL_ETH_MspInit+0x190>)
 80028c6:	f005 f9f3 	bl	8007cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028dc:	230b      	movs	r3, #11
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e4:	4619      	mov	r1, r3
 80028e6:	4810      	ldr	r0, [pc, #64]	; (8002928 <HAL_ETH_MspInit+0x194>)
 80028e8:	f005 f9e2 	bl	8007cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80028ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028fe:	230b      	movs	r3, #11
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002906:	4619      	mov	r1, r3
 8002908:	4808      	ldr	r0, [pc, #32]	; (800292c <HAL_ETH_MspInit+0x198>)
 800290a:	f005 f9d1 	bl	8007cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800290e:	bf00      	nop
 8002910:	3738      	adds	r7, #56	; 0x38
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40028000 	.word	0x40028000
 800291c:	58024400 	.word	0x58024400
 8002920:	58020800 	.word	0x58020800
 8002924:	58020000 	.word	0x58020000
 8002928:	58020400 	.word	0x58020400
 800292c:	58021800 	.word	0x58021800

08002930 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b0ba      	sub	sp, #232	; 0xe8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002948:	f107 0318 	add.w	r3, r7, #24
 800294c:	22bc      	movs	r2, #188	; 0xbc
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f00c fc6f 	bl	800f234 <memset>
  if(hspi->Instance==SPI3)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a37      	ldr	r2, [pc, #220]	; (8002a38 <HAL_SPI_MspInit+0x108>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d166      	bne.n	8002a2e <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002964:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002966:	2300      	movs	r3, #0
 8002968:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800296a:	f107 0318 	add.w	r3, r7, #24
 800296e:	4618      	mov	r0, r3
 8002970:	f006 fcb0 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800297a:	f7ff fe2b 	bl	80025d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800297e:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <HAL_SPI_MspInit+0x10c>)
 8002980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002984:	4a2d      	ldr	r2, [pc, #180]	; (8002a3c <HAL_SPI_MspInit+0x10c>)
 8002986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800298e:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <HAL_SPI_MspInit+0x10c>)
 8002990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299c:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <HAL_SPI_MspInit+0x10c>)
 800299e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a2:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <HAL_SPI_MspInit+0x10c>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ac:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <HAL_SPI_MspInit+0x10c>)
 80029ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ba:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <HAL_SPI_MspInit+0x10c>)
 80029bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c0:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <HAL_SPI_MspInit+0x10c>)
 80029c2:	f043 0304 	orr.w	r3, r3, #4
 80029c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <HAL_SPI_MspInit+0x10c>)
 80029cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029d8:	2310      	movs	r3, #16
 80029da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029f0:	2306      	movs	r3, #6
 80029f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4810      	ldr	r0, [pc, #64]	; (8002a40 <HAL_SPI_MspInit+0x110>)
 80029fe:	f005 f957 	bl	8007cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a02:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a1c:	2306      	movs	r3, #6
 8002a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a26:	4619      	mov	r1, r3
 8002a28:	4806      	ldr	r0, [pc, #24]	; (8002a44 <HAL_SPI_MspInit+0x114>)
 8002a2a:	f005 f941 	bl	8007cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a2e:	bf00      	nop
 8002a30:	37e8      	adds	r7, #232	; 0xe8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40003c00 	.word	0x40003c00
 8002a3c:	58024400 	.word	0x58024400
 8002a40:	58020000 	.word	0x58020000
 8002a44:	58020800 	.word	0x58020800

08002a48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b090      	sub	sp, #64	; 0x40
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a78      	ldr	r2, [pc, #480]	; (8002c48 <HAL_TIM_Encoder_MspInit+0x200>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d12f      	bne.n	8002aca <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a6a:	4b78      	ldr	r3, [pc, #480]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a70:	4a76      	ldr	r2, [pc, #472]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a7a:	4b74      	ldr	r3, [pc, #464]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a88:	4b70      	ldr	r3, [pc, #448]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8e:	4a6f      	ldr	r2, [pc, #444]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002a90:	f043 0310 	orr.w	r3, r3, #16
 8002a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a98:	4b6c      	ldr	r3, [pc, #432]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 8002aa6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4863      	ldr	r0, [pc, #396]	; (8002c50 <HAL_TIM_Encoder_MspInit+0x208>)
 8002ac4:	f005 f8f4 	bl	8007cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ac8:	e0ba      	b.n	8002c40 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad2:	d14d      	bne.n	8002b70 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ad4:	4b5d      	ldr	r3, [pc, #372]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002ad6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ada:	4a5c      	ldr	r2, [pc, #368]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ae4:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002ae6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	623b      	str	r3, [r7, #32]
 8002af0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af2:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af8:	4a54      	ldr	r2, [pc, #336]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b02:	4b52      	ldr	r3, [pc, #328]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	4b4e      	ldr	r3, [pc, #312]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b16:	4a4d      	ldr	r2, [pc, #308]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b20:	4b4a      	ldr	r3, [pc, #296]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 8002b2e:	2320      	movs	r3, #32
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	2302      	movs	r3, #2
 8002b34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 8002b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b46:	4619      	mov	r1, r3
 8002b48:	4842      	ldr	r0, [pc, #264]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002b4a:	f005 f8b1 	bl	8007cb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 8002b4e:	2308      	movs	r3, #8
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 8002b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b66:	4619      	mov	r1, r3
 8002b68:	483b      	ldr	r0, [pc, #236]	; (8002c58 <HAL_TIM_Encoder_MspInit+0x210>)
 8002b6a:	f005 f8a1 	bl	8007cb0 <HAL_GPIO_Init>
}
 8002b6e:	e067      	b.n	8002c40 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a39      	ldr	r2, [pc, #228]	; (8002c5c <HAL_TIM_Encoder_MspInit+0x214>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d12e      	bne.n	8002bd8 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b7a:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b80:	4a32      	ldr	r2, [pc, #200]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b82:	f043 0302 	orr.w	r3, r3, #2
 8002b86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b8a:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b98:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9e:	4a2b      	ldr	r2, [pc, #172]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ba8:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 8002bb6:	2330      	movs	r3, #48	; 0x30
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4821      	ldr	r0, [pc, #132]	; (8002c58 <HAL_TIM_Encoder_MspInit+0x210>)
 8002bd2:	f005 f86d 	bl	8007cb0 <HAL_GPIO_Init>
}
 8002bd6:	e033      	b.n	8002c40 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a20      	ldr	r2, [pc, #128]	; (8002c60 <HAL_TIM_Encoder_MspInit+0x218>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d12e      	bne.n	8002c40 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002be2:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002be8:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002bea:	f043 0304 	orr.w	r3, r3, #4
 8002bee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bf2:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002bf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c06:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002c08:	f043 0308 	orr.w	r3, r3, #8
 8002c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x204>)
 8002c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 8002c1e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c30:	2302      	movs	r3, #2
 8002c32:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c38:	4619      	mov	r1, r3
 8002c3a:	480a      	ldr	r0, [pc, #40]	; (8002c64 <HAL_TIM_Encoder_MspInit+0x21c>)
 8002c3c:	f005 f838 	bl	8007cb0 <HAL_GPIO_Init>
}
 8002c40:	bf00      	nop
 8002c42:	3740      	adds	r7, #64	; 0x40
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	58024400 	.word	0x58024400
 8002c50:	58021000 	.word	0x58021000
 8002c54:	58020000 	.word	0x58020000
 8002c58:	58020400 	.word	0x58020400
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800
 8002c64:	58020c00 	.word	0x58020c00

08002c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a48      	ldr	r2, [pc, #288]	; (8002d98 <HAL_TIM_Base_MspInit+0x130>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d117      	bne.n	8002caa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c7a:	4b48      	ldr	r3, [pc, #288]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c80:	4a46      	ldr	r2, [pc, #280]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002c82:	f043 0308 	orr.w	r3, r3, #8
 8002c86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c8a:	4b44      	ldr	r3, [pc, #272]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	2032      	movs	r0, #50	; 0x32
 8002c9e:	f001 fd82 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ca2:	2032      	movs	r0, #50	; 0x32
 8002ca4:	f001 fd99 	bl	80047da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002ca8:	e072      	b.n	8002d90 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a3c      	ldr	r2, [pc, #240]	; (8002da0 <HAL_TIM_Base_MspInit+0x138>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d117      	bne.n	8002ce4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002cb4:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cba:	4a38      	ldr	r2, [pc, #224]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cc4:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	202b      	movs	r0, #43	; 0x2b
 8002cd8:	f001 fd65 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002cdc:	202b      	movs	r0, #43	; 0x2b
 8002cde:	f001 fd7c 	bl	80047da <HAL_NVIC_EnableIRQ>
}
 8002ce2:	e055      	b.n	8002d90 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2e      	ldr	r2, [pc, #184]	; (8002da4 <HAL_TIM_Base_MspInit+0x13c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d117      	bne.n	8002d1e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002cee:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cf4:	4a29      	ldr	r2, [pc, #164]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cfe:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2100      	movs	r1, #0
 8002d10:	202c      	movs	r0, #44	; 0x2c
 8002d12:	f001 fd48 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002d16:	202c      	movs	r0, #44	; 0x2c
 8002d18:	f001 fd5f 	bl	80047da <HAL_NVIC_EnableIRQ>
}
 8002d1c:	e038      	b.n	8002d90 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a21      	ldr	r2, [pc, #132]	; (8002da8 <HAL_TIM_Base_MspInit+0x140>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d117      	bne.n	8002d58 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d28:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d2e:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2075      	movs	r0, #117	; 0x75
 8002d4c:	f001 fd2b 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002d50:	2075      	movs	r0, #117	; 0x75
 8002d52:	f001 fd42 	bl	80047da <HAL_NVIC_EnableIRQ>
}
 8002d56:	e01b      	b.n	8002d90 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a13      	ldr	r2, [pc, #76]	; (8002dac <HAL_TIM_Base_MspInit+0x144>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d116      	bne.n	8002d90 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d68:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002d6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_TIM_Base_MspInit+0x134>)
 8002d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2100      	movs	r1, #0
 8002d84:	2076      	movs	r0, #118	; 0x76
 8002d86:	f001 fd0e 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002d8a:	2076      	movs	r0, #118	; 0x76
 8002d8c:	f001 fd25 	bl	80047da <HAL_NVIC_EnableIRQ>
}
 8002d90:	bf00      	nop
 8002d92:	3720      	adds	r7, #32
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	58024400 	.word	0x58024400
 8002da0:	40001800 	.word	0x40001800
 8002da4:	40001c00 	.word	0x40001c00
 8002da8:	40014400 	.word	0x40014400
 8002dac:	40014800 	.word	0x40014800

08002db0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08c      	sub	sp, #48	; 0x30
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 031c 	add.w	r3, r7, #28
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a4b      	ldr	r2, [pc, #300]	; (8002efc <HAL_TIM_MspPostInit+0x14c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d120      	bne.n	8002e14 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd2:	4b4b      	ldr	r3, [pc, #300]	; (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd8:	4a49      	ldr	r2, [pc, #292]	; (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 8002df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002e02:	2302      	movs	r3, #2
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 8002e06:	f107 031c 	add.w	r3, r7, #28
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	483d      	ldr	r0, [pc, #244]	; (8002f04 <HAL_TIM_MspPostInit+0x154>)
 8002e0e:	f004 ff4f 	bl	8007cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002e12:	e06f      	b.n	8002ef4 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a3b      	ldr	r2, [pc, #236]	; (8002f08 <HAL_TIM_MspPostInit+0x158>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d11f      	bne.n	8002e5e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e24:	4a36      	ldr	r2, [pc, #216]	; (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 8002e3c:	2340      	movs	r3, #64	; 0x40
 8002e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002e4c:	2309      	movs	r3, #9
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 8002e50:	f107 031c 	add.w	r3, r7, #28
 8002e54:	4619      	mov	r1, r3
 8002e56:	482d      	ldr	r0, [pc, #180]	; (8002f0c <HAL_TIM_MspPostInit+0x15c>)
 8002e58:	f004 ff2a 	bl	8007cb0 <HAL_GPIO_Init>
}
 8002e5c:	e04a      	b.n	8002ef4 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2b      	ldr	r2, [pc, #172]	; (8002f10 <HAL_TIM_MspPostInit+0x160>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d120      	bne.n	8002eaa <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6e:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 8002e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e90:	2301      	movs	r3, #1
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 8002e9c:	f107 031c 	add.w	r3, r7, #28
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4818      	ldr	r0, [pc, #96]	; (8002f04 <HAL_TIM_MspPostInit+0x154>)
 8002ea4:	f004 ff04 	bl	8007cb0 <HAL_GPIO_Init>
}
 8002ea8:	e024      	b.n	8002ef4 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <HAL_TIM_MspPostInit+0x164>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d11f      	bne.n	8002ef4 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eba:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 8002ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002edc:	2302      	movs	r3, #2
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 8002ee8:	f107 031c 	add.w	r3, r7, #28
 8002eec:	4619      	mov	r1, r3
 8002eee:	4805      	ldr	r0, [pc, #20]	; (8002f04 <HAL_TIM_MspPostInit+0x154>)
 8002ef0:	f004 fede 	bl	8007cb0 <HAL_GPIO_Init>
}
 8002ef4:	bf00      	nop
 8002ef6:	3730      	adds	r7, #48	; 0x30
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40001800 	.word	0x40001800
 8002f00:	58024400 	.word	0x58024400
 8002f04:	58020400 	.word	0x58020400
 8002f08:	40001c00 	.word	0x40001c00
 8002f0c:	58020000 	.word	0x58020000
 8002f10:	40014400 	.word	0x40014400
 8002f14:	40014800 	.word	0x40014800

08002f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b0ba      	sub	sp, #232	; 0xe8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f30:	f107 0318 	add.w	r3, r7, #24
 8002f34:	22bc      	movs	r2, #188	; 0xbc
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f00c f97b 	bl	800f234 <memset>
  if(huart->Instance==UART5)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7f      	ldr	r2, [pc, #508]	; (8003140 <HAL_UART_MspInit+0x228>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	f040 80a8 	bne.w	800309a <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f54:	f107 0318 	add.w	r3, r7, #24
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f006 f9bb 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002f64:	f7ff fb36 	bl	80025d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f68:	4b76      	ldr	r3, [pc, #472]	; (8003144 <HAL_UART_MspInit+0x22c>)
 8002f6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f6e:	4a75      	ldr	r2, [pc, #468]	; (8003144 <HAL_UART_MspInit+0x22c>)
 8002f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f78:	4b72      	ldr	r3, [pc, #456]	; (8003144 <HAL_UART_MspInit+0x22c>)
 8002f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f86:	4b6f      	ldr	r3, [pc, #444]	; (8003144 <HAL_UART_MspInit+0x22c>)
 8002f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8c:	4a6d      	ldr	r2, [pc, #436]	; (8003144 <HAL_UART_MspInit+0x22c>)
 8002f8e:	f043 0302 	orr.w	r3, r3, #2
 8002f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f96:	4b6b      	ldr	r3, [pc, #428]	; (8003144 <HAL_UART_MspInit+0x22c>)
 8002f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8002fa4:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002fa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002fbe:	230e      	movs	r3, #14
 8002fc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	485f      	ldr	r0, [pc, #380]	; (8003148 <HAL_UART_MspInit+0x230>)
 8002fcc:	f004 fe70 	bl	8007cb0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream1;
 8002fd0:	4b5e      	ldr	r3, [pc, #376]	; (800314c <HAL_UART_MspInit+0x234>)
 8002fd2:	4a5f      	ldr	r2, [pc, #380]	; (8003150 <HAL_UART_MspInit+0x238>)
 8002fd4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8002fd6:	4b5d      	ldr	r3, [pc, #372]	; (800314c <HAL_UART_MspInit+0x234>)
 8002fd8:	2241      	movs	r2, #65	; 0x41
 8002fda:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fdc:	4b5b      	ldr	r3, [pc, #364]	; (800314c <HAL_UART_MspInit+0x234>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe2:	4b5a      	ldr	r3, [pc, #360]	; (800314c <HAL_UART_MspInit+0x234>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe8:	4b58      	ldr	r3, [pc, #352]	; (800314c <HAL_UART_MspInit+0x234>)
 8002fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fee:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ff0:	4b56      	ldr	r3, [pc, #344]	; (800314c <HAL_UART_MspInit+0x234>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff6:	4b55      	ldr	r3, [pc, #340]	; (800314c <HAL_UART_MspInit+0x234>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002ffc:	4b53      	ldr	r3, [pc, #332]	; (800314c <HAL_UART_MspInit+0x234>)
 8002ffe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003002:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003004:	4b51      	ldr	r3, [pc, #324]	; (800314c <HAL_UART_MspInit+0x234>)
 8003006:	2200      	movs	r2, #0
 8003008:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800300a:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_UART_MspInit+0x234>)
 800300c:	2200      	movs	r2, #0
 800300e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003010:	484e      	ldr	r0, [pc, #312]	; (800314c <HAL_UART_MspInit+0x234>)
 8003012:	f001 fbfd 	bl	8004810 <HAL_DMA_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800301c:	f7ff fada 	bl	80025d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a4a      	ldr	r2, [pc, #296]	; (800314c <HAL_UART_MspInit+0x234>)
 8003024:	67da      	str	r2, [r3, #124]	; 0x7c
 8003026:	4a49      	ldr	r2, [pc, #292]	; (800314c <HAL_UART_MspInit+0x234>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream0;
 800302c:	4b49      	ldr	r3, [pc, #292]	; (8003154 <HAL_UART_MspInit+0x23c>)
 800302e:	4a4a      	ldr	r2, [pc, #296]	; (8003158 <HAL_UART_MspInit+0x240>)
 8003030:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8003032:	4b48      	ldr	r3, [pc, #288]	; (8003154 <HAL_UART_MspInit+0x23c>)
 8003034:	2242      	movs	r2, #66	; 0x42
 8003036:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003038:	4b46      	ldr	r3, [pc, #280]	; (8003154 <HAL_UART_MspInit+0x23c>)
 800303a:	2240      	movs	r2, #64	; 0x40
 800303c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800303e:	4b45      	ldr	r3, [pc, #276]	; (8003154 <HAL_UART_MspInit+0x23c>)
 8003040:	2200      	movs	r2, #0
 8003042:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003044:	4b43      	ldr	r3, [pc, #268]	; (8003154 <HAL_UART_MspInit+0x23c>)
 8003046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800304a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800304c:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_UART_MspInit+0x23c>)
 800304e:	2200      	movs	r2, #0
 8003050:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003052:	4b40      	ldr	r3, [pc, #256]	; (8003154 <HAL_UART_MspInit+0x23c>)
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8003058:	4b3e      	ldr	r3, [pc, #248]	; (8003154 <HAL_UART_MspInit+0x23c>)
 800305a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800305e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003060:	4b3c      	ldr	r3, [pc, #240]	; (8003154 <HAL_UART_MspInit+0x23c>)
 8003062:	2200      	movs	r2, #0
 8003064:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003066:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_UART_MspInit+0x23c>)
 8003068:	2200      	movs	r2, #0
 800306a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800306c:	4839      	ldr	r0, [pc, #228]	; (8003154 <HAL_UART_MspInit+0x23c>)
 800306e:	f001 fbcf 	bl	8004810 <HAL_DMA_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8003078:	f7ff faac 	bl	80025d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a35      	ldr	r2, [pc, #212]	; (8003154 <HAL_UART_MspInit+0x23c>)
 8003080:	679a      	str	r2, [r3, #120]	; 0x78
 8003082:	4a34      	ldr	r2, [pc, #208]	; (8003154 <HAL_UART_MspInit+0x23c>)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003088:	2200      	movs	r2, #0
 800308a:	2100      	movs	r1, #0
 800308c:	2035      	movs	r0, #53	; 0x35
 800308e:	f001 fb8a 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003092:	2035      	movs	r0, #53	; 0x35
 8003094:	f001 fba1 	bl	80047da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003098:	e04e      	b.n	8003138 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==UART7)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2f      	ldr	r2, [pc, #188]	; (800315c <HAL_UART_MspInit+0x244>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d149      	bne.n	8003138 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80030a4:	2302      	movs	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ae:	f107 0318 	add.w	r3, r7, #24
 80030b2:	4618      	mov	r0, r3
 80030b4:	f006 f90e 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 80030be:	f7ff fa89 	bl	80025d4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_UART_MspInit+0x22c>)
 80030c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030c8:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <HAL_UART_MspInit+0x22c>)
 80030ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030d2:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <HAL_UART_MspInit+0x22c>)
 80030d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030e0:	4b18      	ldr	r3, [pc, #96]	; (8003144 <HAL_UART_MspInit+0x22c>)
 80030e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e6:	4a17      	ldr	r2, [pc, #92]	; (8003144 <HAL_UART_MspInit+0x22c>)
 80030e8:	f043 0320 	orr.w	r3, r3, #32
 80030ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f0:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_UART_MspInit+0x22c>)
 80030f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 80030fe:	23c0      	movs	r3, #192	; 0xc0
 8003100:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003104:	2302      	movs	r3, #2
 8003106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003116:	2307      	movs	r3, #7
 8003118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800311c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003120:	4619      	mov	r1, r3
 8003122:	480f      	ldr	r0, [pc, #60]	; (8003160 <HAL_UART_MspInit+0x248>)
 8003124:	f004 fdc4 	bl	8007cb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8003128:	2200      	movs	r2, #0
 800312a:	2100      	movs	r1, #0
 800312c:	2052      	movs	r0, #82	; 0x52
 800312e:	f001 fb3a 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003132:	2052      	movs	r0, #82	; 0x52
 8003134:	f001 fb51 	bl	80047da <HAL_NVIC_EnableIRQ>
}
 8003138:	bf00      	nop
 800313a:	37e8      	adds	r7, #232	; 0xe8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40005000 	.word	0x40005000
 8003144:	58024400 	.word	0x58024400
 8003148:	58020400 	.word	0x58020400
 800314c:	24000d34 	.word	0x24000d34
 8003150:	40020028 	.word	0x40020028
 8003154:	24000f00 	.word	0x24000f00
 8003158:	40020010 	.word	0x40020010
 800315c:	40007800 	.word	0x40007800
 8003160:	58021400 	.word	0x58021400

08003164 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b0b8      	sub	sp, #224	; 0xe0
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800317c:	f107 0310 	add.w	r3, r7, #16
 8003180:	22bc      	movs	r2, #188	; 0xbc
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f00c f855 	bl	800f234 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2f      	ldr	r2, [pc, #188]	; (800324c <HAL_PCD_MspInit+0xe8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d156      	bne.n	8003242 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003194:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003198:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800319a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800319e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031a2:	f107 0310 	add.w	r3, r7, #16
 80031a6:	4618      	mov	r0, r3
 80031a8:	f006 f894 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80031b2:	f7ff fa0f 	bl	80025d4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80031b6:	f005 f8e1 	bl	800837c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <HAL_PCD_MspInit+0xec>)
 80031bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c0:	4a23      	ldr	r2, [pc, #140]	; (8003250 <HAL_PCD_MspInit+0xec>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ca:	4b21      	ldr	r3, [pc, #132]	; (8003250 <HAL_PCD_MspInit+0xec>)
 80031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80031d8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80031dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e0:	2302      	movs	r3, #2
 80031e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80031f2:	230a      	movs	r3, #10
 80031f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031fc:	4619      	mov	r1, r3
 80031fe:	4815      	ldr	r0, [pc, #84]	; (8003254 <HAL_PCD_MspInit+0xf0>)
 8003200:	f004 fd56 	bl	8007cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003218:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800321c:	4619      	mov	r1, r3
 800321e:	480d      	ldr	r0, [pc, #52]	; (8003254 <HAL_PCD_MspInit+0xf0>)
 8003220:	f004 fd46 	bl	8007cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_PCD_MspInit+0xec>)
 8003226:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <HAL_PCD_MspInit+0xec>)
 800322c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003230:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_PCD_MspInit+0xec>)
 8003236:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800323a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003242:	bf00      	nop
 8003244:	37e0      	adds	r7, #224	; 0xe0
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40080000 	.word	0x40080000
 8003250:	58024400 	.word	0x58024400
 8003254:	58020000 	.word	0x58020000

08003258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800325c:	e7fe      	b.n	800325c <NMI_Handler+0x4>

0800325e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003262:	e7fe      	b.n	8003262 <HardFault_Handler+0x4>

08003264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003268:	e7fe      	b.n	8003268 <MemManage_Handler+0x4>

0800326a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800326e:	e7fe      	b.n	800326e <BusFault_Handler+0x4>

08003270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003274:	e7fe      	b.n	8003274 <UsageFault_Handler+0x4>

08003276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032a4:	f000 f9a4 	bl	80035f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}

080032ac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80032b0:	2010      	movs	r0, #16
 80032b2:	f004 fec6 	bl	8008042 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <DMA1_Stream0_IRQHandler+0x10>)
 80032c2:	f002 fdcd 	bl	8005e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	24000f00 	.word	0x24000f00

080032d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <DMA1_Stream1_IRQHandler+0x10>)
 80032d6:	f002 fdc3 	bl	8005e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	24000d34 	.word	0x24000d34

080032e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80032e8:	2020      	movs	r0, #32
 80032ea:	f004 feaa 	bl	8008042 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80032ee:	2040      	movs	r0, #64	; 0x40
 80032f0:	f004 fea7 	bl	8008042 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80032f4:	2080      	movs	r0, #128	; 0x80
 80032f6:	f004 fea4 	bl	8008042 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003304:	4802      	ldr	r0, [pc, #8]	; (8003310 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003306:	f008 fe83 	bl	800c010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	24000dac 	.word	0x24000dac

08003314 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003318:	4802      	ldr	r0, [pc, #8]	; (8003324 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800331a:	f008 fe79 	bl	800c010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	24000c48 	.word	0x24000c48

08003328 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800332c:	4802      	ldr	r0, [pc, #8]	; (8003338 <TIM5_IRQHandler+0x10>)
 800332e:	f008 fe6f 	bl	800c010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	24000a34 	.word	0x24000a34

0800333c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <UART5_IRQHandler+0x10>)
 8003342:	f00a f82d 	bl	800d3a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	24000b54 	.word	0x24000b54

08003350 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <UART7_IRQHandler+0x10>)
 8003356:	f00a f823 	bl	800d3a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	2400048c 	.word	0x2400048c

08003364 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <TIM16_IRQHandler+0x10>)
 800336a:	f008 fe51 	bl	800c010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	24000eb4 	.word	0x24000eb4

08003378 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <TIM17_IRQHandler+0x10>)
 800337e:	f008 fe47 	bl	800c010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	24000970 	.word	0x24000970

0800338c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <BDMA_Channel0_IRQHandler+0x10>)
 8003392:	f002 fd65 	bl	8005e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	240009bc 	.word	0x240009bc

080033a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033a4:	4b39      	ldr	r3, [pc, #228]	; (800348c <SystemInit+0xec>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	4a38      	ldr	r2, [pc, #224]	; (800348c <SystemInit+0xec>)
 80033ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033b4:	4b36      	ldr	r3, [pc, #216]	; (8003490 <SystemInit+0xf0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	2b06      	cmp	r3, #6
 80033be:	d807      	bhi.n	80033d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80033c0:	4b33      	ldr	r3, [pc, #204]	; (8003490 <SystemInit+0xf0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f023 030f 	bic.w	r3, r3, #15
 80033c8:	4a31      	ldr	r2, [pc, #196]	; (8003490 <SystemInit+0xf0>)
 80033ca:	f043 0307 	orr.w	r3, r3, #7
 80033ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80033d0:	4b30      	ldr	r3, [pc, #192]	; (8003494 <SystemInit+0xf4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <SystemInit+0xf4>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033dc:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <SystemInit+0xf4>)
 80033de:	2200      	movs	r2, #0
 80033e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80033e2:	4b2c      	ldr	r3, [pc, #176]	; (8003494 <SystemInit+0xf4>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	492b      	ldr	r1, [pc, #172]	; (8003494 <SystemInit+0xf4>)
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <SystemInit+0xf8>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033ee:	4b28      	ldr	r3, [pc, #160]	; (8003490 <SystemInit+0xf0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80033fa:	4b25      	ldr	r3, [pc, #148]	; (8003490 <SystemInit+0xf0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 030f 	bic.w	r3, r3, #15
 8003402:	4a23      	ldr	r2, [pc, #140]	; (8003490 <SystemInit+0xf0>)
 8003404:	f043 0307 	orr.w	r3, r3, #7
 8003408:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800340a:	4b22      	ldr	r3, [pc, #136]	; (8003494 <SystemInit+0xf4>)
 800340c:	2200      	movs	r2, #0
 800340e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003410:	4b20      	ldr	r3, [pc, #128]	; (8003494 <SystemInit+0xf4>)
 8003412:	2200      	movs	r2, #0
 8003414:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003416:	4b1f      	ldr	r3, [pc, #124]	; (8003494 <SystemInit+0xf4>)
 8003418:	2200      	movs	r2, #0
 800341a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <SystemInit+0xf4>)
 800341e:	4a1f      	ldr	r2, [pc, #124]	; (800349c <SystemInit+0xfc>)
 8003420:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003422:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <SystemInit+0xf4>)
 8003424:	4a1e      	ldr	r2, [pc, #120]	; (80034a0 <SystemInit+0x100>)
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003428:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <SystemInit+0xf4>)
 800342a:	4a1e      	ldr	r2, [pc, #120]	; (80034a4 <SystemInit+0x104>)
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800342e:	4b19      	ldr	r3, [pc, #100]	; (8003494 <SystemInit+0xf4>)
 8003430:	2200      	movs	r2, #0
 8003432:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003434:	4b17      	ldr	r3, [pc, #92]	; (8003494 <SystemInit+0xf4>)
 8003436:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <SystemInit+0x104>)
 8003438:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800343a:	4b16      	ldr	r3, [pc, #88]	; (8003494 <SystemInit+0xf4>)
 800343c:	2200      	movs	r2, #0
 800343e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <SystemInit+0xf4>)
 8003442:	4a18      	ldr	r2, [pc, #96]	; (80034a4 <SystemInit+0x104>)
 8003444:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003446:	4b13      	ldr	r3, [pc, #76]	; (8003494 <SystemInit+0xf4>)
 8003448:	2200      	movs	r2, #0
 800344a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <SystemInit+0xf4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a10      	ldr	r2, [pc, #64]	; (8003494 <SystemInit+0xf4>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <SystemInit+0xf4>)
 800345a:	2200      	movs	r2, #0
 800345c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <SystemInit+0x108>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <SystemInit+0x10c>)
 8003464:	4013      	ands	r3, r2
 8003466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800346a:	d202      	bcs.n	8003472 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800346c:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <SystemInit+0x110>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <SystemInit+0x114>)
 8003474:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003478:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800347a:	4b04      	ldr	r3, [pc, #16]	; (800348c <SystemInit+0xec>)
 800347c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003480:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	.word	0xe000ed00
 8003490:	52002000 	.word	0x52002000
 8003494:	58024400 	.word	0x58024400
 8003498:	eaf6ed7f 	.word	0xeaf6ed7f
 800349c:	02020200 	.word	0x02020200
 80034a0:	01ff0000 	.word	0x01ff0000
 80034a4:	01010280 	.word	0x01010280
 80034a8:	5c001000 	.word	0x5c001000
 80034ac:	ffff0000 	.word	0xffff0000
 80034b0:	51008108 	.word	0x51008108
 80034b4:	52004000 	.word	0x52004000

080034b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034f0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80034bc:	f7ff ff70 	bl	80033a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034c2:	e003      	b.n	80034cc <LoopCopyDataInit>

080034c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80034c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034ca:	3104      	adds	r1, #4

080034cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034cc:	480a      	ldr	r0, [pc, #40]	; (80034f8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80034d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034d4:	d3f6      	bcc.n	80034c4 <CopyDataInit>
  ldr  r2, =_sbss
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80034d8:	e002      	b.n	80034e0 <LoopFillZerobss>

080034da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034dc:	f842 3b04 	str.w	r3, [r2], #4

080034e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80034e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034e4:	d3f9      	bcc.n	80034da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034e6:	f00b fe81 	bl	800f1ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ea:	f7fd ffa7 	bl	800143c <main>
  bx  lr    
 80034ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034f0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80034f4:	0800f2ac 	.word	0x0800f2ac
  ldr  r0, =_sdata
 80034f8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80034fc:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8003500:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8003504:	24000f7c 	.word	0x24000f7c

08003508 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003508:	e7fe      	b.n	8003508 <ADC3_IRQHandler>
	...

0800350c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003512:	2003      	movs	r0, #3
 8003514:	f001 f93c 	bl	8004790 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003518:	f005 fd06 	bl	8008f28 <HAL_RCC_GetSysClockFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HAL_Init+0x68>)
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	4913      	ldr	r1, [pc, #76]	; (8003578 <HAL_Init+0x6c>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
 8003534:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <HAL_Init+0x68>)
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	4a0e      	ldr	r2, [pc, #56]	; (8003578 <HAL_Init+0x6c>)
 8003540:	5cd3      	ldrb	r3, [r2, r3]
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
 800354c:	4a0b      	ldr	r2, [pc, #44]	; (800357c <HAL_Init+0x70>)
 800354e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003550:	4a0b      	ldr	r2, [pc, #44]	; (8003580 <HAL_Init+0x74>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003556:	2000      	movs	r0, #0
 8003558:	f000 f814 	bl	8003584 <HAL_InitTick>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e002      	b.n	800356c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003566:	f7ff f83b 	bl	80025e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	58024400 	.word	0x58024400
 8003578:	0800f25c 	.word	0x0800f25c
 800357c:	24000004 	.word	0x24000004
 8003580:	24000000 	.word	0x24000000

08003584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800358c:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <HAL_InitTick+0x60>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e021      	b.n	80035dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <HAL_InitTick+0x64>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_InitTick+0x60>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	4619      	mov	r1, r3
 80035a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80035aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ae:	4618      	mov	r0, r3
 80035b0:	f001 f921 	bl	80047f6 <HAL_SYSTICK_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e00e      	b.n	80035dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b0f      	cmp	r3, #15
 80035c2:	d80a      	bhi.n	80035da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035c4:	2200      	movs	r2, #0
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	f001 f8eb 	bl	80047a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035d0:	4a06      	ldr	r2, [pc, #24]	; (80035ec <HAL_InitTick+0x68>)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	2400000c 	.word	0x2400000c
 80035e8:	24000000 	.word	0x24000000
 80035ec:	24000008 	.word	0x24000008

080035f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_IncTick+0x20>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_IncTick+0x24>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4413      	add	r3, r2
 8003600:	4a04      	ldr	r2, [pc, #16]	; (8003614 <HAL_IncTick+0x24>)
 8003602:	6013      	str	r3, [r2, #0]
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	2400000c 	.word	0x2400000c
 8003614:	24000f78 	.word	0x24000f78

08003618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return uwTick;
 800361c:	4b03      	ldr	r3, [pc, #12]	; (800362c <HAL_GetTick+0x14>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	24000f78 	.word	0x24000f78

08003630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003638:	f7ff ffee 	bl	8003618 <HAL_GetTick>
 800363c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d005      	beq.n	8003656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_Delay+0x44>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003656:	bf00      	nop
 8003658:	f7ff ffde 	bl	8003618 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	429a      	cmp	r2, r3
 8003666:	d8f7      	bhi.n	8003658 <HAL_Delay+0x28>
  {
  }
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	2400000c 	.word	0x2400000c

08003678 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_GetREVID+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	0c1b      	lsrs	r3, r3, #16
}
 8003682:	4618      	mov	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	5c001000 	.word	0x5c001000

08003690 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80036a0:	4904      	ldr	r1, [pc, #16]	; (80036b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	58000400 	.word	0x58000400

080036b8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	401a      	ands	r2, r3
 80036cc:	4904      	ldr	r1, [pc, #16]	; (80036e0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	58000400 	.word	0x58000400

080036e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	609a      	str	r2, [r3, #8]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	609a      	str	r2, [r3, #8]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3360      	adds	r3, #96	; 0x60
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	430b      	orrs	r3, r1
 800377a:	431a      	orrs	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	431a      	orrs	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	611a      	str	r2, [r3, #16]
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80037be:	b480      	push	{r7}
 80037c0:	b087      	sub	sp, #28
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3360      	adds	r3, #96	; 0x60
 80037ce:	461a      	mov	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	601a      	str	r2, [r3, #0]
  }
}
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	3330      	adds	r3, #48	; 0x30
 8003804:	461a      	mov	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	4413      	add	r3, r2
 8003812:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	211f      	movs	r1, #31
 8003820:	fa01 f303 	lsl.w	r3, r1, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	401a      	ands	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	0e9b      	lsrs	r3, r3, #26
 800382c:	f003 011f 	and.w	r1, r3, #31
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	431a      	orrs	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3314      	adds	r3, #20
 800385c:	461a      	mov	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	0e5b      	lsrs	r3, r3, #25
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	4413      	add	r3, r2
 800386a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	0d1b      	lsrs	r3, r3, #20
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	2107      	movs	r1, #7
 800387a:	fa01 f303 	lsl.w	r3, r1, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	401a      	ands	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	0d1b      	lsrs	r3, r3, #20
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	fa01 f303 	lsl.w	r3, r1, r3
 8003890:	431a      	orrs	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038bc:	43db      	mvns	r3, r3
 80038be:	401a      	ands	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0318 	and.w	r3, r3, #24
 80038c6:	4908      	ldr	r1, [pc, #32]	; (80038e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80038c8:	40d9      	lsrs	r1, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	400b      	ands	r3, r1
 80038ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038d2:	431a      	orrs	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	000fffff 	.word	0x000fffff

080038ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	4b04      	ldr	r3, [pc, #16]	; (800390c <LL_ADC_DisableDeepPowerDown+0x20>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6093      	str	r3, [r2, #8]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	5fffffc0 	.word	0x5fffffc0

08003910 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003924:	d101      	bne.n	800392a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <LL_ADC_EnableInternalRegulator+0x24>)
 8003946:	4013      	ands	r3, r2
 8003948:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	6fffffc0 	.word	0x6fffffc0

08003960 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003974:	d101      	bne.n	800397a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <LL_ADC_IsEnabled+0x18>
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <LL_ADC_IsEnabled+0x1a>
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d101      	bne.n	80039c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d101      	bne.n	80039ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e18e      	b.n	8003d34 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7fe fdf5 	bl	8002614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff67 	bl	8003910 <LL_ADC_IsDeepPowerDownEnabled>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff4d 	bl	80038ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff ff82 	bl	8003960 <LL_ADC_IsInternalRegulatorEnabled>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d114      	bne.n	8003a8c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ff66 	bl	8003938 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a6c:	4b9a      	ldr	r3, [pc, #616]	; (8003cd8 <HAL_ADC_Init+0x2dc>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	4a9a      	ldr	r2, [pc, #616]	; (8003cdc <HAL_ADC_Init+0x2e0>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a7e:	e002      	b.n	8003a86 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f9      	bne.n	8003a80 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff65 	bl	8003960 <LL_ADC_IsInternalRegulatorEnabled>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10d      	bne.n	8003ab8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f043 0210 	orr.w	r2, r3, #16
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	f043 0201 	orr.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff76 	bl	80039ae <LL_ADC_REG_IsConversionOngoing>
 8003ac2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f040 8128 	bne.w	8003d22 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f040 8124 	bne.w	8003d22 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ade:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ae2:	f043 0202 	orr.w	r2, r3, #2
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ff4a 	bl	8003988 <LL_ADC_IsEnabled>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d136      	bne.n	8003b68 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a78      	ldr	r2, [pc, #480]	; (8003ce0 <HAL_ADC_Init+0x2e4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_ADC_Init+0x112>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a76      	ldr	r2, [pc, #472]	; (8003ce4 <HAL_ADC_Init+0x2e8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10e      	bne.n	8003b2c <HAL_ADC_Init+0x130>
 8003b0e:	4874      	ldr	r0, [pc, #464]	; (8003ce0 <HAL_ADC_Init+0x2e4>)
 8003b10:	f7ff ff3a 	bl	8003988 <LL_ADC_IsEnabled>
 8003b14:	4604      	mov	r4, r0
 8003b16:	4873      	ldr	r0, [pc, #460]	; (8003ce4 <HAL_ADC_Init+0x2e8>)
 8003b18:	f7ff ff36 	bl	8003988 <LL_ADC_IsEnabled>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4323      	orrs	r3, r4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e008      	b.n	8003b3e <HAL_ADC_Init+0x142>
 8003b2c:	486e      	ldr	r0, [pc, #440]	; (8003ce8 <HAL_ADC_Init+0x2ec>)
 8003b2e:	f7ff ff2b 	bl	8003988 <LL_ADC_IsEnabled>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d012      	beq.n	8003b68 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a66      	ldr	r2, [pc, #408]	; (8003ce0 <HAL_ADC_Init+0x2e4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_ADC_Init+0x15a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a64      	ldr	r2, [pc, #400]	; (8003ce4 <HAL_ADC_Init+0x2e8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_ADC_Init+0x15e>
 8003b56:	4a65      	ldr	r2, [pc, #404]	; (8003cec <HAL_ADC_Init+0x2f0>)
 8003b58:	e000      	b.n	8003b5c <HAL_ADC_Init+0x160>
 8003b5a:	4a65      	ldr	r2, [pc, #404]	; (8003cf0 <HAL_ADC_Init+0x2f4>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4619      	mov	r1, r3
 8003b62:	4610      	mov	r0, r2
 8003b64:	f7ff fdbe 	bl	80036e4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003b68:	f7ff fd86 	bl	8003678 <HAL_GetREVID>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d914      	bls.n	8003ba0 <HAL_ADC_Init+0x1a4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d110      	bne.n	8003ba0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	7d5b      	ldrb	r3, [r3, #21]
 8003b82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b88:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003b8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	7f1b      	ldrb	r3, [r3, #28]
 8003b94:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003b96:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b98:	f043 030c 	orr.w	r3, r3, #12
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e00d      	b.n	8003bbc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7d5b      	ldrb	r3, [r3, #21]
 8003ba4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003baa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003bb0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7f1b      	ldrb	r3, [r3, #28]
 8003bb6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	7f1b      	ldrb	r3, [r3, #28]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d106      	bne.n	8003bd2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	045b      	lsls	r3, r3, #17
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d009      	beq.n	8003bee <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <HAL_ADC_Init+0x2f8>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	69b9      	ldr	r1, [r7, #24]
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fed1 	bl	80039ae <LL_ADC_REG_IsConversionOngoing>
 8003c0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fede 	bl	80039d4 <LL_ADC_INJ_IsConversionOngoing>
 8003c18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d14a      	bne.n	8003cb6 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d147      	bne.n	8003cb6 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7d1b      	ldrb	r3, [r3, #20]
 8003c2a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <HAL_ADC_Init+0x2fc>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	69b9      	ldr	r1, [r7, #24]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d11b      	bne.n	8003c8a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <HAL_ADC_Init+0x300>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c66:	3a01      	subs	r2, #1
 8003c68:	0411      	lsls	r1, r2, #16
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c6e:	4311      	orrs	r1, r2
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c74:	4311      	orrs	r1, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	611a      	str	r2, [r3, #16]
 8003c88:	e007      	b.n	8003c9a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fb93 	bl	80043dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d120      	bne.n	8003d00 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	f023 010f 	bic.w	r1, r3, #15
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	1e5a      	subs	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8003cd6:	e01b      	b.n	8003d10 <HAL_ADC_Init+0x314>
 8003cd8:	24000000 	.word	0x24000000
 8003cdc:	053e2d63 	.word	0x053e2d63
 8003ce0:	40022000 	.word	0x40022000
 8003ce4:	40022100 	.word	0x40022100
 8003ce8:	58026000 	.word	0x58026000
 8003cec:	40022300 	.word	0x40022300
 8003cf0:	58026300 	.word	0x58026300
 8003cf4:	fff0c003 	.word	0xfff0c003
 8003cf8:	ffffbffc 	.word	0xffffbffc
 8003cfc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 020f 	bic.w	r2, r2, #15
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f023 0303 	bic.w	r3, r3, #3
 8003d18:	f043 0201 	orr.w	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	655a      	str	r2, [r3, #84]	; 0x54
 8003d20:	e007      	b.n	8003d32 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f043 0210 	orr.w	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d32:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3724      	adds	r7, #36	; 0x24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd90      	pop	{r4, r7, pc}

08003d3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b0a1      	sub	sp, #132	; 0x84
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a9d      	ldr	r2, [pc, #628]	; (8003fcc <HAL_ADC_ConfigChannel+0x290>)
 8003d56:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x2a>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e321      	b.n	80043aa <HAL_ADC_ConfigChannel+0x66e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fe1b 	bl	80039ae <LL_ADC_REG_IsConversionOngoing>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 8306 	bne.w	800438c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d108      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x62>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0e9b      	lsrs	r3, r3, #26
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	2201      	movs	r2, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	e016      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x90>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003da6:	fa93 f3a3 	rbit	r3, r3
 8003daa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dae:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003db6:	2320      	movs	r3, #32
 8003db8:	e003      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	69d1      	ldr	r1, [r2, #28]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6859      	ldr	r1, [r3, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f7ff fd04 	bl	80037f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fddc 	bl	80039ae <LL_ADC_REG_IsConversionOngoing>
 8003df6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fde9 	bl	80039d4 <LL_ADC_INJ_IsConversionOngoing>
 8003e02:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 80b3 	bne.w	8003f72 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 80af 	bne.w	8003f72 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	6819      	ldr	r1, [r3, #0]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	461a      	mov	r2, r3
 8003e22:	f7ff fd13 	bl	800384c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e26:	4b6a      	ldr	r3, [pc, #424]	; (8003fd0 <HAL_ADC_ConfigChannel+0x294>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e32:	d10b      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x110>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	e01d      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x14c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x136>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	e00a      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x14c>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d027      	beq.n	8003ee2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6919      	ldr	r1, [r3, #16]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ea0:	f7ff fc54 	bl	800374c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6919      	ldr	r1, [r3, #16]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	7e5b      	ldrb	r3, [r3, #25]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d102      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x17e>
 8003eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003eb8:	e000      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x180>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f7ff fc7e 	bl	80037be <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6919      	ldr	r1, [r3, #16]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	7e1b      	ldrb	r3, [r3, #24]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d102      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x19c>
 8003ed2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ed6:	e000      	b.n	8003eda <HAL_ADC_ConfigChannel+0x19e>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	461a      	mov	r2, r3
 8003edc:	f7ff fc56 	bl	800378c <LL_ADC_SetDataRightShift>
 8003ee0:	e047      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	069b      	lsls	r3, r3, #26
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d107      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f04:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	069b      	lsls	r3, r3, #26
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d107      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f28:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	069b      	lsls	r3, r3, #26
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d107      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f4c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	069b      	lsls	r3, r3, #26
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d107      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f70:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fd06 	bl	8003988 <LL_ADC_IsEnabled>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 820d 	bne.w	800439e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	461a      	mov	r2, r3
 8003f92:	f7ff fc87 	bl	80038a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <HAL_ADC_ConfigChannel+0x290>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	f040 8133 	bne.w	8004208 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d110      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x298>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	0e9b      	lsrs	r3, r3, #26
 8003fb8:	3301      	adds	r3, #1
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2b09      	cmp	r3, #9
 8003fc0:	bf94      	ite	ls
 8003fc2:	2301      	movls	r3, #1
 8003fc4:	2300      	movhi	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e01e      	b.n	8004008 <HAL_ADC_ConfigChannel+0x2cc>
 8003fca:	bf00      	nop
 8003fcc:	47ff0000 	.word	0x47ff0000
 8003fd0:	5c001000 	.word	0x5c001000
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003fec:	2320      	movs	r3, #32
 8003fee:	e003      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2b09      	cmp	r3, #9
 8004000:	bf94      	ite	ls
 8004002:	2301      	movls	r3, #1
 8004004:	2300      	movhi	r3, #0
 8004006:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004008:	2b00      	cmp	r3, #0
 800400a:	d079      	beq.n	8004100 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x2ec>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	3301      	adds	r3, #1
 8004020:	069b      	lsls	r3, r3, #26
 8004022:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004026:	e015      	b.n	8004054 <HAL_ADC_ConfigChannel+0x318>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004038:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800403a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004040:	2320      	movs	r3, #32
 8004042:	e003      	b.n	800404c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	3301      	adds	r3, #1
 800404e:	069b      	lsls	r3, r3, #26
 8004050:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x338>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	0e9b      	lsrs	r3, r3, #26
 8004066:	3301      	adds	r3, #1
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	e017      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x368>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004084:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800408c:	2320      	movs	r3, #32
 800408e:	e003      	b.n	8004098 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3301      	adds	r3, #1
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	ea42 0103 	orr.w	r1, r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x38e>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	0e9b      	lsrs	r3, r3, #26
 80040ba:	3301      	adds	r3, #1
 80040bc:	f003 021f 	and.w	r2, r3, #31
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	051b      	lsls	r3, r3, #20
 80040c8:	e018      	b.n	80040fc <HAL_ADC_ConfigChannel+0x3c0>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80040e2:	2320      	movs	r3, #32
 80040e4:	e003      	b.n	80040ee <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	4613      	mov	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4413      	add	r3, r2
 80040fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040fc:	430b      	orrs	r3, r1
 80040fe:	e07e      	b.n	80041fe <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004108:	2b00      	cmp	r3, #0
 800410a:	d107      	bne.n	800411c <HAL_ADC_ConfigChannel+0x3e0>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	3301      	adds	r3, #1
 8004114:	069b      	lsls	r3, r3, #26
 8004116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800411a:	e015      	b.n	8004148 <HAL_ADC_ConfigChannel+0x40c>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	fa93 f3a3 	rbit	r3, r3
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004134:	2320      	movs	r3, #32
 8004136:	e003      	b.n	8004140 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3301      	adds	r3, #1
 8004142:	069b      	lsls	r3, r3, #26
 8004144:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x42c>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	0e9b      	lsrs	r3, r3, #26
 800415a:	3301      	adds	r3, #1
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	2101      	movs	r1, #1
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	e017      	b.n	8004198 <HAL_ADC_ConfigChannel+0x45c>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	61bb      	str	r3, [r7, #24]
  return result;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004180:	2320      	movs	r3, #32
 8004182:	e003      	b.n	800418c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	fab3 f383 	clz	r3, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	3301      	adds	r3, #1
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2101      	movs	r1, #1
 8004194:	fa01 f303 	lsl.w	r3, r1, r3
 8004198:	ea42 0103 	orr.w	r1, r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10d      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x488>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	0e9b      	lsrs	r3, r3, #26
 80041ae:	3301      	adds	r3, #1
 80041b0:	f003 021f 	and.w	r2, r3, #31
 80041b4:	4613      	mov	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4413      	add	r3, r2
 80041ba:	3b1e      	subs	r3, #30
 80041bc:	051b      	lsls	r3, r3, #20
 80041be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041c2:	e01b      	b.n	80041fc <HAL_ADC_ConfigChannel+0x4c0>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	fa93 f3a3 	rbit	r3, r3
 80041d0:	60fb      	str	r3, [r7, #12]
  return result;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80041dc:	2320      	movs	r3, #32
 80041de:	e003      	b.n	80041e8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	fab3 f383 	clz	r3, r3
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	3301      	adds	r3, #1
 80041ea:	f003 021f 	and.w	r2, r3, #31
 80041ee:	4613      	mov	r3, r2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	4413      	add	r3, r2
 80041f4:	3b1e      	subs	r3, #30
 80041f6:	051b      	lsls	r3, r3, #20
 80041f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041fc:	430b      	orrs	r3, r1
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	6892      	ldr	r2, [r2, #8]
 8004202:	4619      	mov	r1, r3
 8004204:	f7ff fb22 	bl	800384c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f280 80c6 	bge.w	800439e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a67      	ldr	r2, [pc, #412]	; (80043b4 <HAL_ADC_ConfigChannel+0x678>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_ADC_ConfigChannel+0x4ea>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a65      	ldr	r2, [pc, #404]	; (80043b8 <HAL_ADC_ConfigChannel+0x67c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d101      	bne.n	800422a <HAL_ADC_ConfigChannel+0x4ee>
 8004226:	4b65      	ldr	r3, [pc, #404]	; (80043bc <HAL_ADC_ConfigChannel+0x680>)
 8004228:	e000      	b.n	800422c <HAL_ADC_ConfigChannel+0x4f0>
 800422a:	4b65      	ldr	r3, [pc, #404]	; (80043c0 <HAL_ADC_ConfigChannel+0x684>)
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fa7f 	bl	8003730 <LL_ADC_GetCommonPathInternalCh>
 8004232:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a5e      	ldr	r2, [pc, #376]	; (80043b4 <HAL_ADC_ConfigChannel+0x678>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_ADC_ConfigChannel+0x50c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a5d      	ldr	r2, [pc, #372]	; (80043b8 <HAL_ADC_ConfigChannel+0x67c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d10e      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x52a>
 8004248:	485a      	ldr	r0, [pc, #360]	; (80043b4 <HAL_ADC_ConfigChannel+0x678>)
 800424a:	f7ff fb9d 	bl	8003988 <LL_ADC_IsEnabled>
 800424e:	4604      	mov	r4, r0
 8004250:	4859      	ldr	r0, [pc, #356]	; (80043b8 <HAL_ADC_ConfigChannel+0x67c>)
 8004252:	f7ff fb99 	bl	8003988 <LL_ADC_IsEnabled>
 8004256:	4603      	mov	r3, r0
 8004258:	4323      	orrs	r3, r4
 800425a:	2b00      	cmp	r3, #0
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	e008      	b.n	8004278 <HAL_ADC_ConfigChannel+0x53c>
 8004266:	4857      	ldr	r0, [pc, #348]	; (80043c4 <HAL_ADC_ConfigChannel+0x688>)
 8004268:	f7ff fb8e 	bl	8003988 <LL_ADC_IsEnabled>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d07d      	beq.n	8004378 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a51      	ldr	r2, [pc, #324]	; (80043c8 <HAL_ADC_ConfigChannel+0x68c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d130      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x5ac>
 8004286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d12b      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a4b      	ldr	r2, [pc, #300]	; (80043c4 <HAL_ADC_ConfigChannel+0x688>)
 8004296:	4293      	cmp	r3, r2
 8004298:	f040 8081 	bne.w	800439e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a44      	ldr	r2, [pc, #272]	; (80043b4 <HAL_ADC_ConfigChannel+0x678>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d004      	beq.n	80042b0 <HAL_ADC_ConfigChannel+0x574>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a43      	ldr	r2, [pc, #268]	; (80043b8 <HAL_ADC_ConfigChannel+0x67c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d101      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x578>
 80042b0:	4a42      	ldr	r2, [pc, #264]	; (80043bc <HAL_ADC_ConfigChannel+0x680>)
 80042b2:	e000      	b.n	80042b6 <HAL_ADC_ConfigChannel+0x57a>
 80042b4:	4a42      	ldr	r2, [pc, #264]	; (80043c0 <HAL_ADC_ConfigChannel+0x684>)
 80042b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f7ff fa23 	bl	800370a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042c4:	4b41      	ldr	r3, [pc, #260]	; (80043cc <HAL_ADC_ConfigChannel+0x690>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	099b      	lsrs	r3, r3, #6
 80042ca:	4a41      	ldr	r2, [pc, #260]	; (80043d0 <HAL_ADC_ConfigChannel+0x694>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	099b      	lsrs	r3, r3, #6
 80042d2:	3301      	adds	r3, #1
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042d8:	e002      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3b01      	subs	r3, #1
 80042de:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f9      	bne.n	80042da <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042e6:	e05a      	b.n	800439e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a39      	ldr	r2, [pc, #228]	; (80043d4 <HAL_ADC_ConfigChannel+0x698>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d11e      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x5f4>
 80042f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d119      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a30      	ldr	r2, [pc, #192]	; (80043c4 <HAL_ADC_ConfigChannel+0x688>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d14b      	bne.n	800439e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2a      	ldr	r2, [pc, #168]	; (80043b4 <HAL_ADC_ConfigChannel+0x678>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_ADC_ConfigChannel+0x5de>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a28      	ldr	r2, [pc, #160]	; (80043b8 <HAL_ADC_ConfigChannel+0x67c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d101      	bne.n	800431e <HAL_ADC_ConfigChannel+0x5e2>
 800431a:	4a28      	ldr	r2, [pc, #160]	; (80043bc <HAL_ADC_ConfigChannel+0x680>)
 800431c:	e000      	b.n	8004320 <HAL_ADC_ConfigChannel+0x5e4>
 800431e:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <HAL_ADC_ConfigChannel+0x684>)
 8004320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f7ff f9ee 	bl	800370a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800432e:	e036      	b.n	800439e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a28      	ldr	r2, [pc, #160]	; (80043d8 <HAL_ADC_ConfigChannel+0x69c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d131      	bne.n	800439e <HAL_ADC_ConfigChannel+0x662>
 800433a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d12c      	bne.n	800439e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1e      	ldr	r2, [pc, #120]	; (80043c4 <HAL_ADC_ConfigChannel+0x688>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d127      	bne.n	800439e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <HAL_ADC_ConfigChannel+0x678>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_ADC_ConfigChannel+0x626>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a16      	ldr	r2, [pc, #88]	; (80043b8 <HAL_ADC_ConfigChannel+0x67c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x62a>
 8004362:	4a16      	ldr	r2, [pc, #88]	; (80043bc <HAL_ADC_ConfigChannel+0x680>)
 8004364:	e000      	b.n	8004368 <HAL_ADC_ConfigChannel+0x62c>
 8004366:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <HAL_ADC_ConfigChannel+0x684>)
 8004368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f7ff f9ca 	bl	800370a <LL_ADC_SetCommonPathInternalCh>
 8004376:	e012      	b.n	800439e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	f043 0220 	orr.w	r2, r3, #32
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800438a:	e008      	b.n	800439e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3784      	adds	r7, #132	; 0x84
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd90      	pop	{r4, r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40022000 	.word	0x40022000
 80043b8:	40022100 	.word	0x40022100
 80043bc:	40022300 	.word	0x40022300
 80043c0:	58026300 	.word	0x58026300
 80043c4:	58026000 	.word	0x58026000
 80043c8:	cb840000 	.word	0xcb840000
 80043cc:	24000000 	.word	0x24000000
 80043d0:	053e2d63 	.word	0x053e2d63
 80043d4:	c7520000 	.word	0xc7520000
 80043d8:	cfb80000 	.word	0xcfb80000

080043dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a79      	ldr	r2, [pc, #484]	; (80045d0 <ADC_ConfigureBoostMode+0x1f4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <ADC_ConfigureBoostMode+0x1c>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a78      	ldr	r2, [pc, #480]	; (80045d4 <ADC_ConfigureBoostMode+0x1f8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d109      	bne.n	800440c <ADC_ConfigureBoostMode+0x30>
 80043f8:	4b77      	ldr	r3, [pc, #476]	; (80045d8 <ADC_ConfigureBoostMode+0x1fc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e008      	b.n	800441e <ADC_ConfigureBoostMode+0x42>
 800440c:	4b73      	ldr	r3, [pc, #460]	; (80045dc <ADC_ConfigureBoostMode+0x200>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01c      	beq.n	800445c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004422:	f004 fefb 	bl	800921c <HAL_RCC_GetHCLKFreq>
 8004426:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004430:	d010      	beq.n	8004454 <ADC_ConfigureBoostMode+0x78>
 8004432:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004436:	d871      	bhi.n	800451c <ADC_ConfigureBoostMode+0x140>
 8004438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443c:	d002      	beq.n	8004444 <ADC_ConfigureBoostMode+0x68>
 800443e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004442:	d16b      	bne.n	800451c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	0c1b      	lsrs	r3, r3, #16
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	60fb      	str	r3, [r7, #12]
        break;
 8004452:	e066      	b.n	8004522 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	60fb      	str	r3, [r7, #12]
        break;
 800445a:	e062      	b.n	8004522 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800445c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004460:	f005 fe78 	bl	800a154 <HAL_RCCEx_GetPeriphCLKFreq>
 8004464:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800446e:	d051      	beq.n	8004514 <ADC_ConfigureBoostMode+0x138>
 8004470:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004474:	d854      	bhi.n	8004520 <ADC_ConfigureBoostMode+0x144>
 8004476:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800447a:	d047      	beq.n	800450c <ADC_ConfigureBoostMode+0x130>
 800447c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004480:	d84e      	bhi.n	8004520 <ADC_ConfigureBoostMode+0x144>
 8004482:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004486:	d03d      	beq.n	8004504 <ADC_ConfigureBoostMode+0x128>
 8004488:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800448c:	d848      	bhi.n	8004520 <ADC_ConfigureBoostMode+0x144>
 800448e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004492:	d033      	beq.n	80044fc <ADC_ConfigureBoostMode+0x120>
 8004494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004498:	d842      	bhi.n	8004520 <ADC_ConfigureBoostMode+0x144>
 800449a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800449e:	d029      	beq.n	80044f4 <ADC_ConfigureBoostMode+0x118>
 80044a0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044a4:	d83c      	bhi.n	8004520 <ADC_ConfigureBoostMode+0x144>
 80044a6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044aa:	d01a      	beq.n	80044e2 <ADC_ConfigureBoostMode+0x106>
 80044ac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044b0:	d836      	bhi.n	8004520 <ADC_ConfigureBoostMode+0x144>
 80044b2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044b6:	d014      	beq.n	80044e2 <ADC_ConfigureBoostMode+0x106>
 80044b8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044bc:	d830      	bhi.n	8004520 <ADC_ConfigureBoostMode+0x144>
 80044be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c2:	d00e      	beq.n	80044e2 <ADC_ConfigureBoostMode+0x106>
 80044c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c8:	d82a      	bhi.n	8004520 <ADC_ConfigureBoostMode+0x144>
 80044ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044ce:	d008      	beq.n	80044e2 <ADC_ConfigureBoostMode+0x106>
 80044d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044d4:	d824      	bhi.n	8004520 <ADC_ConfigureBoostMode+0x144>
 80044d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044da:	d002      	beq.n	80044e2 <ADC_ConfigureBoostMode+0x106>
 80044dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044e0:	d11e      	bne.n	8004520 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	0c9b      	lsrs	r3, r3, #18
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	60fb      	str	r3, [r7, #12]
        break;
 80044f2:	e016      	b.n	8004522 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]
        break;
 80044fa:	e012      	b.n	8004522 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	60fb      	str	r3, [r7, #12]
        break;
 8004502:	e00e      	b.n	8004522 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	60fb      	str	r3, [r7, #12]
        break;
 800450a:	e00a      	b.n	8004522 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	09db      	lsrs	r3, r3, #7
 8004510:	60fb      	str	r3, [r7, #12]
        break;
 8004512:	e006      	b.n	8004522 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	60fb      	str	r3, [r7, #12]
        break;
 800451a:	e002      	b.n	8004522 <ADC_ConfigureBoostMode+0x146>
        break;
 800451c:	bf00      	nop
 800451e:	e000      	b.n	8004522 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004520:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004522:	f7ff f8a9 	bl	8003678 <HAL_GetREVID>
 8004526:	4603      	mov	r3, r0
 8004528:	f241 0203 	movw	r2, #4099	; 0x1003
 800452c:	4293      	cmp	r3, r2
 800452e:	d815      	bhi.n	800455c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a2b      	ldr	r2, [pc, #172]	; (80045e0 <ADC_ConfigureBoostMode+0x204>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d908      	bls.n	800454a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004546:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004548:	e03e      	b.n	80045c8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004558:	609a      	str	r2, [r3, #8]
}
 800455a:	e035      	b.n	80045c8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <ADC_ConfigureBoostMode+0x208>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d808      	bhi.n	800457c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004578:	609a      	str	r2, [r3, #8]
}
 800457a:	e025      	b.n	80045c8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <ADC_ConfigureBoostMode+0x20c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d80a      	bhi.n	800459a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004596:	609a      	str	r2, [r3, #8]
}
 8004598:	e016      	b.n	80045c8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a13      	ldr	r2, [pc, #76]	; (80045ec <ADC_ConfigureBoostMode+0x210>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d80a      	bhi.n	80045b8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b4:	609a      	str	r2, [r3, #8]
}
 80045b6:	e007      	b.n	80045c8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	bf00      	nop
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40022000 	.word	0x40022000
 80045d4:	40022100 	.word	0x40022100
 80045d8:	40022300 	.word	0x40022300
 80045dc:	58026300 	.word	0x58026300
 80045e0:	01312d00 	.word	0x01312d00
 80045e4:	005f5e10 	.word	0x005f5e10
 80045e8:	00bebc20 	.word	0x00bebc20
 80045ec:	017d7840 	.word	0x017d7840

080045f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <__NVIC_SetPriorityGrouping+0x40>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800460c:	4013      	ands	r3, r2
 800460e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <__NVIC_SetPriorityGrouping+0x44>)
 800461a:	4313      	orrs	r3, r2
 800461c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800461e:	4a04      	ldr	r2, [pc, #16]	; (8004630 <__NVIC_SetPriorityGrouping+0x40>)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	60d3      	str	r3, [r2, #12]
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000ed00 	.word	0xe000ed00
 8004634:	05fa0000 	.word	0x05fa0000

08004638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <__NVIC_GetPriorityGrouping+0x18>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	f003 0307 	and.w	r3, r3, #7
}
 8004646:	4618      	mov	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800465e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004662:	2b00      	cmp	r3, #0
 8004664:	db0b      	blt.n	800467e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	f003 021f 	and.w	r2, r3, #31
 800466c:	4907      	ldr	r1, [pc, #28]	; (800468c <__NVIC_EnableIRQ+0x38>)
 800466e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	2001      	movs	r0, #1
 8004676:	fa00 f202 	lsl.w	r2, r0, r2
 800467a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000e100 	.word	0xe000e100

08004690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	6039      	str	r1, [r7, #0]
 800469a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800469c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	db0a      	blt.n	80046ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	490c      	ldr	r1, [pc, #48]	; (80046dc <__NVIC_SetPriority+0x4c>)
 80046aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ae:	0112      	lsls	r2, r2, #4
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	440b      	add	r3, r1
 80046b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046b8:	e00a      	b.n	80046d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	4908      	ldr	r1, [pc, #32]	; (80046e0 <__NVIC_SetPriority+0x50>)
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	3b04      	subs	r3, #4
 80046c8:	0112      	lsls	r2, r2, #4
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	440b      	add	r3, r1
 80046ce:	761a      	strb	r2, [r3, #24]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	e000e100 	.word	0xe000e100
 80046e0:	e000ed00 	.word	0xe000ed00

080046e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b089      	sub	sp, #36	; 0x24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f1c3 0307 	rsb	r3, r3, #7
 80046fe:	2b04      	cmp	r3, #4
 8004700:	bf28      	it	cs
 8004702:	2304      	movcs	r3, #4
 8004704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3304      	adds	r3, #4
 800470a:	2b06      	cmp	r3, #6
 800470c:	d902      	bls.n	8004714 <NVIC_EncodePriority+0x30>
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3b03      	subs	r3, #3
 8004712:	e000      	b.n	8004716 <NVIC_EncodePriority+0x32>
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004718:	f04f 32ff 	mov.w	r2, #4294967295
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43da      	mvns	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	401a      	ands	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800472c:	f04f 31ff 	mov.w	r1, #4294967295
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	fa01 f303 	lsl.w	r3, r1, r3
 8004736:	43d9      	mvns	r1, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	4313      	orrs	r3, r2
         );
}
 800473e:	4618      	mov	r0, r3
 8004740:	3724      	adds	r7, #36	; 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3b01      	subs	r3, #1
 8004758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800475c:	d301      	bcc.n	8004762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800475e:	2301      	movs	r3, #1
 8004760:	e00f      	b.n	8004782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004762:	4a0a      	ldr	r2, [pc, #40]	; (800478c <SysTick_Config+0x40>)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3b01      	subs	r3, #1
 8004768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800476a:	210f      	movs	r1, #15
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	f7ff ff8e 	bl	8004690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <SysTick_Config+0x40>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800477a:	4b04      	ldr	r3, [pc, #16]	; (800478c <SysTick_Config+0x40>)
 800477c:	2207      	movs	r2, #7
 800477e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	e000e010 	.word	0xe000e010

08004790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff29 	bl	80045f0 <__NVIC_SetPriorityGrouping>
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	4603      	mov	r3, r0
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047b4:	f7ff ff40 	bl	8004638 <__NVIC_GetPriorityGrouping>
 80047b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	6978      	ldr	r0, [r7, #20]
 80047c0:	f7ff ff90 	bl	80046e4 <NVIC_EncodePriority>
 80047c4:	4602      	mov	r2, r0
 80047c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff ff5f 	bl	8004690 <__NVIC_SetPriority>
}
 80047d2:	bf00      	nop
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	4603      	mov	r3, r0
 80047e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff ff33 	bl	8004654 <__NVIC_EnableIRQ>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff ffa4 	bl	800474c <SysTick_Config>
 8004804:	4603      	mov	r3, r0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004818:	f7fe fefe 	bl	8003618 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e316      	b.n	8004e56 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a66      	ldr	r2, [pc, #408]	; (80049c8 <HAL_DMA_Init+0x1b8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d04a      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a65      	ldr	r2, [pc, #404]	; (80049cc <HAL_DMA_Init+0x1bc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d045      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a63      	ldr	r2, [pc, #396]	; (80049d0 <HAL_DMA_Init+0x1c0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d040      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a62      	ldr	r2, [pc, #392]	; (80049d4 <HAL_DMA_Init+0x1c4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d03b      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a60      	ldr	r2, [pc, #384]	; (80049d8 <HAL_DMA_Init+0x1c8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d036      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a5f      	ldr	r2, [pc, #380]	; (80049dc <HAL_DMA_Init+0x1cc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d031      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5d      	ldr	r2, [pc, #372]	; (80049e0 <HAL_DMA_Init+0x1d0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d02c      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a5c      	ldr	r2, [pc, #368]	; (80049e4 <HAL_DMA_Init+0x1d4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d027      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a5a      	ldr	r2, [pc, #360]	; (80049e8 <HAL_DMA_Init+0x1d8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d022      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a59      	ldr	r2, [pc, #356]	; (80049ec <HAL_DMA_Init+0x1dc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d01d      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a57      	ldr	r2, [pc, #348]	; (80049f0 <HAL_DMA_Init+0x1e0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d018      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a56      	ldr	r2, [pc, #344]	; (80049f4 <HAL_DMA_Init+0x1e4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d013      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a54      	ldr	r2, [pc, #336]	; (80049f8 <HAL_DMA_Init+0x1e8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00e      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a53      	ldr	r2, [pc, #332]	; (80049fc <HAL_DMA_Init+0x1ec>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d009      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a51      	ldr	r2, [pc, #324]	; (8004a00 <HAL_DMA_Init+0x1f0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <HAL_DMA_Init+0xb8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a50      	ldr	r2, [pc, #320]	; (8004a04 <HAL_DMA_Init+0x1f4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d101      	bne.n	80048cc <HAL_DMA_Init+0xbc>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <HAL_DMA_Init+0xbe>
 80048cc:	2300      	movs	r3, #0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 813b 	beq.w	8004b4a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a37      	ldr	r2, [pc, #220]	; (80049c8 <HAL_DMA_Init+0x1b8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d04a      	beq.n	8004984 <HAL_DMA_Init+0x174>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a36      	ldr	r2, [pc, #216]	; (80049cc <HAL_DMA_Init+0x1bc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d045      	beq.n	8004984 <HAL_DMA_Init+0x174>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a34      	ldr	r2, [pc, #208]	; (80049d0 <HAL_DMA_Init+0x1c0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d040      	beq.n	8004984 <HAL_DMA_Init+0x174>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a33      	ldr	r2, [pc, #204]	; (80049d4 <HAL_DMA_Init+0x1c4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d03b      	beq.n	8004984 <HAL_DMA_Init+0x174>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a31      	ldr	r2, [pc, #196]	; (80049d8 <HAL_DMA_Init+0x1c8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d036      	beq.n	8004984 <HAL_DMA_Init+0x174>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a30      	ldr	r2, [pc, #192]	; (80049dc <HAL_DMA_Init+0x1cc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d031      	beq.n	8004984 <HAL_DMA_Init+0x174>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a2e      	ldr	r2, [pc, #184]	; (80049e0 <HAL_DMA_Init+0x1d0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d02c      	beq.n	8004984 <HAL_DMA_Init+0x174>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2d      	ldr	r2, [pc, #180]	; (80049e4 <HAL_DMA_Init+0x1d4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d027      	beq.n	8004984 <HAL_DMA_Init+0x174>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2b      	ldr	r2, [pc, #172]	; (80049e8 <HAL_DMA_Init+0x1d8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d022      	beq.n	8004984 <HAL_DMA_Init+0x174>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2a      	ldr	r2, [pc, #168]	; (80049ec <HAL_DMA_Init+0x1dc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d01d      	beq.n	8004984 <HAL_DMA_Init+0x174>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a28      	ldr	r2, [pc, #160]	; (80049f0 <HAL_DMA_Init+0x1e0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d018      	beq.n	8004984 <HAL_DMA_Init+0x174>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a27      	ldr	r2, [pc, #156]	; (80049f4 <HAL_DMA_Init+0x1e4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d013      	beq.n	8004984 <HAL_DMA_Init+0x174>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a25      	ldr	r2, [pc, #148]	; (80049f8 <HAL_DMA_Init+0x1e8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00e      	beq.n	8004984 <HAL_DMA_Init+0x174>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a24      	ldr	r2, [pc, #144]	; (80049fc <HAL_DMA_Init+0x1ec>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d009      	beq.n	8004984 <HAL_DMA_Init+0x174>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <HAL_DMA_Init+0x1f0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_DMA_Init+0x174>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <HAL_DMA_Init+0x1f4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d108      	bne.n	8004996 <HAL_DMA_Init+0x186>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e007      	b.n	80049a6 <HAL_DMA_Init+0x196>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0201 	bic.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049a6:	e02f      	b.n	8004a08 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049a8:	f7fe fe36 	bl	8003618 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	d928      	bls.n	8004a08 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2203      	movs	r2, #3
 80049c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e246      	b.n	8004e56 <HAL_DMA_Init+0x646>
 80049c8:	40020010 	.word	0x40020010
 80049cc:	40020028 	.word	0x40020028
 80049d0:	40020040 	.word	0x40020040
 80049d4:	40020058 	.word	0x40020058
 80049d8:	40020070 	.word	0x40020070
 80049dc:	40020088 	.word	0x40020088
 80049e0:	400200a0 	.word	0x400200a0
 80049e4:	400200b8 	.word	0x400200b8
 80049e8:	40020410 	.word	0x40020410
 80049ec:	40020428 	.word	0x40020428
 80049f0:	40020440 	.word	0x40020440
 80049f4:	40020458 	.word	0x40020458
 80049f8:	40020470 	.word	0x40020470
 80049fc:	40020488 	.word	0x40020488
 8004a00:	400204a0 	.word	0x400204a0
 8004a04:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1c8      	bne.n	80049a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4b83      	ldr	r3, [pc, #524]	; (8004c30 <HAL_DMA_Init+0x420>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004a2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a46:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d107      	bne.n	8004a6c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	4313      	orrs	r3, r2
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004a6c:	4b71      	ldr	r3, [pc, #452]	; (8004c34 <HAL_DMA_Init+0x424>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b71      	ldr	r3, [pc, #452]	; (8004c38 <HAL_DMA_Init+0x428>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a78:	d328      	bcc.n	8004acc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b28      	cmp	r3, #40	; 0x28
 8004a80:	d903      	bls.n	8004a8a <HAL_DMA_Init+0x27a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b2e      	cmp	r3, #46	; 0x2e
 8004a88:	d917      	bls.n	8004aba <HAL_DMA_Init+0x2aa>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8004a90:	d903      	bls.n	8004a9a <HAL_DMA_Init+0x28a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b42      	cmp	r3, #66	; 0x42
 8004a98:	d90f      	bls.n	8004aba <HAL_DMA_Init+0x2aa>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b46      	cmp	r3, #70	; 0x46
 8004aa0:	d903      	bls.n	8004aaa <HAL_DMA_Init+0x29a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b48      	cmp	r3, #72	; 0x48
 8004aa8:	d907      	bls.n	8004aba <HAL_DMA_Init+0x2aa>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b4e      	cmp	r3, #78	; 0x4e
 8004ab0:	d905      	bls.n	8004abe <HAL_DMA_Init+0x2ae>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b52      	cmp	r3, #82	; 0x52
 8004ab8:	d801      	bhi.n	8004abe <HAL_DMA_Init+0x2ae>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <HAL_DMA_Init+0x2b0>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 0307 	bic.w	r3, r3, #7
 8004ae2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d117      	bne.n	8004b26 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00e      	beq.n	8004b26 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f002 fb31 	bl	8007170 <DMA_CheckFifoParam>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2240      	movs	r2, #64	; 0x40
 8004b18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e197      	b.n	8004e56 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f002 fa6c 	bl	800700c <DMA_CalcBaseAndBitshift>
 8004b34:	4603      	mov	r3, r0
 8004b36:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	223f      	movs	r2, #63	; 0x3f
 8004b42:	409a      	lsls	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	e0cd      	b.n	8004ce6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a3b      	ldr	r2, [pc, #236]	; (8004c3c <HAL_DMA_Init+0x42c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d022      	beq.n	8004b9a <HAL_DMA_Init+0x38a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a39      	ldr	r2, [pc, #228]	; (8004c40 <HAL_DMA_Init+0x430>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01d      	beq.n	8004b9a <HAL_DMA_Init+0x38a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a38      	ldr	r2, [pc, #224]	; (8004c44 <HAL_DMA_Init+0x434>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d018      	beq.n	8004b9a <HAL_DMA_Init+0x38a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a36      	ldr	r2, [pc, #216]	; (8004c48 <HAL_DMA_Init+0x438>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <HAL_DMA_Init+0x38a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a35      	ldr	r2, [pc, #212]	; (8004c4c <HAL_DMA_Init+0x43c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00e      	beq.n	8004b9a <HAL_DMA_Init+0x38a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a33      	ldr	r2, [pc, #204]	; (8004c50 <HAL_DMA_Init+0x440>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d009      	beq.n	8004b9a <HAL_DMA_Init+0x38a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a32      	ldr	r2, [pc, #200]	; (8004c54 <HAL_DMA_Init+0x444>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_DMA_Init+0x38a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a30      	ldr	r2, [pc, #192]	; (8004c58 <HAL_DMA_Init+0x448>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d101      	bne.n	8004b9e <HAL_DMA_Init+0x38e>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <HAL_DMA_Init+0x390>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8097 	beq.w	8004cd4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a24      	ldr	r2, [pc, #144]	; (8004c3c <HAL_DMA_Init+0x42c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d021      	beq.n	8004bf4 <HAL_DMA_Init+0x3e4>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <HAL_DMA_Init+0x430>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01c      	beq.n	8004bf4 <HAL_DMA_Init+0x3e4>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <HAL_DMA_Init+0x434>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d017      	beq.n	8004bf4 <HAL_DMA_Init+0x3e4>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1f      	ldr	r2, [pc, #124]	; (8004c48 <HAL_DMA_Init+0x438>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d012      	beq.n	8004bf4 <HAL_DMA_Init+0x3e4>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1e      	ldr	r2, [pc, #120]	; (8004c4c <HAL_DMA_Init+0x43c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00d      	beq.n	8004bf4 <HAL_DMA_Init+0x3e4>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1c      	ldr	r2, [pc, #112]	; (8004c50 <HAL_DMA_Init+0x440>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d008      	beq.n	8004bf4 <HAL_DMA_Init+0x3e4>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1b      	ldr	r2, [pc, #108]	; (8004c54 <HAL_DMA_Init+0x444>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <HAL_DMA_Init+0x3e4>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a19      	ldr	r2, [pc, #100]	; (8004c58 <HAL_DMA_Init+0x448>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2202      	movs	r2, #2
 8004c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <HAL_DMA_Init+0x44c>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	d020      	beq.n	8004c60 <HAL_DMA_Init+0x450>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b80      	cmp	r3, #128	; 0x80
 8004c24:	d102      	bne.n	8004c2c <HAL_DMA_Init+0x41c>
 8004c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c2a:	e01a      	b.n	8004c62 <HAL_DMA_Init+0x452>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e018      	b.n	8004c62 <HAL_DMA_Init+0x452>
 8004c30:	fe10803f 	.word	0xfe10803f
 8004c34:	5c001000 	.word	0x5c001000
 8004c38:	ffff0000 	.word	0xffff0000
 8004c3c:	58025408 	.word	0x58025408
 8004c40:	5802541c 	.word	0x5802541c
 8004c44:	58025430 	.word	0x58025430
 8004c48:	58025444 	.word	0x58025444
 8004c4c:	58025458 	.word	0x58025458
 8004c50:	5802546c 	.word	0x5802546c
 8004c54:	58025480 	.word	0x58025480
 8004c58:	58025494 	.word	0x58025494
 8004c5c:	fffe000f 	.word	0xfffe000f
 8004c60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68d2      	ldr	r2, [r2, #12]
 8004c66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4b6e      	ldr	r3, [pc, #440]	; (8004e60 <HAL_DMA_Init+0x650>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	4a6e      	ldr	r2, [pc, #440]	; (8004e64 <HAL_DMA_Init+0x654>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	009a      	lsls	r2, r3, #2
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f002 f9a7 	bl	800700c <DMA_CalcBaseAndBitshift>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	2201      	movs	r2, #1
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	e008      	b.n	8004ce6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2240      	movs	r2, #64	; 0x40
 8004cd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2203      	movs	r2, #3
 8004cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e0b7      	b.n	8004e56 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a5f      	ldr	r2, [pc, #380]	; (8004e68 <HAL_DMA_Init+0x658>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d072      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a5d      	ldr	r2, [pc, #372]	; (8004e6c <HAL_DMA_Init+0x65c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d06d      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a5c      	ldr	r2, [pc, #368]	; (8004e70 <HAL_DMA_Init+0x660>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d068      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a5a      	ldr	r2, [pc, #360]	; (8004e74 <HAL_DMA_Init+0x664>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d063      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a59      	ldr	r2, [pc, #356]	; (8004e78 <HAL_DMA_Init+0x668>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d05e      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a57      	ldr	r2, [pc, #348]	; (8004e7c <HAL_DMA_Init+0x66c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d059      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a56      	ldr	r2, [pc, #344]	; (8004e80 <HAL_DMA_Init+0x670>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d054      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a54      	ldr	r2, [pc, #336]	; (8004e84 <HAL_DMA_Init+0x674>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d04f      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a53      	ldr	r2, [pc, #332]	; (8004e88 <HAL_DMA_Init+0x678>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d04a      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a51      	ldr	r2, [pc, #324]	; (8004e8c <HAL_DMA_Init+0x67c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d045      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a50      	ldr	r2, [pc, #320]	; (8004e90 <HAL_DMA_Init+0x680>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d040      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a4e      	ldr	r2, [pc, #312]	; (8004e94 <HAL_DMA_Init+0x684>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d03b      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a4d      	ldr	r2, [pc, #308]	; (8004e98 <HAL_DMA_Init+0x688>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d036      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a4b      	ldr	r2, [pc, #300]	; (8004e9c <HAL_DMA_Init+0x68c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d031      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a4a      	ldr	r2, [pc, #296]	; (8004ea0 <HAL_DMA_Init+0x690>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d02c      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a48      	ldr	r2, [pc, #288]	; (8004ea4 <HAL_DMA_Init+0x694>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d027      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a47      	ldr	r2, [pc, #284]	; (8004ea8 <HAL_DMA_Init+0x698>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d022      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a45      	ldr	r2, [pc, #276]	; (8004eac <HAL_DMA_Init+0x69c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d01d      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a44      	ldr	r2, [pc, #272]	; (8004eb0 <HAL_DMA_Init+0x6a0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d018      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a42      	ldr	r2, [pc, #264]	; (8004eb4 <HAL_DMA_Init+0x6a4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a41      	ldr	r2, [pc, #260]	; (8004eb8 <HAL_DMA_Init+0x6a8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00e      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a3f      	ldr	r2, [pc, #252]	; (8004ebc <HAL_DMA_Init+0x6ac>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d009      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a3e      	ldr	r2, [pc, #248]	; (8004ec0 <HAL_DMA_Init+0x6b0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d004      	beq.n	8004dd6 <HAL_DMA_Init+0x5c6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a3c      	ldr	r2, [pc, #240]	; (8004ec4 <HAL_DMA_Init+0x6b4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d101      	bne.n	8004dda <HAL_DMA_Init+0x5ca>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <HAL_DMA_Init+0x5cc>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d032      	beq.n	8004e46 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f002 fa41 	bl	8007268 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d102      	bne.n	8004df4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e08:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d010      	beq.n	8004e34 <HAL_DMA_Init+0x624>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d80c      	bhi.n	8004e34 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f002 fabe 	bl	800739c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	e008      	b.n	8004e46 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	a7fdabf8 	.word	0xa7fdabf8
 8004e64:	cccccccd 	.word	0xcccccccd
 8004e68:	40020010 	.word	0x40020010
 8004e6c:	40020028 	.word	0x40020028
 8004e70:	40020040 	.word	0x40020040
 8004e74:	40020058 	.word	0x40020058
 8004e78:	40020070 	.word	0x40020070
 8004e7c:	40020088 	.word	0x40020088
 8004e80:	400200a0 	.word	0x400200a0
 8004e84:	400200b8 	.word	0x400200b8
 8004e88:	40020410 	.word	0x40020410
 8004e8c:	40020428 	.word	0x40020428
 8004e90:	40020440 	.word	0x40020440
 8004e94:	40020458 	.word	0x40020458
 8004e98:	40020470 	.word	0x40020470
 8004e9c:	40020488 	.word	0x40020488
 8004ea0:	400204a0 	.word	0x400204a0
 8004ea4:	400204b8 	.word	0x400204b8
 8004ea8:	58025408 	.word	0x58025408
 8004eac:	5802541c 	.word	0x5802541c
 8004eb0:	58025430 	.word	0x58025430
 8004eb4:	58025444 	.word	0x58025444
 8004eb8:	58025458 	.word	0x58025458
 8004ebc:	5802546c 	.word	0x5802546c
 8004ec0:	58025480 	.word	0x58025480
 8004ec4:	58025494 	.word	0x58025494

08004ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e226      	b.n	8005332 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_DMA_Start_IT+0x2a>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e21f      	b.n	8005332 <HAL_DMA_Start_IT+0x46a>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	f040 820a 	bne.w	800531c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a68      	ldr	r2, [pc, #416]	; (80050bc <HAL_DMA_Start_IT+0x1f4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d04a      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a66      	ldr	r2, [pc, #408]	; (80050c0 <HAL_DMA_Start_IT+0x1f8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d045      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a65      	ldr	r2, [pc, #404]	; (80050c4 <HAL_DMA_Start_IT+0x1fc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d040      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a63      	ldr	r2, [pc, #396]	; (80050c8 <HAL_DMA_Start_IT+0x200>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d03b      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a62      	ldr	r2, [pc, #392]	; (80050cc <HAL_DMA_Start_IT+0x204>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d036      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a60      	ldr	r2, [pc, #384]	; (80050d0 <HAL_DMA_Start_IT+0x208>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d031      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a5f      	ldr	r2, [pc, #380]	; (80050d4 <HAL_DMA_Start_IT+0x20c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d02c      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a5d      	ldr	r2, [pc, #372]	; (80050d8 <HAL_DMA_Start_IT+0x210>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d027      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a5c      	ldr	r2, [pc, #368]	; (80050dc <HAL_DMA_Start_IT+0x214>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d022      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a5a      	ldr	r2, [pc, #360]	; (80050e0 <HAL_DMA_Start_IT+0x218>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01d      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a59      	ldr	r2, [pc, #356]	; (80050e4 <HAL_DMA_Start_IT+0x21c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d018      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a57      	ldr	r2, [pc, #348]	; (80050e8 <HAL_DMA_Start_IT+0x220>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d013      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a56      	ldr	r2, [pc, #344]	; (80050ec <HAL_DMA_Start_IT+0x224>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00e      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a54      	ldr	r2, [pc, #336]	; (80050f0 <HAL_DMA_Start_IT+0x228>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d009      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a53      	ldr	r2, [pc, #332]	; (80050f4 <HAL_DMA_Start_IT+0x22c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d004      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xee>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a51      	ldr	r2, [pc, #324]	; (80050f8 <HAL_DMA_Start_IT+0x230>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d108      	bne.n	8004fc8 <HAL_DMA_Start_IT+0x100>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0201 	bic.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	e007      	b.n	8004fd8 <HAL_DMA_Start_IT+0x110>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0201 	bic.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f001 fe68 	bl	8006cb4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a34      	ldr	r2, [pc, #208]	; (80050bc <HAL_DMA_Start_IT+0x1f4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d04a      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a33      	ldr	r2, [pc, #204]	; (80050c0 <HAL_DMA_Start_IT+0x1f8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d045      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a31      	ldr	r2, [pc, #196]	; (80050c4 <HAL_DMA_Start_IT+0x1fc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d040      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a30      	ldr	r2, [pc, #192]	; (80050c8 <HAL_DMA_Start_IT+0x200>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d03b      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a2e      	ldr	r2, [pc, #184]	; (80050cc <HAL_DMA_Start_IT+0x204>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d036      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a2d      	ldr	r2, [pc, #180]	; (80050d0 <HAL_DMA_Start_IT+0x208>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d031      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2b      	ldr	r2, [pc, #172]	; (80050d4 <HAL_DMA_Start_IT+0x20c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02c      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <HAL_DMA_Start_IT+0x210>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d027      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a28      	ldr	r2, [pc, #160]	; (80050dc <HAL_DMA_Start_IT+0x214>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d022      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a27      	ldr	r2, [pc, #156]	; (80050e0 <HAL_DMA_Start_IT+0x218>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d01d      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a25      	ldr	r2, [pc, #148]	; (80050e4 <HAL_DMA_Start_IT+0x21c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d018      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a24      	ldr	r2, [pc, #144]	; (80050e8 <HAL_DMA_Start_IT+0x220>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a22      	ldr	r2, [pc, #136]	; (80050ec <HAL_DMA_Start_IT+0x224>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a21      	ldr	r2, [pc, #132]	; (80050f0 <HAL_DMA_Start_IT+0x228>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1f      	ldr	r2, [pc, #124]	; (80050f4 <HAL_DMA_Start_IT+0x22c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_DMA_Start_IT+0x1bc>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <HAL_DMA_Start_IT+0x230>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d101      	bne.n	8005088 <HAL_DMA_Start_IT+0x1c0>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <HAL_DMA_Start_IT+0x1c2>
 8005088:	2300      	movs	r3, #0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d036      	beq.n	80050fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f023 021e 	bic.w	r2, r3, #30
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0216 	orr.w	r2, r2, #22
 80050a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d03e      	beq.n	8005128 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0208 	orr.w	r2, r2, #8
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e035      	b.n	8005128 <HAL_DMA_Start_IT+0x260>
 80050bc:	40020010 	.word	0x40020010
 80050c0:	40020028 	.word	0x40020028
 80050c4:	40020040 	.word	0x40020040
 80050c8:	40020058 	.word	0x40020058
 80050cc:	40020070 	.word	0x40020070
 80050d0:	40020088 	.word	0x40020088
 80050d4:	400200a0 	.word	0x400200a0
 80050d8:	400200b8 	.word	0x400200b8
 80050dc:	40020410 	.word	0x40020410
 80050e0:	40020428 	.word	0x40020428
 80050e4:	40020440 	.word	0x40020440
 80050e8:	40020458 	.word	0x40020458
 80050ec:	40020470 	.word	0x40020470
 80050f0:	40020488 	.word	0x40020488
 80050f4:	400204a0 	.word	0x400204a0
 80050f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 020e 	bic.w	r2, r3, #14
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 020a 	orr.w	r2, r2, #10
 800510e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0204 	orr.w	r2, r2, #4
 8005126:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a83      	ldr	r2, [pc, #524]	; (800533c <HAL_DMA_Start_IT+0x474>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d072      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a82      	ldr	r2, [pc, #520]	; (8005340 <HAL_DMA_Start_IT+0x478>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d06d      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a80      	ldr	r2, [pc, #512]	; (8005344 <HAL_DMA_Start_IT+0x47c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d068      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a7f      	ldr	r2, [pc, #508]	; (8005348 <HAL_DMA_Start_IT+0x480>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d063      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a7d      	ldr	r2, [pc, #500]	; (800534c <HAL_DMA_Start_IT+0x484>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d05e      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a7c      	ldr	r2, [pc, #496]	; (8005350 <HAL_DMA_Start_IT+0x488>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d059      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a7a      	ldr	r2, [pc, #488]	; (8005354 <HAL_DMA_Start_IT+0x48c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d054      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a79      	ldr	r2, [pc, #484]	; (8005358 <HAL_DMA_Start_IT+0x490>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d04f      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a77      	ldr	r2, [pc, #476]	; (800535c <HAL_DMA_Start_IT+0x494>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d04a      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a76      	ldr	r2, [pc, #472]	; (8005360 <HAL_DMA_Start_IT+0x498>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d045      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a74      	ldr	r2, [pc, #464]	; (8005364 <HAL_DMA_Start_IT+0x49c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d040      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a73      	ldr	r2, [pc, #460]	; (8005368 <HAL_DMA_Start_IT+0x4a0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d03b      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a71      	ldr	r2, [pc, #452]	; (800536c <HAL_DMA_Start_IT+0x4a4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d036      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a70      	ldr	r2, [pc, #448]	; (8005370 <HAL_DMA_Start_IT+0x4a8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d031      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6e      	ldr	r2, [pc, #440]	; (8005374 <HAL_DMA_Start_IT+0x4ac>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d02c      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a6d      	ldr	r2, [pc, #436]	; (8005378 <HAL_DMA_Start_IT+0x4b0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d027      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a6b      	ldr	r2, [pc, #428]	; (800537c <HAL_DMA_Start_IT+0x4b4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d022      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a6a      	ldr	r2, [pc, #424]	; (8005380 <HAL_DMA_Start_IT+0x4b8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d01d      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a68      	ldr	r2, [pc, #416]	; (8005384 <HAL_DMA_Start_IT+0x4bc>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d018      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a67      	ldr	r2, [pc, #412]	; (8005388 <HAL_DMA_Start_IT+0x4c0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a65      	ldr	r2, [pc, #404]	; (800538c <HAL_DMA_Start_IT+0x4c4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00e      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a64      	ldr	r2, [pc, #400]	; (8005390 <HAL_DMA_Start_IT+0x4c8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d009      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a62      	ldr	r2, [pc, #392]	; (8005394 <HAL_DMA_Start_IT+0x4cc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_DMA_Start_IT+0x350>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a61      	ldr	r2, [pc, #388]	; (8005398 <HAL_DMA_Start_IT+0x4d0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d101      	bne.n	800521c <HAL_DMA_Start_IT+0x354>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <HAL_DMA_Start_IT+0x356>
 800521c:	2300      	movs	r3, #0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01a      	beq.n	8005258 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800523a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005256:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a37      	ldr	r2, [pc, #220]	; (800533c <HAL_DMA_Start_IT+0x474>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d04a      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a36      	ldr	r2, [pc, #216]	; (8005340 <HAL_DMA_Start_IT+0x478>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d045      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a34      	ldr	r2, [pc, #208]	; (8005344 <HAL_DMA_Start_IT+0x47c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d040      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a33      	ldr	r2, [pc, #204]	; (8005348 <HAL_DMA_Start_IT+0x480>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d03b      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a31      	ldr	r2, [pc, #196]	; (800534c <HAL_DMA_Start_IT+0x484>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d036      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a30      	ldr	r2, [pc, #192]	; (8005350 <HAL_DMA_Start_IT+0x488>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d031      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a2e      	ldr	r2, [pc, #184]	; (8005354 <HAL_DMA_Start_IT+0x48c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d02c      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a2d      	ldr	r2, [pc, #180]	; (8005358 <HAL_DMA_Start_IT+0x490>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d027      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a2b      	ldr	r2, [pc, #172]	; (800535c <HAL_DMA_Start_IT+0x494>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d022      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a2a      	ldr	r2, [pc, #168]	; (8005360 <HAL_DMA_Start_IT+0x498>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d01d      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a28      	ldr	r2, [pc, #160]	; (8005364 <HAL_DMA_Start_IT+0x49c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d018      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a27      	ldr	r2, [pc, #156]	; (8005368 <HAL_DMA_Start_IT+0x4a0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a25      	ldr	r2, [pc, #148]	; (800536c <HAL_DMA_Start_IT+0x4a4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00e      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a24      	ldr	r2, [pc, #144]	; (8005370 <HAL_DMA_Start_IT+0x4a8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d009      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a22      	ldr	r2, [pc, #136]	; (8005374 <HAL_DMA_Start_IT+0x4ac>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_DMA_Start_IT+0x430>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a21      	ldr	r2, [pc, #132]	; (8005378 <HAL_DMA_Start_IT+0x4b0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d108      	bne.n	800530a <HAL_DMA_Start_IT+0x442>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e012      	b.n	8005330 <HAL_DMA_Start_IT+0x468>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	e009      	b.n	8005330 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800532a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005330:	7dfb      	ldrb	r3, [r7, #23]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40020010 	.word	0x40020010
 8005340:	40020028 	.word	0x40020028
 8005344:	40020040 	.word	0x40020040
 8005348:	40020058 	.word	0x40020058
 800534c:	40020070 	.word	0x40020070
 8005350:	40020088 	.word	0x40020088
 8005354:	400200a0 	.word	0x400200a0
 8005358:	400200b8 	.word	0x400200b8
 800535c:	40020410 	.word	0x40020410
 8005360:	40020428 	.word	0x40020428
 8005364:	40020440 	.word	0x40020440
 8005368:	40020458 	.word	0x40020458
 800536c:	40020470 	.word	0x40020470
 8005370:	40020488 	.word	0x40020488
 8005374:	400204a0 	.word	0x400204a0
 8005378:	400204b8 	.word	0x400204b8
 800537c:	58025408 	.word	0x58025408
 8005380:	5802541c 	.word	0x5802541c
 8005384:	58025430 	.word	0x58025430
 8005388:	58025444 	.word	0x58025444
 800538c:	58025458 	.word	0x58025458
 8005390:	5802546c 	.word	0x5802546c
 8005394:	58025480 	.word	0x58025480
 8005398:	58025494 	.word	0x58025494

0800539c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80053a4:	f7fe f938 	bl	8003618 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e2dc      	b.n	800596e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d008      	beq.n	80053d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2280      	movs	r2, #128	; 0x80
 80053c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e2cd      	b.n	800596e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a76      	ldr	r2, [pc, #472]	; (80055b0 <HAL_DMA_Abort+0x214>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d04a      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a74      	ldr	r2, [pc, #464]	; (80055b4 <HAL_DMA_Abort+0x218>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d045      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a73      	ldr	r2, [pc, #460]	; (80055b8 <HAL_DMA_Abort+0x21c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d040      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a71      	ldr	r2, [pc, #452]	; (80055bc <HAL_DMA_Abort+0x220>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d03b      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a70      	ldr	r2, [pc, #448]	; (80055c0 <HAL_DMA_Abort+0x224>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d036      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a6e      	ldr	r2, [pc, #440]	; (80055c4 <HAL_DMA_Abort+0x228>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d031      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a6d      	ldr	r2, [pc, #436]	; (80055c8 <HAL_DMA_Abort+0x22c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d02c      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a6b      	ldr	r2, [pc, #428]	; (80055cc <HAL_DMA_Abort+0x230>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d027      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6a      	ldr	r2, [pc, #424]	; (80055d0 <HAL_DMA_Abort+0x234>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d022      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a68      	ldr	r2, [pc, #416]	; (80055d4 <HAL_DMA_Abort+0x238>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01d      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a67      	ldr	r2, [pc, #412]	; (80055d8 <HAL_DMA_Abort+0x23c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d018      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a65      	ldr	r2, [pc, #404]	; (80055dc <HAL_DMA_Abort+0x240>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a64      	ldr	r2, [pc, #400]	; (80055e0 <HAL_DMA_Abort+0x244>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00e      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a62      	ldr	r2, [pc, #392]	; (80055e4 <HAL_DMA_Abort+0x248>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a61      	ldr	r2, [pc, #388]	; (80055e8 <HAL_DMA_Abort+0x24c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_DMA_Abort+0xd6>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a5f      	ldr	r2, [pc, #380]	; (80055ec <HAL_DMA_Abort+0x250>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d101      	bne.n	8005476 <HAL_DMA_Abort+0xda>
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <HAL_DMA_Abort+0xdc>
 8005476:	2300      	movs	r3, #0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d013      	beq.n	80054a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 021e 	bic.w	r2, r2, #30
 800548a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800549a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	e00a      	b.n	80054ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 020e 	bic.w	r2, r2, #14
 80054b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a3c      	ldr	r2, [pc, #240]	; (80055b0 <HAL_DMA_Abort+0x214>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d072      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a3a      	ldr	r2, [pc, #232]	; (80055b4 <HAL_DMA_Abort+0x218>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d06d      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a39      	ldr	r2, [pc, #228]	; (80055b8 <HAL_DMA_Abort+0x21c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d068      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a37      	ldr	r2, [pc, #220]	; (80055bc <HAL_DMA_Abort+0x220>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d063      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a36      	ldr	r2, [pc, #216]	; (80055c0 <HAL_DMA_Abort+0x224>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d05e      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a34      	ldr	r2, [pc, #208]	; (80055c4 <HAL_DMA_Abort+0x228>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d059      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a33      	ldr	r2, [pc, #204]	; (80055c8 <HAL_DMA_Abort+0x22c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d054      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a31      	ldr	r2, [pc, #196]	; (80055cc <HAL_DMA_Abort+0x230>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d04f      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a30      	ldr	r2, [pc, #192]	; (80055d0 <HAL_DMA_Abort+0x234>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d04a      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a2e      	ldr	r2, [pc, #184]	; (80055d4 <HAL_DMA_Abort+0x238>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d045      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a2d      	ldr	r2, [pc, #180]	; (80055d8 <HAL_DMA_Abort+0x23c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d040      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a2b      	ldr	r2, [pc, #172]	; (80055dc <HAL_DMA_Abort+0x240>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d03b      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a2a      	ldr	r2, [pc, #168]	; (80055e0 <HAL_DMA_Abort+0x244>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d036      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a28      	ldr	r2, [pc, #160]	; (80055e4 <HAL_DMA_Abort+0x248>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d031      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a27      	ldr	r2, [pc, #156]	; (80055e8 <HAL_DMA_Abort+0x24c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d02c      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a25      	ldr	r2, [pc, #148]	; (80055ec <HAL_DMA_Abort+0x250>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d027      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a24      	ldr	r2, [pc, #144]	; (80055f0 <HAL_DMA_Abort+0x254>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d022      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a22      	ldr	r2, [pc, #136]	; (80055f4 <HAL_DMA_Abort+0x258>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d01d      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <HAL_DMA_Abort+0x25c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d018      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1f      	ldr	r2, [pc, #124]	; (80055fc <HAL_DMA_Abort+0x260>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1e      	ldr	r2, [pc, #120]	; (8005600 <HAL_DMA_Abort+0x264>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00e      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1c      	ldr	r2, [pc, #112]	; (8005604 <HAL_DMA_Abort+0x268>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d009      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1b      	ldr	r2, [pc, #108]	; (8005608 <HAL_DMA_Abort+0x26c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_DMA_Abort+0x20e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a19      	ldr	r2, [pc, #100]	; (800560c <HAL_DMA_Abort+0x270>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d132      	bne.n	8005610 <HAL_DMA_Abort+0x274>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e031      	b.n	8005612 <HAL_DMA_Abort+0x276>
 80055ae:	bf00      	nop
 80055b0:	40020010 	.word	0x40020010
 80055b4:	40020028 	.word	0x40020028
 80055b8:	40020040 	.word	0x40020040
 80055bc:	40020058 	.word	0x40020058
 80055c0:	40020070 	.word	0x40020070
 80055c4:	40020088 	.word	0x40020088
 80055c8:	400200a0 	.word	0x400200a0
 80055cc:	400200b8 	.word	0x400200b8
 80055d0:	40020410 	.word	0x40020410
 80055d4:	40020428 	.word	0x40020428
 80055d8:	40020440 	.word	0x40020440
 80055dc:	40020458 	.word	0x40020458
 80055e0:	40020470 	.word	0x40020470
 80055e4:	40020488 	.word	0x40020488
 80055e8:	400204a0 	.word	0x400204a0
 80055ec:	400204b8 	.word	0x400204b8
 80055f0:	58025408 	.word	0x58025408
 80055f4:	5802541c 	.word	0x5802541c
 80055f8:	58025430 	.word	0x58025430
 80055fc:	58025444 	.word	0x58025444
 8005600:	58025458 	.word	0x58025458
 8005604:	5802546c 	.word	0x5802546c
 8005608:	58025480 	.word	0x58025480
 800560c:	58025494 	.word	0x58025494
 8005610:	2300      	movs	r3, #0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005624:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a6d      	ldr	r2, [pc, #436]	; (80057e0 <HAL_DMA_Abort+0x444>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d04a      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a6b      	ldr	r2, [pc, #428]	; (80057e4 <HAL_DMA_Abort+0x448>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d045      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a6a      	ldr	r2, [pc, #424]	; (80057e8 <HAL_DMA_Abort+0x44c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d040      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a68      	ldr	r2, [pc, #416]	; (80057ec <HAL_DMA_Abort+0x450>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d03b      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a67      	ldr	r2, [pc, #412]	; (80057f0 <HAL_DMA_Abort+0x454>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d036      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a65      	ldr	r2, [pc, #404]	; (80057f4 <HAL_DMA_Abort+0x458>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d031      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a64      	ldr	r2, [pc, #400]	; (80057f8 <HAL_DMA_Abort+0x45c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d02c      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a62      	ldr	r2, [pc, #392]	; (80057fc <HAL_DMA_Abort+0x460>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d027      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a61      	ldr	r2, [pc, #388]	; (8005800 <HAL_DMA_Abort+0x464>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d022      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a5f      	ldr	r2, [pc, #380]	; (8005804 <HAL_DMA_Abort+0x468>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01d      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a5e      	ldr	r2, [pc, #376]	; (8005808 <HAL_DMA_Abort+0x46c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d018      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a5c      	ldr	r2, [pc, #368]	; (800580c <HAL_DMA_Abort+0x470>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a5b      	ldr	r2, [pc, #364]	; (8005810 <HAL_DMA_Abort+0x474>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00e      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a59      	ldr	r2, [pc, #356]	; (8005814 <HAL_DMA_Abort+0x478>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a58      	ldr	r2, [pc, #352]	; (8005818 <HAL_DMA_Abort+0x47c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_DMA_Abort+0x32a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a56      	ldr	r2, [pc, #344]	; (800581c <HAL_DMA_Abort+0x480>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d108      	bne.n	80056d8 <HAL_DMA_Abort+0x33c>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	e007      	b.n	80056e8 <HAL_DMA_Abort+0x34c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0201 	bic.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80056e8:	e013      	b.n	8005712 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056ea:	f7fd ff95 	bl	8003618 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b05      	cmp	r3, #5
 80056f6:	d90c      	bls.n	8005712 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2203      	movs	r2, #3
 800570a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e12d      	b.n	800596e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e5      	bne.n	80056ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a2f      	ldr	r2, [pc, #188]	; (80057e0 <HAL_DMA_Abort+0x444>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d04a      	beq.n	80057be <HAL_DMA_Abort+0x422>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a2d      	ldr	r2, [pc, #180]	; (80057e4 <HAL_DMA_Abort+0x448>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d045      	beq.n	80057be <HAL_DMA_Abort+0x422>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a2c      	ldr	r2, [pc, #176]	; (80057e8 <HAL_DMA_Abort+0x44c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d040      	beq.n	80057be <HAL_DMA_Abort+0x422>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a2a      	ldr	r2, [pc, #168]	; (80057ec <HAL_DMA_Abort+0x450>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d03b      	beq.n	80057be <HAL_DMA_Abort+0x422>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a29      	ldr	r2, [pc, #164]	; (80057f0 <HAL_DMA_Abort+0x454>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d036      	beq.n	80057be <HAL_DMA_Abort+0x422>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a27      	ldr	r2, [pc, #156]	; (80057f4 <HAL_DMA_Abort+0x458>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d031      	beq.n	80057be <HAL_DMA_Abort+0x422>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a26      	ldr	r2, [pc, #152]	; (80057f8 <HAL_DMA_Abort+0x45c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d02c      	beq.n	80057be <HAL_DMA_Abort+0x422>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a24      	ldr	r2, [pc, #144]	; (80057fc <HAL_DMA_Abort+0x460>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d027      	beq.n	80057be <HAL_DMA_Abort+0x422>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a23      	ldr	r2, [pc, #140]	; (8005800 <HAL_DMA_Abort+0x464>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d022      	beq.n	80057be <HAL_DMA_Abort+0x422>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a21      	ldr	r2, [pc, #132]	; (8005804 <HAL_DMA_Abort+0x468>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d01d      	beq.n	80057be <HAL_DMA_Abort+0x422>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a20      	ldr	r2, [pc, #128]	; (8005808 <HAL_DMA_Abort+0x46c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d018      	beq.n	80057be <HAL_DMA_Abort+0x422>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1e      	ldr	r2, [pc, #120]	; (800580c <HAL_DMA_Abort+0x470>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d013      	beq.n	80057be <HAL_DMA_Abort+0x422>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1d      	ldr	r2, [pc, #116]	; (8005810 <HAL_DMA_Abort+0x474>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00e      	beq.n	80057be <HAL_DMA_Abort+0x422>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <HAL_DMA_Abort+0x478>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d009      	beq.n	80057be <HAL_DMA_Abort+0x422>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1a      	ldr	r2, [pc, #104]	; (8005818 <HAL_DMA_Abort+0x47c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d004      	beq.n	80057be <HAL_DMA_Abort+0x422>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a18      	ldr	r2, [pc, #96]	; (800581c <HAL_DMA_Abort+0x480>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d101      	bne.n	80057c2 <HAL_DMA_Abort+0x426>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <HAL_DMA_Abort+0x428>
 80057c2:	2300      	movs	r3, #0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d02b      	beq.n	8005820 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	f003 031f 	and.w	r3, r3, #31
 80057d6:	223f      	movs	r2, #63	; 0x3f
 80057d8:	409a      	lsls	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	609a      	str	r2, [r3, #8]
 80057de:	e02a      	b.n	8005836 <HAL_DMA_Abort+0x49a>
 80057e0:	40020010 	.word	0x40020010
 80057e4:	40020028 	.word	0x40020028
 80057e8:	40020040 	.word	0x40020040
 80057ec:	40020058 	.word	0x40020058
 80057f0:	40020070 	.word	0x40020070
 80057f4:	40020088 	.word	0x40020088
 80057f8:	400200a0 	.word	0x400200a0
 80057fc:	400200b8 	.word	0x400200b8
 8005800:	40020410 	.word	0x40020410
 8005804:	40020428 	.word	0x40020428
 8005808:	40020440 	.word	0x40020440
 800580c:	40020458 	.word	0x40020458
 8005810:	40020470 	.word	0x40020470
 8005814:	40020488 	.word	0x40020488
 8005818:	400204a0 	.word	0x400204a0
 800581c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005824:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	2201      	movs	r2, #1
 8005830:	409a      	lsls	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a4f      	ldr	r2, [pc, #316]	; (8005978 <HAL_DMA_Abort+0x5dc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d072      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a4d      	ldr	r2, [pc, #308]	; (800597c <HAL_DMA_Abort+0x5e0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d06d      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a4c      	ldr	r2, [pc, #304]	; (8005980 <HAL_DMA_Abort+0x5e4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d068      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a4a      	ldr	r2, [pc, #296]	; (8005984 <HAL_DMA_Abort+0x5e8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d063      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a49      	ldr	r2, [pc, #292]	; (8005988 <HAL_DMA_Abort+0x5ec>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d05e      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a47      	ldr	r2, [pc, #284]	; (800598c <HAL_DMA_Abort+0x5f0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d059      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a46      	ldr	r2, [pc, #280]	; (8005990 <HAL_DMA_Abort+0x5f4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d054      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a44      	ldr	r2, [pc, #272]	; (8005994 <HAL_DMA_Abort+0x5f8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d04f      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a43      	ldr	r2, [pc, #268]	; (8005998 <HAL_DMA_Abort+0x5fc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d04a      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a41      	ldr	r2, [pc, #260]	; (800599c <HAL_DMA_Abort+0x600>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d045      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a40      	ldr	r2, [pc, #256]	; (80059a0 <HAL_DMA_Abort+0x604>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d040      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a3e      	ldr	r2, [pc, #248]	; (80059a4 <HAL_DMA_Abort+0x608>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d03b      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a3d      	ldr	r2, [pc, #244]	; (80059a8 <HAL_DMA_Abort+0x60c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d036      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a3b      	ldr	r2, [pc, #236]	; (80059ac <HAL_DMA_Abort+0x610>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d031      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a3a      	ldr	r2, [pc, #232]	; (80059b0 <HAL_DMA_Abort+0x614>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d02c      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a38      	ldr	r2, [pc, #224]	; (80059b4 <HAL_DMA_Abort+0x618>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d027      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a37      	ldr	r2, [pc, #220]	; (80059b8 <HAL_DMA_Abort+0x61c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d022      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a35      	ldr	r2, [pc, #212]	; (80059bc <HAL_DMA_Abort+0x620>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01d      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a34      	ldr	r2, [pc, #208]	; (80059c0 <HAL_DMA_Abort+0x624>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d018      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a32      	ldr	r2, [pc, #200]	; (80059c4 <HAL_DMA_Abort+0x628>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a31      	ldr	r2, [pc, #196]	; (80059c8 <HAL_DMA_Abort+0x62c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a2f      	ldr	r2, [pc, #188]	; (80059cc <HAL_DMA_Abort+0x630>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a2e      	ldr	r2, [pc, #184]	; (80059d0 <HAL_DMA_Abort+0x634>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_DMA_Abort+0x58a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a2c      	ldr	r2, [pc, #176]	; (80059d4 <HAL_DMA_Abort+0x638>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d101      	bne.n	800592a <HAL_DMA_Abort+0x58e>
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <HAL_DMA_Abort+0x590>
 800592a:	2300      	movs	r3, #0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d015      	beq.n	800595c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005938:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00c      	beq.n	800595c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800594c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005950:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800595a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40020010 	.word	0x40020010
 800597c:	40020028 	.word	0x40020028
 8005980:	40020040 	.word	0x40020040
 8005984:	40020058 	.word	0x40020058
 8005988:	40020070 	.word	0x40020070
 800598c:	40020088 	.word	0x40020088
 8005990:	400200a0 	.word	0x400200a0
 8005994:	400200b8 	.word	0x400200b8
 8005998:	40020410 	.word	0x40020410
 800599c:	40020428 	.word	0x40020428
 80059a0:	40020440 	.word	0x40020440
 80059a4:	40020458 	.word	0x40020458
 80059a8:	40020470 	.word	0x40020470
 80059ac:	40020488 	.word	0x40020488
 80059b0:	400204a0 	.word	0x400204a0
 80059b4:	400204b8 	.word	0x400204b8
 80059b8:	58025408 	.word	0x58025408
 80059bc:	5802541c 	.word	0x5802541c
 80059c0:	58025430 	.word	0x58025430
 80059c4:	58025444 	.word	0x58025444
 80059c8:	58025458 	.word	0x58025458
 80059cc:	5802546c 	.word	0x5802546c
 80059d0:	58025480 	.word	0x58025480
 80059d4:	58025494 	.word	0x58025494

080059d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e205      	b.n	8005df6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d004      	beq.n	8005a00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2280      	movs	r2, #128	; 0x80
 80059fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e1fa      	b.n	8005df6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a8c      	ldr	r2, [pc, #560]	; (8005c38 <HAL_DMA_Abort_IT+0x260>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d04a      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a8b      	ldr	r2, [pc, #556]	; (8005c3c <HAL_DMA_Abort_IT+0x264>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d045      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a89      	ldr	r2, [pc, #548]	; (8005c40 <HAL_DMA_Abort_IT+0x268>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d040      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a88      	ldr	r2, [pc, #544]	; (8005c44 <HAL_DMA_Abort_IT+0x26c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d03b      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a86      	ldr	r2, [pc, #536]	; (8005c48 <HAL_DMA_Abort_IT+0x270>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d036      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a85      	ldr	r2, [pc, #532]	; (8005c4c <HAL_DMA_Abort_IT+0x274>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d031      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a83      	ldr	r2, [pc, #524]	; (8005c50 <HAL_DMA_Abort_IT+0x278>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d02c      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a82      	ldr	r2, [pc, #520]	; (8005c54 <HAL_DMA_Abort_IT+0x27c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d027      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a80      	ldr	r2, [pc, #512]	; (8005c58 <HAL_DMA_Abort_IT+0x280>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d022      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a7f      	ldr	r2, [pc, #508]	; (8005c5c <HAL_DMA_Abort_IT+0x284>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d01d      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a7d      	ldr	r2, [pc, #500]	; (8005c60 <HAL_DMA_Abort_IT+0x288>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d018      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a7c      	ldr	r2, [pc, #496]	; (8005c64 <HAL_DMA_Abort_IT+0x28c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a7a      	ldr	r2, [pc, #488]	; (8005c68 <HAL_DMA_Abort_IT+0x290>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00e      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a79      	ldr	r2, [pc, #484]	; (8005c6c <HAL_DMA_Abort_IT+0x294>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a77      	ldr	r2, [pc, #476]	; (8005c70 <HAL_DMA_Abort_IT+0x298>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xc8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a76      	ldr	r2, [pc, #472]	; (8005c74 <HAL_DMA_Abort_IT+0x29c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d101      	bne.n	8005aa4 <HAL_DMA_Abort_IT+0xcc>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <HAL_DMA_Abort_IT+0xce>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d065      	beq.n	8005b76 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2204      	movs	r2, #4
 8005aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a60      	ldr	r2, [pc, #384]	; (8005c38 <HAL_DMA_Abort_IT+0x260>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d04a      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a5e      	ldr	r2, [pc, #376]	; (8005c3c <HAL_DMA_Abort_IT+0x264>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d045      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a5d      	ldr	r2, [pc, #372]	; (8005c40 <HAL_DMA_Abort_IT+0x268>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d040      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a5b      	ldr	r2, [pc, #364]	; (8005c44 <HAL_DMA_Abort_IT+0x26c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d03b      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a5a      	ldr	r2, [pc, #360]	; (8005c48 <HAL_DMA_Abort_IT+0x270>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d036      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a58      	ldr	r2, [pc, #352]	; (8005c4c <HAL_DMA_Abort_IT+0x274>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d031      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a57      	ldr	r2, [pc, #348]	; (8005c50 <HAL_DMA_Abort_IT+0x278>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d02c      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a55      	ldr	r2, [pc, #340]	; (8005c54 <HAL_DMA_Abort_IT+0x27c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d027      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a54      	ldr	r2, [pc, #336]	; (8005c58 <HAL_DMA_Abort_IT+0x280>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d022      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a52      	ldr	r2, [pc, #328]	; (8005c5c <HAL_DMA_Abort_IT+0x284>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01d      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a51      	ldr	r2, [pc, #324]	; (8005c60 <HAL_DMA_Abort_IT+0x288>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d018      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a4f      	ldr	r2, [pc, #316]	; (8005c64 <HAL_DMA_Abort_IT+0x28c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a4e      	ldr	r2, [pc, #312]	; (8005c68 <HAL_DMA_Abort_IT+0x290>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00e      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a4c      	ldr	r2, [pc, #304]	; (8005c6c <HAL_DMA_Abort_IT+0x294>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d009      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a4b      	ldr	r2, [pc, #300]	; (8005c70 <HAL_DMA_Abort_IT+0x298>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d004      	beq.n	8005b52 <HAL_DMA_Abort_IT+0x17a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a49      	ldr	r2, [pc, #292]	; (8005c74 <HAL_DMA_Abort_IT+0x29c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d108      	bne.n	8005b64 <HAL_DMA_Abort_IT+0x18c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0201 	bic.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e147      	b.n	8005df4 <HAL_DMA_Abort_IT+0x41c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0201 	bic.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	e13e      	b.n	8005df4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 020e 	bic.w	r2, r2, #14
 8005b84:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2b      	ldr	r2, [pc, #172]	; (8005c38 <HAL_DMA_Abort_IT+0x260>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d04a      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a29      	ldr	r2, [pc, #164]	; (8005c3c <HAL_DMA_Abort_IT+0x264>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d045      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a28      	ldr	r2, [pc, #160]	; (8005c40 <HAL_DMA_Abort_IT+0x268>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d040      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a26      	ldr	r2, [pc, #152]	; (8005c44 <HAL_DMA_Abort_IT+0x26c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d03b      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <HAL_DMA_Abort_IT+0x270>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d036      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a23      	ldr	r2, [pc, #140]	; (8005c4c <HAL_DMA_Abort_IT+0x274>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d031      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a22      	ldr	r2, [pc, #136]	; (8005c50 <HAL_DMA_Abort_IT+0x278>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d02c      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a20      	ldr	r2, [pc, #128]	; (8005c54 <HAL_DMA_Abort_IT+0x27c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d027      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1f      	ldr	r2, [pc, #124]	; (8005c58 <HAL_DMA_Abort_IT+0x280>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d022      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1d      	ldr	r2, [pc, #116]	; (8005c5c <HAL_DMA_Abort_IT+0x284>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d01d      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1c      	ldr	r2, [pc, #112]	; (8005c60 <HAL_DMA_Abort_IT+0x288>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d018      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1a      	ldr	r2, [pc, #104]	; (8005c64 <HAL_DMA_Abort_IT+0x28c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a19      	ldr	r2, [pc, #100]	; (8005c68 <HAL_DMA_Abort_IT+0x290>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00e      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <HAL_DMA_Abort_IT+0x294>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d009      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a16      	ldr	r2, [pc, #88]	; (8005c70 <HAL_DMA_Abort_IT+0x298>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d004      	beq.n	8005c26 <HAL_DMA_Abort_IT+0x24e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a14      	ldr	r2, [pc, #80]	; (8005c74 <HAL_DMA_Abort_IT+0x29c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d128      	bne.n	8005c78 <HAL_DMA_Abort_IT+0x2a0>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0201 	bic.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	e027      	b.n	8005c88 <HAL_DMA_Abort_IT+0x2b0>
 8005c38:	40020010 	.word	0x40020010
 8005c3c:	40020028 	.word	0x40020028
 8005c40:	40020040 	.word	0x40020040
 8005c44:	40020058 	.word	0x40020058
 8005c48:	40020070 	.word	0x40020070
 8005c4c:	40020088 	.word	0x40020088
 8005c50:	400200a0 	.word	0x400200a0
 8005c54:	400200b8 	.word	0x400200b8
 8005c58:	40020410 	.word	0x40020410
 8005c5c:	40020428 	.word	0x40020428
 8005c60:	40020440 	.word	0x40020440
 8005c64:	40020458 	.word	0x40020458
 8005c68:	40020470 	.word	0x40020470
 8005c6c:	40020488 	.word	0x40020488
 8005c70:	400204a0 	.word	0x400204a0
 8005c74:	400204b8 	.word	0x400204b8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0201 	bic.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a5c      	ldr	r2, [pc, #368]	; (8005e00 <HAL_DMA_Abort_IT+0x428>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d072      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a5b      	ldr	r2, [pc, #364]	; (8005e04 <HAL_DMA_Abort_IT+0x42c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d06d      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a59      	ldr	r2, [pc, #356]	; (8005e08 <HAL_DMA_Abort_IT+0x430>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d068      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a58      	ldr	r2, [pc, #352]	; (8005e0c <HAL_DMA_Abort_IT+0x434>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d063      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a56      	ldr	r2, [pc, #344]	; (8005e10 <HAL_DMA_Abort_IT+0x438>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d05e      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a55      	ldr	r2, [pc, #340]	; (8005e14 <HAL_DMA_Abort_IT+0x43c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d059      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a53      	ldr	r2, [pc, #332]	; (8005e18 <HAL_DMA_Abort_IT+0x440>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d054      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a52      	ldr	r2, [pc, #328]	; (8005e1c <HAL_DMA_Abort_IT+0x444>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d04f      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a50      	ldr	r2, [pc, #320]	; (8005e20 <HAL_DMA_Abort_IT+0x448>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d04a      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a4f      	ldr	r2, [pc, #316]	; (8005e24 <HAL_DMA_Abort_IT+0x44c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d045      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a4d      	ldr	r2, [pc, #308]	; (8005e28 <HAL_DMA_Abort_IT+0x450>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d040      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a4c      	ldr	r2, [pc, #304]	; (8005e2c <HAL_DMA_Abort_IT+0x454>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d03b      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a4a      	ldr	r2, [pc, #296]	; (8005e30 <HAL_DMA_Abort_IT+0x458>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d036      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a49      	ldr	r2, [pc, #292]	; (8005e34 <HAL_DMA_Abort_IT+0x45c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d031      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a47      	ldr	r2, [pc, #284]	; (8005e38 <HAL_DMA_Abort_IT+0x460>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d02c      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a46      	ldr	r2, [pc, #280]	; (8005e3c <HAL_DMA_Abort_IT+0x464>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d027      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a44      	ldr	r2, [pc, #272]	; (8005e40 <HAL_DMA_Abort_IT+0x468>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d022      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a43      	ldr	r2, [pc, #268]	; (8005e44 <HAL_DMA_Abort_IT+0x46c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d01d      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a41      	ldr	r2, [pc, #260]	; (8005e48 <HAL_DMA_Abort_IT+0x470>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d018      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a40      	ldr	r2, [pc, #256]	; (8005e4c <HAL_DMA_Abort_IT+0x474>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a3e      	ldr	r2, [pc, #248]	; (8005e50 <HAL_DMA_Abort_IT+0x478>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00e      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a3d      	ldr	r2, [pc, #244]	; (8005e54 <HAL_DMA_Abort_IT+0x47c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a3b      	ldr	r2, [pc, #236]	; (8005e58 <HAL_DMA_Abort_IT+0x480>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x3a0>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a3a      	ldr	r2, [pc, #232]	; (8005e5c <HAL_DMA_Abort_IT+0x484>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d101      	bne.n	8005d7c <HAL_DMA_Abort_IT+0x3a4>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <HAL_DMA_Abort_IT+0x3a6>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d028      	beq.n	8005dd4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9c:	f003 031f 	and.w	r3, r3, #31
 8005da0:	2201      	movs	r2, #1
 8005da2:	409a      	lsls	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005db0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00c      	beq.n	8005dd4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dc8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005dd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40020010 	.word	0x40020010
 8005e04:	40020028 	.word	0x40020028
 8005e08:	40020040 	.word	0x40020040
 8005e0c:	40020058 	.word	0x40020058
 8005e10:	40020070 	.word	0x40020070
 8005e14:	40020088 	.word	0x40020088
 8005e18:	400200a0 	.word	0x400200a0
 8005e1c:	400200b8 	.word	0x400200b8
 8005e20:	40020410 	.word	0x40020410
 8005e24:	40020428 	.word	0x40020428
 8005e28:	40020440 	.word	0x40020440
 8005e2c:	40020458 	.word	0x40020458
 8005e30:	40020470 	.word	0x40020470
 8005e34:	40020488 	.word	0x40020488
 8005e38:	400204a0 	.word	0x400204a0
 8005e3c:	400204b8 	.word	0x400204b8
 8005e40:	58025408 	.word	0x58025408
 8005e44:	5802541c 	.word	0x5802541c
 8005e48:	58025430 	.word	0x58025430
 8005e4c:	58025444 	.word	0x58025444
 8005e50:	58025458 	.word	0x58025458
 8005e54:	5802546c 	.word	0x5802546c
 8005e58:	58025480 	.word	0x58025480
 8005e5c:	58025494 	.word	0x58025494

08005e60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08a      	sub	sp, #40	; 0x28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e6c:	4b67      	ldr	r3, [pc, #412]	; (800600c <HAL_DMA_IRQHandler+0x1ac>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a67      	ldr	r2, [pc, #412]	; (8006010 <HAL_DMA_IRQHandler+0x1b0>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	0a9b      	lsrs	r3, r3, #10
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a5f      	ldr	r2, [pc, #380]	; (8006014 <HAL_DMA_IRQHandler+0x1b4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d04a      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a5d      	ldr	r2, [pc, #372]	; (8006018 <HAL_DMA_IRQHandler+0x1b8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d045      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a5c      	ldr	r2, [pc, #368]	; (800601c <HAL_DMA_IRQHandler+0x1bc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d040      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a5a      	ldr	r2, [pc, #360]	; (8006020 <HAL_DMA_IRQHandler+0x1c0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d03b      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a59      	ldr	r2, [pc, #356]	; (8006024 <HAL_DMA_IRQHandler+0x1c4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d036      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a57      	ldr	r2, [pc, #348]	; (8006028 <HAL_DMA_IRQHandler+0x1c8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d031      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a56      	ldr	r2, [pc, #344]	; (800602c <HAL_DMA_IRQHandler+0x1cc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d02c      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a54      	ldr	r2, [pc, #336]	; (8006030 <HAL_DMA_IRQHandler+0x1d0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d027      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a53      	ldr	r2, [pc, #332]	; (8006034 <HAL_DMA_IRQHandler+0x1d4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d022      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a51      	ldr	r2, [pc, #324]	; (8006038 <HAL_DMA_IRQHandler+0x1d8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d01d      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a50      	ldr	r2, [pc, #320]	; (800603c <HAL_DMA_IRQHandler+0x1dc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d018      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a4e      	ldr	r2, [pc, #312]	; (8006040 <HAL_DMA_IRQHandler+0x1e0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a4d      	ldr	r2, [pc, #308]	; (8006044 <HAL_DMA_IRQHandler+0x1e4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a4b      	ldr	r2, [pc, #300]	; (8006048 <HAL_DMA_IRQHandler+0x1e8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a4a      	ldr	r2, [pc, #296]	; (800604c <HAL_DMA_IRQHandler+0x1ec>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <HAL_DMA_IRQHandler+0xd2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a48      	ldr	r2, [pc, #288]	; (8006050 <HAL_DMA_IRQHandler+0x1f0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d101      	bne.n	8005f36 <HAL_DMA_IRQHandler+0xd6>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <HAL_DMA_IRQHandler+0xd8>
 8005f36:	2300      	movs	r3, #0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 842b 	beq.w	8006794 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	2208      	movs	r2, #8
 8005f48:	409a      	lsls	r2, r3
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 80a2 	beq.w	8006098 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a2e      	ldr	r2, [pc, #184]	; (8006014 <HAL_DMA_IRQHandler+0x1b4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d04a      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a2d      	ldr	r2, [pc, #180]	; (8006018 <HAL_DMA_IRQHandler+0x1b8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d045      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2b      	ldr	r2, [pc, #172]	; (800601c <HAL_DMA_IRQHandler+0x1bc>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d040      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a2a      	ldr	r2, [pc, #168]	; (8006020 <HAL_DMA_IRQHandler+0x1c0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d03b      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a28      	ldr	r2, [pc, #160]	; (8006024 <HAL_DMA_IRQHandler+0x1c4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d036      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a27      	ldr	r2, [pc, #156]	; (8006028 <HAL_DMA_IRQHandler+0x1c8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d031      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a25      	ldr	r2, [pc, #148]	; (800602c <HAL_DMA_IRQHandler+0x1cc>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d02c      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a24      	ldr	r2, [pc, #144]	; (8006030 <HAL_DMA_IRQHandler+0x1d0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d027      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a22      	ldr	r2, [pc, #136]	; (8006034 <HAL_DMA_IRQHandler+0x1d4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d022      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a21      	ldr	r2, [pc, #132]	; (8006038 <HAL_DMA_IRQHandler+0x1d8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d01d      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1f      	ldr	r2, [pc, #124]	; (800603c <HAL_DMA_IRQHandler+0x1dc>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d018      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <HAL_DMA_IRQHandler+0x1e0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <HAL_DMA_IRQHandler+0x1e4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00e      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <HAL_DMA_IRQHandler+0x1e8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d009      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <HAL_DMA_IRQHandler+0x1ec>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x194>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a18      	ldr	r2, [pc, #96]	; (8006050 <HAL_DMA_IRQHandler+0x1f0>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d12f      	bne.n	8006054 <HAL_DMA_IRQHandler+0x1f4>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bf14      	ite	ne
 8006002:	2301      	movne	r3, #1
 8006004:	2300      	moveq	r3, #0
 8006006:	b2db      	uxtb	r3, r3
 8006008:	e02e      	b.n	8006068 <HAL_DMA_IRQHandler+0x208>
 800600a:	bf00      	nop
 800600c:	24000000 	.word	0x24000000
 8006010:	1b4e81b5 	.word	0x1b4e81b5
 8006014:	40020010 	.word	0x40020010
 8006018:	40020028 	.word	0x40020028
 800601c:	40020040 	.word	0x40020040
 8006020:	40020058 	.word	0x40020058
 8006024:	40020070 	.word	0x40020070
 8006028:	40020088 	.word	0x40020088
 800602c:	400200a0 	.word	0x400200a0
 8006030:	400200b8 	.word	0x400200b8
 8006034:	40020410 	.word	0x40020410
 8006038:	40020428 	.word	0x40020428
 800603c:	40020440 	.word	0x40020440
 8006040:	40020458 	.word	0x40020458
 8006044:	40020470 	.word	0x40020470
 8006048:	40020488 	.word	0x40020488
 800604c:	400204a0 	.word	0x400204a0
 8006050:	400204b8 	.word	0x400204b8
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	2b00      	cmp	r3, #0
 8006060:	bf14      	ite	ne
 8006062:	2301      	movne	r3, #1
 8006064:	2300      	moveq	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d015      	beq.n	8006098 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0204 	bic.w	r2, r2, #4
 800607a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	2208      	movs	r2, #8
 8006086:	409a      	lsls	r2, r3
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006090:	f043 0201 	orr.w	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	fa22 f303 	lsr.w	r3, r2, r3
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d06e      	beq.n	800618c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a69      	ldr	r2, [pc, #420]	; (8006258 <HAL_DMA_IRQHandler+0x3f8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d04a      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a67      	ldr	r2, [pc, #412]	; (800625c <HAL_DMA_IRQHandler+0x3fc>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d045      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a66      	ldr	r2, [pc, #408]	; (8006260 <HAL_DMA_IRQHandler+0x400>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d040      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a64      	ldr	r2, [pc, #400]	; (8006264 <HAL_DMA_IRQHandler+0x404>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d03b      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a63      	ldr	r2, [pc, #396]	; (8006268 <HAL_DMA_IRQHandler+0x408>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d036      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a61      	ldr	r2, [pc, #388]	; (800626c <HAL_DMA_IRQHandler+0x40c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d031      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a60      	ldr	r2, [pc, #384]	; (8006270 <HAL_DMA_IRQHandler+0x410>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d02c      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a5e      	ldr	r2, [pc, #376]	; (8006274 <HAL_DMA_IRQHandler+0x414>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d027      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a5d      	ldr	r2, [pc, #372]	; (8006278 <HAL_DMA_IRQHandler+0x418>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d022      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a5b      	ldr	r2, [pc, #364]	; (800627c <HAL_DMA_IRQHandler+0x41c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d01d      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a5a      	ldr	r2, [pc, #360]	; (8006280 <HAL_DMA_IRQHandler+0x420>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d018      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a58      	ldr	r2, [pc, #352]	; (8006284 <HAL_DMA_IRQHandler+0x424>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d013      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a57      	ldr	r2, [pc, #348]	; (8006288 <HAL_DMA_IRQHandler+0x428>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00e      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a55      	ldr	r2, [pc, #340]	; (800628c <HAL_DMA_IRQHandler+0x42c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d009      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a54      	ldr	r2, [pc, #336]	; (8006290 <HAL_DMA_IRQHandler+0x430>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d004      	beq.n	800614e <HAL_DMA_IRQHandler+0x2ee>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a52      	ldr	r2, [pc, #328]	; (8006294 <HAL_DMA_IRQHandler+0x434>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d10a      	bne.n	8006164 <HAL_DMA_IRQHandler+0x304>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006158:	2b00      	cmp	r3, #0
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e003      	b.n	800616c <HAL_DMA_IRQHandler+0x30c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2300      	movs	r3, #0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00d      	beq.n	800618c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	2201      	movs	r2, #1
 800617a:	409a      	lsls	r2, r3
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006184:	f043 0202 	orr.w	r2, r3, #2
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	2204      	movs	r2, #4
 8006196:	409a      	lsls	r2, r3
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 808f 	beq.w	80062c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a2c      	ldr	r2, [pc, #176]	; (8006258 <HAL_DMA_IRQHandler+0x3f8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d04a      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a2a      	ldr	r2, [pc, #168]	; (800625c <HAL_DMA_IRQHandler+0x3fc>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d045      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a29      	ldr	r2, [pc, #164]	; (8006260 <HAL_DMA_IRQHandler+0x400>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d040      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a27      	ldr	r2, [pc, #156]	; (8006264 <HAL_DMA_IRQHandler+0x404>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d03b      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a26      	ldr	r2, [pc, #152]	; (8006268 <HAL_DMA_IRQHandler+0x408>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d036      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a24      	ldr	r2, [pc, #144]	; (800626c <HAL_DMA_IRQHandler+0x40c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d031      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a23      	ldr	r2, [pc, #140]	; (8006270 <HAL_DMA_IRQHandler+0x410>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d02c      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a21      	ldr	r2, [pc, #132]	; (8006274 <HAL_DMA_IRQHandler+0x414>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d027      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a20      	ldr	r2, [pc, #128]	; (8006278 <HAL_DMA_IRQHandler+0x418>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d022      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1e      	ldr	r2, [pc, #120]	; (800627c <HAL_DMA_IRQHandler+0x41c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d01d      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1d      	ldr	r2, [pc, #116]	; (8006280 <HAL_DMA_IRQHandler+0x420>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d018      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1b      	ldr	r2, [pc, #108]	; (8006284 <HAL_DMA_IRQHandler+0x424>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d013      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1a      	ldr	r2, [pc, #104]	; (8006288 <HAL_DMA_IRQHandler+0x428>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00e      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a18      	ldr	r2, [pc, #96]	; (800628c <HAL_DMA_IRQHandler+0x42c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d009      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a17      	ldr	r2, [pc, #92]	; (8006290 <HAL_DMA_IRQHandler+0x430>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d004      	beq.n	8006242 <HAL_DMA_IRQHandler+0x3e2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a15      	ldr	r2, [pc, #84]	; (8006294 <HAL_DMA_IRQHandler+0x434>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d12a      	bne.n	8006298 <HAL_DMA_IRQHandler+0x438>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	bf14      	ite	ne
 8006250:	2301      	movne	r3, #1
 8006252:	2300      	moveq	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	e023      	b.n	80062a0 <HAL_DMA_IRQHandler+0x440>
 8006258:	40020010 	.word	0x40020010
 800625c:	40020028 	.word	0x40020028
 8006260:	40020040 	.word	0x40020040
 8006264:	40020058 	.word	0x40020058
 8006268:	40020070 	.word	0x40020070
 800626c:	40020088 	.word	0x40020088
 8006270:	400200a0 	.word	0x400200a0
 8006274:	400200b8 	.word	0x400200b8
 8006278:	40020410 	.word	0x40020410
 800627c:	40020428 	.word	0x40020428
 8006280:	40020440 	.word	0x40020440
 8006284:	40020458 	.word	0x40020458
 8006288:	40020470 	.word	0x40020470
 800628c:	40020488 	.word	0x40020488
 8006290:	400204a0 	.word	0x400204a0
 8006294:	400204b8 	.word	0x400204b8
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2300      	movs	r3, #0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00d      	beq.n	80062c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	2204      	movs	r2, #4
 80062ae:	409a      	lsls	r2, r3
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b8:	f043 0204 	orr.w	r2, r3, #4
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	2210      	movs	r2, #16
 80062ca:	409a      	lsls	r2, r3
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80a6 	beq.w	8006422 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a85      	ldr	r2, [pc, #532]	; (80064f0 <HAL_DMA_IRQHandler+0x690>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d04a      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a83      	ldr	r2, [pc, #524]	; (80064f4 <HAL_DMA_IRQHandler+0x694>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d045      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a82      	ldr	r2, [pc, #520]	; (80064f8 <HAL_DMA_IRQHandler+0x698>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d040      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a80      	ldr	r2, [pc, #512]	; (80064fc <HAL_DMA_IRQHandler+0x69c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d03b      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a7f      	ldr	r2, [pc, #508]	; (8006500 <HAL_DMA_IRQHandler+0x6a0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d036      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a7d      	ldr	r2, [pc, #500]	; (8006504 <HAL_DMA_IRQHandler+0x6a4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d031      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a7c      	ldr	r2, [pc, #496]	; (8006508 <HAL_DMA_IRQHandler+0x6a8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d02c      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a7a      	ldr	r2, [pc, #488]	; (800650c <HAL_DMA_IRQHandler+0x6ac>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d027      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a79      	ldr	r2, [pc, #484]	; (8006510 <HAL_DMA_IRQHandler+0x6b0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d022      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a77      	ldr	r2, [pc, #476]	; (8006514 <HAL_DMA_IRQHandler+0x6b4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01d      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a76      	ldr	r2, [pc, #472]	; (8006518 <HAL_DMA_IRQHandler+0x6b8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d018      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a74      	ldr	r2, [pc, #464]	; (800651c <HAL_DMA_IRQHandler+0x6bc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a73      	ldr	r2, [pc, #460]	; (8006520 <HAL_DMA_IRQHandler+0x6c0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00e      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a71      	ldr	r2, [pc, #452]	; (8006524 <HAL_DMA_IRQHandler+0x6c4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a70      	ldr	r2, [pc, #448]	; (8006528 <HAL_DMA_IRQHandler+0x6c8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_DMA_IRQHandler+0x516>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a6e      	ldr	r2, [pc, #440]	; (800652c <HAL_DMA_IRQHandler+0x6cc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d10a      	bne.n	800638c <HAL_DMA_IRQHandler+0x52c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e009      	b.n	80063a0 <HAL_DMA_IRQHandler+0x540>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	2b00      	cmp	r3, #0
 8006398:	bf14      	ite	ne
 800639a:	2301      	movne	r3, #1
 800639c:	2300      	moveq	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d03e      	beq.n	8006422 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2210      	movs	r2, #16
 80063ae:	409a      	lsls	r2, r3
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d018      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d108      	bne.n	80063e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d024      	beq.n	8006422 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
 80063e0:	e01f      	b.n	8006422 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01b      	beq.n	8006422 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
 80063f2:	e016      	b.n	8006422 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d107      	bne.n	8006412 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0208 	bic.w	r2, r2, #8
 8006410:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	2220      	movs	r2, #32
 800642c:	409a      	lsls	r2, r3
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	4013      	ands	r3, r2
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8110 	beq.w	8006658 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a2c      	ldr	r2, [pc, #176]	; (80064f0 <HAL_DMA_IRQHandler+0x690>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d04a      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a2b      	ldr	r2, [pc, #172]	; (80064f4 <HAL_DMA_IRQHandler+0x694>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d045      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a29      	ldr	r2, [pc, #164]	; (80064f8 <HAL_DMA_IRQHandler+0x698>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d040      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a28      	ldr	r2, [pc, #160]	; (80064fc <HAL_DMA_IRQHandler+0x69c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d03b      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a26      	ldr	r2, [pc, #152]	; (8006500 <HAL_DMA_IRQHandler+0x6a0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d036      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a25      	ldr	r2, [pc, #148]	; (8006504 <HAL_DMA_IRQHandler+0x6a4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d031      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a23      	ldr	r2, [pc, #140]	; (8006508 <HAL_DMA_IRQHandler+0x6a8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d02c      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a22      	ldr	r2, [pc, #136]	; (800650c <HAL_DMA_IRQHandler+0x6ac>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d027      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a20      	ldr	r2, [pc, #128]	; (8006510 <HAL_DMA_IRQHandler+0x6b0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d022      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1f      	ldr	r2, [pc, #124]	; (8006514 <HAL_DMA_IRQHandler+0x6b4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d01d      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1d      	ldr	r2, [pc, #116]	; (8006518 <HAL_DMA_IRQHandler+0x6b8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d018      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1c      	ldr	r2, [pc, #112]	; (800651c <HAL_DMA_IRQHandler+0x6bc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d013      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a1a      	ldr	r2, [pc, #104]	; (8006520 <HAL_DMA_IRQHandler+0x6c0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00e      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a19      	ldr	r2, [pc, #100]	; (8006524 <HAL_DMA_IRQHandler+0x6c4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d009      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a17      	ldr	r2, [pc, #92]	; (8006528 <HAL_DMA_IRQHandler+0x6c8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x678>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a16      	ldr	r2, [pc, #88]	; (800652c <HAL_DMA_IRQHandler+0x6cc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d12b      	bne.n	8006530 <HAL_DMA_IRQHandler+0x6d0>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	bf14      	ite	ne
 80064e6:	2301      	movne	r3, #1
 80064e8:	2300      	moveq	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	e02a      	b.n	8006544 <HAL_DMA_IRQHandler+0x6e4>
 80064ee:	bf00      	nop
 80064f0:	40020010 	.word	0x40020010
 80064f4:	40020028 	.word	0x40020028
 80064f8:	40020040 	.word	0x40020040
 80064fc:	40020058 	.word	0x40020058
 8006500:	40020070 	.word	0x40020070
 8006504:	40020088 	.word	0x40020088
 8006508:	400200a0 	.word	0x400200a0
 800650c:	400200b8 	.word	0x400200b8
 8006510:	40020410 	.word	0x40020410
 8006514:	40020428 	.word	0x40020428
 8006518:	40020440 	.word	0x40020440
 800651c:	40020458 	.word	0x40020458
 8006520:	40020470 	.word	0x40020470
 8006524:	40020488 	.word	0x40020488
 8006528:	400204a0 	.word	0x400204a0
 800652c:	400204b8 	.word	0x400204b8
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	bf14      	ite	ne
 800653e:	2301      	movne	r3, #1
 8006540:	2300      	moveq	r3, #0
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 8087 	beq.w	8006658 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654e:	f003 031f 	and.w	r3, r3, #31
 8006552:	2220      	movs	r2, #32
 8006554:	409a      	lsls	r2, r3
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b04      	cmp	r3, #4
 8006564:	d139      	bne.n	80065da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0216 	bic.w	r2, r2, #22
 8006574:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695a      	ldr	r2, [r3, #20]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006584:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d103      	bne.n	8006596 <HAL_DMA_IRQHandler+0x736>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0208 	bic.w	r2, r2, #8
 80065a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065aa:	f003 031f 	and.w	r3, r3, #31
 80065ae:	223f      	movs	r2, #63	; 0x3f
 80065b0:	409a      	lsls	r2, r3
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 834a 	beq.w	8006c64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
          }
          return;
 80065d8:	e344      	b.n	8006c64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d018      	beq.n	800661a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d108      	bne.n	8006608 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d02c      	beq.n	8006658 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3
 8006606:	e027      	b.n	8006658 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d023      	beq.n	8006658 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
 8006618:	e01e      	b.n	8006658 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10f      	bne.n	8006648 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0210 	bic.w	r2, r2, #16
 8006636:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8306 	beq.w	8006c6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 8088 	beq.w	8006780 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2204      	movs	r2, #4
 8006674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a7a      	ldr	r2, [pc, #488]	; (8006868 <HAL_DMA_IRQHandler+0xa08>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d04a      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a79      	ldr	r2, [pc, #484]	; (800686c <HAL_DMA_IRQHandler+0xa0c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d045      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a77      	ldr	r2, [pc, #476]	; (8006870 <HAL_DMA_IRQHandler+0xa10>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d040      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a76      	ldr	r2, [pc, #472]	; (8006874 <HAL_DMA_IRQHandler+0xa14>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d03b      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a74      	ldr	r2, [pc, #464]	; (8006878 <HAL_DMA_IRQHandler+0xa18>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d036      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a73      	ldr	r2, [pc, #460]	; (800687c <HAL_DMA_IRQHandler+0xa1c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d031      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a71      	ldr	r2, [pc, #452]	; (8006880 <HAL_DMA_IRQHandler+0xa20>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d02c      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a70      	ldr	r2, [pc, #448]	; (8006884 <HAL_DMA_IRQHandler+0xa24>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d027      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a6e      	ldr	r2, [pc, #440]	; (8006888 <HAL_DMA_IRQHandler+0xa28>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d022      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a6d      	ldr	r2, [pc, #436]	; (800688c <HAL_DMA_IRQHandler+0xa2c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d01d      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a6b      	ldr	r2, [pc, #428]	; (8006890 <HAL_DMA_IRQHandler+0xa30>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d018      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a6a      	ldr	r2, [pc, #424]	; (8006894 <HAL_DMA_IRQHandler+0xa34>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d013      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a68      	ldr	r2, [pc, #416]	; (8006898 <HAL_DMA_IRQHandler+0xa38>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00e      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a67      	ldr	r2, [pc, #412]	; (800689c <HAL_DMA_IRQHandler+0xa3c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d009      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a65      	ldr	r2, [pc, #404]	; (80068a0 <HAL_DMA_IRQHandler+0xa40>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_DMA_IRQHandler+0x8b8>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a64      	ldr	r2, [pc, #400]	; (80068a4 <HAL_DMA_IRQHandler+0xa44>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d108      	bne.n	800672a <HAL_DMA_IRQHandler+0x8ca>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	e007      	b.n	800673a <HAL_DMA_IRQHandler+0x8da>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0201 	bic.w	r2, r2, #1
 8006738:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3301      	adds	r3, #1
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006742:	429a      	cmp	r2, r3
 8006744:	d307      	bcc.n	8006756 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1f2      	bne.n	800673a <HAL_DMA_IRQHandler+0x8da>
 8006754:	e000      	b.n	8006758 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006756:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d004      	beq.n	8006778 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2203      	movs	r2, #3
 8006772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006776:	e003      	b.n	8006780 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8272 	beq.w	8006c6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
 8006792:	e26c      	b.n	8006c6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a43      	ldr	r2, [pc, #268]	; (80068a8 <HAL_DMA_IRQHandler+0xa48>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d022      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x984>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a42      	ldr	r2, [pc, #264]	; (80068ac <HAL_DMA_IRQHandler+0xa4c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d01d      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x984>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a40      	ldr	r2, [pc, #256]	; (80068b0 <HAL_DMA_IRQHandler+0xa50>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d018      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x984>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a3f      	ldr	r2, [pc, #252]	; (80068b4 <HAL_DMA_IRQHandler+0xa54>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d013      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x984>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a3d      	ldr	r2, [pc, #244]	; (80068b8 <HAL_DMA_IRQHandler+0xa58>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00e      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x984>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a3c      	ldr	r2, [pc, #240]	; (80068bc <HAL_DMA_IRQHandler+0xa5c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d009      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x984>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a3a      	ldr	r2, [pc, #232]	; (80068c0 <HAL_DMA_IRQHandler+0xa60>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x984>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a39      	ldr	r2, [pc, #228]	; (80068c4 <HAL_DMA_IRQHandler+0xa64>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d101      	bne.n	80067e8 <HAL_DMA_IRQHandler+0x988>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <HAL_DMA_IRQHandler+0x98a>
 80067e8:	2300      	movs	r3, #0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 823f 	beq.w	8006c6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	2204      	movs	r2, #4
 8006802:	409a      	lsls	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4013      	ands	r3, r2
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 80cd 	beq.w	80069a8 <HAL_DMA_IRQHandler+0xb48>
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 80c7 	beq.w	80069a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2204      	movs	r2, #4
 8006824:	409a      	lsls	r2, r3
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d049      	beq.n	80068c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8210 	beq.w	8006c68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006850:	e20a      	b.n	8006c68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 8206 	beq.w	8006c68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006864:	e200      	b.n	8006c68 <HAL_DMA_IRQHandler+0xe08>
 8006866:	bf00      	nop
 8006868:	40020010 	.word	0x40020010
 800686c:	40020028 	.word	0x40020028
 8006870:	40020040 	.word	0x40020040
 8006874:	40020058 	.word	0x40020058
 8006878:	40020070 	.word	0x40020070
 800687c:	40020088 	.word	0x40020088
 8006880:	400200a0 	.word	0x400200a0
 8006884:	400200b8 	.word	0x400200b8
 8006888:	40020410 	.word	0x40020410
 800688c:	40020428 	.word	0x40020428
 8006890:	40020440 	.word	0x40020440
 8006894:	40020458 	.word	0x40020458
 8006898:	40020470 	.word	0x40020470
 800689c:	40020488 	.word	0x40020488
 80068a0:	400204a0 	.word	0x400204a0
 80068a4:	400204b8 	.word	0x400204b8
 80068a8:	58025408 	.word	0x58025408
 80068ac:	5802541c 	.word	0x5802541c
 80068b0:	58025430 	.word	0x58025430
 80068b4:	58025444 	.word	0x58025444
 80068b8:	58025458 	.word	0x58025458
 80068bc:	5802546c 	.word	0x5802546c
 80068c0:	58025480 	.word	0x58025480
 80068c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d160      	bne.n	8006994 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a8c      	ldr	r2, [pc, #560]	; (8006b08 <HAL_DMA_IRQHandler+0xca8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d04a      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a8a      	ldr	r2, [pc, #552]	; (8006b0c <HAL_DMA_IRQHandler+0xcac>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d045      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a89      	ldr	r2, [pc, #548]	; (8006b10 <HAL_DMA_IRQHandler+0xcb0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d040      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a87      	ldr	r2, [pc, #540]	; (8006b14 <HAL_DMA_IRQHandler+0xcb4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d03b      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a86      	ldr	r2, [pc, #536]	; (8006b18 <HAL_DMA_IRQHandler+0xcb8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d036      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a84      	ldr	r2, [pc, #528]	; (8006b1c <HAL_DMA_IRQHandler+0xcbc>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d031      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a83      	ldr	r2, [pc, #524]	; (8006b20 <HAL_DMA_IRQHandler+0xcc0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d02c      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a81      	ldr	r2, [pc, #516]	; (8006b24 <HAL_DMA_IRQHandler+0xcc4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d027      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a80      	ldr	r2, [pc, #512]	; (8006b28 <HAL_DMA_IRQHandler+0xcc8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d022      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a7e      	ldr	r2, [pc, #504]	; (8006b2c <HAL_DMA_IRQHandler+0xccc>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01d      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a7d      	ldr	r2, [pc, #500]	; (8006b30 <HAL_DMA_IRQHandler+0xcd0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d018      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a7b      	ldr	r2, [pc, #492]	; (8006b34 <HAL_DMA_IRQHandler+0xcd4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d013      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a7a      	ldr	r2, [pc, #488]	; (8006b38 <HAL_DMA_IRQHandler+0xcd8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00e      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a78      	ldr	r2, [pc, #480]	; (8006b3c <HAL_DMA_IRQHandler+0xcdc>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d009      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a77      	ldr	r2, [pc, #476]	; (8006b40 <HAL_DMA_IRQHandler+0xce0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <HAL_DMA_IRQHandler+0xb12>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a75      	ldr	r2, [pc, #468]	; (8006b44 <HAL_DMA_IRQHandler+0xce4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d108      	bne.n	8006984 <HAL_DMA_IRQHandler+0xb24>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0208 	bic.w	r2, r2, #8
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e007      	b.n	8006994 <HAL_DMA_IRQHandler+0xb34>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0204 	bic.w	r2, r2, #4
 8006992:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8165 	beq.w	8006c68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069a6:	e15f      	b.n	8006c68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	f003 031f 	and.w	r3, r3, #31
 80069b0:	2202      	movs	r2, #2
 80069b2:	409a      	lsls	r2, r3
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	4013      	ands	r3, r2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80c5 	beq.w	8006b48 <HAL_DMA_IRQHandler+0xce8>
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 80bf 	beq.w	8006b48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ce:	f003 031f 	and.w	r3, r3, #31
 80069d2:	2202      	movs	r2, #2
 80069d4:	409a      	lsls	r2, r3
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d018      	beq.n	8006a16 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 813a 	beq.w	8006c6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a00:	e134      	b.n	8006c6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 8130 	beq.w	8006c6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a14:	e12a      	b.n	8006c6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f003 0320 	and.w	r3, r3, #32
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d168      	bne.n	8006af2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a38      	ldr	r2, [pc, #224]	; (8006b08 <HAL_DMA_IRQHandler+0xca8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d04a      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a37      	ldr	r2, [pc, #220]	; (8006b0c <HAL_DMA_IRQHandler+0xcac>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d045      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a35      	ldr	r2, [pc, #212]	; (8006b10 <HAL_DMA_IRQHandler+0xcb0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d040      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a34      	ldr	r2, [pc, #208]	; (8006b14 <HAL_DMA_IRQHandler+0xcb4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d03b      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a32      	ldr	r2, [pc, #200]	; (8006b18 <HAL_DMA_IRQHandler+0xcb8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d036      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a31      	ldr	r2, [pc, #196]	; (8006b1c <HAL_DMA_IRQHandler+0xcbc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d031      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a2f      	ldr	r2, [pc, #188]	; (8006b20 <HAL_DMA_IRQHandler+0xcc0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d02c      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a2e      	ldr	r2, [pc, #184]	; (8006b24 <HAL_DMA_IRQHandler+0xcc4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d027      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a2c      	ldr	r2, [pc, #176]	; (8006b28 <HAL_DMA_IRQHandler+0xcc8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d022      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a2b      	ldr	r2, [pc, #172]	; (8006b2c <HAL_DMA_IRQHandler+0xccc>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d01d      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a29      	ldr	r2, [pc, #164]	; (8006b30 <HAL_DMA_IRQHandler+0xcd0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d018      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a28      	ldr	r2, [pc, #160]	; (8006b34 <HAL_DMA_IRQHandler+0xcd4>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a26      	ldr	r2, [pc, #152]	; (8006b38 <HAL_DMA_IRQHandler+0xcd8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a25      	ldr	r2, [pc, #148]	; (8006b3c <HAL_DMA_IRQHandler+0xcdc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a23      	ldr	r2, [pc, #140]	; (8006b40 <HAL_DMA_IRQHandler+0xce0>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0xc60>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a22      	ldr	r2, [pc, #136]	; (8006b44 <HAL_DMA_IRQHandler+0xce4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d108      	bne.n	8006ad2 <HAL_DMA_IRQHandler+0xc72>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0214 	bic.w	r2, r2, #20
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	e007      	b.n	8006ae2 <HAL_DMA_IRQHandler+0xc82>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 020a 	bic.w	r2, r2, #10
 8006ae0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 80b8 	beq.w	8006c6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b04:	e0b2      	b.n	8006c6c <HAL_DMA_IRQHandler+0xe0c>
 8006b06:	bf00      	nop
 8006b08:	40020010 	.word	0x40020010
 8006b0c:	40020028 	.word	0x40020028
 8006b10:	40020040 	.word	0x40020040
 8006b14:	40020058 	.word	0x40020058
 8006b18:	40020070 	.word	0x40020070
 8006b1c:	40020088 	.word	0x40020088
 8006b20:	400200a0 	.word	0x400200a0
 8006b24:	400200b8 	.word	0x400200b8
 8006b28:	40020410 	.word	0x40020410
 8006b2c:	40020428 	.word	0x40020428
 8006b30:	40020440 	.word	0x40020440
 8006b34:	40020458 	.word	0x40020458
 8006b38:	40020470 	.word	0x40020470
 8006b3c:	40020488 	.word	0x40020488
 8006b40:	400204a0 	.word	0x400204a0
 8006b44:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b4c:	f003 031f 	and.w	r3, r3, #31
 8006b50:	2208      	movs	r2, #8
 8006b52:	409a      	lsls	r2, r3
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	4013      	ands	r3, r2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 8088 	beq.w	8006c6e <HAL_DMA_IRQHandler+0xe0e>
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8082 	beq.w	8006c6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a41      	ldr	r2, [pc, #260]	; (8006c74 <HAL_DMA_IRQHandler+0xe14>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d04a      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a3f      	ldr	r2, [pc, #252]	; (8006c78 <HAL_DMA_IRQHandler+0xe18>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d045      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a3e      	ldr	r2, [pc, #248]	; (8006c7c <HAL_DMA_IRQHandler+0xe1c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d040      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a3c      	ldr	r2, [pc, #240]	; (8006c80 <HAL_DMA_IRQHandler+0xe20>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d03b      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a3b      	ldr	r2, [pc, #236]	; (8006c84 <HAL_DMA_IRQHandler+0xe24>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d036      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a39      	ldr	r2, [pc, #228]	; (8006c88 <HAL_DMA_IRQHandler+0xe28>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d031      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a38      	ldr	r2, [pc, #224]	; (8006c8c <HAL_DMA_IRQHandler+0xe2c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d02c      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a36      	ldr	r2, [pc, #216]	; (8006c90 <HAL_DMA_IRQHandler+0xe30>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d027      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a35      	ldr	r2, [pc, #212]	; (8006c94 <HAL_DMA_IRQHandler+0xe34>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d022      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a33      	ldr	r2, [pc, #204]	; (8006c98 <HAL_DMA_IRQHandler+0xe38>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d01d      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a32      	ldr	r2, [pc, #200]	; (8006c9c <HAL_DMA_IRQHandler+0xe3c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d018      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a30      	ldr	r2, [pc, #192]	; (8006ca0 <HAL_DMA_IRQHandler+0xe40>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a2f      	ldr	r2, [pc, #188]	; (8006ca4 <HAL_DMA_IRQHandler+0xe44>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00e      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a2d      	ldr	r2, [pc, #180]	; (8006ca8 <HAL_DMA_IRQHandler+0xe48>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a2c      	ldr	r2, [pc, #176]	; (8006cac <HAL_DMA_IRQHandler+0xe4c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xdaa>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a2a      	ldr	r2, [pc, #168]	; (8006cb0 <HAL_DMA_IRQHandler+0xe50>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d108      	bne.n	8006c1c <HAL_DMA_IRQHandler+0xdbc>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 021c 	bic.w	r2, r2, #28
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	e007      	b.n	8006c2c <HAL_DMA_IRQHandler+0xdcc>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 020e 	bic.w	r2, r2, #14
 8006c2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	2201      	movs	r2, #1
 8006c36:	409a      	lsls	r2, r3
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
 8006c62:	e004      	b.n	8006c6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006c64:	bf00      	nop
 8006c66:	e002      	b.n	8006c6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c6e:	3728      	adds	r7, #40	; 0x28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40020010 	.word	0x40020010
 8006c78:	40020028 	.word	0x40020028
 8006c7c:	40020040 	.word	0x40020040
 8006c80:	40020058 	.word	0x40020058
 8006c84:	40020070 	.word	0x40020070
 8006c88:	40020088 	.word	0x40020088
 8006c8c:	400200a0 	.word	0x400200a0
 8006c90:	400200b8 	.word	0x400200b8
 8006c94:	40020410 	.word	0x40020410
 8006c98:	40020428 	.word	0x40020428
 8006c9c:	40020440 	.word	0x40020440
 8006ca0:	40020458 	.word	0x40020458
 8006ca4:	40020470 	.word	0x40020470
 8006ca8:	40020488 	.word	0x40020488
 8006cac:	400204a0 	.word	0x400204a0
 8006cb0:	400204b8 	.word	0x400204b8

08006cb4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ccc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a84      	ldr	r2, [pc, #528]	; (8006ee4 <DMA_SetConfig+0x230>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d072      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a82      	ldr	r2, [pc, #520]	; (8006ee8 <DMA_SetConfig+0x234>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d06d      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a81      	ldr	r2, [pc, #516]	; (8006eec <DMA_SetConfig+0x238>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d068      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a7f      	ldr	r2, [pc, #508]	; (8006ef0 <DMA_SetConfig+0x23c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d063      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a7e      	ldr	r2, [pc, #504]	; (8006ef4 <DMA_SetConfig+0x240>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d05e      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a7c      	ldr	r2, [pc, #496]	; (8006ef8 <DMA_SetConfig+0x244>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d059      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a7b      	ldr	r2, [pc, #492]	; (8006efc <DMA_SetConfig+0x248>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d054      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a79      	ldr	r2, [pc, #484]	; (8006f00 <DMA_SetConfig+0x24c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d04f      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a78      	ldr	r2, [pc, #480]	; (8006f04 <DMA_SetConfig+0x250>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d04a      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a76      	ldr	r2, [pc, #472]	; (8006f08 <DMA_SetConfig+0x254>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d045      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a75      	ldr	r2, [pc, #468]	; (8006f0c <DMA_SetConfig+0x258>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d040      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a73      	ldr	r2, [pc, #460]	; (8006f10 <DMA_SetConfig+0x25c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d03b      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a72      	ldr	r2, [pc, #456]	; (8006f14 <DMA_SetConfig+0x260>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d036      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a70      	ldr	r2, [pc, #448]	; (8006f18 <DMA_SetConfig+0x264>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d031      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a6f      	ldr	r2, [pc, #444]	; (8006f1c <DMA_SetConfig+0x268>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d02c      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a6d      	ldr	r2, [pc, #436]	; (8006f20 <DMA_SetConfig+0x26c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d027      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a6c      	ldr	r2, [pc, #432]	; (8006f24 <DMA_SetConfig+0x270>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d022      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a6a      	ldr	r2, [pc, #424]	; (8006f28 <DMA_SetConfig+0x274>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d01d      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a69      	ldr	r2, [pc, #420]	; (8006f2c <DMA_SetConfig+0x278>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d018      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a67      	ldr	r2, [pc, #412]	; (8006f30 <DMA_SetConfig+0x27c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d013      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a66      	ldr	r2, [pc, #408]	; (8006f34 <DMA_SetConfig+0x280>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00e      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a64      	ldr	r2, [pc, #400]	; (8006f38 <DMA_SetConfig+0x284>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d009      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a63      	ldr	r2, [pc, #396]	; (8006f3c <DMA_SetConfig+0x288>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d004      	beq.n	8006dbe <DMA_SetConfig+0x10a>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a61      	ldr	r2, [pc, #388]	; (8006f40 <DMA_SetConfig+0x28c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d101      	bne.n	8006dc2 <DMA_SetConfig+0x10e>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <DMA_SetConfig+0x110>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00d      	beq.n	8006de4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006dd0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d004      	beq.n	8006de4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006de2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a3e      	ldr	r2, [pc, #248]	; (8006ee4 <DMA_SetConfig+0x230>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d04a      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a3d      	ldr	r2, [pc, #244]	; (8006ee8 <DMA_SetConfig+0x234>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d045      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a3b      	ldr	r2, [pc, #236]	; (8006eec <DMA_SetConfig+0x238>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d040      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a3a      	ldr	r2, [pc, #232]	; (8006ef0 <DMA_SetConfig+0x23c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d03b      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a38      	ldr	r2, [pc, #224]	; (8006ef4 <DMA_SetConfig+0x240>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d036      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a37      	ldr	r2, [pc, #220]	; (8006ef8 <DMA_SetConfig+0x244>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d031      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a35      	ldr	r2, [pc, #212]	; (8006efc <DMA_SetConfig+0x248>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d02c      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a34      	ldr	r2, [pc, #208]	; (8006f00 <DMA_SetConfig+0x24c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d027      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a32      	ldr	r2, [pc, #200]	; (8006f04 <DMA_SetConfig+0x250>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d022      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a31      	ldr	r2, [pc, #196]	; (8006f08 <DMA_SetConfig+0x254>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d01d      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a2f      	ldr	r2, [pc, #188]	; (8006f0c <DMA_SetConfig+0x258>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d018      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a2e      	ldr	r2, [pc, #184]	; (8006f10 <DMA_SetConfig+0x25c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d013      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a2c      	ldr	r2, [pc, #176]	; (8006f14 <DMA_SetConfig+0x260>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d00e      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a2b      	ldr	r2, [pc, #172]	; (8006f18 <DMA_SetConfig+0x264>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d009      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a29      	ldr	r2, [pc, #164]	; (8006f1c <DMA_SetConfig+0x268>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d004      	beq.n	8006e84 <DMA_SetConfig+0x1d0>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a28      	ldr	r2, [pc, #160]	; (8006f20 <DMA_SetConfig+0x26c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d101      	bne.n	8006e88 <DMA_SetConfig+0x1d4>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <DMA_SetConfig+0x1d6>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d05a      	beq.n	8006f44 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e92:	f003 031f 	and.w	r3, r3, #31
 8006e96:	223f      	movs	r2, #63	; 0x3f
 8006e98:	409a      	lsls	r2, r3
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006eac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b40      	cmp	r3, #64	; 0x40
 8006ebc:	d108      	bne.n	8006ed0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ece:	e087      	b.n	8006fe0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	60da      	str	r2, [r3, #12]
}
 8006ee0:	e07e      	b.n	8006fe0 <DMA_SetConfig+0x32c>
 8006ee2:	bf00      	nop
 8006ee4:	40020010 	.word	0x40020010
 8006ee8:	40020028 	.word	0x40020028
 8006eec:	40020040 	.word	0x40020040
 8006ef0:	40020058 	.word	0x40020058
 8006ef4:	40020070 	.word	0x40020070
 8006ef8:	40020088 	.word	0x40020088
 8006efc:	400200a0 	.word	0x400200a0
 8006f00:	400200b8 	.word	0x400200b8
 8006f04:	40020410 	.word	0x40020410
 8006f08:	40020428 	.word	0x40020428
 8006f0c:	40020440 	.word	0x40020440
 8006f10:	40020458 	.word	0x40020458
 8006f14:	40020470 	.word	0x40020470
 8006f18:	40020488 	.word	0x40020488
 8006f1c:	400204a0 	.word	0x400204a0
 8006f20:	400204b8 	.word	0x400204b8
 8006f24:	58025408 	.word	0x58025408
 8006f28:	5802541c 	.word	0x5802541c
 8006f2c:	58025430 	.word	0x58025430
 8006f30:	58025444 	.word	0x58025444
 8006f34:	58025458 	.word	0x58025458
 8006f38:	5802546c 	.word	0x5802546c
 8006f3c:	58025480 	.word	0x58025480
 8006f40:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a28      	ldr	r2, [pc, #160]	; (8006fec <DMA_SetConfig+0x338>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d022      	beq.n	8006f94 <DMA_SetConfig+0x2e0>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a27      	ldr	r2, [pc, #156]	; (8006ff0 <DMA_SetConfig+0x33c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d01d      	beq.n	8006f94 <DMA_SetConfig+0x2e0>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a25      	ldr	r2, [pc, #148]	; (8006ff4 <DMA_SetConfig+0x340>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d018      	beq.n	8006f94 <DMA_SetConfig+0x2e0>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a24      	ldr	r2, [pc, #144]	; (8006ff8 <DMA_SetConfig+0x344>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d013      	beq.n	8006f94 <DMA_SetConfig+0x2e0>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a22      	ldr	r2, [pc, #136]	; (8006ffc <DMA_SetConfig+0x348>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00e      	beq.n	8006f94 <DMA_SetConfig+0x2e0>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a21      	ldr	r2, [pc, #132]	; (8007000 <DMA_SetConfig+0x34c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d009      	beq.n	8006f94 <DMA_SetConfig+0x2e0>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1f      	ldr	r2, [pc, #124]	; (8007004 <DMA_SetConfig+0x350>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <DMA_SetConfig+0x2e0>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	; (8007008 <DMA_SetConfig+0x354>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d101      	bne.n	8006f98 <DMA_SetConfig+0x2e4>
 8006f94:	2301      	movs	r3, #1
 8006f96:	e000      	b.n	8006f9a <DMA_SetConfig+0x2e6>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d020      	beq.n	8006fe0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa2:	f003 031f 	and.w	r3, r3, #31
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	409a      	lsls	r2, r3
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	2b40      	cmp	r3, #64	; 0x40
 8006fbc:	d108      	bne.n	8006fd0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	60da      	str	r2, [r3, #12]
}
 8006fce:	e007      	b.n	8006fe0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	60da      	str	r2, [r3, #12]
}
 8006fe0:	bf00      	nop
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	58025408 	.word	0x58025408
 8006ff0:	5802541c 	.word	0x5802541c
 8006ff4:	58025430 	.word	0x58025430
 8006ff8:	58025444 	.word	0x58025444
 8006ffc:	58025458 	.word	0x58025458
 8007000:	5802546c 	.word	0x5802546c
 8007004:	58025480 	.word	0x58025480
 8007008:	58025494 	.word	0x58025494

0800700c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a42      	ldr	r2, [pc, #264]	; (8007124 <DMA_CalcBaseAndBitshift+0x118>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d04a      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a41      	ldr	r2, [pc, #260]	; (8007128 <DMA_CalcBaseAndBitshift+0x11c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d045      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a3f      	ldr	r2, [pc, #252]	; (800712c <DMA_CalcBaseAndBitshift+0x120>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d040      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a3e      	ldr	r2, [pc, #248]	; (8007130 <DMA_CalcBaseAndBitshift+0x124>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d03b      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a3c      	ldr	r2, [pc, #240]	; (8007134 <DMA_CalcBaseAndBitshift+0x128>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d036      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a3b      	ldr	r2, [pc, #236]	; (8007138 <DMA_CalcBaseAndBitshift+0x12c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d031      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a39      	ldr	r2, [pc, #228]	; (800713c <DMA_CalcBaseAndBitshift+0x130>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d02c      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a38      	ldr	r2, [pc, #224]	; (8007140 <DMA_CalcBaseAndBitshift+0x134>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d027      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a36      	ldr	r2, [pc, #216]	; (8007144 <DMA_CalcBaseAndBitshift+0x138>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d022      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a35      	ldr	r2, [pc, #212]	; (8007148 <DMA_CalcBaseAndBitshift+0x13c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d01d      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a33      	ldr	r2, [pc, #204]	; (800714c <DMA_CalcBaseAndBitshift+0x140>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d018      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a32      	ldr	r2, [pc, #200]	; (8007150 <DMA_CalcBaseAndBitshift+0x144>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d013      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a30      	ldr	r2, [pc, #192]	; (8007154 <DMA_CalcBaseAndBitshift+0x148>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00e      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a2f      	ldr	r2, [pc, #188]	; (8007158 <DMA_CalcBaseAndBitshift+0x14c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d009      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a2d      	ldr	r2, [pc, #180]	; (800715c <DMA_CalcBaseAndBitshift+0x150>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d004      	beq.n	80070b4 <DMA_CalcBaseAndBitshift+0xa8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a2c      	ldr	r2, [pc, #176]	; (8007160 <DMA_CalcBaseAndBitshift+0x154>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d101      	bne.n	80070b8 <DMA_CalcBaseAndBitshift+0xac>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <DMA_CalcBaseAndBitshift+0xae>
 80070b8:	2300      	movs	r3, #0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d024      	beq.n	8007108 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	3b10      	subs	r3, #16
 80070c6:	4a27      	ldr	r2, [pc, #156]	; (8007164 <DMA_CalcBaseAndBitshift+0x158>)
 80070c8:	fba2 2303 	umull	r2, r3, r2, r3
 80070cc:	091b      	lsrs	r3, r3, #4
 80070ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	4a24      	ldr	r2, [pc, #144]	; (8007168 <DMA_CalcBaseAndBitshift+0x15c>)
 80070d8:	5cd3      	ldrb	r3, [r2, r3]
 80070da:	461a      	mov	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d908      	bls.n	80070f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	4b1f      	ldr	r3, [pc, #124]	; (800716c <DMA_CalcBaseAndBitshift+0x160>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	1d1a      	adds	r2, r3, #4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	659a      	str	r2, [r3, #88]	; 0x58
 80070f6:	e00d      	b.n	8007114 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	4b1b      	ldr	r3, [pc, #108]	; (800716c <DMA_CalcBaseAndBitshift+0x160>)
 8007100:	4013      	ands	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6593      	str	r3, [r2, #88]	; 0x58
 8007106:	e005      	b.n	8007114 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	40020010 	.word	0x40020010
 8007128:	40020028 	.word	0x40020028
 800712c:	40020040 	.word	0x40020040
 8007130:	40020058 	.word	0x40020058
 8007134:	40020070 	.word	0x40020070
 8007138:	40020088 	.word	0x40020088
 800713c:	400200a0 	.word	0x400200a0
 8007140:	400200b8 	.word	0x400200b8
 8007144:	40020410 	.word	0x40020410
 8007148:	40020428 	.word	0x40020428
 800714c:	40020440 	.word	0x40020440
 8007150:	40020458 	.word	0x40020458
 8007154:	40020470 	.word	0x40020470
 8007158:	40020488 	.word	0x40020488
 800715c:	400204a0 	.word	0x400204a0
 8007160:	400204b8 	.word	0x400204b8
 8007164:	aaaaaaab 	.word	0xaaaaaaab
 8007168:	0800f26c 	.word	0x0800f26c
 800716c:	fffffc00 	.word	0xfffffc00

08007170 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d120      	bne.n	80071c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007188:	2b03      	cmp	r3, #3
 800718a:	d858      	bhi.n	800723e <DMA_CheckFifoParam+0xce>
 800718c:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <DMA_CheckFifoParam+0x24>)
 800718e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007192:	bf00      	nop
 8007194:	080071a5 	.word	0x080071a5
 8007198:	080071b7 	.word	0x080071b7
 800719c:	080071a5 	.word	0x080071a5
 80071a0:	0800723f 	.word	0x0800723f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d048      	beq.n	8007242 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071b4:	e045      	b.n	8007242 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071be:	d142      	bne.n	8007246 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071c4:	e03f      	b.n	8007246 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ce:	d123      	bne.n	8007218 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d838      	bhi.n	800724a <DMA_CheckFifoParam+0xda>
 80071d8:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <DMA_CheckFifoParam+0x70>)
 80071da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071de:	bf00      	nop
 80071e0:	080071f1 	.word	0x080071f1
 80071e4:	080071f7 	.word	0x080071f7
 80071e8:	080071f1 	.word	0x080071f1
 80071ec:	08007209 	.word	0x08007209
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]
        break;
 80071f4:	e030      	b.n	8007258 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d025      	beq.n	800724e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007206:	e022      	b.n	800724e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007210:	d11f      	bne.n	8007252 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007216:	e01c      	b.n	8007252 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	2b02      	cmp	r3, #2
 800721e:	d902      	bls.n	8007226 <DMA_CheckFifoParam+0xb6>
 8007220:	2b03      	cmp	r3, #3
 8007222:	d003      	beq.n	800722c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007224:	e018      	b.n	8007258 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	73fb      	strb	r3, [r7, #15]
        break;
 800722a:	e015      	b.n	8007258 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00e      	beq.n	8007256 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
    break;
 800723c:	e00b      	b.n	8007256 <DMA_CheckFifoParam+0xe6>
        break;
 800723e:	bf00      	nop
 8007240:	e00a      	b.n	8007258 <DMA_CheckFifoParam+0xe8>
        break;
 8007242:	bf00      	nop
 8007244:	e008      	b.n	8007258 <DMA_CheckFifoParam+0xe8>
        break;
 8007246:	bf00      	nop
 8007248:	e006      	b.n	8007258 <DMA_CheckFifoParam+0xe8>
        break;
 800724a:	bf00      	nop
 800724c:	e004      	b.n	8007258 <DMA_CheckFifoParam+0xe8>
        break;
 800724e:	bf00      	nop
 8007250:	e002      	b.n	8007258 <DMA_CheckFifoParam+0xe8>
        break;
 8007252:	bf00      	nop
 8007254:	e000      	b.n	8007258 <DMA_CheckFifoParam+0xe8>
    break;
 8007256:	bf00      	nop
    }
  }

  return status;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop

08007268 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a38      	ldr	r2, [pc, #224]	; (800735c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d022      	beq.n	80072c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a36      	ldr	r2, [pc, #216]	; (8007360 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d01d      	beq.n	80072c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a35      	ldr	r2, [pc, #212]	; (8007364 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d018      	beq.n	80072c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a33      	ldr	r2, [pc, #204]	; (8007368 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d013      	beq.n	80072c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a32      	ldr	r2, [pc, #200]	; (800736c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00e      	beq.n	80072c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a30      	ldr	r2, [pc, #192]	; (8007370 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d009      	beq.n	80072c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a2f      	ldr	r2, [pc, #188]	; (8007374 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d004      	beq.n	80072c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a2d      	ldr	r2, [pc, #180]	; (8007378 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d101      	bne.n	80072ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80072ca:	2300      	movs	r3, #0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01a      	beq.n	8007306 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	3b08      	subs	r3, #8
 80072d8:	4a28      	ldr	r2, [pc, #160]	; (800737c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80072da:	fba2 2303 	umull	r2, r3, r2, r3
 80072de:	091b      	lsrs	r3, r3, #4
 80072e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	4b26      	ldr	r3, [pc, #152]	; (8007380 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	461a      	mov	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a24      	ldr	r2, [pc, #144]	; (8007384 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80072f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	2201      	movs	r2, #1
 80072fe:	409a      	lsls	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007304:	e024      	b.n	8007350 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	3b10      	subs	r3, #16
 800730e:	4a1e      	ldr	r2, [pc, #120]	; (8007388 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007310:	fba2 2303 	umull	r2, r3, r2, r3
 8007314:	091b      	lsrs	r3, r3, #4
 8007316:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4a1c      	ldr	r2, [pc, #112]	; (800738c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d806      	bhi.n	800732e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	4a1b      	ldr	r2, [pc, #108]	; (8007390 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d902      	bls.n	800732e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3308      	adds	r3, #8
 800732c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4b18      	ldr	r3, [pc, #96]	; (8007394 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a16      	ldr	r2, [pc, #88]	; (8007398 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007340:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f003 031f 	and.w	r3, r3, #31
 8007348:	2201      	movs	r2, #1
 800734a:	409a      	lsls	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	58025408 	.word	0x58025408
 8007360:	5802541c 	.word	0x5802541c
 8007364:	58025430 	.word	0x58025430
 8007368:	58025444 	.word	0x58025444
 800736c:	58025458 	.word	0x58025458
 8007370:	5802546c 	.word	0x5802546c
 8007374:	58025480 	.word	0x58025480
 8007378:	58025494 	.word	0x58025494
 800737c:	cccccccd 	.word	0xcccccccd
 8007380:	16009600 	.word	0x16009600
 8007384:	58025880 	.word	0x58025880
 8007388:	aaaaaaab 	.word	0xaaaaaaab
 800738c:	400204b8 	.word	0x400204b8
 8007390:	4002040f 	.word	0x4002040f
 8007394:	10008200 	.word	0x10008200
 8007398:	40020880 	.word	0x40020880

0800739c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d04a      	beq.n	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d847      	bhi.n	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a25      	ldr	r2, [pc, #148]	; (8007454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d022      	beq.n	8007408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a24      	ldr	r2, [pc, #144]	; (8007458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d01d      	beq.n	8007408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a22      	ldr	r2, [pc, #136]	; (800745c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d018      	beq.n	8007408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a21      	ldr	r2, [pc, #132]	; (8007460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d013      	beq.n	8007408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1f      	ldr	r2, [pc, #124]	; (8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00e      	beq.n	8007408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1e      	ldr	r2, [pc, #120]	; (8007468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d009      	beq.n	8007408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1c      	ldr	r2, [pc, #112]	; (800746c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d004      	beq.n	8007408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1b      	ldr	r2, [pc, #108]	; (8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d101      	bne.n	800740c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800740c:	2300      	movs	r3, #0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4b17      	ldr	r3, [pc, #92]	; (8007474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007416:	4413      	add	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a15      	ldr	r2, [pc, #84]	; (8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007424:	671a      	str	r2, [r3, #112]	; 0x70
 8007426:	e009      	b.n	800743c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4b14      	ldr	r3, [pc, #80]	; (800747c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	461a      	mov	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a11      	ldr	r2, [pc, #68]	; (8007480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800743a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3b01      	subs	r3, #1
 8007440:	2201      	movs	r2, #1
 8007442:	409a      	lsls	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007448:	bf00      	nop
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	58025408 	.word	0x58025408
 8007458:	5802541c 	.word	0x5802541c
 800745c:	58025430 	.word	0x58025430
 8007460:	58025444 	.word	0x58025444
 8007464:	58025458 	.word	0x58025458
 8007468:	5802546c 	.word	0x5802546c
 800746c:	58025480 	.word	0x58025480
 8007470:	58025494 	.word	0x58025494
 8007474:	1600963f 	.word	0x1600963f
 8007478:	58025940 	.word	0x58025940
 800747c:	1000823f 	.word	0x1000823f
 8007480:	40020940 	.word	0x40020940

08007484 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e0c6      	b.n	8007624 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d102      	bne.n	80074a4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fb f978 	bl	8002794 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2223      	movs	r2, #35	; 0x23
 80074a8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074aa:	4b60      	ldr	r3, [pc, #384]	; (800762c <HAL_ETH_Init+0x1a8>)
 80074ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074b0:	4a5e      	ldr	r2, [pc, #376]	; (800762c <HAL_ETH_Init+0x1a8>)
 80074b2:	f043 0302 	orr.w	r3, r3, #2
 80074b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80074ba:	4b5c      	ldr	r3, [pc, #368]	; (800762c <HAL_ETH_Init+0x1a8>)
 80074bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	60bb      	str	r3, [r7, #8]
 80074c6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	7a1b      	ldrb	r3, [r3, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d103      	bne.n	80074d8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80074d0:	2000      	movs	r0, #0
 80074d2:	f7fc f8dd 	bl	8003690 <HAL_SYSCFG_ETHInterfaceSelect>
 80074d6:	e003      	b.n	80074e0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80074d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80074dc:	f7fc f8d8 	bl	8003690 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074f8:	f7fc f88e 	bl	8003618 <HAL_GetTick>
 80074fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80074fe:	e00f      	b.n	8007520 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8007500:	f7fc f88a 	bl	8003618 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800750e:	d907      	bls.n	8007520 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2204      	movs	r2, #4
 8007514:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	22e0      	movs	r2, #224	; 0xe0
 800751a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e081      	b.n	8007624 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e6      	bne.n	8007500 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fac0 	bl	8007ab8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8007538:	f001 fe70 	bl	800921c <HAL_RCC_GetHCLKFreq>
 800753c:	4603      	mov	r3, r0
 800753e:	4a3c      	ldr	r2, [pc, #240]	; (8007630 <HAL_ETH_Init+0x1ac>)
 8007540:	fba2 2303 	umull	r2, r3, r2, r3
 8007544:	0c9a      	lsrs	r2, r3, #18
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3a01      	subs	r2, #1
 800754c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fa13 	bl	800797c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800756c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007570:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	22e0      	movs	r2, #224	; 0xe0
 8007588:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e04a      	b.n	8007624 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	f241 1308 	movw	r3, #4360	; 0x1108
 8007596:	4413      	add	r3, r2
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4b26      	ldr	r3, [pc, #152]	; (8007634 <HAL_ETH_Init+0x1b0>)
 800759c:	4013      	ands	r3, r2
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	6952      	ldr	r2, [r2, #20]
 80075a2:	0052      	lsls	r2, r2, #1
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	6809      	ldr	r1, [r1, #0]
 80075a8:	431a      	orrs	r2, r3
 80075aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80075ae:	440b      	add	r3, r1
 80075b0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fad8 	bl	8007b68 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fb1c 	bl	8007bf6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	3305      	adds	r3, #5
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	021a      	lsls	r2, r3, #8
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	4619      	mov	r1, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	3303      	adds	r3, #3
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	061a      	lsls	r2, r3, #24
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	3302      	adds	r3, #2
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	041b      	lsls	r3, r3, #16
 80075f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	3301      	adds	r3, #1
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80075fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800760a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800760c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2210      	movs	r2, #16
 800761a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2210      	movs	r2, #16
 8007620:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	58024400 	.word	0x58024400
 8007630:	431bde83 	.word	0x431bde83
 8007634:	ffff8001 	.word	0xffff8001

08007638 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800764a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	791b      	ldrb	r3, [r3, #4]
 8007650:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8007652:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	7b1b      	ldrb	r3, [r3, #12]
 8007658:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800765a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	7b5b      	ldrb	r3, [r3, #13]
 8007660:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007662:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	7b9b      	ldrb	r3, [r3, #14]
 8007668:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800766a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	7bdb      	ldrb	r3, [r3, #15]
 8007670:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007672:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	7c12      	ldrb	r2, [r2, #16]
 8007678:	2a00      	cmp	r2, #0
 800767a:	d102      	bne.n	8007682 <ETH_SetMACConfig+0x4a>
 800767c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007680:	e000      	b.n	8007684 <ETH_SetMACConfig+0x4c>
 8007682:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007684:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	7c52      	ldrb	r2, [r2, #17]
 800768a:	2a00      	cmp	r2, #0
 800768c:	d102      	bne.n	8007694 <ETH_SetMACConfig+0x5c>
 800768e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007692:	e000      	b.n	8007696 <ETH_SetMACConfig+0x5e>
 8007694:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007696:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	7c9b      	ldrb	r3, [r3, #18]
 800769c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800769e:	431a      	orrs	r2, r3
                                macconf->Speed |
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80076a4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80076aa:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	7f1b      	ldrb	r3, [r3, #28]
 80076b0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80076b2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	7f5b      	ldrb	r3, [r3, #29]
 80076b8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80076ba:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	7f92      	ldrb	r2, [r2, #30]
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	d102      	bne.n	80076ca <ETH_SetMACConfig+0x92>
 80076c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076c8:	e000      	b.n	80076cc <ETH_SetMACConfig+0x94>
 80076ca:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80076cc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	7fdb      	ldrb	r3, [r3, #31]
 80076d2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80076d4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80076dc:	2a00      	cmp	r2, #0
 80076de:	d102      	bne.n	80076e6 <ETH_SetMACConfig+0xae>
 80076e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076e4:	e000      	b.n	80076e8 <ETH_SetMACConfig+0xb0>
 80076e6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80076e8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80076ee:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076f6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80076f8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	4b56      	ldr	r3, [pc, #344]	; (8007864 <ETH_SetMACConfig+0x22c>)
 800770a:	4013      	ands	r3, r2
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	68f9      	ldr	r1, [r7, #12]
 8007712:	430b      	orrs	r3, r1
 8007714:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007722:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007724:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800772c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800772e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007736:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8007738:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007740:	2a00      	cmp	r2, #0
 8007742:	d102      	bne.n	800774a <ETH_SetMACConfig+0x112>
 8007744:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007748:	e000      	b.n	800774c <ETH_SetMACConfig+0x114>
 800774a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800774c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	4b42      	ldr	r3, [pc, #264]	; (8007868 <ETH_SetMACConfig+0x230>)
 800775e:	4013      	ands	r3, r2
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	68f9      	ldr	r1, [r7, #12]
 8007766:	430b      	orrs	r3, r1
 8007768:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007770:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	4b3a      	ldr	r3, [pc, #232]	; (800786c <ETH_SetMACConfig+0x234>)
 8007782:	4013      	ands	r3, r2
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6812      	ldr	r2, [r2, #0]
 8007788:	68f9      	ldr	r1, [r7, #12]
 800778a:	430b      	orrs	r3, r1
 800778c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007794:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800779a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80077a2:	2a00      	cmp	r2, #0
 80077a4:	d101      	bne.n	80077aa <ETH_SetMACConfig+0x172>
 80077a6:	2280      	movs	r2, #128	; 0x80
 80077a8:	e000      	b.n	80077ac <ETH_SetMACConfig+0x174>
 80077aa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80077ac:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077be:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80077c2:	4013      	ands	r3, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	68f9      	ldr	r1, [r7, #12]
 80077ca:	430b      	orrs	r3, r1
 80077cc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80077d4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80077dc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ea:	f023 0103 	bic.w	r1, r3, #3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8007802:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800781e:	2a00      	cmp	r2, #0
 8007820:	d101      	bne.n	8007826 <ETH_SetMACConfig+0x1ee>
 8007822:	2240      	movs	r2, #64	; 0x40
 8007824:	e000      	b.n	8007828 <ETH_SetMACConfig+0x1f0>
 8007826:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007828:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007830:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007832:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800783a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800783c:	4313      	orrs	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007848:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	430a      	orrs	r2, r1
 8007854:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8007858:	bf00      	nop
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	00048083 	.word	0x00048083
 8007868:	c0f88000 	.word	0xc0f88000
 800786c:	fffffef0 	.word	0xfffffef0

08007870 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	4b38      	ldr	r3, [pc, #224]	; (8007968 <ETH_SetDMAConfig+0xf8>)
 8007886:	4013      	ands	r3, r2
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	6812      	ldr	r2, [r2, #0]
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	6809      	ldr	r1, [r1, #0]
 8007890:	431a      	orrs	r2, r3
 8007892:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8007896:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	791b      	ldrb	r3, [r3, #4]
 800789c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80078a2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	7b1b      	ldrb	r3, [r3, #12]
 80078a8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	f241 0304 	movw	r3, #4100	; 0x1004
 80078b6:	4413      	add	r3, r2
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	4b2c      	ldr	r3, [pc, #176]	; (800796c <ETH_SetDMAConfig+0xfc>)
 80078bc:	4013      	ands	r3, r2
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6811      	ldr	r1, [r2, #0]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	431a      	orrs	r2, r3
 80078c6:	f241 0304 	movw	r3, #4100	; 0x1004
 80078ca:	440b      	add	r3, r1
 80078cc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	7b5b      	ldrb	r3, [r3, #13]
 80078d2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4b22      	ldr	r3, [pc, #136]	; (8007970 <ETH_SetDMAConfig+0x100>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6811      	ldr	r1, [r2, #0]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	431a      	orrs	r2, r3
 80078f2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80078f6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	7d1b      	ldrb	r3, [r3, #20]
 8007900:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8007902:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	7f5b      	ldrb	r3, [r3, #29]
 8007908:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	f241 1304 	movw	r3, #4356	; 0x1104
 8007916:	4413      	add	r3, r2
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4b16      	ldr	r3, [pc, #88]	; (8007974 <ETH_SetDMAConfig+0x104>)
 800791c:	4013      	ands	r3, r2
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	6811      	ldr	r1, [r2, #0]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	431a      	orrs	r2, r3
 8007926:	f241 1304 	movw	r3, #4356	; 0x1104
 800792a:	440b      	add	r3, r1
 800792c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	7f1b      	ldrb	r3, [r3, #28]
 8007932:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	f241 1308 	movw	r3, #4360	; 0x1108
 8007944:	4413      	add	r3, r2
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	4b0b      	ldr	r3, [pc, #44]	; (8007978 <ETH_SetDMAConfig+0x108>)
 800794a:	4013      	ands	r3, r2
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6811      	ldr	r1, [r2, #0]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	431a      	orrs	r2, r3
 8007954:	f241 1308 	movw	r3, #4360	; 0x1108
 8007958:	440b      	add	r3, r1
 800795a:	601a      	str	r2, [r3, #0]
}
 800795c:	bf00      	nop
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	ffff87fd 	.word	0xffff87fd
 800796c:	ffff2ffe 	.word	0xffff2ffe
 8007970:	fffec000 	.word	0xfffec000
 8007974:	ffc0efef 	.word	0xffc0efef
 8007978:	7fc0ffff 	.word	0x7fc0ffff

0800797c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b0a4      	sub	sp, #144	; 0x90
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007984:	2301      	movs	r3, #1
 8007986:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800798a:	2300      	movs	r3, #0
 800798c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800798e:	2300      	movs	r3, #0
 8007990:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007994:	2300      	movs	r3, #0
 8007996:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800799a:	2301      	movs	r3, #1
 800799c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80079b2:	2301      	movs	r3, #1
 80079b4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80079b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079bc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80079be:	2300      	movs	r3, #0
 80079c0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80079ce:	2300      	movs	r3, #0
 80079d0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80079d4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80079d8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80079da:	2300      	movs	r3, #0
 80079dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80079e0:	2300      	movs	r3, #0
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80079e4:	2301      	movs	r3, #1
 80079e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80079f0:	2300      	movs	r3, #0
 80079f2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80079f6:	2300      	movs	r3, #0
 80079f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80079fe:	2300      	movs	r3, #0
 8007a00:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8007a02:	2300      	movs	r3, #0
 8007a04:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007a14:	2320      	movs	r3, #32
 8007a16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007a20:	2300      	movs	r3, #0
 8007a22:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8007a26:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007a2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a30:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8007a32:	2300      	movs	r3, #0
 8007a34:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007a38:	2302      	movs	r3, #2
 8007a3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007a44:	2300      	movs	r3, #0
 8007a46:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8007a56:	2300      	movs	r3, #0
 8007a58:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fde6 	bl	8007638 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007a70:	2301      	movs	r3, #1
 8007a72:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8007a82:	2300      	movs	r3, #0
 8007a84:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007a86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007a8a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007a94:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8007a9c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007aa0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007aa2:	f107 0308 	add.w	r3, r7, #8
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff fee1 	bl	8007870 <ETH_SetDMAConfig>
}
 8007aae:	bf00      	nop
 8007ab0:	3790      	adds	r7, #144	; 0x90
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ad0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007ad2:	f001 fba3 	bl	800921c <HAL_RCC_GetHCLKFreq>
 8007ad6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	4a1e      	ldr	r2, [pc, #120]	; (8007b54 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d908      	bls.n	8007af2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	4a1d      	ldr	r2, [pc, #116]	; (8007b58 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d804      	bhi.n	8007af2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	e027      	b.n	8007b42 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	4a18      	ldr	r2, [pc, #96]	; (8007b58 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d908      	bls.n	8007b0c <ETH_MAC_MDIO_ClkConfig+0x54>
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	4a17      	ldr	r2, [pc, #92]	; (8007b5c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d204      	bcs.n	8007b0c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b08:	60fb      	str	r3, [r7, #12]
 8007b0a:	e01a      	b.n	8007b42 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4a13      	ldr	r2, [pc, #76]	; (8007b5c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d303      	bcc.n	8007b1c <ETH_MAC_MDIO_ClkConfig+0x64>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4a12      	ldr	r2, [pc, #72]	; (8007b60 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d911      	bls.n	8007b40 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	4a10      	ldr	r2, [pc, #64]	; (8007b60 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d908      	bls.n	8007b36 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4a0f      	ldr	r2, [pc, #60]	; (8007b64 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d804      	bhi.n	8007b36 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e005      	b.n	8007b42 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	e000      	b.n	8007b42 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007b40:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007b4c:	bf00      	nop
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	01312cff 	.word	0x01312cff
 8007b58:	02160ebf 	.word	0x02160ebf
 8007b5c:	03938700 	.word	0x03938700
 8007b60:	05f5e0ff 	.word	0x05f5e0ff
 8007b64:	08f0d17f 	.word	0x08f0d17f

08007b68 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	e01d      	b.n	8007bb2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68d9      	ldr	r1, [r3, #12]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	4413      	add	r3, r2
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	440b      	add	r3, r1
 8007b86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2200      	movs	r2, #0
 8007b92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2200      	movs	r2, #0
 8007b98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	3206      	adds	r2, #6
 8007ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d9de      	bls.n	8007b76 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	f241 132c 	movw	r3, #4396	; 0x112c
 8007bc6:	4413      	add	r3, r2
 8007bc8:	2203      	movs	r2, #3
 8007bca:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68d9      	ldr	r1, [r3, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	f241 1314 	movw	r3, #4372	; 0x1114
 8007bd8:	4413      	add	r3, r2
 8007bda:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8007be8:	601a      	str	r2, [r3, #0]
}
 8007bea:	bf00      	nop
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b085      	sub	sp, #20
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	e024      	b.n	8007c4e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6919      	ldr	r1, [r3, #16]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	4413      	add	r3, r2
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	440b      	add	r3, r1
 8007c14:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	2200      	movs	r2, #0
 8007c26:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2200      	movs	r2, #0
 8007c32:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3310      	adds	r3, #16
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d9d7      	bls.n	8007c04 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	f241 1330 	movw	r3, #4400	; 0x1130
 8007c7a:	4413      	add	r3, r2
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6919      	ldr	r1, [r3, #16]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	f241 131c 	movw	r3, #4380	; 0x111c
 8007c8c:	4413      	add	r3, r2
 8007c8e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	f241 1328 	movw	r3, #4392	; 0x1128
 8007ca0:	4413      	add	r3, r2
 8007ca2:	6019      	str	r1, [r3, #0]
}
 8007ca4:	bf00      	nop
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b089      	sub	sp, #36	; 0x24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007cbe:	4b89      	ldr	r3, [pc, #548]	; (8007ee4 <HAL_GPIO_Init+0x234>)
 8007cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cc2:	e194      	b.n	8007fee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	2101      	movs	r1, #1
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 8186 	beq.w	8007fe8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d00b      	beq.n	8007cfc <HAL_GPIO_Init+0x4c>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d007      	beq.n	8007cfc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cf0:	2b11      	cmp	r3, #17
 8007cf2:	d003      	beq.n	8007cfc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b12      	cmp	r3, #18
 8007cfa:	d130      	bne.n	8007d5e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	2203      	movs	r2, #3
 8007d08:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	4013      	ands	r3, r2
 8007d12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d32:	2201      	movs	r2, #1
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	091b      	lsrs	r3, r3, #4
 8007d48:	f003 0201 	and.w	r2, r3, #1
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	2203      	movs	r2, #3
 8007d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6e:	43db      	mvns	r3, r3
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	4013      	ands	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	005b      	lsls	r3, r3, #1
 8007d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	69ba      	ldr	r2, [r7, #24]
 8007d8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d003      	beq.n	8007d9e <HAL_GPIO_Init+0xee>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2b12      	cmp	r3, #18
 8007d9c:	d123      	bne.n	8007de6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	08da      	lsrs	r2, r3, #3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3208      	adds	r2, #8
 8007da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	f003 0307 	and.w	r3, r3, #7
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	220f      	movs	r2, #15
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	43db      	mvns	r3, r3
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	f003 0307 	and.w	r3, r3, #7
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	08da      	lsrs	r2, r3, #3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3208      	adds	r2, #8
 8007de0:	69b9      	ldr	r1, [r7, #24]
 8007de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	2203      	movs	r2, #3
 8007df2:	fa02 f303 	lsl.w	r3, r2, r3
 8007df6:	43db      	mvns	r3, r3
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f003 0203 	and.w	r2, r3, #3
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 80e0 	beq.w	8007fe8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e28:	4b2f      	ldr	r3, [pc, #188]	; (8007ee8 <HAL_GPIO_Init+0x238>)
 8007e2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e2e:	4a2e      	ldr	r2, [pc, #184]	; (8007ee8 <HAL_GPIO_Init+0x238>)
 8007e30:	f043 0302 	orr.w	r3, r3, #2
 8007e34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e38:	4b2b      	ldr	r3, [pc, #172]	; (8007ee8 <HAL_GPIO_Init+0x238>)
 8007e3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e46:	4a29      	ldr	r2, [pc, #164]	; (8007eec <HAL_GPIO_Init+0x23c>)
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	089b      	lsrs	r3, r3, #2
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	220f      	movs	r2, #15
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	43db      	mvns	r3, r3
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	4013      	ands	r3, r2
 8007e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a20      	ldr	r2, [pc, #128]	; (8007ef0 <HAL_GPIO_Init+0x240>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d052      	beq.n	8007f18 <HAL_GPIO_Init+0x268>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a1f      	ldr	r2, [pc, #124]	; (8007ef4 <HAL_GPIO_Init+0x244>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d031      	beq.n	8007ede <HAL_GPIO_Init+0x22e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a1e      	ldr	r2, [pc, #120]	; (8007ef8 <HAL_GPIO_Init+0x248>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d02b      	beq.n	8007eda <HAL_GPIO_Init+0x22a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a1d      	ldr	r2, [pc, #116]	; (8007efc <HAL_GPIO_Init+0x24c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d025      	beq.n	8007ed6 <HAL_GPIO_Init+0x226>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a1c      	ldr	r2, [pc, #112]	; (8007f00 <HAL_GPIO_Init+0x250>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d01f      	beq.n	8007ed2 <HAL_GPIO_Init+0x222>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a1b      	ldr	r2, [pc, #108]	; (8007f04 <HAL_GPIO_Init+0x254>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d019      	beq.n	8007ece <HAL_GPIO_Init+0x21e>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a1a      	ldr	r2, [pc, #104]	; (8007f08 <HAL_GPIO_Init+0x258>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d013      	beq.n	8007eca <HAL_GPIO_Init+0x21a>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a19      	ldr	r2, [pc, #100]	; (8007f0c <HAL_GPIO_Init+0x25c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00d      	beq.n	8007ec6 <HAL_GPIO_Init+0x216>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a18      	ldr	r2, [pc, #96]	; (8007f10 <HAL_GPIO_Init+0x260>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d007      	beq.n	8007ec2 <HAL_GPIO_Init+0x212>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a17      	ldr	r2, [pc, #92]	; (8007f14 <HAL_GPIO_Init+0x264>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d101      	bne.n	8007ebe <HAL_GPIO_Init+0x20e>
 8007eba:	2309      	movs	r3, #9
 8007ebc:	e02d      	b.n	8007f1a <HAL_GPIO_Init+0x26a>
 8007ebe:	230a      	movs	r3, #10
 8007ec0:	e02b      	b.n	8007f1a <HAL_GPIO_Init+0x26a>
 8007ec2:	2308      	movs	r3, #8
 8007ec4:	e029      	b.n	8007f1a <HAL_GPIO_Init+0x26a>
 8007ec6:	2307      	movs	r3, #7
 8007ec8:	e027      	b.n	8007f1a <HAL_GPIO_Init+0x26a>
 8007eca:	2306      	movs	r3, #6
 8007ecc:	e025      	b.n	8007f1a <HAL_GPIO_Init+0x26a>
 8007ece:	2305      	movs	r3, #5
 8007ed0:	e023      	b.n	8007f1a <HAL_GPIO_Init+0x26a>
 8007ed2:	2304      	movs	r3, #4
 8007ed4:	e021      	b.n	8007f1a <HAL_GPIO_Init+0x26a>
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e01f      	b.n	8007f1a <HAL_GPIO_Init+0x26a>
 8007eda:	2302      	movs	r3, #2
 8007edc:	e01d      	b.n	8007f1a <HAL_GPIO_Init+0x26a>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e01b      	b.n	8007f1a <HAL_GPIO_Init+0x26a>
 8007ee2:	bf00      	nop
 8007ee4:	58000080 	.word	0x58000080
 8007ee8:	58024400 	.word	0x58024400
 8007eec:	58000400 	.word	0x58000400
 8007ef0:	58020000 	.word	0x58020000
 8007ef4:	58020400 	.word	0x58020400
 8007ef8:	58020800 	.word	0x58020800
 8007efc:	58020c00 	.word	0x58020c00
 8007f00:	58021000 	.word	0x58021000
 8007f04:	58021400 	.word	0x58021400
 8007f08:	58021800 	.word	0x58021800
 8007f0c:	58021c00 	.word	0x58021c00
 8007f10:	58022000 	.word	0x58022000
 8007f14:	58022400 	.word	0x58022400
 8007f18:	2300      	movs	r3, #0
 8007f1a:	69fa      	ldr	r2, [r7, #28]
 8007f1c:	f002 0203 	and.w	r2, r2, #3
 8007f20:	0092      	lsls	r2, r2, #2
 8007f22:	4093      	lsls	r3, r2
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f2a:	4938      	ldr	r1, [pc, #224]	; (800800c <HAL_GPIO_Init+0x35c>)
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	089b      	lsrs	r3, r3, #2
 8007f30:	3302      	adds	r3, #2
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	43db      	mvns	r3, r3
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	4013      	ands	r3, r2
 8007f46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d003      	beq.n	8007f5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	43db      	mvns	r3, r3
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f7e:	69ba      	ldr	r2, [r7, #24]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	43db      	mvns	r3, r3
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	43db      	mvns	r3, r3
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	3301      	adds	r3, #1
 8007fec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f47f ae63 	bne.w	8007cc4 <HAL_GPIO_Init+0x14>
  }
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	3724      	adds	r7, #36	; 0x24
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	58000400 	.word	0x58000400

08008010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	807b      	strh	r3, [r7, #2]
 800801c:	4613      	mov	r3, r2
 800801e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008020:	787b      	ldrb	r3, [r7, #1]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008026:	887a      	ldrh	r2, [r7, #2]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800802c:	e003      	b.n	8008036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800802e:	887b      	ldrh	r3, [r7, #2]
 8008030:	041a      	lsls	r2, r3, #16
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	619a      	str	r2, [r3, #24]
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	4603      	mov	r3, r0
 800804a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800804c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008050:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	4013      	ands	r3, r2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d008      	beq.n	800806e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800805c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008060:	88fb      	ldrh	r3, [r7, #6]
 8008062:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008066:	88fb      	ldrh	r3, [r7, #6]
 8008068:	4618      	mov	r0, r3
 800806a:	f7fa fa95 	bl	8002598 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008078:	b08f      	sub	sp, #60	; 0x3c
 800807a:	af0a      	add	r7, sp, #40	; 0x28
 800807c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e116      	b.n	80082b6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fb f85e 	bl	8003164 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2203      	movs	r2, #3
 80080ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d102      	bne.n	80080c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f006 fe40 	bl	800ed4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	603b      	str	r3, [r7, #0]
 80080d2:	687e      	ldr	r6, [r7, #4]
 80080d4:	466d      	mov	r5, sp
 80080d6:	f106 0410 	add.w	r4, r6, #16
 80080da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80080e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80080ea:	1d33      	adds	r3, r6, #4
 80080ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080ee:	6838      	ldr	r0, [r7, #0]
 80080f0:	f006 fdbe 	bl	800ec70 <USB_CoreInit>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d005      	beq.n	8008106 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2202      	movs	r2, #2
 80080fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e0d7      	b.n	80082b6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2100      	movs	r1, #0
 800810c:	4618      	mov	r0, r3
 800810e:	f006 fe2e 	bl	800ed6e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]
 8008116:	e04a      	b.n	80081ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008118:	7bfa      	ldrb	r2, [r7, #15]
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	333d      	adds	r3, #61	; 0x3d
 8008128:	2201      	movs	r2, #1
 800812a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800812c:	7bfa      	ldrb	r2, [r7, #15]
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	4613      	mov	r3, r2
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	1a9b      	subs	r3, r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	440b      	add	r3, r1
 800813a:	333c      	adds	r3, #60	; 0x3c
 800813c:	7bfa      	ldrb	r2, [r7, #15]
 800813e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008140:	7bfa      	ldrb	r2, [r7, #15]
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	b298      	uxth	r0, r3
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	1a9b      	subs	r3, r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	3342      	adds	r3, #66	; 0x42
 8008154:	4602      	mov	r2, r0
 8008156:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008158:	7bfa      	ldrb	r2, [r7, #15]
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	4613      	mov	r3, r2
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	1a9b      	subs	r3, r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	440b      	add	r3, r1
 8008166:	333f      	adds	r3, #63	; 0x3f
 8008168:	2200      	movs	r2, #0
 800816a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800816c:	7bfa      	ldrb	r2, [r7, #15]
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	4613      	mov	r3, r2
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	3344      	adds	r3, #68	; 0x44
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008180:	7bfa      	ldrb	r2, [r7, #15]
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	4613      	mov	r3, r2
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	1a9b      	subs	r3, r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	3348      	adds	r3, #72	; 0x48
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008194:	7bfa      	ldrb	r2, [r7, #15]
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	4613      	mov	r3, r2
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	1a9b      	subs	r3, r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	3350      	adds	r3, #80	; 0x50
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	3301      	adds	r3, #1
 80081ac:	73fb      	strb	r3, [r7, #15]
 80081ae:	7bfa      	ldrb	r2, [r7, #15]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d3af      	bcc.n	8008118 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]
 80081bc:	e044      	b.n	8008248 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80081be:	7bfa      	ldrb	r2, [r7, #15]
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	4613      	mov	r3, r2
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	1a9b      	subs	r3, r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80081d0:	2200      	movs	r2, #0
 80081d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80081d4:	7bfa      	ldrb	r2, [r7, #15]
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	4613      	mov	r3, r2
 80081da:	00db      	lsls	r3, r3, #3
 80081dc:	1a9b      	subs	r3, r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80081e6:	7bfa      	ldrb	r2, [r7, #15]
 80081e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80081ea:	7bfa      	ldrb	r2, [r7, #15]
 80081ec:	6879      	ldr	r1, [r7, #4]
 80081ee:	4613      	mov	r3, r2
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	1a9b      	subs	r3, r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	440b      	add	r3, r1
 80081f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80081fc:	2200      	movs	r2, #0
 80081fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008200:	7bfa      	ldrb	r2, [r7, #15]
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	4613      	mov	r3, r2
 8008206:	00db      	lsls	r3, r3, #3
 8008208:	1a9b      	subs	r3, r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	440b      	add	r3, r1
 800820e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008216:	7bfa      	ldrb	r2, [r7, #15]
 8008218:	6879      	ldr	r1, [r7, #4]
 800821a:	4613      	mov	r3, r2
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	1a9b      	subs	r3, r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	440b      	add	r3, r1
 8008224:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800822c:	7bfa      	ldrb	r2, [r7, #15]
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	4613      	mov	r3, r2
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800823e:	2200      	movs	r2, #0
 8008240:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	3301      	adds	r3, #1
 8008246:	73fb      	strb	r3, [r7, #15]
 8008248:	7bfa      	ldrb	r2, [r7, #15]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	429a      	cmp	r2, r3
 8008250:	d3b5      	bcc.n	80081be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	687e      	ldr	r6, [r7, #4]
 800825a:	466d      	mov	r5, sp
 800825c:	f106 0410 	add.w	r4, r6, #16
 8008260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008268:	e894 0003 	ldmia.w	r4, {r0, r1}
 800826c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008270:	1d33      	adds	r3, r6, #4
 8008272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008274:	6838      	ldr	r0, [r7, #0]
 8008276:	f006 fda5 	bl	800edc4 <USB_DevInit>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d005      	beq.n	800828c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2202      	movs	r2, #2
 8008284:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e014      	b.n	80082b6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d102      	bne.n	80082aa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f80b 	bl	80082c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f006 ff47 	bl	800f142 <USB_DevDisconnect>

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080082c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082ee:	4b05      	ldr	r3, [pc, #20]	; (8008304 <HAL_PCDEx_ActivateLPM+0x44>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	10000003 	.word	0x10000003

08008308 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008310:	4b19      	ldr	r3, [pc, #100]	; (8008378 <HAL_PWREx_ConfigSupply+0x70>)
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b04      	cmp	r3, #4
 800831a:	d00a      	beq.n	8008332 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800831c:	4b16      	ldr	r3, [pc, #88]	; (8008378 <HAL_PWREx_ConfigSupply+0x70>)
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f003 0307 	and.w	r3, r3, #7
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	429a      	cmp	r2, r3
 8008328:	d001      	beq.n	800832e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e01f      	b.n	800836e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	e01d      	b.n	800836e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008332:	4b11      	ldr	r3, [pc, #68]	; (8008378 <HAL_PWREx_ConfigSupply+0x70>)
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f023 0207 	bic.w	r2, r3, #7
 800833a:	490f      	ldr	r1, [pc, #60]	; (8008378 <HAL_PWREx_ConfigSupply+0x70>)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4313      	orrs	r3, r2
 8008340:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008342:	f7fb f969 	bl	8003618 <HAL_GetTick>
 8008346:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008348:	e009      	b.n	800835e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800834a:	f7fb f965 	bl	8003618 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008358:	d901      	bls.n	800835e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e007      	b.n	800836e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800835e:	4b06      	ldr	r3, [pc, #24]	; (8008378 <HAL_PWREx_ConfigSupply+0x70>)
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800836a:	d1ee      	bne.n	800834a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	58024800 	.word	0x58024800

0800837c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008380:	4b05      	ldr	r3, [pc, #20]	; (8008398 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	4a04      	ldr	r2, [pc, #16]	; (8008398 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800838a:	60d3      	str	r3, [r2, #12]
}
 800838c:	bf00      	nop
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	58024800 	.word	0x58024800

0800839c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b08c      	sub	sp, #48	; 0x30
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e3ff      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 8087 	beq.w	80084ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083bc:	4b99      	ldr	r3, [pc, #612]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083c6:	4b97      	ldr	r3, [pc, #604]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80083c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	2b10      	cmp	r3, #16
 80083d0:	d007      	beq.n	80083e2 <HAL_RCC_OscConfig+0x46>
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	2b18      	cmp	r3, #24
 80083d6:	d110      	bne.n	80083fa <HAL_RCC_OscConfig+0x5e>
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d10b      	bne.n	80083fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083e2:	4b90      	ldr	r3, [pc, #576]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d06c      	beq.n	80084c8 <HAL_RCC_OscConfig+0x12c>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d168      	bne.n	80084c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e3d9      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008402:	d106      	bne.n	8008412 <HAL_RCC_OscConfig+0x76>
 8008404:	4b87      	ldr	r3, [pc, #540]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a86      	ldr	r2, [pc, #536]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 800840a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	e02e      	b.n	8008470 <HAL_RCC_OscConfig+0xd4>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10c      	bne.n	8008434 <HAL_RCC_OscConfig+0x98>
 800841a:	4b82      	ldr	r3, [pc, #520]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a81      	ldr	r2, [pc, #516]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	4b7f      	ldr	r3, [pc, #508]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a7e      	ldr	r2, [pc, #504]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 800842c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	e01d      	b.n	8008470 <HAL_RCC_OscConfig+0xd4>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800843c:	d10c      	bne.n	8008458 <HAL_RCC_OscConfig+0xbc>
 800843e:	4b79      	ldr	r3, [pc, #484]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a78      	ldr	r2, [pc, #480]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	4b76      	ldr	r3, [pc, #472]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a75      	ldr	r2, [pc, #468]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	e00b      	b.n	8008470 <HAL_RCC_OscConfig+0xd4>
 8008458:	4b72      	ldr	r3, [pc, #456]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a71      	ldr	r2, [pc, #452]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 800845e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	4b6f      	ldr	r3, [pc, #444]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a6e      	ldr	r2, [pc, #440]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 800846a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800846e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d013      	beq.n	80084a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008478:	f7fb f8ce 	bl	8003618 <HAL_GetTick>
 800847c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800847e:	e008      	b.n	8008492 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008480:	f7fb f8ca 	bl	8003618 <HAL_GetTick>
 8008484:	4602      	mov	r2, r0
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	2b64      	cmp	r3, #100	; 0x64
 800848c:	d901      	bls.n	8008492 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e38d      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008492:	4b64      	ldr	r3, [pc, #400]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0f0      	beq.n	8008480 <HAL_RCC_OscConfig+0xe4>
 800849e:	e014      	b.n	80084ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a0:	f7fb f8ba 	bl	8003618 <HAL_GetTick>
 80084a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084a6:	e008      	b.n	80084ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084a8:	f7fb f8b6 	bl	8003618 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b64      	cmp	r3, #100	; 0x64
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e379      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084ba:	4b5a      	ldr	r3, [pc, #360]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1f0      	bne.n	80084a8 <HAL_RCC_OscConfig+0x10c>
 80084c6:	e000      	b.n	80084ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0302 	and.w	r3, r3, #2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 80ae 	beq.w	8008634 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084d8:	4b52      	ldr	r3, [pc, #328]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084e2:	4b50      	ldr	r3, [pc, #320]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80084e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d007      	beq.n	80084fe <HAL_RCC_OscConfig+0x162>
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	2b18      	cmp	r3, #24
 80084f2:	d13a      	bne.n	800856a <HAL_RCC_OscConfig+0x1ce>
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d135      	bne.n	800856a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084fe:	4b49      	ldr	r3, [pc, #292]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	d005      	beq.n	8008516 <HAL_RCC_OscConfig+0x17a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e34b      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008516:	f7fb f8af 	bl	8003678 <HAL_GetREVID>
 800851a:	4603      	mov	r3, r0
 800851c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008520:	4293      	cmp	r3, r2
 8008522:	d817      	bhi.n	8008554 <HAL_RCC_OscConfig+0x1b8>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	2b40      	cmp	r3, #64	; 0x40
 800852a:	d108      	bne.n	800853e <HAL_RCC_OscConfig+0x1a2>
 800852c:	4b3d      	ldr	r3, [pc, #244]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008534:	4a3b      	ldr	r2, [pc, #236]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800853a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800853c:	e07a      	b.n	8008634 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800853e:	4b39      	ldr	r3, [pc, #228]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	031b      	lsls	r3, r3, #12
 800854c:	4935      	ldr	r1, [pc, #212]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 800854e:	4313      	orrs	r3, r2
 8008550:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008552:	e06f      	b.n	8008634 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008554:	4b33      	ldr	r3, [pc, #204]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	061b      	lsls	r3, r3, #24
 8008562:	4930      	ldr	r1, [pc, #192]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008564:	4313      	orrs	r3, r2
 8008566:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008568:	e064      	b.n	8008634 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d045      	beq.n	80085fe <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008572:	4b2c      	ldr	r3, [pc, #176]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f023 0219 	bic.w	r2, r3, #25
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	4929      	ldr	r1, [pc, #164]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008580:	4313      	orrs	r3, r2
 8008582:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008584:	f7fb f848 	bl	8003618 <HAL_GetTick>
 8008588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800858c:	f7fb f844 	bl	8003618 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e307      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800859e:	4b21      	ldr	r3, [pc, #132]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0304 	and.w	r3, r3, #4
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d0f0      	beq.n	800858c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085aa:	f7fb f865 	bl	8003678 <HAL_GetREVID>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d817      	bhi.n	80085e8 <HAL_RCC_OscConfig+0x24c>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	2b40      	cmp	r3, #64	; 0x40
 80085be:	d108      	bne.n	80085d2 <HAL_RCC_OscConfig+0x236>
 80085c0:	4b18      	ldr	r3, [pc, #96]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80085c8:	4a16      	ldr	r2, [pc, #88]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80085ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ce:	6053      	str	r3, [r2, #4]
 80085d0:	e030      	b.n	8008634 <HAL_RCC_OscConfig+0x298>
 80085d2:	4b14      	ldr	r3, [pc, #80]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	031b      	lsls	r3, r3, #12
 80085e0:	4910      	ldr	r1, [pc, #64]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	604b      	str	r3, [r1, #4]
 80085e6:	e025      	b.n	8008634 <HAL_RCC_OscConfig+0x298>
 80085e8:	4b0e      	ldr	r3, [pc, #56]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	061b      	lsls	r3, r3, #24
 80085f6:	490b      	ldr	r1, [pc, #44]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	604b      	str	r3, [r1, #4]
 80085fc:	e01a      	b.n	8008634 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085fe:	4b09      	ldr	r3, [pc, #36]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a08      	ldr	r2, [pc, #32]	; (8008624 <HAL_RCC_OscConfig+0x288>)
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800860a:	f7fb f805 	bl	8003618 <HAL_GetTick>
 800860e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008610:	e00a      	b.n	8008628 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008612:	f7fb f801 	bl	8003618 <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	2b02      	cmp	r3, #2
 800861e:	d903      	bls.n	8008628 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e2c4      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
 8008624:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008628:	4ba4      	ldr	r3, [pc, #656]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1ee      	bne.n	8008612 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0310 	and.w	r3, r3, #16
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 80a9 	beq.w	8008794 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008642:	4b9e      	ldr	r3, [pc, #632]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800864a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800864c:	4b9b      	ldr	r3, [pc, #620]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 800864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008650:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	2b08      	cmp	r3, #8
 8008656:	d007      	beq.n	8008668 <HAL_RCC_OscConfig+0x2cc>
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	2b18      	cmp	r3, #24
 800865c:	d13a      	bne.n	80086d4 <HAL_RCC_OscConfig+0x338>
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f003 0303 	and.w	r3, r3, #3
 8008664:	2b01      	cmp	r3, #1
 8008666:	d135      	bne.n	80086d4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008668:	4b94      	ldr	r3, [pc, #592]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <HAL_RCC_OscConfig+0x2e4>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	2b80      	cmp	r3, #128	; 0x80
 800867a:	d001      	beq.n	8008680 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e296      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008680:	f7fa fffa 	bl	8003678 <HAL_GetREVID>
 8008684:	4603      	mov	r3, r0
 8008686:	f241 0203 	movw	r2, #4099	; 0x1003
 800868a:	4293      	cmp	r3, r2
 800868c:	d817      	bhi.n	80086be <HAL_RCC_OscConfig+0x322>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	2b20      	cmp	r3, #32
 8008694:	d108      	bne.n	80086a8 <HAL_RCC_OscConfig+0x30c>
 8008696:	4b89      	ldr	r3, [pc, #548]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800869e:	4a87      	ldr	r2, [pc, #540]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 80086a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086a6:	e075      	b.n	8008794 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086a8:	4b84      	ldr	r3, [pc, #528]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	069b      	lsls	r3, r3, #26
 80086b6:	4981      	ldr	r1, [pc, #516]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086bc:	e06a      	b.n	8008794 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086be:	4b7f      	ldr	r3, [pc, #508]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	061b      	lsls	r3, r3, #24
 80086cc:	497b      	ldr	r1, [pc, #492]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086d2:	e05f      	b.n	8008794 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d042      	beq.n	8008762 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80086dc:	4b77      	ldr	r3, [pc, #476]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a76      	ldr	r2, [pc, #472]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 80086e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e8:	f7fa ff96 	bl	8003618 <HAL_GetTick>
 80086ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086ee:	e008      	b.n	8008702 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80086f0:	f7fa ff92 	bl	8003618 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e255      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008702:	4b6e      	ldr	r3, [pc, #440]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0f0      	beq.n	80086f0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800870e:	f7fa ffb3 	bl	8003678 <HAL_GetREVID>
 8008712:	4603      	mov	r3, r0
 8008714:	f241 0203 	movw	r2, #4099	; 0x1003
 8008718:	4293      	cmp	r3, r2
 800871a:	d817      	bhi.n	800874c <HAL_RCC_OscConfig+0x3b0>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a1b      	ldr	r3, [r3, #32]
 8008720:	2b20      	cmp	r3, #32
 8008722:	d108      	bne.n	8008736 <HAL_RCC_OscConfig+0x39a>
 8008724:	4b65      	ldr	r3, [pc, #404]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800872c:	4a63      	ldr	r2, [pc, #396]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 800872e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008732:	6053      	str	r3, [r2, #4]
 8008734:	e02e      	b.n	8008794 <HAL_RCC_OscConfig+0x3f8>
 8008736:	4b61      	ldr	r3, [pc, #388]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	069b      	lsls	r3, r3, #26
 8008744:	495d      	ldr	r1, [pc, #372]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 8008746:	4313      	orrs	r3, r2
 8008748:	604b      	str	r3, [r1, #4]
 800874a:	e023      	b.n	8008794 <HAL_RCC_OscConfig+0x3f8>
 800874c:	4b5b      	ldr	r3, [pc, #364]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	061b      	lsls	r3, r3, #24
 800875a:	4958      	ldr	r1, [pc, #352]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 800875c:	4313      	orrs	r3, r2
 800875e:	60cb      	str	r3, [r1, #12]
 8008760:	e018      	b.n	8008794 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008762:	4b56      	ldr	r3, [pc, #344]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a55      	ldr	r2, [pc, #340]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 8008768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800876c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876e:	f7fa ff53 	bl	8003618 <HAL_GetTick>
 8008772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008774:	e008      	b.n	8008788 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008776:	f7fa ff4f 	bl	8003618 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d901      	bls.n	8008788 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e212      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008788:	4b4c      	ldr	r3, [pc, #304]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1f0      	bne.n	8008776 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0308 	and.w	r3, r3, #8
 800879c:	2b00      	cmp	r3, #0
 800879e:	d036      	beq.n	800880e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d019      	beq.n	80087dc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087a8:	4b44      	ldr	r3, [pc, #272]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 80087aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ac:	4a43      	ldr	r2, [pc, #268]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 80087ae:	f043 0301 	orr.w	r3, r3, #1
 80087b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087b4:	f7fa ff30 	bl	8003618 <HAL_GetTick>
 80087b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087ba:	e008      	b.n	80087ce <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087bc:	f7fa ff2c 	bl	8003618 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e1ef      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087ce:	4b3b      	ldr	r3, [pc, #236]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 80087d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0f0      	beq.n	80087bc <HAL_RCC_OscConfig+0x420>
 80087da:	e018      	b.n	800880e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087dc:	4b37      	ldr	r3, [pc, #220]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 80087de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e0:	4a36      	ldr	r2, [pc, #216]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 80087e2:	f023 0301 	bic.w	r3, r3, #1
 80087e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087e8:	f7fa ff16 	bl	8003618 <HAL_GetTick>
 80087ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087f0:	f7fa ff12 	bl	8003618 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e1d5      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008802:	4b2e      	ldr	r3, [pc, #184]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 8008804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f0      	bne.n	80087f0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0320 	and.w	r3, r3, #32
 8008816:	2b00      	cmp	r3, #0
 8008818:	d036      	beq.n	8008888 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d019      	beq.n	8008856 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008822:	4b26      	ldr	r3, [pc, #152]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a25      	ldr	r2, [pc, #148]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 8008828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800882c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800882e:	f7fa fef3 	bl	8003618 <HAL_GetTick>
 8008832:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008834:	e008      	b.n	8008848 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008836:	f7fa feef 	bl	8003618 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b02      	cmp	r3, #2
 8008842:	d901      	bls.n	8008848 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e1b2      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008848:	4b1c      	ldr	r3, [pc, #112]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0f0      	beq.n	8008836 <HAL_RCC_OscConfig+0x49a>
 8008854:	e018      	b.n	8008888 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008856:	4b19      	ldr	r3, [pc, #100]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a18      	ldr	r2, [pc, #96]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 800885c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008860:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008862:	f7fa fed9 	bl	8003618 <HAL_GetTick>
 8008866:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008868:	e008      	b.n	800887c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800886a:	f7fa fed5 	bl	8003618 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d901      	bls.n	800887c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e198      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800887c:	4b0f      	ldr	r3, [pc, #60]	; (80088bc <HAL_RCC_OscConfig+0x520>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1f0      	bne.n	800886a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 8085 	beq.w	80089a0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008896:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <HAL_RCC_OscConfig+0x524>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a09      	ldr	r2, [pc, #36]	; (80088c0 <HAL_RCC_OscConfig+0x524>)
 800889c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088a2:	f7fa feb9 	bl	8003618 <HAL_GetTick>
 80088a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088a8:	e00c      	b.n	80088c4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088aa:	f7fa feb5 	bl	8003618 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	2b64      	cmp	r3, #100	; 0x64
 80088b6:	d905      	bls.n	80088c4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e178      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
 80088bc:	58024400 	.word	0x58024400
 80088c0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088c4:	4b96      	ldr	r3, [pc, #600]	; (8008b20 <HAL_RCC_OscConfig+0x784>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0ec      	beq.n	80088aa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d106      	bne.n	80088e6 <HAL_RCC_OscConfig+0x54a>
 80088d8:	4b92      	ldr	r3, [pc, #584]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 80088da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088dc:	4a91      	ldr	r2, [pc, #580]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	6713      	str	r3, [r2, #112]	; 0x70
 80088e4:	e02d      	b.n	8008942 <HAL_RCC_OscConfig+0x5a6>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10c      	bne.n	8008908 <HAL_RCC_OscConfig+0x56c>
 80088ee:	4b8d      	ldr	r3, [pc, #564]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 80088f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f2:	4a8c      	ldr	r2, [pc, #560]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 80088f4:	f023 0301 	bic.w	r3, r3, #1
 80088f8:	6713      	str	r3, [r2, #112]	; 0x70
 80088fa:	4b8a      	ldr	r3, [pc, #552]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 80088fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fe:	4a89      	ldr	r2, [pc, #548]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008900:	f023 0304 	bic.w	r3, r3, #4
 8008904:	6713      	str	r3, [r2, #112]	; 0x70
 8008906:	e01c      	b.n	8008942 <HAL_RCC_OscConfig+0x5a6>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	2b05      	cmp	r3, #5
 800890e:	d10c      	bne.n	800892a <HAL_RCC_OscConfig+0x58e>
 8008910:	4b84      	ldr	r3, [pc, #528]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008914:	4a83      	ldr	r2, [pc, #524]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008916:	f043 0304 	orr.w	r3, r3, #4
 800891a:	6713      	str	r3, [r2, #112]	; 0x70
 800891c:	4b81      	ldr	r3, [pc, #516]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 800891e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008920:	4a80      	ldr	r2, [pc, #512]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008922:	f043 0301 	orr.w	r3, r3, #1
 8008926:	6713      	str	r3, [r2, #112]	; 0x70
 8008928:	e00b      	b.n	8008942 <HAL_RCC_OscConfig+0x5a6>
 800892a:	4b7e      	ldr	r3, [pc, #504]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 800892c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892e:	4a7d      	ldr	r2, [pc, #500]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	6713      	str	r3, [r2, #112]	; 0x70
 8008936:	4b7b      	ldr	r3, [pc, #492]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893a:	4a7a      	ldr	r2, [pc, #488]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 800893c:	f023 0304 	bic.w	r3, r3, #4
 8008940:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d015      	beq.n	8008976 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800894a:	f7fa fe65 	bl	8003618 <HAL_GetTick>
 800894e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008950:	e00a      	b.n	8008968 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008952:	f7fa fe61 	bl	8003618 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008960:	4293      	cmp	r3, r2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e122      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008968:	4b6e      	ldr	r3, [pc, #440]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 800896a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	d0ee      	beq.n	8008952 <HAL_RCC_OscConfig+0x5b6>
 8008974:	e014      	b.n	80089a0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008976:	f7fa fe4f 	bl	8003618 <HAL_GetTick>
 800897a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800897c:	e00a      	b.n	8008994 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800897e:	f7fa fe4b 	bl	8003618 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	f241 3288 	movw	r2, #5000	; 0x1388
 800898c:	4293      	cmp	r3, r2
 800898e:	d901      	bls.n	8008994 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e10c      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008994:	4b63      	ldr	r3, [pc, #396]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1ee      	bne.n	800897e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 8101 	beq.w	8008bac <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80089aa:	4b5e      	ldr	r3, [pc, #376]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089b2:	2b18      	cmp	r3, #24
 80089b4:	f000 80bc 	beq.w	8008b30 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	2b02      	cmp	r3, #2
 80089be:	f040 8095 	bne.w	8008aec <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089c2:	4b58      	ldr	r3, [pc, #352]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a57      	ldr	r2, [pc, #348]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 80089c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ce:	f7fa fe23 	bl	8003618 <HAL_GetTick>
 80089d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089d4:	e008      	b.n	80089e8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089d6:	f7fa fe1f 	bl	8003618 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d901      	bls.n	80089e8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e0e2      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089e8:	4b4e      	ldr	r3, [pc, #312]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f0      	bne.n	80089d6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089f4:	4b4b      	ldr	r3, [pc, #300]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 80089f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089f8:	4b4b      	ldr	r3, [pc, #300]	; (8008b28 <HAL_RCC_OscConfig+0x78c>)
 80089fa:	4013      	ands	r3, r2
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a04:	0112      	lsls	r2, r2, #4
 8008a06:	430a      	orrs	r2, r1
 8008a08:	4946      	ldr	r1, [pc, #280]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	628b      	str	r3, [r1, #40]	; 0x28
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	3b01      	subs	r3, #1
 8008a14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	025b      	lsls	r3, r3, #9
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	041b      	lsls	r3, r3, #16
 8008a2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a30:	431a      	orrs	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a36:	3b01      	subs	r3, #1
 8008a38:	061b      	lsls	r3, r3, #24
 8008a3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a3e:	4939      	ldr	r1, [pc, #228]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a40:	4313      	orrs	r3, r2
 8008a42:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008a44:	4b37      	ldr	r3, [pc, #220]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	4a36      	ldr	r2, [pc, #216]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a4a:	f023 0301 	bic.w	r3, r3, #1
 8008a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a50:	4b34      	ldr	r3, [pc, #208]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a54:	4b35      	ldr	r3, [pc, #212]	; (8008b2c <HAL_RCC_OscConfig+0x790>)
 8008a56:	4013      	ands	r3, r2
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008a5c:	00d2      	lsls	r2, r2, #3
 8008a5e:	4931      	ldr	r1, [pc, #196]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a60:	4313      	orrs	r3, r2
 8008a62:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a64:	4b2f      	ldr	r3, [pc, #188]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	f023 020c 	bic.w	r2, r3, #12
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a70:	492c      	ldr	r1, [pc, #176]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a76:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7a:	f023 0202 	bic.w	r2, r3, #2
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a82:	4928      	ldr	r1, [pc, #160]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a88:	4b26      	ldr	r3, [pc, #152]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8c:	4a25      	ldr	r2, [pc, #148]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a94:	4b23      	ldr	r3, [pc, #140]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a98:	4a22      	ldr	r2, [pc, #136]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008aa0:	4b20      	ldr	r3, [pc, #128]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	4a1f      	ldr	r2, [pc, #124]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008aac:	4b1d      	ldr	r3, [pc, #116]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab0:	4a1c      	ldr	r2, [pc, #112]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008ab2:	f043 0301 	orr.w	r3, r3, #1
 8008ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ab8:	4b1a      	ldr	r3, [pc, #104]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a19      	ldr	r2, [pc, #100]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac4:	f7fa fda8 	bl	8003618 <HAL_GetTick>
 8008ac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008aca:	e008      	b.n	8008ade <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008acc:	f7fa fda4 	bl	8003618 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d901      	bls.n	8008ade <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e067      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ade:	4b11      	ldr	r3, [pc, #68]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d0f0      	beq.n	8008acc <HAL_RCC_OscConfig+0x730>
 8008aea:	e05f      	b.n	8008bac <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aec:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a0c      	ldr	r2, [pc, #48]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af8:	f7fa fd8e 	bl	8003618 <HAL_GetTick>
 8008afc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008afe:	e008      	b.n	8008b12 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b00:	f7fa fd8a 	bl	8003618 <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d901      	bls.n	8008b12 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e04d      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b12:	4b04      	ldr	r3, [pc, #16]	; (8008b24 <HAL_RCC_OscConfig+0x788>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1f0      	bne.n	8008b00 <HAL_RCC_OscConfig+0x764>
 8008b1e:	e045      	b.n	8008bac <HAL_RCC_OscConfig+0x810>
 8008b20:	58024800 	.word	0x58024800
 8008b24:	58024400 	.word	0x58024400
 8008b28:	fffffc0c 	.word	0xfffffc0c
 8008b2c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b30:	4b21      	ldr	r3, [pc, #132]	; (8008bb8 <HAL_RCC_OscConfig+0x81c>)
 8008b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b36:	4b20      	ldr	r3, [pc, #128]	; (8008bb8 <HAL_RCC_OscConfig+0x81c>)
 8008b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d031      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f003 0203 	and.w	r2, r3, #3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d12a      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	091b      	lsrs	r3, r3, #4
 8008b56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d122      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d11a      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	0a5b      	lsrs	r3, r3, #9
 8008b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d111      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	0c1b      	lsrs	r3, r3, #16
 8008b88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d108      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	0e1b      	lsrs	r3, r3, #24
 8008b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d001      	beq.n	8008bac <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e000      	b.n	8008bae <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3730      	adds	r7, #48	; 0x30
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	58024400 	.word	0x58024400

08008bbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e19c      	b.n	8008f0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008bd0:	4b8a      	ldr	r3, [pc, #552]	; (8008dfc <HAL_RCC_ClockConfig+0x240>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 030f 	and.w	r3, r3, #15
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d910      	bls.n	8008c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bde:	4b87      	ldr	r3, [pc, #540]	; (8008dfc <HAL_RCC_ClockConfig+0x240>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f023 020f 	bic.w	r2, r3, #15
 8008be6:	4985      	ldr	r1, [pc, #532]	; (8008dfc <HAL_RCC_ClockConfig+0x240>)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bee:	4b83      	ldr	r3, [pc, #524]	; (8008dfc <HAL_RCC_ClockConfig+0x240>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 030f 	and.w	r3, r3, #15
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d001      	beq.n	8008c00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e184      	b.n	8008f0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d010      	beq.n	8008c2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	691a      	ldr	r2, [r3, #16]
 8008c10:	4b7b      	ldr	r3, [pc, #492]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d908      	bls.n	8008c2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c1c:	4b78      	ldr	r3, [pc, #480]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	4975      	ldr	r1, [pc, #468]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0308 	and.w	r3, r3, #8
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d010      	beq.n	8008c5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	695a      	ldr	r2, [r3, #20]
 8008c3e:	4b70      	ldr	r3, [pc, #448]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d908      	bls.n	8008c5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c4a:	4b6d      	ldr	r3, [pc, #436]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	496a      	ldr	r1, [pc, #424]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0310 	and.w	r3, r3, #16
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d010      	beq.n	8008c8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	699a      	ldr	r2, [r3, #24]
 8008c6c:	4b64      	ldr	r3, [pc, #400]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d908      	bls.n	8008c8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c78:	4b61      	ldr	r3, [pc, #388]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008c7a:	69db      	ldr	r3, [r3, #28]
 8008c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	495e      	ldr	r1, [pc, #376]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 0320 	and.w	r3, r3, #32
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d010      	beq.n	8008cb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	69da      	ldr	r2, [r3, #28]
 8008c9a:	4b59      	ldr	r3, [pc, #356]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d908      	bls.n	8008cb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008ca6:	4b56      	ldr	r3, [pc, #344]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	4953      	ldr	r1, [pc, #332]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d010      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68da      	ldr	r2, [r3, #12]
 8008cc8:	4b4d      	ldr	r3, [pc, #308]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d908      	bls.n	8008ce6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cd4:	4b4a      	ldr	r3, [pc, #296]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	f023 020f 	bic.w	r2, r3, #15
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	4947      	ldr	r1, [pc, #284]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d055      	beq.n	8008d9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008cf2:	4b43      	ldr	r3, [pc, #268]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	4940      	ldr	r1, [pc, #256]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d107      	bne.n	8008d1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d0c:	4b3c      	ldr	r3, [pc, #240]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d121      	bne.n	8008d5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e0f6      	b.n	8008f0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d107      	bne.n	8008d34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d24:	4b36      	ldr	r3, [pc, #216]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d115      	bne.n	8008d5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e0ea      	b.n	8008f0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d107      	bne.n	8008d4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d3c:	4b30      	ldr	r3, [pc, #192]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e0de      	b.n	8008f0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d4c:	4b2c      	ldr	r3, [pc, #176]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0304 	and.w	r3, r3, #4
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e0d6      	b.n	8008f0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d5c:	4b28      	ldr	r3, [pc, #160]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	f023 0207 	bic.w	r2, r3, #7
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	4925      	ldr	r1, [pc, #148]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d6e:	f7fa fc53 	bl	8003618 <HAL_GetTick>
 8008d72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d74:	e00a      	b.n	8008d8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d76:	f7fa fc4f 	bl	8003618 <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d901      	bls.n	8008d8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e0be      	b.n	8008f0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d8c:	4b1c      	ldr	r3, [pc, #112]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	00db      	lsls	r3, r3, #3
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d1eb      	bne.n	8008d76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d010      	beq.n	8008dcc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68da      	ldr	r2, [r3, #12]
 8008dae:	4b14      	ldr	r3, [pc, #80]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d208      	bcs.n	8008dcc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dba:	4b11      	ldr	r3, [pc, #68]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	f023 020f 	bic.w	r2, r3, #15
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	490e      	ldr	r1, [pc, #56]	; (8008e00 <HAL_RCC_ClockConfig+0x244>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008dcc:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <HAL_RCC_ClockConfig+0x240>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 030f 	and.w	r3, r3, #15
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d214      	bcs.n	8008e04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dda:	4b08      	ldr	r3, [pc, #32]	; (8008dfc <HAL_RCC_ClockConfig+0x240>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f023 020f 	bic.w	r2, r3, #15
 8008de2:	4906      	ldr	r1, [pc, #24]	; (8008dfc <HAL_RCC_ClockConfig+0x240>)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dea:	4b04      	ldr	r3, [pc, #16]	; (8008dfc <HAL_RCC_ClockConfig+0x240>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 030f 	and.w	r3, r3, #15
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d005      	beq.n	8008e04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e086      	b.n	8008f0a <HAL_RCC_ClockConfig+0x34e>
 8008dfc:	52002000 	.word	0x52002000
 8008e00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d010      	beq.n	8008e32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	691a      	ldr	r2, [r3, #16]
 8008e14:	4b3f      	ldr	r3, [pc, #252]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d208      	bcs.n	8008e32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e20:	4b3c      	ldr	r3, [pc, #240]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	4939      	ldr	r1, [pc, #228]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0308 	and.w	r3, r3, #8
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d010      	beq.n	8008e60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	695a      	ldr	r2, [r3, #20]
 8008e42:	4b34      	ldr	r3, [pc, #208]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d208      	bcs.n	8008e60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e4e:	4b31      	ldr	r3, [pc, #196]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	492e      	ldr	r1, [pc, #184]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0310 	and.w	r3, r3, #16
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d010      	beq.n	8008e8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699a      	ldr	r2, [r3, #24]
 8008e70:	4b28      	ldr	r3, [pc, #160]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d208      	bcs.n	8008e8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e7c:	4b25      	ldr	r3, [pc, #148]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	4922      	ldr	r1, [pc, #136]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d010      	beq.n	8008ebc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69da      	ldr	r2, [r3, #28]
 8008e9e:	4b1d      	ldr	r3, [pc, #116]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d208      	bcs.n	8008ebc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008eaa:	4b1a      	ldr	r3, [pc, #104]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008eac:	6a1b      	ldr	r3, [r3, #32]
 8008eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	4917      	ldr	r1, [pc, #92]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ebc:	f000 f834 	bl	8008f28 <HAL_RCC_GetSysClockFreq>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	4b14      	ldr	r3, [pc, #80]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	0a1b      	lsrs	r3, r3, #8
 8008ec8:	f003 030f 	and.w	r3, r3, #15
 8008ecc:	4912      	ldr	r1, [pc, #72]	; (8008f18 <HAL_RCC_ClockConfig+0x35c>)
 8008ece:	5ccb      	ldrb	r3, [r1, r3]
 8008ed0:	f003 031f 	and.w	r3, r3, #31
 8008ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008eda:	4b0e      	ldr	r3, [pc, #56]	; (8008f14 <HAL_RCC_ClockConfig+0x358>)
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	f003 030f 	and.w	r3, r3, #15
 8008ee2:	4a0d      	ldr	r2, [pc, #52]	; (8008f18 <HAL_RCC_ClockConfig+0x35c>)
 8008ee4:	5cd3      	ldrb	r3, [r2, r3]
 8008ee6:	f003 031f 	and.w	r3, r3, #31
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef0:	4a0a      	ldr	r2, [pc, #40]	; (8008f1c <HAL_RCC_ClockConfig+0x360>)
 8008ef2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ef4:	4a0a      	ldr	r2, [pc, #40]	; (8008f20 <HAL_RCC_ClockConfig+0x364>)
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008efa:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <HAL_RCC_ClockConfig+0x368>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fa fb40 	bl	8003584 <HAL_InitTick>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	58024400 	.word	0x58024400
 8008f18:	0800f25c 	.word	0x0800f25c
 8008f1c:	24000004 	.word	0x24000004
 8008f20:	24000000 	.word	0x24000000
 8008f24:	24000008 	.word	0x24000008

08008f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b089      	sub	sp, #36	; 0x24
 8008f2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f2e:	4bb3      	ldr	r3, [pc, #716]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f36:	2b18      	cmp	r3, #24
 8008f38:	f200 8155 	bhi.w	80091e6 <HAL_RCC_GetSysClockFreq+0x2be>
 8008f3c:	a201      	add	r2, pc, #4	; (adr r2, 8008f44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f42:	bf00      	nop
 8008f44:	08008fa9 	.word	0x08008fa9
 8008f48:	080091e7 	.word	0x080091e7
 8008f4c:	080091e7 	.word	0x080091e7
 8008f50:	080091e7 	.word	0x080091e7
 8008f54:	080091e7 	.word	0x080091e7
 8008f58:	080091e7 	.word	0x080091e7
 8008f5c:	080091e7 	.word	0x080091e7
 8008f60:	080091e7 	.word	0x080091e7
 8008f64:	08008fcf 	.word	0x08008fcf
 8008f68:	080091e7 	.word	0x080091e7
 8008f6c:	080091e7 	.word	0x080091e7
 8008f70:	080091e7 	.word	0x080091e7
 8008f74:	080091e7 	.word	0x080091e7
 8008f78:	080091e7 	.word	0x080091e7
 8008f7c:	080091e7 	.word	0x080091e7
 8008f80:	080091e7 	.word	0x080091e7
 8008f84:	08008fd5 	.word	0x08008fd5
 8008f88:	080091e7 	.word	0x080091e7
 8008f8c:	080091e7 	.word	0x080091e7
 8008f90:	080091e7 	.word	0x080091e7
 8008f94:	080091e7 	.word	0x080091e7
 8008f98:	080091e7 	.word	0x080091e7
 8008f9c:	080091e7 	.word	0x080091e7
 8008fa0:	080091e7 	.word	0x080091e7
 8008fa4:	08008fdb 	.word	0x08008fdb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fa8:	4b94      	ldr	r3, [pc, #592]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0320 	and.w	r3, r3, #32
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d009      	beq.n	8008fc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fb4:	4b91      	ldr	r3, [pc, #580]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	08db      	lsrs	r3, r3, #3
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	4a90      	ldr	r2, [pc, #576]	; (8009200 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008fc6:	e111      	b.n	80091ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008fc8:	4b8d      	ldr	r3, [pc, #564]	; (8009200 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fca:	61bb      	str	r3, [r7, #24]
    break;
 8008fcc:	e10e      	b.n	80091ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008fce:	4b8d      	ldr	r3, [pc, #564]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008fd0:	61bb      	str	r3, [r7, #24]
    break;
 8008fd2:	e10b      	b.n	80091ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008fd4:	4b8c      	ldr	r3, [pc, #560]	; (8009208 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008fd6:	61bb      	str	r3, [r7, #24]
    break;
 8008fd8:	e108      	b.n	80091ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fda:	4b88      	ldr	r3, [pc, #544]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fde:	f003 0303 	and.w	r3, r3, #3
 8008fe2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008fe4:	4b85      	ldr	r3, [pc, #532]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe8:	091b      	lsrs	r3, r3, #4
 8008fea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ff0:	4b82      	ldr	r3, [pc, #520]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ffa:	4b80      	ldr	r3, [pc, #512]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ffe:	08db      	lsrs	r3, r3, #3
 8009000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	fb02 f303 	mul.w	r3, r2, r3
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009012:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 80e1 	beq.w	80091e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2b02      	cmp	r3, #2
 8009022:	f000 8083 	beq.w	800912c <HAL_RCC_GetSysClockFreq+0x204>
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b02      	cmp	r3, #2
 800902a:	f200 80a1 	bhi.w	8009170 <HAL_RCC_GetSysClockFreq+0x248>
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d003      	beq.n	800903c <HAL_RCC_GetSysClockFreq+0x114>
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d056      	beq.n	80090e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800903a:	e099      	b.n	8009170 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800903c:	4b6f      	ldr	r3, [pc, #444]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0320 	and.w	r3, r3, #32
 8009044:	2b00      	cmp	r3, #0
 8009046:	d02d      	beq.n	80090a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009048:	4b6c      	ldr	r3, [pc, #432]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	08db      	lsrs	r3, r3, #3
 800904e:	f003 0303 	and.w	r3, r3, #3
 8009052:	4a6b      	ldr	r2, [pc, #428]	; (8009200 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009054:	fa22 f303 	lsr.w	r3, r2, r3
 8009058:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	ee07 3a90 	vmov	s15, r3
 8009060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009072:	4b62      	ldr	r3, [pc, #392]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800907a:	ee07 3a90 	vmov	s15, r3
 800907e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009082:	ed97 6a02 	vldr	s12, [r7, #8]
 8009086:	eddf 5a61 	vldr	s11, [pc, #388]	; 800920c <HAL_RCC_GetSysClockFreq+0x2e4>
 800908a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800908e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800909a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800909e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80090a2:	e087      	b.n	80091b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	ee07 3a90 	vmov	s15, r3
 80090aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009210 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b6:	4b51      	ldr	r3, [pc, #324]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090be:	ee07 3a90 	vmov	s15, r3
 80090c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800920c <HAL_RCC_GetSysClockFreq+0x2e4>
 80090ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090e6:	e065      	b.n	80091b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	ee07 3a90 	vmov	s15, r3
 80090ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009214 <HAL_RCC_GetSysClockFreq+0x2ec>
 80090f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090fa:	4b40      	ldr	r3, [pc, #256]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800910a:	ed97 6a02 	vldr	s12, [r7, #8]
 800910e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800920c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800911a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800911e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800912a:	e043      	b.n	80091b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009136:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009218 <HAL_RCC_GetSysClockFreq+0x2f0>
 800913a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913e:	4b2f      	ldr	r3, [pc, #188]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800914e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009152:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800920c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800915e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800916e:	e021      	b.n	80091b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009214 <HAL_RCC_GetSysClockFreq+0x2ec>
 800917e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009182:	4b1e      	ldr	r3, [pc, #120]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009192:	ed97 6a02 	vldr	s12, [r7, #8]
 8009196:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800920c <HAL_RCC_GetSysClockFreq+0x2e4>
 800919a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800919e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80091b4:	4b11      	ldr	r3, [pc, #68]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b8:	0a5b      	lsrs	r3, r3, #9
 80091ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091be:	3301      	adds	r3, #1
 80091c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	ee07 3a90 	vmov	s15, r3
 80091c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80091cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80091d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d8:	ee17 3a90 	vmov	r3, s15
 80091dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80091de:	e005      	b.n	80091ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80091e0:	2300      	movs	r3, #0
 80091e2:	61bb      	str	r3, [r7, #24]
    break;
 80091e4:	e002      	b.n	80091ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80091e6:	4b07      	ldr	r3, [pc, #28]	; (8009204 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091e8:	61bb      	str	r3, [r7, #24]
    break;
 80091ea:	bf00      	nop
  }

  return sysclockfreq;
 80091ec:	69bb      	ldr	r3, [r7, #24]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3724      	adds	r7, #36	; 0x24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	58024400 	.word	0x58024400
 8009200:	03d09000 	.word	0x03d09000
 8009204:	003d0900 	.word	0x003d0900
 8009208:	02dc6c00 	.word	0x02dc6c00
 800920c:	46000000 	.word	0x46000000
 8009210:	4c742400 	.word	0x4c742400
 8009214:	4a742400 	.word	0x4a742400
 8009218:	4c371b00 	.word	0x4c371b00

0800921c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009222:	f7ff fe81 	bl	8008f28 <HAL_RCC_GetSysClockFreq>
 8009226:	4602      	mov	r2, r0
 8009228:	4b10      	ldr	r3, [pc, #64]	; (800926c <HAL_RCC_GetHCLKFreq+0x50>)
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	0a1b      	lsrs	r3, r3, #8
 800922e:	f003 030f 	and.w	r3, r3, #15
 8009232:	490f      	ldr	r1, [pc, #60]	; (8009270 <HAL_RCC_GetHCLKFreq+0x54>)
 8009234:	5ccb      	ldrb	r3, [r1, r3]
 8009236:	f003 031f 	and.w	r3, r3, #31
 800923a:	fa22 f303 	lsr.w	r3, r2, r3
 800923e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009240:	4b0a      	ldr	r3, [pc, #40]	; (800926c <HAL_RCC_GetHCLKFreq+0x50>)
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	f003 030f 	and.w	r3, r3, #15
 8009248:	4a09      	ldr	r2, [pc, #36]	; (8009270 <HAL_RCC_GetHCLKFreq+0x54>)
 800924a:	5cd3      	ldrb	r3, [r2, r3]
 800924c:	f003 031f 	and.w	r3, r3, #31
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	fa22 f303 	lsr.w	r3, r2, r3
 8009256:	4a07      	ldr	r2, [pc, #28]	; (8009274 <HAL_RCC_GetHCLKFreq+0x58>)
 8009258:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800925a:	4a07      	ldr	r2, [pc, #28]	; (8009278 <HAL_RCC_GetHCLKFreq+0x5c>)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009260:	4b04      	ldr	r3, [pc, #16]	; (8009274 <HAL_RCC_GetHCLKFreq+0x58>)
 8009262:	681b      	ldr	r3, [r3, #0]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	58024400 	.word	0x58024400
 8009270:	0800f25c 	.word	0x0800f25c
 8009274:	24000004 	.word	0x24000004
 8009278:	24000000 	.word	0x24000000

0800927c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009280:	f7ff ffcc 	bl	800921c <HAL_RCC_GetHCLKFreq>
 8009284:	4602      	mov	r2, r0
 8009286:	4b06      	ldr	r3, [pc, #24]	; (80092a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009288:	69db      	ldr	r3, [r3, #28]
 800928a:	091b      	lsrs	r3, r3, #4
 800928c:	f003 0307 	and.w	r3, r3, #7
 8009290:	4904      	ldr	r1, [pc, #16]	; (80092a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009292:	5ccb      	ldrb	r3, [r1, r3]
 8009294:	f003 031f 	and.w	r3, r3, #31
 8009298:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800929c:	4618      	mov	r0, r3
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	58024400 	.word	0x58024400
 80092a4:	0800f25c 	.word	0x0800f25c

080092a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80092ac:	f7ff ffb6 	bl	800921c <HAL_RCC_GetHCLKFreq>
 80092b0:	4602      	mov	r2, r0
 80092b2:	4b06      	ldr	r3, [pc, #24]	; (80092cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	0a1b      	lsrs	r3, r3, #8
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	4904      	ldr	r1, [pc, #16]	; (80092d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092be:	5ccb      	ldrb	r3, [r1, r3]
 80092c0:	f003 031f 	and.w	r3, r3, #31
 80092c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	58024400 	.word	0x58024400
 80092d0:	0800f25c 	.word	0x0800f25c

080092d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092dc:	2300      	movs	r3, #0
 80092de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092e0:	2300      	movs	r3, #0
 80092e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d03f      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092f8:	d02a      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80092fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092fe:	d824      	bhi.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009304:	d018      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800930a:	d81e      	bhi.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800930c:	2b00      	cmp	r3, #0
 800930e:	d003      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009314:	d007      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009316:	e018      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009318:	4bab      	ldr	r3, [pc, #684]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931c:	4aaa      	ldr	r2, [pc, #680]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800931e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009322:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009324:	e015      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3304      	adds	r3, #4
 800932a:	2102      	movs	r1, #2
 800932c:	4618      	mov	r0, r3
 800932e:	f001 fff3 	bl	800b318 <RCCEx_PLL2_Config>
 8009332:	4603      	mov	r3, r0
 8009334:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009336:	e00c      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3324      	adds	r3, #36	; 0x24
 800933c:	2102      	movs	r1, #2
 800933e:	4618      	mov	r0, r3
 8009340:	f002 f89c 	bl	800b47c <RCCEx_PLL3_Config>
 8009344:	4603      	mov	r3, r0
 8009346:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009348:	e003      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	75fb      	strb	r3, [r7, #23]
      break;
 800934e:	e000      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009352:	7dfb      	ldrb	r3, [r7, #23]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d109      	bne.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009358:	4b9b      	ldr	r3, [pc, #620]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800935a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800935c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009364:	4998      	ldr	r1, [pc, #608]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009366:	4313      	orrs	r3, r2
 8009368:	650b      	str	r3, [r1, #80]	; 0x50
 800936a:	e001      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009378:	2b00      	cmp	r3, #0
 800937a:	d03d      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009380:	2b04      	cmp	r3, #4
 8009382:	d826      	bhi.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009384:	a201      	add	r2, pc, #4	; (adr r2, 800938c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938a:	bf00      	nop
 800938c:	080093a1 	.word	0x080093a1
 8009390:	080093af 	.word	0x080093af
 8009394:	080093c1 	.word	0x080093c1
 8009398:	080093d9 	.word	0x080093d9
 800939c:	080093d9 	.word	0x080093d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a0:	4b89      	ldr	r3, [pc, #548]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a4:	4a88      	ldr	r2, [pc, #544]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093ac:	e015      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3304      	adds	r3, #4
 80093b2:	2100      	movs	r1, #0
 80093b4:	4618      	mov	r0, r3
 80093b6:	f001 ffaf 	bl	800b318 <RCCEx_PLL2_Config>
 80093ba:	4603      	mov	r3, r0
 80093bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093be:	e00c      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3324      	adds	r3, #36	; 0x24
 80093c4:	2100      	movs	r1, #0
 80093c6:	4618      	mov	r0, r3
 80093c8:	f002 f858 	bl	800b47c <RCCEx_PLL3_Config>
 80093cc:	4603      	mov	r3, r0
 80093ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093d0:	e003      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	75fb      	strb	r3, [r7, #23]
      break;
 80093d6:	e000      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80093d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093e0:	4b79      	ldr	r3, [pc, #484]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e4:	f023 0207 	bic.w	r2, r3, #7
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ec:	4976      	ldr	r1, [pc, #472]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	650b      	str	r3, [r1, #80]	; 0x50
 80093f2:	e001      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009400:	2b00      	cmp	r3, #0
 8009402:	d042      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940c:	d02b      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800940e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009412:	d825      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009414:	2bc0      	cmp	r3, #192	; 0xc0
 8009416:	d028      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009418:	2bc0      	cmp	r3, #192	; 0xc0
 800941a:	d821      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800941c:	2b80      	cmp	r3, #128	; 0x80
 800941e:	d016      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009420:	2b80      	cmp	r3, #128	; 0x80
 8009422:	d81d      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009428:	2b40      	cmp	r3, #64	; 0x40
 800942a:	d007      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800942c:	e018      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800942e:	4b66      	ldr	r3, [pc, #408]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009432:	4a65      	ldr	r2, [pc, #404]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009438:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800943a:	e017      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3304      	adds	r3, #4
 8009440:	2100      	movs	r1, #0
 8009442:	4618      	mov	r0, r3
 8009444:	f001 ff68 	bl	800b318 <RCCEx_PLL2_Config>
 8009448:	4603      	mov	r3, r0
 800944a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800944c:	e00e      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3324      	adds	r3, #36	; 0x24
 8009452:	2100      	movs	r1, #0
 8009454:	4618      	mov	r0, r3
 8009456:	f002 f811 	bl	800b47c <RCCEx_PLL3_Config>
 800945a:	4603      	mov	r3, r0
 800945c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800945e:	e005      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	75fb      	strb	r3, [r7, #23]
      break;
 8009464:	e002      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009466:	bf00      	nop
 8009468:	e000      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800946a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800946c:	7dfb      	ldrb	r3, [r7, #23]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d109      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009472:	4b55      	ldr	r3, [pc, #340]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009476:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800947e:	4952      	ldr	r1, [pc, #328]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009480:	4313      	orrs	r3, r2
 8009482:	650b      	str	r3, [r1, #80]	; 0x50
 8009484:	e001      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009486:	7dfb      	ldrb	r3, [r7, #23]
 8009488:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009492:	2b00      	cmp	r3, #0
 8009494:	d049      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800949c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094a0:	d030      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80094a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094a6:	d82a      	bhi.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094ac:	d02c      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80094ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094b2:	d824      	bhi.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094b8:	d018      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x218>
 80094ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094be:	d81e      	bhi.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d003      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80094c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094c8:	d007      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x206>
 80094ca:	e018      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094cc:	4b3e      	ldr	r3, [pc, #248]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d0:	4a3d      	ldr	r2, [pc, #244]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094d8:	e017      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	3304      	adds	r3, #4
 80094de:	2100      	movs	r1, #0
 80094e0:	4618      	mov	r0, r3
 80094e2:	f001 ff19 	bl	800b318 <RCCEx_PLL2_Config>
 80094e6:	4603      	mov	r3, r0
 80094e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80094ea:	e00e      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3324      	adds	r3, #36	; 0x24
 80094f0:	2100      	movs	r1, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 ffc2 	bl	800b47c <RCCEx_PLL3_Config>
 80094f8:	4603      	mov	r3, r0
 80094fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094fc:	e005      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	75fb      	strb	r3, [r7, #23]
      break;
 8009502:	e002      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009504:	bf00      	nop
 8009506:	e000      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800950a:	7dfb      	ldrb	r3, [r7, #23]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10a      	bne.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009510:	4b2d      	ldr	r3, [pc, #180]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009514:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800951e:	492a      	ldr	r1, [pc, #168]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009520:	4313      	orrs	r3, r2
 8009522:	658b      	str	r3, [r1, #88]	; 0x58
 8009524:	e001      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009532:	2b00      	cmp	r3, #0
 8009534:	d04c      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800953c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009540:	d030      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009542:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009546:	d82a      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009548:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800954c:	d02c      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800954e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009552:	d824      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009558:	d018      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800955a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800955e:	d81e      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009568:	d007      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800956a:	e018      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800956c:	4b16      	ldr	r3, [pc, #88]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	4a15      	ldr	r2, [pc, #84]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009578:	e017      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	3304      	adds	r3, #4
 800957e:	2100      	movs	r1, #0
 8009580:	4618      	mov	r0, r3
 8009582:	f001 fec9 	bl	800b318 <RCCEx_PLL2_Config>
 8009586:	4603      	mov	r3, r0
 8009588:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800958a:	e00e      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3324      	adds	r3, #36	; 0x24
 8009590:	2100      	movs	r1, #0
 8009592:	4618      	mov	r0, r3
 8009594:	f001 ff72 	bl	800b47c <RCCEx_PLL3_Config>
 8009598:	4603      	mov	r3, r0
 800959a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800959c:	e005      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	75fb      	strb	r3, [r7, #23]
      break;
 80095a2:	e002      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80095a4:	bf00      	nop
 80095a6:	e000      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80095a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10d      	bne.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095b0:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095be:	4902      	ldr	r1, [pc, #8]	; (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	658b      	str	r3, [r1, #88]	; 0x58
 80095c4:	e004      	b.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80095c6:	bf00      	nop
 80095c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d032      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e0:	2b30      	cmp	r3, #48	; 0x30
 80095e2:	d01c      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80095e4:	2b30      	cmp	r3, #48	; 0x30
 80095e6:	d817      	bhi.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d00c      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80095ec:	2b20      	cmp	r3, #32
 80095ee:	d813      	bhi.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d016      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80095f4:	2b10      	cmp	r3, #16
 80095f6:	d10f      	bne.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095f8:	4baf      	ldr	r3, [pc, #700]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	4aae      	ldr	r2, [pc, #696]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80095fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009604:	e00e      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3304      	adds	r3, #4
 800960a:	2102      	movs	r1, #2
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fe83 	bl	800b318 <RCCEx_PLL2_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009616:	e005      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	75fb      	strb	r3, [r7, #23]
      break;
 800961c:	e002      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800961e:	bf00      	nop
 8009620:	e000      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009624:	7dfb      	ldrb	r3, [r7, #23]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d109      	bne.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800962a:	4ba3      	ldr	r3, [pc, #652]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800962c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800962e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009636:	49a0      	ldr	r1, [pc, #640]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009638:	4313      	orrs	r3, r2
 800963a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800963c:	e001      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800963e:	7dfb      	ldrb	r3, [r7, #23]
 8009640:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800964a:	2b00      	cmp	r3, #0
 800964c:	d047      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009656:	d030      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800965c:	d82a      	bhi.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800965e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009662:	d02c      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009664:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009668:	d824      	bhi.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800966a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800966e:	d018      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009674:	d81e      	bhi.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d003      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800967a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800967e:	d007      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009680:	e018      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009682:	4b8d      	ldr	r3, [pc, #564]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009686:	4a8c      	ldr	r2, [pc, #560]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800968c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800968e:	e017      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3304      	adds	r3, #4
 8009694:	2100      	movs	r1, #0
 8009696:	4618      	mov	r0, r3
 8009698:	f001 fe3e 	bl	800b318 <RCCEx_PLL2_Config>
 800969c:	4603      	mov	r3, r0
 800969e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096a0:	e00e      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3324      	adds	r3, #36	; 0x24
 80096a6:	2100      	movs	r1, #0
 80096a8:	4618      	mov	r0, r3
 80096aa:	f001 fee7 	bl	800b47c <RCCEx_PLL3_Config>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096b2:	e005      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	75fb      	strb	r3, [r7, #23]
      break;
 80096b8:	e002      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80096ba:	bf00      	nop
 80096bc:	e000      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80096be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d109      	bne.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096c6:	4b7c      	ldr	r3, [pc, #496]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ca:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d2:	4979      	ldr	r1, [pc, #484]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	650b      	str	r3, [r1, #80]	; 0x50
 80096d8:	e001      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d049      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096f2:	d02e      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80096f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096f8:	d828      	bhi.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80096fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096fe:	d02a      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8009700:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009704:	d822      	bhi.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009706:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800970a:	d026      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800970c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009710:	d81c      	bhi.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009716:	d010      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800971c:	d816      	bhi.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d01d      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009726:	d111      	bne.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3304      	adds	r3, #4
 800972c:	2101      	movs	r1, #1
 800972e:	4618      	mov	r0, r3
 8009730:	f001 fdf2 	bl	800b318 <RCCEx_PLL2_Config>
 8009734:	4603      	mov	r3, r0
 8009736:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009738:	e012      	b.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	3324      	adds	r3, #36	; 0x24
 800973e:	2101      	movs	r1, #1
 8009740:	4618      	mov	r0, r3
 8009742:	f001 fe9b 	bl	800b47c <RCCEx_PLL3_Config>
 8009746:	4603      	mov	r3, r0
 8009748:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800974a:	e009      	b.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	75fb      	strb	r3, [r7, #23]
      break;
 8009750:	e006      	b.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009752:	bf00      	nop
 8009754:	e004      	b.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009756:	bf00      	nop
 8009758:	e002      	b.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800975a:	bf00      	nop
 800975c:	e000      	b.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800975e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009760:	7dfb      	ldrb	r3, [r7, #23]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d109      	bne.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009766:	4b54      	ldr	r3, [pc, #336]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800976a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009772:	4951      	ldr	r1, [pc, #324]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009774:	4313      	orrs	r3, r2
 8009776:	650b      	str	r3, [r1, #80]	; 0x50
 8009778:	e001      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800977a:	7dfb      	ldrb	r3, [r7, #23]
 800977c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d04b      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009794:	d02e      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800979a:	d828      	bhi.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800979c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a0:	d02a      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80097a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a6:	d822      	bhi.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80097a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097ac:	d026      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x528>
 80097ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097b2:	d81c      	bhi.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80097b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097b8:	d010      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80097ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097be:	d816      	bhi.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d01d      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80097c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097c8:	d111      	bne.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	3304      	adds	r3, #4
 80097ce:	2101      	movs	r1, #1
 80097d0:	4618      	mov	r0, r3
 80097d2:	f001 fda1 	bl	800b318 <RCCEx_PLL2_Config>
 80097d6:	4603      	mov	r3, r0
 80097d8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097da:	e012      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3324      	adds	r3, #36	; 0x24
 80097e0:	2101      	movs	r1, #1
 80097e2:	4618      	mov	r0, r3
 80097e4:	f001 fe4a 	bl	800b47c <RCCEx_PLL3_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097ec:	e009      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	75fb      	strb	r3, [r7, #23]
      break;
 80097f2:	e006      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80097f4:	bf00      	nop
 80097f6:	e004      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80097f8:	bf00      	nop
 80097fa:	e002      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80097fc:	bf00      	nop
 80097fe:	e000      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009802:	7dfb      	ldrb	r3, [r7, #23]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10a      	bne.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009808:	4b2b      	ldr	r3, [pc, #172]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800980a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800980c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009816:	4928      	ldr	r1, [pc, #160]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009818:	4313      	orrs	r3, r2
 800981a:	658b      	str	r3, [r1, #88]	; 0x58
 800981c:	e001      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d02f      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009836:	d00e      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800983c:	d814      	bhi.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800983e:	2b00      	cmp	r3, #0
 8009840:	d015      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009846:	d10f      	bne.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009848:	4b1b      	ldr	r3, [pc, #108]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	4a1a      	ldr	r2, [pc, #104]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800984e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009854:	e00c      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	3304      	adds	r3, #4
 800985a:	2101      	movs	r1, #1
 800985c:	4618      	mov	r0, r3
 800985e:	f001 fd5b 	bl	800b318 <RCCEx_PLL2_Config>
 8009862:	4603      	mov	r3, r0
 8009864:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009866:	e003      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	75fb      	strb	r3, [r7, #23]
      break;
 800986c:	e000      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800986e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009870:	7dfb      	ldrb	r3, [r7, #23]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d109      	bne.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009876:	4b10      	ldr	r3, [pc, #64]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800987a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009882:	490d      	ldr	r1, [pc, #52]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009884:	4313      	orrs	r3, r2
 8009886:	650b      	str	r3, [r1, #80]	; 0x50
 8009888:	e001      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d033      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d81c      	bhi.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80098a2:	a201      	add	r2, pc, #4	; (adr r2, 80098a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	080098e3 	.word	0x080098e3
 80098ac:	080098bd 	.word	0x080098bd
 80098b0:	080098cb 	.word	0x080098cb
 80098b4:	080098e3 	.word	0x080098e3
 80098b8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098bc:	4bb8      	ldr	r3, [pc, #736]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	4ab7      	ldr	r2, [pc, #732]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098c8:	e00c      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3304      	adds	r3, #4
 80098ce:	2102      	movs	r1, #2
 80098d0:	4618      	mov	r0, r3
 80098d2:	f001 fd21 	bl	800b318 <RCCEx_PLL2_Config>
 80098d6:	4603      	mov	r3, r0
 80098d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098da:	e003      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	75fb      	strb	r3, [r7, #23]
      break;
 80098e0:	e000      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80098e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d109      	bne.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80098ea:	4bad      	ldr	r3, [pc, #692]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ee:	f023 0203 	bic.w	r2, r3, #3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f6:	49aa      	ldr	r1, [pc, #680]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098fc:	e001      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 8086 	beq.w	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009910:	4ba4      	ldr	r3, [pc, #656]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4aa3      	ldr	r2, [pc, #652]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800991a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800991c:	f7f9 fe7c 	bl	8003618 <HAL_GetTick>
 8009920:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009922:	e009      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009924:	f7f9 fe78 	bl	8003618 <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	2b64      	cmp	r3, #100	; 0x64
 8009930:	d902      	bls.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	75fb      	strb	r3, [r7, #23]
        break;
 8009936:	e005      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009938:	4b9a      	ldr	r3, [pc, #616]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009940:	2b00      	cmp	r3, #0
 8009942:	d0ef      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009944:	7dfb      	ldrb	r3, [r7, #23]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d166      	bne.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800994a:	4b95      	ldr	r3, [pc, #596]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800994c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009954:	4053      	eors	r3, r2
 8009956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800995a:	2b00      	cmp	r3, #0
 800995c:	d013      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800995e:	4b90      	ldr	r3, [pc, #576]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009966:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009968:	4b8d      	ldr	r3, [pc, #564]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800996a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996c:	4a8c      	ldr	r2, [pc, #560]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800996e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009972:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009974:	4b8a      	ldr	r3, [pc, #552]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009978:	4a89      	ldr	r2, [pc, #548]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800997a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800997e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009980:	4a87      	ldr	r2, [pc, #540]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800998c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009990:	d115      	bne.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009992:	f7f9 fe41 	bl	8003618 <HAL_GetTick>
 8009996:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009998:	e00b      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800999a:	f7f9 fe3d 	bl	8003618 <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d902      	bls.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	75fb      	strb	r3, [r7, #23]
            break;
 80099b0:	e005      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099b2:	4b7b      	ldr	r3, [pc, #492]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0ed      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d126      	bne.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099d2:	d10d      	bne.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80099d4:	4b72      	ldr	r3, [pc, #456]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099e2:	0919      	lsrs	r1, r3, #4
 80099e4:	4b70      	ldr	r3, [pc, #448]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80099e6:	400b      	ands	r3, r1
 80099e8:	496d      	ldr	r1, [pc, #436]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	610b      	str	r3, [r1, #16]
 80099ee:	e005      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80099f0:	4b6b      	ldr	r3, [pc, #428]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	4a6a      	ldr	r2, [pc, #424]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099fa:	6113      	str	r3, [r2, #16]
 80099fc:	4b68      	ldr	r3, [pc, #416]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a0a:	4965      	ldr	r1, [pc, #404]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	670b      	str	r3, [r1, #112]	; 0x70
 8009a10:	e004      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	75bb      	strb	r3, [r7, #22]
 8009a16:	e001      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a18:	7dfb      	ldrb	r3, [r7, #23]
 8009a1a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d07e      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a2c:	2b28      	cmp	r3, #40	; 0x28
 8009a2e:	d867      	bhi.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009a30:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a36:	bf00      	nop
 8009a38:	08009b07 	.word	0x08009b07
 8009a3c:	08009b01 	.word	0x08009b01
 8009a40:	08009b01 	.word	0x08009b01
 8009a44:	08009b01 	.word	0x08009b01
 8009a48:	08009b01 	.word	0x08009b01
 8009a4c:	08009b01 	.word	0x08009b01
 8009a50:	08009b01 	.word	0x08009b01
 8009a54:	08009b01 	.word	0x08009b01
 8009a58:	08009add 	.word	0x08009add
 8009a5c:	08009b01 	.word	0x08009b01
 8009a60:	08009b01 	.word	0x08009b01
 8009a64:	08009b01 	.word	0x08009b01
 8009a68:	08009b01 	.word	0x08009b01
 8009a6c:	08009b01 	.word	0x08009b01
 8009a70:	08009b01 	.word	0x08009b01
 8009a74:	08009b01 	.word	0x08009b01
 8009a78:	08009aef 	.word	0x08009aef
 8009a7c:	08009b01 	.word	0x08009b01
 8009a80:	08009b01 	.word	0x08009b01
 8009a84:	08009b01 	.word	0x08009b01
 8009a88:	08009b01 	.word	0x08009b01
 8009a8c:	08009b01 	.word	0x08009b01
 8009a90:	08009b01 	.word	0x08009b01
 8009a94:	08009b01 	.word	0x08009b01
 8009a98:	08009b07 	.word	0x08009b07
 8009a9c:	08009b01 	.word	0x08009b01
 8009aa0:	08009b01 	.word	0x08009b01
 8009aa4:	08009b01 	.word	0x08009b01
 8009aa8:	08009b01 	.word	0x08009b01
 8009aac:	08009b01 	.word	0x08009b01
 8009ab0:	08009b01 	.word	0x08009b01
 8009ab4:	08009b01 	.word	0x08009b01
 8009ab8:	08009b07 	.word	0x08009b07
 8009abc:	08009b01 	.word	0x08009b01
 8009ac0:	08009b01 	.word	0x08009b01
 8009ac4:	08009b01 	.word	0x08009b01
 8009ac8:	08009b01 	.word	0x08009b01
 8009acc:	08009b01 	.word	0x08009b01
 8009ad0:	08009b01 	.word	0x08009b01
 8009ad4:	08009b01 	.word	0x08009b01
 8009ad8:	08009b07 	.word	0x08009b07
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f001 fc18 	bl	800b318 <RCCEx_PLL2_Config>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009aec:	e00c      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	3324      	adds	r3, #36	; 0x24
 8009af2:	2101      	movs	r1, #1
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 fcc1 	bl	800b47c <RCCEx_PLL3_Config>
 8009afa:	4603      	mov	r3, r0
 8009afc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009afe:	e003      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	75fb      	strb	r3, [r7, #23]
      break;
 8009b04:	e000      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8009b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d109      	bne.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b0e:	4b24      	ldr	r3, [pc, #144]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b12:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b1a:	4921      	ldr	r1, [pc, #132]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	654b      	str	r3, [r1, #84]	; 0x54
 8009b20:	e001      	b.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d03e      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b36:	2b05      	cmp	r3, #5
 8009b38:	d820      	bhi.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009b3a:	a201      	add	r2, pc, #4	; (adr r2, 8009b40 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b40:	08009b83 	.word	0x08009b83
 8009b44:	08009b59 	.word	0x08009b59
 8009b48:	08009b6b 	.word	0x08009b6b
 8009b4c:	08009b83 	.word	0x08009b83
 8009b50:	08009b83 	.word	0x08009b83
 8009b54:	08009b83 	.word	0x08009b83
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f001 fbda 	bl	800b318 <RCCEx_PLL2_Config>
 8009b64:	4603      	mov	r3, r0
 8009b66:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b68:	e00c      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	3324      	adds	r3, #36	; 0x24
 8009b6e:	2101      	movs	r1, #1
 8009b70:	4618      	mov	r0, r3
 8009b72:	f001 fc83 	bl	800b47c <RCCEx_PLL3_Config>
 8009b76:	4603      	mov	r3, r0
 8009b78:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b7a:	e003      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b80:	e000      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009b82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d110      	bne.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b8a:	4b05      	ldr	r3, [pc, #20]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8e:	f023 0207 	bic.w	r2, r3, #7
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b96:	4902      	ldr	r1, [pc, #8]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	654b      	str	r3, [r1, #84]	; 0x54
 8009b9c:	e008      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8009b9e:	bf00      	nop
 8009ba0:	58024400 	.word	0x58024400
 8009ba4:	58024800 	.word	0x58024800
 8009ba8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
 8009bae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d039      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bc2:	2b05      	cmp	r3, #5
 8009bc4:	d820      	bhi.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009bc6:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009c0f 	.word	0x08009c0f
 8009bd0:	08009be5 	.word	0x08009be5
 8009bd4:	08009bf7 	.word	0x08009bf7
 8009bd8:	08009c0f 	.word	0x08009c0f
 8009bdc:	08009c0f 	.word	0x08009c0f
 8009be0:	08009c0f 	.word	0x08009c0f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3304      	adds	r3, #4
 8009be8:	2101      	movs	r1, #1
 8009bea:	4618      	mov	r0, r3
 8009bec:	f001 fb94 	bl	800b318 <RCCEx_PLL2_Config>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bf4:	e00c      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	3324      	adds	r3, #36	; 0x24
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f001 fc3d 	bl	800b47c <RCCEx_PLL3_Config>
 8009c02:	4603      	mov	r3, r0
 8009c04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c06:	e003      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c0c:	e000      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10a      	bne.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c16:	4bb7      	ldr	r3, [pc, #732]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c1a:	f023 0207 	bic.w	r2, r3, #7
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c24:	49b3      	ldr	r1, [pc, #716]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	658b      	str	r3, [r1, #88]	; 0x58
 8009c2a:	e001      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c2c:	7dfb      	ldrb	r3, [r7, #23]
 8009c2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0320 	and.w	r3, r3, #32
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d04b      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c46:	d02e      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c4c:	d828      	bhi.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c52:	d02a      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c58:	d822      	bhi.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009c5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c5e:	d026      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009c60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c64:	d81c      	bhi.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c6a:	d010      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c70:	d816      	bhi.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d01d      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c7a:	d111      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f001 fb48 	bl	800b318 <RCCEx_PLL2_Config>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c8c:	e012      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3324      	adds	r3, #36	; 0x24
 8009c92:	2102      	movs	r1, #2
 8009c94:	4618      	mov	r0, r3
 8009c96:	f001 fbf1 	bl	800b47c <RCCEx_PLL3_Config>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c9e:	e009      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ca4:	e006      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009ca6:	bf00      	nop
 8009ca8:	e004      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009caa:	bf00      	nop
 8009cac:	e002      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009cae:	bf00      	nop
 8009cb0:	e000      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10a      	bne.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cba:	4b8e      	ldr	r3, [pc, #568]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cc8:	498a      	ldr	r1, [pc, #552]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	654b      	str	r3, [r1, #84]	; 0x54
 8009cce:	e001      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
 8009cd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d04b      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ce6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cea:	d02e      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8009cec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cf0:	d828      	bhi.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf6:	d02a      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cfc:	d822      	bhi.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d02:	d026      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d08:	d81c      	bhi.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d0e:	d010      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d14:	d816      	bhi.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d01d      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d1e:	d111      	bne.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3304      	adds	r3, #4
 8009d24:	2100      	movs	r1, #0
 8009d26:	4618      	mov	r0, r3
 8009d28:	f001 faf6 	bl	800b318 <RCCEx_PLL2_Config>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d30:	e012      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3324      	adds	r3, #36	; 0x24
 8009d36:	2102      	movs	r1, #2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 fb9f 	bl	800b47c <RCCEx_PLL3_Config>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d42:	e009      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	75fb      	strb	r3, [r7, #23]
      break;
 8009d48:	e006      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009d4a:	bf00      	nop
 8009d4c:	e004      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009d4e:	bf00      	nop
 8009d50:	e002      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009d52:	bf00      	nop
 8009d54:	e000      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d10a      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d5e:	4b65      	ldr	r3, [pc, #404]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d62:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d6c:	4961      	ldr	r1, [pc, #388]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	658b      	str	r3, [r1, #88]	; 0x58
 8009d72:	e001      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
 8009d76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d04b      	beq.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d8a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d8e:	d02e      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009d90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d94:	d828      	bhi.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d9a:	d02a      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da0:	d822      	bhi.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009da2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009da6:	d026      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009da8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009dac:	d81c      	bhi.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009dae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009db2:	d010      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009db8:	d816      	bhi.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d01d      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dc2:	d111      	bne.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	2100      	movs	r1, #0
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f001 faa4 	bl	800b318 <RCCEx_PLL2_Config>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009dd4:	e012      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3324      	adds	r3, #36	; 0x24
 8009dda:	2102      	movs	r1, #2
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f001 fb4d 	bl	800b47c <RCCEx_PLL3_Config>
 8009de2:	4603      	mov	r3, r0
 8009de4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009de6:	e009      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	75fb      	strb	r3, [r7, #23]
      break;
 8009dec:	e006      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009dee:	bf00      	nop
 8009df0:	e004      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009df2:	bf00      	nop
 8009df4:	e002      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009df6:	bf00      	nop
 8009df8:	e000      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dfc:	7dfb      	ldrb	r3, [r7, #23]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10a      	bne.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e02:	4b3c      	ldr	r3, [pc, #240]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e10:	4938      	ldr	r1, [pc, #224]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009e12:	4313      	orrs	r3, r2
 8009e14:	658b      	str	r3, [r1, #88]	; 0x58
 8009e16:	e001      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0308 	and.w	r3, r3, #8
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01a      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e32:	d10a      	bne.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3324      	adds	r3, #36	; 0x24
 8009e38:	2102      	movs	r1, #2
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f001 fb1e 	bl	800b47c <RCCEx_PLL3_Config>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e4a:	4b2a      	ldr	r3, [pc, #168]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e58:	4926      	ldr	r1, [pc, #152]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 0310 	and.w	r3, r3, #16
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d01a      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e74:	d10a      	bne.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3324      	adds	r3, #36	; 0x24
 8009e7a:	2102      	movs	r1, #2
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 fafd 	bl	800b47c <RCCEx_PLL3_Config>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e8c:	4b19      	ldr	r3, [pc, #100]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e9a:	4916      	ldr	r1, [pc, #88]	; (8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d036      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eb6:	d01f      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ebc:	d817      	bhi.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d003      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ec6:	d009      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009ec8:	e011      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	2100      	movs	r1, #0
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f001 fa21 	bl	800b318 <RCCEx_PLL2_Config>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009eda:	e00e      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3324      	adds	r3, #36	; 0x24
 8009ee0:	2102      	movs	r1, #2
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f001 faca 	bl	800b47c <RCCEx_PLL3_Config>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009eec:	e005      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef2:	e002      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009ef4:	58024400 	.word	0x58024400
      break;
 8009ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f00:	4b93      	ldr	r3, [pc, #588]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f0e:	4990      	ldr	r1, [pc, #576]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f10:	4313      	orrs	r3, r2
 8009f12:	658b      	str	r3, [r1, #88]	; 0x58
 8009f14:	e001      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d033      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f30:	d01c      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009f32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f36:	d816      	bhi.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f3c:	d003      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009f3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f42:	d007      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009f44:	e00f      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f46:	4b82      	ldr	r3, [pc, #520]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4a:	4a81      	ldr	r2, [pc, #516]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f52:	e00c      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	3324      	adds	r3, #36	; 0x24
 8009f58:	2101      	movs	r1, #1
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 fa8e 	bl	800b47c <RCCEx_PLL3_Config>
 8009f60:	4603      	mov	r3, r0
 8009f62:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f64:	e003      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	75fb      	strb	r3, [r7, #23]
      break;
 8009f6a:	e000      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f74:	4b76      	ldr	r3, [pc, #472]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f82:	4973      	ldr	r1, [pc, #460]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	654b      	str	r3, [r1, #84]	; 0x54
 8009f88:	e001      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d029      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8009fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fa6:	d007      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009fa8:	e00f      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009faa:	4b69      	ldr	r3, [pc, #420]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	4a68      	ldr	r2, [pc, #416]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fb6:	e00b      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	3304      	adds	r3, #4
 8009fbc:	2102      	movs	r1, #2
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f001 f9aa 	bl	800b318 <RCCEx_PLL2_Config>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fc8:	e002      	b.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8009fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d109      	bne.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009fd6:	4b5e      	ldr	r3, [pc, #376]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe2:	495b      	ldr	r1, [pc, #364]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009fe8:	e001      	b.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
 8009fec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00a      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3324      	adds	r3, #36	; 0x24
 8009ffe:	2102      	movs	r1, #2
 800a000:	4618      	mov	r0, r3
 800a002:	f001 fa3b 	bl	800b47c <RCCEx_PLL3_Config>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d030      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a024:	d017      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800a026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a02a:	d811      	bhi.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a030:	d013      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a036:	d80b      	bhi.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d010      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a03c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a040:	d106      	bne.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a042:	4b43      	ldr	r3, [pc, #268]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a046:	4a42      	ldr	r2, [pc, #264]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a04c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a04e:	e007      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	75fb      	strb	r3, [r7, #23]
      break;
 800a054:	e004      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a056:	bf00      	nop
 800a058:	e002      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a05a:	bf00      	nop
 800a05c:	e000      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a05e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a060:	7dfb      	ldrb	r3, [r7, #23]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d109      	bne.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a066:	4b3a      	ldr	r3, [pc, #232]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a06a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a072:	4937      	ldr	r1, [pc, #220]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a074:	4313      	orrs	r3, r2
 800a076:	654b      	str	r3, [r1, #84]	; 0x54
 800a078:	e001      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
 800a07c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d008      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a08a:	4b31      	ldr	r3, [pc, #196]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a08c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a08e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a096:	492e      	ldr	r1, [pc, #184]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a098:	4313      	orrs	r3, r2
 800a09a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d009      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a0a8:	4b29      	ldr	r3, [pc, #164]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0b6:	4926      	ldr	r1, [pc, #152]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d008      	beq.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0c8:	4b21      	ldr	r3, [pc, #132]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0d4:	491e      	ldr	r1, [pc, #120]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00d      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0e6:	4b1a      	ldr	r3, [pc, #104]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	4a19      	ldr	r2, [pc, #100]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0f0:	6113      	str	r3, [r2, #16]
 800a0f2:	4b17      	ldr	r3, [pc, #92]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0f4:	691a      	ldr	r2, [r3, #16]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a0fc:	4914      	ldr	r1, [pc, #80]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	da08      	bge.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a10a:	4b11      	ldr	r3, [pc, #68]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a10c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a10e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a116:	490e      	ldr	r1, [pc, #56]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a118:	4313      	orrs	r3, r2
 800a11a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d009      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a128:	4b09      	ldr	r3, [pc, #36]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a12a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a136:	4906      	ldr	r1, [pc, #24]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a138:	4313      	orrs	r3, r2
 800a13a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a13c:	7dbb      	ldrb	r3, [r7, #22]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d101      	bne.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	e000      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	58024400 	.word	0x58024400

0800a154 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b090      	sub	sp, #64	; 0x40
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a162:	f040 8095 	bne.w	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a166:	4bae      	ldr	r3, [pc, #696]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a16a:	f003 0307 	and.w	r3, r3, #7
 800a16e:	633b      	str	r3, [r7, #48]	; 0x30
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	2b04      	cmp	r3, #4
 800a174:	f200 8088 	bhi.w	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a178:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17e:	bf00      	nop
 800a180:	0800a195 	.word	0x0800a195
 800a184:	0800a1bd 	.word	0x0800a1bd
 800a188:	0800a1e5 	.word	0x0800a1e5
 800a18c:	0800a281 	.word	0x0800a281
 800a190:	0800a20d 	.word	0x0800a20d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a194:	4ba2      	ldr	r3, [pc, #648]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a19c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1a0:	d108      	bne.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 ff64 	bl	800b074 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1b0:	f000 bc95 	b.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1b8:	f000 bc91 	b.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1bc:	4b98      	ldr	r3, [pc, #608]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1c8:	d108      	bne.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ca:	f107 0318 	add.w	r3, r7, #24
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fca8 	bl	800ab24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1d8:	f000 bc81 	b.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1e0:	f000 bc7d 	b.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1e4:	4b8e      	ldr	r3, [pc, #568]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1f0:	d108      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1f2:	f107 030c 	add.w	r3, r7, #12
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 fde8 	bl	800adcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a200:	f000 bc6d 	b.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a208:	f000 bc69 	b.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a20c:	4b84      	ldr	r3, [pc, #528]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a20e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a210:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a214:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a216:	4b82      	ldr	r3, [pc, #520]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0304 	and.w	r3, r3, #4
 800a21e:	2b04      	cmp	r3, #4
 800a220:	d10c      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a224:	2b00      	cmp	r3, #0
 800a226:	d109      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a228:	4b7d      	ldr	r3, [pc, #500]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	08db      	lsrs	r3, r3, #3
 800a22e:	f003 0303 	and.w	r3, r3, #3
 800a232:	4a7c      	ldr	r2, [pc, #496]	; (800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a234:	fa22 f303 	lsr.w	r3, r2, r3
 800a238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a23a:	e01f      	b.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a23c:	4b78      	ldr	r3, [pc, #480]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a248:	d106      	bne.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a250:	d102      	bne.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a252:	4b75      	ldr	r3, [pc, #468]	; (800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a254:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a256:	e011      	b.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a258:	4b71      	ldr	r3, [pc, #452]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a264:	d106      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a26c:	d102      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a26e:	4b6f      	ldr	r3, [pc, #444]	; (800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a270:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a272:	e003      	b.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a278:	f000 bc31 	b.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a27c:	f000 bc2f 	b.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a280:	4b6b      	ldr	r3, [pc, #428]	; (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a282:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a284:	f000 bc2b 	b.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a28c:	f000 bc27 	b.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a296:	f040 8095 	bne.w	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a29a:	4b61      	ldr	r3, [pc, #388]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a29e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a2a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2aa:	d04d      	beq.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2b2:	f200 8084 	bhi.w	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b8:	2bc0      	cmp	r3, #192	; 0xc0
 800a2ba:	d07d      	beq.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	2bc0      	cmp	r3, #192	; 0xc0
 800a2c0:	d87d      	bhi.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c4:	2b80      	cmp	r3, #128	; 0x80
 800a2c6:	d02d      	beq.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	2b80      	cmp	r3, #128	; 0x80
 800a2cc:	d877      	bhi.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d003      	beq.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d6:	2b40      	cmp	r3, #64	; 0x40
 800a2d8:	d012      	beq.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a2da:	e070      	b.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2dc:	4b50      	ldr	r3, [pc, #320]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2e8:	d107      	bne.n	800a2fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 fec0 	bl	800b074 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a2f8:	e3f1      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2fe:	e3ee      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a300:	4b47      	ldr	r3, [pc, #284]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a30c:	d107      	bne.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a30e:	f107 0318 	add.w	r3, r7, #24
 800a312:	4618      	mov	r0, r3
 800a314:	f000 fc06 	bl	800ab24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a31c:	e3df      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a322:	e3dc      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a324:	4b3e      	ldr	r3, [pc, #248]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a32c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a330:	d107      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a332:	f107 030c 	add.w	r3, r7, #12
 800a336:	4618      	mov	r0, r3
 800a338:	f000 fd48 	bl	800adcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a340:	e3cd      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a346:	e3ca      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a348:	4b35      	ldr	r3, [pc, #212]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a34a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a34c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a350:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a352:	4b33      	ldr	r3, [pc, #204]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0304 	and.w	r3, r3, #4
 800a35a:	2b04      	cmp	r3, #4
 800a35c:	d10c      	bne.n	800a378 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	2b00      	cmp	r3, #0
 800a362:	d109      	bne.n	800a378 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a364:	4b2e      	ldr	r3, [pc, #184]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	08db      	lsrs	r3, r3, #3
 800a36a:	f003 0303 	and.w	r3, r3, #3
 800a36e:	4a2d      	ldr	r2, [pc, #180]	; (800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a370:	fa22 f303 	lsr.w	r3, r2, r3
 800a374:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a376:	e01e      	b.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a378:	4b29      	ldr	r3, [pc, #164]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a384:	d106      	bne.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a38c:	d102      	bne.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a38e:	4b26      	ldr	r3, [pc, #152]	; (800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a390:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a392:	e010      	b.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a394:	4b22      	ldr	r3, [pc, #136]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a39c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3a0:	d106      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3a8:	d102      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a3aa:	4b20      	ldr	r3, [pc, #128]	; (800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ae:	e002      	b.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a3b4:	e393      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3b6:	e392      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a3b8:	4b1d      	ldr	r3, [pc, #116]	; (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3bc:	e38f      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3c2:	e38c      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ca:	f040 80a7 	bne.w	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a3ce:	4b14      	ldr	r3, [pc, #80]	; (800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a3d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a3d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3de:	d05f      	beq.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3e6:	f200 8096 	bhi.w	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a3f0:	f000 808e 	beq.w	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a3fa:	f200 808c 	bhi.w	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a404:	d03a      	beq.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a40c:	f200 8083 	bhi.w	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00e      	beq.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a41c:	d01c      	beq.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a41e:	e07a      	b.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a420:	58024400 	.word	0x58024400
 800a424:	03d09000 	.word	0x03d09000
 800a428:	003d0900 	.word	0x003d0900
 800a42c:	02dc6c00 	.word	0x02dc6c00
 800a430:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a434:	4baa      	ldr	r3, [pc, #680]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a43c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a440:	d107      	bne.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a446:	4618      	mov	r0, r3
 800a448:	f000 fe14 	bl	800b074 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a450:	e345      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a452:	2300      	movs	r3, #0
 800a454:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a456:	e342      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a458:	4ba1      	ldr	r3, [pc, #644]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a464:	d107      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a466:	f107 0318 	add.w	r3, r7, #24
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 fb5a 	bl	800ab24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a474:	e333      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a476:	2300      	movs	r3, #0
 800a478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a47a:	e330      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a47c:	4b98      	ldr	r3, [pc, #608]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a488:	d107      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a48a:	f107 030c 	add.w	r3, r7, #12
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 fc9c 	bl	800adcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a498:	e321      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a49e:	e31e      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4a0:	4b8f      	ldr	r3, [pc, #572]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a4a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4a8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4aa:	4b8d      	ldr	r3, [pc, #564]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 0304 	and.w	r3, r3, #4
 800a4b2:	2b04      	cmp	r3, #4
 800a4b4:	d10c      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800a4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d109      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4bc:	4b88      	ldr	r3, [pc, #544]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	08db      	lsrs	r3, r3, #3
 800a4c2:	f003 0303 	and.w	r3, r3, #3
 800a4c6:	4a87      	ldr	r2, [pc, #540]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4ce:	e01e      	b.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4d0:	4b83      	ldr	r3, [pc, #524]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4dc:	d106      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800a4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4e4:	d102      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a4e6:	4b80      	ldr	r3, [pc, #512]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4ea:	e010      	b.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4ec:	4b7c      	ldr	r3, [pc, #496]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4f8:	d106      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800a4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a500:	d102      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a502:	4b7a      	ldr	r3, [pc, #488]	; (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a504:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a506:	e002      	b.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a50c:	e2e7      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a50e:	e2e6      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a510:	4b77      	ldr	r3, [pc, #476]	; (800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a514:	e2e3      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a516:	2300      	movs	r3, #0
 800a518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a51a:	e2e0      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a522:	f040 809c 	bne.w	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a526:	4b6e      	ldr	r3, [pc, #440]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a52a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a52e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a532:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a536:	d054      	beq.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a53e:	f200 808b 	bhi.w	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a544:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a548:	f000 8083 	beq.w	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a552:	f200 8081 	bhi.w	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a55c:	d02f      	beq.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a564:	d878      	bhi.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d004      	beq.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a572:	d012      	beq.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a574:	e070      	b.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a576:	4b5a      	ldr	r3, [pc, #360]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a57e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a582:	d107      	bne.n	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 fd73 	bl	800b074 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a590:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a592:	e2a4      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a594:	2300      	movs	r3, #0
 800a596:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a598:	e2a1      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a59a:	4b51      	ldr	r3, [pc, #324]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5a6:	d107      	bne.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5a8:	f107 0318 	add.w	r3, r7, #24
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 fab9 	bl	800ab24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a5b6:	e292      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5bc:	e28f      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5be:	4b48      	ldr	r3, [pc, #288]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5ca:	d107      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5cc:	f107 030c 	add.w	r3, r7, #12
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 fbfb 	bl	800adcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5da:	e280      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5e0:	e27d      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5e2:	4b3f      	ldr	r3, [pc, #252]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5ea:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5ec:	4b3c      	ldr	r3, [pc, #240]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0304 	and.w	r3, r3, #4
 800a5f4:	2b04      	cmp	r3, #4
 800a5f6:	d10c      	bne.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d109      	bne.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5fe:	4b38      	ldr	r3, [pc, #224]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	08db      	lsrs	r3, r3, #3
 800a604:	f003 0303 	and.w	r3, r3, #3
 800a608:	4a36      	ldr	r2, [pc, #216]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a60a:	fa22 f303 	lsr.w	r3, r2, r3
 800a60e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a610:	e01e      	b.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a612:	4b33      	ldr	r3, [pc, #204]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a61e:	d106      	bne.n	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a626:	d102      	bne.n	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a628:	4b2f      	ldr	r3, [pc, #188]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a62a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a62c:	e010      	b.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a62e:	4b2c      	ldr	r3, [pc, #176]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a63a:	d106      	bne.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a642:	d102      	bne.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a644:	4b29      	ldr	r3, [pc, #164]	; (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a646:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a648:	e002      	b.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a64e:	e246      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a650:	e245      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a652:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a656:	e242      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a65c:	e23f      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a664:	f040 80a8 	bne.w	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a668:	4b1d      	ldr	r3, [pc, #116]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a66c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a670:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a678:	d060      	beq.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a680:	f200 8097 	bhi.w	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a68a:	f000 808f 	beq.w	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a694:	f200 808d 	bhi.w	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a69e:	d03b      	beq.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6a6:	f200 8084 	bhi.w	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d004      	beq.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6b6:	d01d      	beq.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800a6b8:	e07b      	b.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6ba:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6c6:	d107      	bne.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 fcd1 	bl	800b074 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6d6:	e202      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6dc:	e1ff      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a6de:	bf00      	nop
 800a6e0:	58024400 	.word	0x58024400
 800a6e4:	03d09000 	.word	0x03d09000
 800a6e8:	003d0900 	.word	0x003d0900
 800a6ec:	02dc6c00 	.word	0x02dc6c00
 800a6f0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6f4:	4ba3      	ldr	r3, [pc, #652]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a700:	d107      	bne.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a702:	f107 0318 	add.w	r3, r7, #24
 800a706:	4618      	mov	r0, r3
 800a708:	f000 fa0c 	bl	800ab24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a710:	e1e5      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a716:	e1e2      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a718:	4b9a      	ldr	r3, [pc, #616]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a724:	d107      	bne.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a726:	f107 030c 	add.w	r3, r7, #12
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 fb4e 	bl	800adcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a734:	e1d3      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a73a:	e1d0      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a73c:	4b91      	ldr	r3, [pc, #580]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a73e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a740:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a744:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a746:	4b8f      	ldr	r3, [pc, #572]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0304 	and.w	r3, r3, #4
 800a74e:	2b04      	cmp	r3, #4
 800a750:	d10c      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800a752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a754:	2b00      	cmp	r3, #0
 800a756:	d109      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a758:	4b8a      	ldr	r3, [pc, #552]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	08db      	lsrs	r3, r3, #3
 800a75e:	f003 0303 	and.w	r3, r3, #3
 800a762:	4a89      	ldr	r2, [pc, #548]	; (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a764:	fa22 f303 	lsr.w	r3, r2, r3
 800a768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a76a:	e01e      	b.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a76c:	4b85      	ldr	r3, [pc, #532]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a778:	d106      	bne.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800a77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a780:	d102      	bne.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a782:	4b82      	ldr	r3, [pc, #520]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a786:	e010      	b.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a788:	4b7e      	ldr	r3, [pc, #504]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a794:	d106      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a79c:	d102      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a79e:	4b7c      	ldr	r3, [pc, #496]	; (800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7a2:	e002      	b.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a7a8:	e199      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a7aa:	e198      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7ac:	4b79      	ldr	r3, [pc, #484]	; (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7b0:	e195      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7b6:	e192      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a7be:	d173      	bne.n	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a7c0:	4b70      	ldr	r3, [pc, #448]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a7c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7d0:	d02f      	beq.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7d8:	d863      	bhi.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d004      	beq.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7e6:	d012      	beq.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800a7e8:	e05b      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7ea:	4b66      	ldr	r3, [pc, #408]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7f6:	d107      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7f8:	f107 0318 	add.w	r3, r7, #24
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 f991 	bl	800ab24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a806:	e16a      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a80c:	e167      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a80e:	4b5d      	ldr	r3, [pc, #372]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a81a:	d107      	bne.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a81c:	f107 030c 	add.w	r3, r7, #12
 800a820:	4618      	mov	r0, r3
 800a822:	f000 fad3 	bl	800adcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a82a:	e158      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a830:	e155      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a832:	4b54      	ldr	r3, [pc, #336]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a836:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a83a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a83c:	4b51      	ldr	r3, [pc, #324]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 0304 	and.w	r3, r3, #4
 800a844:	2b04      	cmp	r3, #4
 800a846:	d10c      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800a848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d109      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a84e:	4b4d      	ldr	r3, [pc, #308]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	08db      	lsrs	r3, r3, #3
 800a854:	f003 0303 	and.w	r3, r3, #3
 800a858:	4a4b      	ldr	r2, [pc, #300]	; (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a85a:	fa22 f303 	lsr.w	r3, r2, r3
 800a85e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a860:	e01e      	b.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a862:	4b48      	ldr	r3, [pc, #288]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a86a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a86e:	d106      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800a870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a876:	d102      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a878:	4b44      	ldr	r3, [pc, #272]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a87a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a87c:	e010      	b.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a87e:	4b41      	ldr	r3, [pc, #260]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a88a:	d106      	bne.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800a88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a892:	d102      	bne.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a894:	4b3e      	ldr	r3, [pc, #248]	; (800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a898:	e002      	b.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a89e:	e11e      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a8a0:	e11d      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a6:	e11a      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ae:	d133      	bne.n	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a8b0:	4b34      	ldr	r3, [pc, #208]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a8b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8b8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d004      	beq.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8c6:	d012      	beq.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800a8c8:	e023      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8ca:	4b2e      	ldr	r3, [pc, #184]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8d6:	d107      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 fbc9 	bl	800b074 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a8e6:	e0fa      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8ec:	e0f7      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8ee:	4b25      	ldr	r3, [pc, #148]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8fa:	d107      	bne.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8fc:	f107 0318 	add.w	r3, r7, #24
 800a900:	4618      	mov	r0, r3
 800a902:	f000 f90f 	bl	800ab24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a90a:	e0e8      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a910:	e0e5      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a916:	e0e2      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a91e:	f040 808f 	bne.w	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a922:	4b18      	ldr	r3, [pc, #96]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a926:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a92a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a932:	d075      	beq.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800a934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a93a:	d87e      	bhi.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a942:	d060      	beq.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a94a:	d876      	bhi.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a952:	d045      	beq.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800a954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a956:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a95a:	d86e      	bhi.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a962:	d02b      	beq.n	800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a96a:	d866      	bhi.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d004      	beq.n	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800a972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a978:	d00e      	beq.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800a97a:	e05e      	b.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a97c:	f000 f8bc 	bl	800aaf8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a980:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a982:	e0ac      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a984:	58024400 	.word	0x58024400
 800a988:	03d09000 	.word	0x03d09000
 800a98c:	003d0900 	.word	0x003d0900
 800a990:	02dc6c00 	.word	0x02dc6c00
 800a994:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a998:	4b53      	ldr	r3, [pc, #332]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9a4:	d107      	bne.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9a6:	f107 0318 	add.w	r3, r7, #24
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 f8ba 	bl	800ab24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9b4:	e093      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ba:	e090      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9bc:	4b4a      	ldr	r3, [pc, #296]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9c8:	d107      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ca:	f107 030c 	add.w	r3, r7, #12
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 f9fc 	bl	800adcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9d8:	e081      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9de:	e07e      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9e0:	4b41      	ldr	r3, [pc, #260]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 0304 	and.w	r3, r3, #4
 800a9e8:	2b04      	cmp	r3, #4
 800a9ea:	d109      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9ec:	4b3e      	ldr	r3, [pc, #248]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	08db      	lsrs	r3, r3, #3
 800a9f2:	f003 0303 	and.w	r3, r3, #3
 800a9f6:	4a3d      	ldr	r2, [pc, #244]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a9f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9fe:	e06e      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa04:	e06b      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa06:	4b38      	ldr	r3, [pc, #224]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa12:	d102      	bne.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800aa14:	4b36      	ldr	r3, [pc, #216]	; (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aa16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa18:	e061      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa1e:	e05e      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa20:	4b31      	ldr	r3, [pc, #196]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa2c:	d102      	bne.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800aa2e:	4b31      	ldr	r3, [pc, #196]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa32:	e054      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa38:	e051      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa3e:	e04e      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa46:	d148      	bne.n	800aada <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800aa48:	4b27      	ldr	r3, [pc, #156]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa50:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa58:	d02a      	beq.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa60:	d838      	bhi.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800aa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d004      	beq.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa6e:	d00d      	beq.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800aa70:	e030      	b.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa72:	4b1d      	ldr	r3, [pc, #116]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa7e:	d102      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800aa80:	4b1c      	ldr	r3, [pc, #112]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa84:	e02b      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa86:	2300      	movs	r3, #0
 800aa88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa8a:	e028      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa8c:	4b16      	ldr	r3, [pc, #88]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa98:	d107      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 fae8 	bl	800b074 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aaa8:	e019      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaae:	e016      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aab0:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aabc:	d107      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aabe:	f107 0318 	add.w	r3, r7, #24
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 f82e 	bl	800ab24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aacc:	e007      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aad2:	e004      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aad8:	e001      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800aade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3740      	adds	r7, #64	; 0x40
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	58024400 	.word	0x58024400
 800aaec:	03d09000 	.word	0x03d09000
 800aaf0:	003d0900 	.word	0x003d0900
 800aaf4:	02dc6c00 	.word	0x02dc6c00

0800aaf8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aafc:	f7fe fb8e 	bl	800921c <HAL_RCC_GetHCLKFreq>
 800ab00:	4602      	mov	r2, r0
 800ab02:	4b06      	ldr	r3, [pc, #24]	; (800ab1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	091b      	lsrs	r3, r3, #4
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	4904      	ldr	r1, [pc, #16]	; (800ab20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab0e:	5ccb      	ldrb	r3, [r1, r3]
 800ab10:	f003 031f 	and.w	r3, r3, #31
 800ab14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	58024400 	.word	0x58024400
 800ab20:	0800f25c 	.word	0x0800f25c

0800ab24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b089      	sub	sp, #36	; 0x24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab2c:	4ba1      	ldr	r3, [pc, #644]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab30:	f003 0303 	and.w	r3, r3, #3
 800ab34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ab36:	4b9f      	ldr	r3, [pc, #636]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3a:	0b1b      	lsrs	r3, r3, #12
 800ab3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab42:	4b9c      	ldr	r3, [pc, #624]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	091b      	lsrs	r3, r3, #4
 800ab48:	f003 0301 	and.w	r3, r3, #1
 800ab4c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ab4e:	4b99      	ldr	r3, [pc, #612]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab52:	08db      	lsrs	r3, r3, #3
 800ab54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	fb02 f303 	mul.w	r3, r2, r3
 800ab5e:	ee07 3a90 	vmov	s15, r3
 800ab62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f000 8111 	beq.w	800ad94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	f000 8083 	beq.w	800ac80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	f200 80a1 	bhi.w	800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d056      	beq.n	800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ab8e:	e099      	b.n	800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab90:	4b88      	ldr	r3, [pc, #544]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 0320 	and.w	r3, r3, #32
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d02d      	beq.n	800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab9c:	4b85      	ldr	r3, [pc, #532]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	08db      	lsrs	r3, r3, #3
 800aba2:	f003 0303 	and.w	r3, r3, #3
 800aba6:	4a84      	ldr	r2, [pc, #528]	; (800adb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aba8:	fa22 f303 	lsr.w	r3, r2, r3
 800abac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	ee07 3a90 	vmov	s15, r3
 800abb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc6:	4b7b      	ldr	r3, [pc, #492]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abda:	eddf 5a78 	vldr	s11, [pc, #480]	; 800adbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800abf6:	e087      	b.n	800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800adc0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac0a:	4b6a      	ldr	r3, [pc, #424]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac12:	ee07 3a90 	vmov	s15, r3
 800ac16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800adbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac3a:	e065      	b.n	800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4e:	4b59      	ldr	r3, [pc, #356]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac62:	eddf 5a56 	vldr	s11, [pc, #344]	; 800adbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac7e:	e043      	b.n	800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ac8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac92:	4b48      	ldr	r3, [pc, #288]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aca2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800adbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acc2:	e021      	b.n	800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd6:	4b37      	ldr	r3, [pc, #220]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800adbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ad08:	4b2a      	ldr	r3, [pc, #168]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0c:	0a5b      	lsrs	r3, r3, #9
 800ad0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad22:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad2e:	ee17 2a90 	vmov	r2, s15
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ad36:	4b1f      	ldr	r3, [pc, #124]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3a:	0c1b      	lsrs	r3, r3, #16
 800ad3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad40:	ee07 3a90 	vmov	s15, r3
 800ad44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad50:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad5c:	ee17 2a90 	vmov	r2, s15
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ad64:	4b13      	ldr	r3, [pc, #76]	; (800adb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad68:	0e1b      	lsrs	r3, r3, #24
 800ad6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad6e:	ee07 3a90 	vmov	s15, r3
 800ad72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad8a:	ee17 2a90 	vmov	r2, s15
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ad92:	e008      	b.n	800ada6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	609a      	str	r2, [r3, #8]
}
 800ada6:	bf00      	nop
 800ada8:	3724      	adds	r7, #36	; 0x24
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	58024400 	.word	0x58024400
 800adb8:	03d09000 	.word	0x03d09000
 800adbc:	46000000 	.word	0x46000000
 800adc0:	4c742400 	.word	0x4c742400
 800adc4:	4a742400 	.word	0x4a742400
 800adc8:	4c371b00 	.word	0x4c371b00

0800adcc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800adcc:	b480      	push	{r7}
 800adce:	b089      	sub	sp, #36	; 0x24
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800add4:	4ba1      	ldr	r3, [pc, #644]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add8:	f003 0303 	and.w	r3, r3, #3
 800addc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800adde:	4b9f      	ldr	r3, [pc, #636]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade2:	0d1b      	lsrs	r3, r3, #20
 800ade4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ade8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800adea:	4b9c      	ldr	r3, [pc, #624]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adee:	0a1b      	lsrs	r3, r3, #8
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800adf6:	4b99      	ldr	r3, [pc, #612]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adfa:	08db      	lsrs	r3, r3, #3
 800adfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	fb02 f303 	mul.w	r3, r2, r3
 800ae06:	ee07 3a90 	vmov	s15, r3
 800ae0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 8111 	beq.w	800b03c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	f000 8083 	beq.w	800af28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	f200 80a1 	bhi.w	800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d056      	beq.n	800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ae36:	e099      	b.n	800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae38:	4b88      	ldr	r3, [pc, #544]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f003 0320 	and.w	r3, r3, #32
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d02d      	beq.n	800aea0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae44:	4b85      	ldr	r3, [pc, #532]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	08db      	lsrs	r3, r3, #3
 800ae4a:	f003 0303 	and.w	r3, r3, #3
 800ae4e:	4a84      	ldr	r2, [pc, #528]	; (800b060 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae50:	fa22 f303 	lsr.w	r3, r2, r3
 800ae54:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	ee07 3a90 	vmov	s15, r3
 800ae5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae6e:	4b7b      	ldr	r3, [pc, #492]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae76:	ee07 3a90 	vmov	s15, r3
 800ae7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae82:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae9e:	e087      	b.n	800afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	ee07 3a90 	vmov	s15, r3
 800aea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeaa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b068 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aeae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeb2:	4b6a      	ldr	r3, [pc, #424]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeba:	ee07 3a90 	vmov	s15, r3
 800aebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aec6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aeca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aee2:	e065      	b.n	800afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	ee07 3a90 	vmov	s15, r3
 800aeea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aef6:	4b59      	ldr	r3, [pc, #356]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af06:	ed97 6a03 	vldr	s12, [r7, #12]
 800af0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af26:	e043      	b.n	800afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	ee07 3a90 	vmov	s15, r3
 800af2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800af36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af3a:	4b48      	ldr	r3, [pc, #288]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af6a:	e021      	b.n	800afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	ee07 3a90 	vmov	s15, r3
 800af72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af7e:	4b37      	ldr	r3, [pc, #220]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af92:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b064 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800afb0:	4b2a      	ldr	r3, [pc, #168]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb4:	0a5b      	lsrs	r3, r3, #9
 800afb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afba:	ee07 3a90 	vmov	s15, r3
 800afbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afca:	edd7 6a07 	vldr	s13, [r7, #28]
 800afce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afd6:	ee17 2a90 	vmov	r2, s15
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800afde:	4b1f      	ldr	r3, [pc, #124]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe2:	0c1b      	lsrs	r3, r3, #16
 800afe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afe8:	ee07 3a90 	vmov	s15, r3
 800afec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aff4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aff8:	edd7 6a07 	vldr	s13, [r7, #28]
 800affc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b004:	ee17 2a90 	vmov	r2, s15
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b00c:	4b13      	ldr	r3, [pc, #76]	; (800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b010:	0e1b      	lsrs	r3, r3, #24
 800b012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b016:	ee07 3a90 	vmov	s15, r3
 800b01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b01e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b022:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b026:	edd7 6a07 	vldr	s13, [r7, #28]
 800b02a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b02e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b032:	ee17 2a90 	vmov	r2, s15
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b03a:	e008      	b.n	800b04e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	609a      	str	r2, [r3, #8]
}
 800b04e:	bf00      	nop
 800b050:	3724      	adds	r7, #36	; 0x24
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	58024400 	.word	0x58024400
 800b060:	03d09000 	.word	0x03d09000
 800b064:	46000000 	.word	0x46000000
 800b068:	4c742400 	.word	0x4c742400
 800b06c:	4a742400 	.word	0x4a742400
 800b070:	4c371b00 	.word	0x4c371b00

0800b074 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b074:	b480      	push	{r7}
 800b076:	b089      	sub	sp, #36	; 0x24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b07c:	4ba0      	ldr	r3, [pc, #640]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b080:	f003 0303 	and.w	r3, r3, #3
 800b084:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b086:	4b9e      	ldr	r3, [pc, #632]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08a:	091b      	lsrs	r3, r3, #4
 800b08c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b090:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b092:	4b9b      	ldr	r3, [pc, #620]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b09c:	4b98      	ldr	r3, [pc, #608]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a0:	08db      	lsrs	r3, r3, #3
 800b0a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0a6:	693a      	ldr	r2, [r7, #16]
 800b0a8:	fb02 f303 	mul.w	r3, r2, r3
 800b0ac:	ee07 3a90 	vmov	s15, r3
 800b0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f000 8111 	beq.w	800b2e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	f000 8083 	beq.w	800b1ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	f200 80a1 	bhi.w	800b212 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d056      	beq.n	800b18a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b0dc:	e099      	b.n	800b212 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0de:	4b88      	ldr	r3, [pc, #544]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f003 0320 	and.w	r3, r3, #32
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d02d      	beq.n	800b146 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0ea:	4b85      	ldr	r3, [pc, #532]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	08db      	lsrs	r3, r3, #3
 800b0f0:	f003 0303 	and.w	r3, r3, #3
 800b0f4:	4a83      	ldr	r2, [pc, #524]	; (800b304 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	ee07 3a90 	vmov	s15, r3
 800b102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b114:	4b7a      	ldr	r3, [pc, #488]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b11c:	ee07 3a90 	vmov	s15, r3
 800b120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b124:	ed97 6a03 	vldr	s12, [r7, #12]
 800b128:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b308 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b12c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b13c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b140:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b144:	e087      	b.n	800b256 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	ee07 3a90 	vmov	s15, r3
 800b14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b150:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b30c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b158:	4b69      	ldr	r3, [pc, #420]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b160:	ee07 3a90 	vmov	s15, r3
 800b164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b168:	ed97 6a03 	vldr	s12, [r7, #12]
 800b16c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b308 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b17c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b184:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b188:	e065      	b.n	800b256 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	ee07 3a90 	vmov	s15, r3
 800b190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b194:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b310 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b19c:	4b58      	ldr	r3, [pc, #352]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1a4:	ee07 3a90 	vmov	s15, r3
 800b1a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1b0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b308 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1cc:	e043      	b.n	800b256 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	ee07 3a90 	vmov	s15, r3
 800b1d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b1dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1e0:	4b47      	ldr	r3, [pc, #284]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e8:	ee07 3a90 	vmov	s15, r3
 800b1ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b308 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b20c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b210:	e021      	b.n	800b256 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	ee07 3a90 	vmov	s15, r3
 800b218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b30c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b224:	4b36      	ldr	r3, [pc, #216]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b22c:	ee07 3a90 	vmov	s15, r3
 800b230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b234:	ed97 6a03 	vldr	s12, [r7, #12]
 800b238:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b308 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b23c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b250:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b254:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b256:	4b2a      	ldr	r3, [pc, #168]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25a:	0a5b      	lsrs	r3, r3, #9
 800b25c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b260:	ee07 3a90 	vmov	s15, r3
 800b264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b26c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b270:	edd7 6a07 	vldr	s13, [r7, #28]
 800b274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b27c:	ee17 2a90 	vmov	r2, s15
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b284:	4b1e      	ldr	r3, [pc, #120]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b288:	0c1b      	lsrs	r3, r3, #16
 800b28a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b28e:	ee07 3a90 	vmov	s15, r3
 800b292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b29a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b29e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2aa:	ee17 2a90 	vmov	r2, s15
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b2b2:	4b13      	ldr	r3, [pc, #76]	; (800b300 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b6:	0e1b      	lsrs	r3, r3, #24
 800b2b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2bc:	ee07 3a90 	vmov	s15, r3
 800b2c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2d8:	ee17 2a90 	vmov	r2, s15
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b2e0:	e008      	b.n	800b2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	609a      	str	r2, [r3, #8]
}
 800b2f4:	bf00      	nop
 800b2f6:	3724      	adds	r7, #36	; 0x24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr
 800b300:	58024400 	.word	0x58024400
 800b304:	03d09000 	.word	0x03d09000
 800b308:	46000000 	.word	0x46000000
 800b30c:	4c742400 	.word	0x4c742400
 800b310:	4a742400 	.word	0x4a742400
 800b314:	4c371b00 	.word	0x4c371b00

0800b318 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b322:	2300      	movs	r3, #0
 800b324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b326:	4b53      	ldr	r3, [pc, #332]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32a:	f003 0303 	and.w	r3, r3, #3
 800b32e:	2b03      	cmp	r3, #3
 800b330:	d101      	bne.n	800b336 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e099      	b.n	800b46a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b336:	4b4f      	ldr	r3, [pc, #316]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a4e      	ldr	r2, [pc, #312]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b33c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b342:	f7f8 f969 	bl	8003618 <HAL_GetTick>
 800b346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b348:	e008      	b.n	800b35c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b34a:	f7f8 f965 	bl	8003618 <HAL_GetTick>
 800b34e:	4602      	mov	r2, r0
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	2b02      	cmp	r3, #2
 800b356:	d901      	bls.n	800b35c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b358:	2303      	movs	r3, #3
 800b35a:	e086      	b.n	800b46a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b35c:	4b45      	ldr	r3, [pc, #276]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1f0      	bne.n	800b34a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b368:	4b42      	ldr	r3, [pc, #264]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	031b      	lsls	r3, r3, #12
 800b376:	493f      	ldr	r1, [pc, #252]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b378:	4313      	orrs	r3, r2
 800b37a:	628b      	str	r3, [r1, #40]	; 0x28
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	3b01      	subs	r3, #1
 800b382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	025b      	lsls	r3, r3, #9
 800b38e:	b29b      	uxth	r3, r3
 800b390:	431a      	orrs	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	3b01      	subs	r3, #1
 800b398:	041b      	lsls	r3, r3, #16
 800b39a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b39e:	431a      	orrs	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	061b      	lsls	r3, r3, #24
 800b3a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3ac:	4931      	ldr	r1, [pc, #196]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3b2:	4b30      	ldr	r3, [pc, #192]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	492d      	ldr	r1, [pc, #180]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3c4:	4b2b      	ldr	r3, [pc, #172]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c8:	f023 0220 	bic.w	r2, r3, #32
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	699b      	ldr	r3, [r3, #24]
 800b3d0:	4928      	ldr	r1, [pc, #160]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3d6:	4b27      	ldr	r3, [pc, #156]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3da:	4a26      	ldr	r2, [pc, #152]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b3dc:	f023 0310 	bic.w	r3, r3, #16
 800b3e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b3e2:	4b24      	ldr	r3, [pc, #144]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b3e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3e6:	4b24      	ldr	r3, [pc, #144]	; (800b478 <RCCEx_PLL2_Config+0x160>)
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	69d2      	ldr	r2, [r2, #28]
 800b3ee:	00d2      	lsls	r2, r2, #3
 800b3f0:	4920      	ldr	r1, [pc, #128]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b3f6:	4b1f      	ldr	r3, [pc, #124]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fa:	4a1e      	ldr	r2, [pc, #120]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b3fc:	f043 0310 	orr.w	r3, r3, #16
 800b400:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d106      	bne.n	800b416 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b408:	4b1a      	ldr	r3, [pc, #104]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40c:	4a19      	ldr	r2, [pc, #100]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b40e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b412:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b414:	e00f      	b.n	800b436 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d106      	bne.n	800b42a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b41c:	4b15      	ldr	r3, [pc, #84]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	4a14      	ldr	r2, [pc, #80]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b426:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b428:	e005      	b.n	800b436 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b42a:	4b12      	ldr	r3, [pc, #72]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42e:	4a11      	ldr	r2, [pc, #68]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b434:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b436:	4b0f      	ldr	r3, [pc, #60]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a0e      	ldr	r2, [pc, #56]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b43c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b442:	f7f8 f8e9 	bl	8003618 <HAL_GetTick>
 800b446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b448:	e008      	b.n	800b45c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b44a:	f7f8 f8e5 	bl	8003618 <HAL_GetTick>
 800b44e:	4602      	mov	r2, r0
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	2b02      	cmp	r3, #2
 800b456:	d901      	bls.n	800b45c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b458:	2303      	movs	r3, #3
 800b45a:	e006      	b.n	800b46a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b45c:	4b05      	ldr	r3, [pc, #20]	; (800b474 <RCCEx_PLL2_Config+0x15c>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d0f0      	beq.n	800b44a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b468:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	58024400 	.word	0x58024400
 800b478:	ffff0007 	.word	0xffff0007

0800b47c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b486:	2300      	movs	r3, #0
 800b488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b48a:	4b53      	ldr	r3, [pc, #332]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48e:	f003 0303 	and.w	r3, r3, #3
 800b492:	2b03      	cmp	r3, #3
 800b494:	d101      	bne.n	800b49a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e099      	b.n	800b5ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b49a:	4b4f      	ldr	r3, [pc, #316]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a4e      	ldr	r2, [pc, #312]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b4a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4a6:	f7f8 f8b7 	bl	8003618 <HAL_GetTick>
 800b4aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4ac:	e008      	b.n	800b4c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b4ae:	f7f8 f8b3 	bl	8003618 <HAL_GetTick>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d901      	bls.n	800b4c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4bc:	2303      	movs	r3, #3
 800b4be:	e086      	b.n	800b5ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4c0:	4b45      	ldr	r3, [pc, #276]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1f0      	bne.n	800b4ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4cc:	4b42      	ldr	r3, [pc, #264]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	051b      	lsls	r3, r3, #20
 800b4da:	493f      	ldr	r1, [pc, #252]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	628b      	str	r3, [r1, #40]	; 0x28
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	025b      	lsls	r3, r3, #9
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	431a      	orrs	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	041b      	lsls	r3, r3, #16
 800b4fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b502:	431a      	orrs	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	3b01      	subs	r3, #1
 800b50a:	061b      	lsls	r3, r3, #24
 800b50c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b510:	4931      	ldr	r1, [pc, #196]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b512:	4313      	orrs	r3, r2
 800b514:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b516:	4b30      	ldr	r3, [pc, #192]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	492d      	ldr	r1, [pc, #180]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b524:	4313      	orrs	r3, r2
 800b526:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b528:	4b2b      	ldr	r3, [pc, #172]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	4928      	ldr	r1, [pc, #160]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b536:	4313      	orrs	r3, r2
 800b538:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b53a:	4b27      	ldr	r3, [pc, #156]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53e:	4a26      	ldr	r2, [pc, #152]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b546:	4b24      	ldr	r3, [pc, #144]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b54a:	4b24      	ldr	r3, [pc, #144]	; (800b5dc <RCCEx_PLL3_Config+0x160>)
 800b54c:	4013      	ands	r3, r2
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	69d2      	ldr	r2, [r2, #28]
 800b552:	00d2      	lsls	r2, r2, #3
 800b554:	4920      	ldr	r1, [pc, #128]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b556:	4313      	orrs	r3, r2
 800b558:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b55a:	4b1f      	ldr	r3, [pc, #124]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55e:	4a1e      	ldr	r2, [pc, #120]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d106      	bne.n	800b57a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b56c:	4b1a      	ldr	r3, [pc, #104]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b570:	4a19      	ldr	r2, [pc, #100]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b572:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b576:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b578:	e00f      	b.n	800b59a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d106      	bne.n	800b58e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b580:	4b15      	ldr	r3, [pc, #84]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	4a14      	ldr	r2, [pc, #80]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b586:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b58a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b58c:	e005      	b.n	800b59a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b58e:	4b12      	ldr	r3, [pc, #72]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b592:	4a11      	ldr	r2, [pc, #68]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b598:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b59a:	4b0f      	ldr	r3, [pc, #60]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a0e      	ldr	r2, [pc, #56]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b5a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5a6:	f7f8 f837 	bl	8003618 <HAL_GetTick>
 800b5aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5ac:	e008      	b.n	800b5c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b5ae:	f7f8 f833 	bl	8003618 <HAL_GetTick>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	1ad3      	subs	r3, r2, r3
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d901      	bls.n	800b5c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	e006      	b.n	800b5ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5c0:	4b05      	ldr	r3, [pc, #20]	; (800b5d8 <RCCEx_PLL3_Config+0x15c>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d0f0      	beq.n	800b5ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	58024400 	.word	0x58024400
 800b5dc:	ffff0007 	.word	0xffff0007

0800b5e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d101      	bne.n	800b5f6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e0eb      	b.n	800b7ce <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a75      	ldr	r2, [pc, #468]	; (800b7d8 <HAL_SPI_Init+0x1f8>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d00f      	beq.n	800b626 <HAL_SPI_Init+0x46>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a74      	ldr	r2, [pc, #464]	; (800b7dc <HAL_SPI_Init+0x1fc>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d00a      	beq.n	800b626 <HAL_SPI_Init+0x46>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a72      	ldr	r2, [pc, #456]	; (800b7e0 <HAL_SPI_Init+0x200>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d005      	beq.n	800b626 <HAL_SPI_Init+0x46>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	2b0f      	cmp	r3, #15
 800b620:	d901      	bls.n	800b626 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	e0d3      	b.n	800b7ce <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f8dc 	bl	800b7e4 <SPI_GetPacketSize>
 800b62c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a69      	ldr	r2, [pc, #420]	; (800b7d8 <HAL_SPI_Init+0x1f8>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d00c      	beq.n	800b652 <HAL_SPI_Init+0x72>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a67      	ldr	r2, [pc, #412]	; (800b7dc <HAL_SPI_Init+0x1fc>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d007      	beq.n	800b652 <HAL_SPI_Init+0x72>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a66      	ldr	r2, [pc, #408]	; (800b7e0 <HAL_SPI_Init+0x200>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d002      	beq.n	800b652 <HAL_SPI_Init+0x72>
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2b08      	cmp	r3, #8
 800b650:	d811      	bhi.n	800b676 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b656:	4a60      	ldr	r2, [pc, #384]	; (800b7d8 <HAL_SPI_Init+0x1f8>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d009      	beq.n	800b670 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a5e      	ldr	r2, [pc, #376]	; (800b7dc <HAL_SPI_Init+0x1fc>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d004      	beq.n	800b670 <HAL_SPI_Init+0x90>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a5d      	ldr	r2, [pc, #372]	; (800b7e0 <HAL_SPI_Init+0x200>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d104      	bne.n	800b67a <HAL_SPI_Init+0x9a>
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2b10      	cmp	r3, #16
 800b674:	d901      	bls.n	800b67a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e0a9      	b.n	800b7ce <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b680:	b2db      	uxtb	r3, r3
 800b682:	2b00      	cmp	r3, #0
 800b684:	d106      	bne.n	800b694 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7f7 f94e 	bl	8002930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2202      	movs	r2, #2
 800b698:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f022 0201 	bic.w	r2, r2, #1
 800b6aa:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	699b      	ldr	r3, [r3, #24]
 800b6b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6b4:	d119      	bne.n	800b6ea <HAL_SPI_Init+0x10a>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6be:	d103      	bne.n	800b6c8 <HAL_SPI_Init+0xe8>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d008      	beq.n	800b6da <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10c      	bne.n	800b6ea <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6d8:	d107      	bne.n	800b6ea <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b6e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	69da      	ldr	r2, [r3, #28]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f2:	431a      	orrs	r2, r3
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	431a      	orrs	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fc:	ea42 0103 	orr.w	r1, r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	68da      	ldr	r2, [r3, #12]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	430a      	orrs	r2, r1
 800b70a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b714:	431a      	orrs	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71a:	431a      	orrs	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	431a      	orrs	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	431a      	orrs	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	695b      	ldr	r3, [r3, #20]
 800b72c:	431a      	orrs	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	431a      	orrs	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	431a      	orrs	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b73e:	431a      	orrs	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	431a      	orrs	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b74a:	ea42 0103 	orr.w	r1, r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	430a      	orrs	r2, r1
 800b758:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d113      	bne.n	800b78a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b774:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b788:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f022 0201 	bic.w	r2, r2, #1
 800b798:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00a      	beq.n	800b7bc <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	430a      	orrs	r2, r1
 800b7ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	40013000 	.word	0x40013000
 800b7dc:	40003800 	.word	0x40003800
 800b7e0:	40003c00 	.word	0x40003c00

0800b7e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f0:	095b      	lsrs	r3, r3, #5
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	3307      	adds	r3, #7
 800b802:	08db      	lsrs	r3, r3, #3
 800b804:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3714      	adds	r7, #20
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b082      	sub	sp, #8
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d101      	bne.n	800b82c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	e049      	b.n	800b8c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b00      	cmp	r3, #0
 800b836:	d106      	bne.n	800b846 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7f7 fa11 	bl	8002c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2202      	movs	r2, #2
 800b84a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	3304      	adds	r3, #4
 800b856:	4619      	mov	r1, r3
 800b858:	4610      	mov	r0, r2
 800b85a:	f000 ff25 	bl	800c6a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2201      	movs	r2, #1
 800b862:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2201      	movs	r2, #1
 800b872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2201      	movs	r2, #1
 800b87a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2201      	movs	r2, #1
 800b882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2201      	movs	r2, #1
 800b892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2201      	movs	r2, #1
 800b89a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d001      	beq.n	800b8e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e04f      	b.n	800b980 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68da      	ldr	r2, [r3, #12]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f042 0201 	orr.w	r2, r2, #1
 800b8f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a23      	ldr	r2, [pc, #140]	; (800b98c <HAL_TIM_Base_Start_IT+0xc4>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d01d      	beq.n	800b93e <HAL_TIM_Base_Start_IT+0x76>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b90a:	d018      	beq.n	800b93e <HAL_TIM_Base_Start_IT+0x76>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a1f      	ldr	r2, [pc, #124]	; (800b990 <HAL_TIM_Base_Start_IT+0xc8>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d013      	beq.n	800b93e <HAL_TIM_Base_Start_IT+0x76>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a1e      	ldr	r2, [pc, #120]	; (800b994 <HAL_TIM_Base_Start_IT+0xcc>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d00e      	beq.n	800b93e <HAL_TIM_Base_Start_IT+0x76>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a1c      	ldr	r2, [pc, #112]	; (800b998 <HAL_TIM_Base_Start_IT+0xd0>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d009      	beq.n	800b93e <HAL_TIM_Base_Start_IT+0x76>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a1b      	ldr	r2, [pc, #108]	; (800b99c <HAL_TIM_Base_Start_IT+0xd4>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d004      	beq.n	800b93e <HAL_TIM_Base_Start_IT+0x76>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a19      	ldr	r2, [pc, #100]	; (800b9a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d115      	bne.n	800b96a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	689a      	ldr	r2, [r3, #8]
 800b944:	4b17      	ldr	r3, [pc, #92]	; (800b9a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b946:	4013      	ands	r3, r2
 800b948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b06      	cmp	r3, #6
 800b94e:	d015      	beq.n	800b97c <HAL_TIM_Base_Start_IT+0xb4>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b956:	d011      	beq.n	800b97c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f042 0201 	orr.w	r2, r2, #1
 800b966:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b968:	e008      	b.n	800b97c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f042 0201 	orr.w	r2, r2, #1
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	e000      	b.n	800b97e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b97c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr
 800b98c:	40010000 	.word	0x40010000
 800b990:	40000400 	.word	0x40000400
 800b994:	40000800 	.word	0x40000800
 800b998:	40000c00 	.word	0x40000c00
 800b99c:	40010400 	.word	0x40010400
 800b9a0:	40001800 	.word	0x40001800
 800b9a4:	00010007 	.word	0x00010007

0800b9a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e049      	b.n	800ba4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d106      	bne.n	800b9d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f841 	bl	800ba56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	3304      	adds	r3, #4
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	f000 fe5e 	bl	800c6a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b083      	sub	sp, #12
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
	...

0800ba6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d109      	bne.n	800ba90 <HAL_TIM_PWM_Start+0x24>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	bf14      	ite	ne
 800ba88:	2301      	movne	r3, #1
 800ba8a:	2300      	moveq	r3, #0
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	e03c      	b.n	800bb0a <HAL_TIM_PWM_Start+0x9e>
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2b04      	cmp	r3, #4
 800ba94:	d109      	bne.n	800baaa <HAL_TIM_PWM_Start+0x3e>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	bf14      	ite	ne
 800baa2:	2301      	movne	r3, #1
 800baa4:	2300      	moveq	r3, #0
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	e02f      	b.n	800bb0a <HAL_TIM_PWM_Start+0x9e>
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2b08      	cmp	r3, #8
 800baae:	d109      	bne.n	800bac4 <HAL_TIM_PWM_Start+0x58>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	2b01      	cmp	r3, #1
 800baba:	bf14      	ite	ne
 800babc:	2301      	movne	r3, #1
 800babe:	2300      	moveq	r3, #0
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	e022      	b.n	800bb0a <HAL_TIM_PWM_Start+0x9e>
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	2b0c      	cmp	r3, #12
 800bac8:	d109      	bne.n	800bade <HAL_TIM_PWM_Start+0x72>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	bf14      	ite	ne
 800bad6:	2301      	movne	r3, #1
 800bad8:	2300      	moveq	r3, #0
 800bada:	b2db      	uxtb	r3, r3
 800badc:	e015      	b.n	800bb0a <HAL_TIM_PWM_Start+0x9e>
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	2b10      	cmp	r3, #16
 800bae2:	d109      	bne.n	800baf8 <HAL_TIM_PWM_Start+0x8c>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800baea:	b2db      	uxtb	r3, r3
 800baec:	2b01      	cmp	r3, #1
 800baee:	bf14      	ite	ne
 800baf0:	2301      	movne	r3, #1
 800baf2:	2300      	moveq	r3, #0
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	e008      	b.n	800bb0a <HAL_TIM_PWM_Start+0x9e>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	bf14      	ite	ne
 800bb04:	2301      	movne	r3, #1
 800bb06:	2300      	moveq	r3, #0
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e09c      	b.n	800bc4c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d104      	bne.n	800bb22 <HAL_TIM_PWM_Start+0xb6>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb20:	e023      	b.n	800bb6a <HAL_TIM_PWM_Start+0xfe>
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2b04      	cmp	r3, #4
 800bb26:	d104      	bne.n	800bb32 <HAL_TIM_PWM_Start+0xc6>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb30:	e01b      	b.n	800bb6a <HAL_TIM_PWM_Start+0xfe>
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	2b08      	cmp	r3, #8
 800bb36:	d104      	bne.n	800bb42 <HAL_TIM_PWM_Start+0xd6>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb40:	e013      	b.n	800bb6a <HAL_TIM_PWM_Start+0xfe>
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b0c      	cmp	r3, #12
 800bb46:	d104      	bne.n	800bb52 <HAL_TIM_PWM_Start+0xe6>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb50:	e00b      	b.n	800bb6a <HAL_TIM_PWM_Start+0xfe>
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	2b10      	cmp	r3, #16
 800bb56:	d104      	bne.n	800bb62 <HAL_TIM_PWM_Start+0xf6>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb60:	e003      	b.n	800bb6a <HAL_TIM_PWM_Start+0xfe>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2202      	movs	r2, #2
 800bb66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f001 f99e 	bl	800ceb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a35      	ldr	r2, [pc, #212]	; (800bc54 <HAL_TIM_PWM_Start+0x1e8>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d013      	beq.n	800bbaa <HAL_TIM_PWM_Start+0x13e>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a34      	ldr	r2, [pc, #208]	; (800bc58 <HAL_TIM_PWM_Start+0x1ec>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d00e      	beq.n	800bbaa <HAL_TIM_PWM_Start+0x13e>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a32      	ldr	r2, [pc, #200]	; (800bc5c <HAL_TIM_PWM_Start+0x1f0>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d009      	beq.n	800bbaa <HAL_TIM_PWM_Start+0x13e>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a31      	ldr	r2, [pc, #196]	; (800bc60 <HAL_TIM_PWM_Start+0x1f4>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d004      	beq.n	800bbaa <HAL_TIM_PWM_Start+0x13e>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a2f      	ldr	r2, [pc, #188]	; (800bc64 <HAL_TIM_PWM_Start+0x1f8>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d101      	bne.n	800bbae <HAL_TIM_PWM_Start+0x142>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e000      	b.n	800bbb0 <HAL_TIM_PWM_Start+0x144>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d007      	beq.n	800bbc4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bbc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a22      	ldr	r2, [pc, #136]	; (800bc54 <HAL_TIM_PWM_Start+0x1e8>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d01d      	beq.n	800bc0a <HAL_TIM_PWM_Start+0x19e>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbd6:	d018      	beq.n	800bc0a <HAL_TIM_PWM_Start+0x19e>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a22      	ldr	r2, [pc, #136]	; (800bc68 <HAL_TIM_PWM_Start+0x1fc>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d013      	beq.n	800bc0a <HAL_TIM_PWM_Start+0x19e>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a21      	ldr	r2, [pc, #132]	; (800bc6c <HAL_TIM_PWM_Start+0x200>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d00e      	beq.n	800bc0a <HAL_TIM_PWM_Start+0x19e>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a1f      	ldr	r2, [pc, #124]	; (800bc70 <HAL_TIM_PWM_Start+0x204>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d009      	beq.n	800bc0a <HAL_TIM_PWM_Start+0x19e>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a17      	ldr	r2, [pc, #92]	; (800bc58 <HAL_TIM_PWM_Start+0x1ec>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d004      	beq.n	800bc0a <HAL_TIM_PWM_Start+0x19e>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a1b      	ldr	r2, [pc, #108]	; (800bc74 <HAL_TIM_PWM_Start+0x208>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d115      	bne.n	800bc36 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689a      	ldr	r2, [r3, #8]
 800bc10:	4b19      	ldr	r3, [pc, #100]	; (800bc78 <HAL_TIM_PWM_Start+0x20c>)
 800bc12:	4013      	ands	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b06      	cmp	r3, #6
 800bc1a:	d015      	beq.n	800bc48 <HAL_TIM_PWM_Start+0x1dc>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc22:	d011      	beq.n	800bc48 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f042 0201 	orr.w	r2, r2, #1
 800bc32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc34:	e008      	b.n	800bc48 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f042 0201 	orr.w	r2, r2, #1
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	e000      	b.n	800bc4a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	40010000 	.word	0x40010000
 800bc58:	40010400 	.word	0x40010400
 800bc5c:	40014000 	.word	0x40014000
 800bc60:	40014400 	.word	0x40014400
 800bc64:	40014800 	.word	0x40014800
 800bc68:	40000400 	.word	0x40000400
 800bc6c:	40000800 	.word	0x40000800
 800bc70:	40000c00 	.word	0x40000c00
 800bc74:	40001800 	.word	0x40001800
 800bc78:	00010007 	.word	0x00010007

0800bc7c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	6839      	ldr	r1, [r7, #0]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f001 f910 	bl	800ceb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a3e      	ldr	r2, [pc, #248]	; (800bd94 <HAL_TIM_PWM_Stop+0x118>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d013      	beq.n	800bcc6 <HAL_TIM_PWM_Stop+0x4a>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a3d      	ldr	r2, [pc, #244]	; (800bd98 <HAL_TIM_PWM_Stop+0x11c>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d00e      	beq.n	800bcc6 <HAL_TIM_PWM_Stop+0x4a>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a3b      	ldr	r2, [pc, #236]	; (800bd9c <HAL_TIM_PWM_Stop+0x120>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d009      	beq.n	800bcc6 <HAL_TIM_PWM_Stop+0x4a>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a3a      	ldr	r2, [pc, #232]	; (800bda0 <HAL_TIM_PWM_Stop+0x124>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d004      	beq.n	800bcc6 <HAL_TIM_PWM_Stop+0x4a>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a38      	ldr	r2, [pc, #224]	; (800bda4 <HAL_TIM_PWM_Stop+0x128>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d101      	bne.n	800bcca <HAL_TIM_PWM_Stop+0x4e>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e000      	b.n	800bccc <HAL_TIM_PWM_Stop+0x50>
 800bcca:	2300      	movs	r3, #0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d017      	beq.n	800bd00 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6a1a      	ldr	r2, [r3, #32]
 800bcd6:	f241 1311 	movw	r3, #4369	; 0x1111
 800bcda:	4013      	ands	r3, r2
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10f      	bne.n	800bd00 <HAL_TIM_PWM_Stop+0x84>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6a1a      	ldr	r2, [r3, #32]
 800bce6:	f240 4344 	movw	r3, #1092	; 0x444
 800bcea:	4013      	ands	r3, r2
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d107      	bne.n	800bd00 <HAL_TIM_PWM_Stop+0x84>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bcfe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	6a1a      	ldr	r2, [r3, #32]
 800bd06:	f241 1311 	movw	r3, #4369	; 0x1111
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10f      	bne.n	800bd30 <HAL_TIM_PWM_Stop+0xb4>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	6a1a      	ldr	r2, [r3, #32]
 800bd16:	f240 4344 	movw	r3, #1092	; 0x444
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d107      	bne.n	800bd30 <HAL_TIM_PWM_Stop+0xb4>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f022 0201 	bic.w	r2, r2, #1
 800bd2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d104      	bne.n	800bd40 <HAL_TIM_PWM_Stop+0xc4>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd3e:	e023      	b.n	800bd88 <HAL_TIM_PWM_Stop+0x10c>
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	2b04      	cmp	r3, #4
 800bd44:	d104      	bne.n	800bd50 <HAL_TIM_PWM_Stop+0xd4>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd4e:	e01b      	b.n	800bd88 <HAL_TIM_PWM_Stop+0x10c>
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	2b08      	cmp	r3, #8
 800bd54:	d104      	bne.n	800bd60 <HAL_TIM_PWM_Stop+0xe4>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd5e:	e013      	b.n	800bd88 <HAL_TIM_PWM_Stop+0x10c>
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	2b0c      	cmp	r3, #12
 800bd64:	d104      	bne.n	800bd70 <HAL_TIM_PWM_Stop+0xf4>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd6e:	e00b      	b.n	800bd88 <HAL_TIM_PWM_Stop+0x10c>
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	2b10      	cmp	r3, #16
 800bd74:	d104      	bne.n	800bd80 <HAL_TIM_PWM_Stop+0x104>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd7e:	e003      	b.n	800bd88 <HAL_TIM_PWM_Stop+0x10c>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	40010000 	.word	0x40010000
 800bd98:	40010400 	.word	0x40010400
 800bd9c:	40014000 	.word	0x40014000
 800bda0:	40014400 	.word	0x40014400
 800bda4:	40014800 	.word	0x40014800

0800bda8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d101      	bne.n	800bdbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e08f      	b.n	800bedc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d106      	bne.n	800bdd6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f7f6 fe39 	bl	8002a48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2202      	movs	r2, #2
 800bdda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	6899      	ldr	r1, [r3, #8]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	4b3e      	ldr	r3, [pc, #248]	; (800bee4 <HAL_TIM_Encoder_Init+0x13c>)
 800bdea:	400b      	ands	r3, r1
 800bdec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	f000 fc55 	bl	800c6a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	6a1b      	ldr	r3, [r3, #32]
 800be14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800be20:	693a      	ldr	r2, [r7, #16]
 800be22:	4b31      	ldr	r3, [pc, #196]	; (800bee8 <HAL_TIM_Encoder_Init+0x140>)
 800be24:	4013      	ands	r3, r2
 800be26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	689a      	ldr	r2, [r3, #8]
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	699b      	ldr	r3, [r3, #24]
 800be30:	021b      	lsls	r3, r3, #8
 800be32:	4313      	orrs	r3, r2
 800be34:	693a      	ldr	r2, [r7, #16]
 800be36:	4313      	orrs	r3, r2
 800be38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	4b2b      	ldr	r3, [pc, #172]	; (800beec <HAL_TIM_Encoder_Init+0x144>)
 800be3e:	4013      	ands	r3, r2
 800be40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800be42:	693a      	ldr	r2, [r7, #16]
 800be44:	4b2a      	ldr	r3, [pc, #168]	; (800bef0 <HAL_TIM_Encoder_Init+0x148>)
 800be46:	4013      	ands	r3, r2
 800be48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	68da      	ldr	r2, [r3, #12]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	69db      	ldr	r3, [r3, #28]
 800be52:	021b      	lsls	r3, r3, #8
 800be54:	4313      	orrs	r3, r2
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	4313      	orrs	r3, r2
 800be5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	011a      	lsls	r2, r3, #4
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	031b      	lsls	r3, r3, #12
 800be68:	4313      	orrs	r3, r2
 800be6a:	693a      	ldr	r2, [r7, #16]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800be76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800be7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	685a      	ldr	r2, [r3, #4]
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	011b      	lsls	r3, r3, #4
 800be8a:	4313      	orrs	r3, r2
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	4313      	orrs	r3, r2
 800be90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	697a      	ldr	r2, [r7, #20]
 800be98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2201      	movs	r2, #1
 800beae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2201      	movs	r2, #1
 800bece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3718      	adds	r7, #24
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	fffebff8 	.word	0xfffebff8
 800bee8:	fffffcfc 	.word	0xfffffcfc
 800beec:	fffff3f3 	.word	0xfffff3f3
 800bef0:	ffff0f0f 	.word	0xffff0f0f

0800bef4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bf0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d110      	bne.n	800bf46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d102      	bne.n	800bf30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bf2a:	7b7b      	ldrb	r3, [r7, #13]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d001      	beq.n	800bf34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e069      	b.n	800c008 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2202      	movs	r2, #2
 800bf38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2202      	movs	r2, #2
 800bf40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf44:	e031      	b.n	800bfaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	2b04      	cmp	r3, #4
 800bf4a:	d110      	bne.n	800bf6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf4c:	7bbb      	ldrb	r3, [r7, #14]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d102      	bne.n	800bf58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bf52:	7b3b      	ldrb	r3, [r7, #12]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d001      	beq.n	800bf5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e055      	b.n	800c008 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2202      	movs	r2, #2
 800bf60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2202      	movs	r2, #2
 800bf68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf6c:	e01d      	b.n	800bfaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d108      	bne.n	800bf86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf74:	7bbb      	ldrb	r3, [r7, #14]
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d105      	bne.n	800bf86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf7a:	7b7b      	ldrb	r3, [r7, #13]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d102      	bne.n	800bf86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bf80:	7b3b      	ldrb	r3, [r7, #12]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d001      	beq.n	800bf8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	e03e      	b.n	800c008 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2202      	movs	r2, #2
 800bf96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2202      	movs	r2, #2
 800bfa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d003      	beq.n	800bfb8 <HAL_TIM_Encoder_Start+0xc4>
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	2b04      	cmp	r3, #4
 800bfb4:	d008      	beq.n	800bfc8 <HAL_TIM_Encoder_Start+0xd4>
 800bfb6:	e00f      	b.n	800bfd8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f000 ff77 	bl	800ceb4 <TIM_CCxChannelCmd>
      break;
 800bfc6:	e016      	b.n	800bff6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	2104      	movs	r1, #4
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f000 ff6f 	bl	800ceb4 <TIM_CCxChannelCmd>
      break;
 800bfd6:	e00e      	b.n	800bff6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	2100      	movs	r1, #0
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f000 ff67 	bl	800ceb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2201      	movs	r2, #1
 800bfec:	2104      	movs	r1, #4
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 ff60 	bl	800ceb4 <TIM_CCxChannelCmd>
      break;
 800bff4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f042 0201 	orr.w	r2, r2, #1
 800c004:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	f003 0302 	and.w	r3, r3, #2
 800c022:	2b02      	cmp	r3, #2
 800c024:	d122      	bne.n	800c06c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	f003 0302 	and.w	r3, r3, #2
 800c030:	2b02      	cmp	r3, #2
 800c032:	d11b      	bne.n	800c06c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f06f 0202 	mvn.w	r2, #2
 800c03c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2201      	movs	r2, #1
 800c042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	699b      	ldr	r3, [r3, #24]
 800c04a:	f003 0303 	and.w	r3, r3, #3
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fb0a 	bl	800c66c <HAL_TIM_IC_CaptureCallback>
 800c058:	e005      	b.n	800c066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 fafc 	bl	800c658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fb0d 	bl	800c680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	f003 0304 	and.w	r3, r3, #4
 800c076:	2b04      	cmp	r3, #4
 800c078:	d122      	bne.n	800c0c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	f003 0304 	and.w	r3, r3, #4
 800c084:	2b04      	cmp	r3, #4
 800c086:	d11b      	bne.n	800c0c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f06f 0204 	mvn.w	r2, #4
 800c090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2202      	movs	r2, #2
 800c096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d003      	beq.n	800c0ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fae0 	bl	800c66c <HAL_TIM_IC_CaptureCallback>
 800c0ac:	e005      	b.n	800c0ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 fad2 	bl	800c658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 fae3 	bl	800c680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	f003 0308 	and.w	r3, r3, #8
 800c0ca:	2b08      	cmp	r3, #8
 800c0cc:	d122      	bne.n	800c114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	f003 0308 	and.w	r3, r3, #8
 800c0d8:	2b08      	cmp	r3, #8
 800c0da:	d11b      	bne.n	800c114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f06f 0208 	mvn.w	r2, #8
 800c0e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2204      	movs	r2, #4
 800c0ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	69db      	ldr	r3, [r3, #28]
 800c0f2:	f003 0303 	and.w	r3, r3, #3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d003      	beq.n	800c102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 fab6 	bl	800c66c <HAL_TIM_IC_CaptureCallback>
 800c100:	e005      	b.n	800c10e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 faa8 	bl	800c658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fab9 	bl	800c680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	f003 0310 	and.w	r3, r3, #16
 800c11e:	2b10      	cmp	r3, #16
 800c120:	d122      	bne.n	800c168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	f003 0310 	and.w	r3, r3, #16
 800c12c:	2b10      	cmp	r3, #16
 800c12e:	d11b      	bne.n	800c168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f06f 0210 	mvn.w	r2, #16
 800c138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2208      	movs	r2, #8
 800c13e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	69db      	ldr	r3, [r3, #28]
 800c146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d003      	beq.n	800c156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fa8c 	bl	800c66c <HAL_TIM_IC_CaptureCallback>
 800c154:	e005      	b.n	800c162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fa7e 	bl	800c658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 fa8f 	bl	800c680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	691b      	ldr	r3, [r3, #16]
 800c16e:	f003 0301 	and.w	r3, r3, #1
 800c172:	2b01      	cmp	r3, #1
 800c174:	d10e      	bne.n	800c194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	f003 0301 	and.w	r3, r3, #1
 800c180:	2b01      	cmp	r3, #1
 800c182:	d107      	bne.n	800c194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f06f 0201 	mvn.w	r2, #1
 800c18c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7f6 f9ec 	bl	800256c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c19e:	2b80      	cmp	r3, #128	; 0x80
 800c1a0:	d10e      	bne.n	800c1c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ac:	2b80      	cmp	r3, #128	; 0x80
 800c1ae:	d107      	bne.n	800c1c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c1b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 ffb0 	bl	800d120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ce:	d10e      	bne.n	800c1ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1da:	2b80      	cmp	r3, #128	; 0x80
 800c1dc:	d107      	bne.n	800c1ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c1e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 ffa3 	bl	800d134 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f8:	2b40      	cmp	r3, #64	; 0x40
 800c1fa:	d10e      	bne.n	800c21a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c206:	2b40      	cmp	r3, #64	; 0x40
 800c208:	d107      	bne.n	800c21a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fa3d 	bl	800c694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	f003 0320 	and.w	r3, r3, #32
 800c224:	2b20      	cmp	r3, #32
 800c226:	d10e      	bne.n	800c246 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	f003 0320 	and.w	r3, r3, #32
 800c232:	2b20      	cmp	r3, #32
 800c234:	d107      	bne.n	800c246 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f06f 0220 	mvn.w	r2, #32
 800c23e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 ff63 	bl	800d10c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c246:	bf00      	nop
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
	...

0800c250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c262:	2b01      	cmp	r3, #1
 800c264:	d101      	bne.n	800c26a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c266:	2302      	movs	r3, #2
 800c268:	e0fd      	b.n	800c466 <HAL_TIM_PWM_ConfigChannel+0x216>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b14      	cmp	r3, #20
 800c276:	f200 80f0 	bhi.w	800c45a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800c27a:	a201      	add	r2, pc, #4	; (adr r2, 800c280 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c280:	0800c2d5 	.word	0x0800c2d5
 800c284:	0800c45b 	.word	0x0800c45b
 800c288:	0800c45b 	.word	0x0800c45b
 800c28c:	0800c45b 	.word	0x0800c45b
 800c290:	0800c315 	.word	0x0800c315
 800c294:	0800c45b 	.word	0x0800c45b
 800c298:	0800c45b 	.word	0x0800c45b
 800c29c:	0800c45b 	.word	0x0800c45b
 800c2a0:	0800c357 	.word	0x0800c357
 800c2a4:	0800c45b 	.word	0x0800c45b
 800c2a8:	0800c45b 	.word	0x0800c45b
 800c2ac:	0800c45b 	.word	0x0800c45b
 800c2b0:	0800c397 	.word	0x0800c397
 800c2b4:	0800c45b 	.word	0x0800c45b
 800c2b8:	0800c45b 	.word	0x0800c45b
 800c2bc:	0800c45b 	.word	0x0800c45b
 800c2c0:	0800c3d9 	.word	0x0800c3d9
 800c2c4:	0800c45b 	.word	0x0800c45b
 800c2c8:	0800c45b 	.word	0x0800c45b
 800c2cc:	0800c45b 	.word	0x0800c45b
 800c2d0:	0800c419 	.word	0x0800c419
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68b9      	ldr	r1, [r7, #8]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 fa7e 	bl	800c7dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	699a      	ldr	r2, [r3, #24]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f042 0208 	orr.w	r2, r2, #8
 800c2ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	699a      	ldr	r2, [r3, #24]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f022 0204 	bic.w	r2, r2, #4
 800c2fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6999      	ldr	r1, [r3, #24]
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	691a      	ldr	r2, [r3, #16]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	430a      	orrs	r2, r1
 800c310:	619a      	str	r2, [r3, #24]
      break;
 800c312:	e0a3      	b.n	800c45c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68b9      	ldr	r1, [r7, #8]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 faee 	bl	800c8fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	699a      	ldr	r2, [r3, #24]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c32e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	699a      	ldr	r2, [r3, #24]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c33e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6999      	ldr	r1, [r3, #24]
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	021a      	lsls	r2, r3, #8
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	430a      	orrs	r2, r1
 800c352:	619a      	str	r2, [r3, #24]
      break;
 800c354:	e082      	b.n	800c45c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	68b9      	ldr	r1, [r7, #8]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f000 fb57 	bl	800ca10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	69da      	ldr	r2, [r3, #28]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f042 0208 	orr.w	r2, r2, #8
 800c370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	69da      	ldr	r2, [r3, #28]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f022 0204 	bic.w	r2, r2, #4
 800c380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	69d9      	ldr	r1, [r3, #28]
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	691a      	ldr	r2, [r3, #16]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	430a      	orrs	r2, r1
 800c392:	61da      	str	r2, [r3, #28]
      break;
 800c394:	e062      	b.n	800c45c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68b9      	ldr	r1, [r7, #8]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 fbbd 	bl	800cb1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	69da      	ldr	r2, [r3, #28]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	69da      	ldr	r2, [r3, #28]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	69d9      	ldr	r1, [r3, #28]
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	021a      	lsls	r2, r3, #8
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	61da      	str	r2, [r3, #28]
      break;
 800c3d6:	e041      	b.n	800c45c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68b9      	ldr	r1, [r7, #8]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 fc04 	bl	800cbec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0208 	orr.w	r2, r2, #8
 800c3f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f022 0204 	bic.w	r2, r2, #4
 800c402:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	691a      	ldr	r2, [r3, #16]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c416:	e021      	b.n	800c45c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	68b9      	ldr	r1, [r7, #8]
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 fc46 	bl	800ccb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c432:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c442:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	021a      	lsls	r2, r3, #8
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	430a      	orrs	r2, r1
 800c456:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c458:	e000      	b.n	800c45c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c45a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2200      	movs	r2, #0
 800c460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop

0800c470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c480:	2b01      	cmp	r3, #1
 800c482:	d101      	bne.n	800c488 <HAL_TIM_ConfigClockSource+0x18>
 800c484:	2302      	movs	r3, #2
 800c486:	e0db      	b.n	800c640 <HAL_TIM_ConfigClockSource+0x1d0>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2202      	movs	r2, #2
 800c494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	4b69      	ldr	r3, [pc, #420]	; (800c648 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c4a4:	4013      	ands	r3, r2
 800c4a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a63      	ldr	r2, [pc, #396]	; (800c64c <HAL_TIM_ConfigClockSource+0x1dc>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	f000 80a9 	beq.w	800c616 <HAL_TIM_ConfigClockSource+0x1a6>
 800c4c4:	4a61      	ldr	r2, [pc, #388]	; (800c64c <HAL_TIM_ConfigClockSource+0x1dc>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	f200 80ae 	bhi.w	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c4cc:	4a60      	ldr	r2, [pc, #384]	; (800c650 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	f000 80a1 	beq.w	800c616 <HAL_TIM_ConfigClockSource+0x1a6>
 800c4d4:	4a5e      	ldr	r2, [pc, #376]	; (800c650 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	f200 80a6 	bhi.w	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c4dc:	4a5d      	ldr	r2, [pc, #372]	; (800c654 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	f000 8099 	beq.w	800c616 <HAL_TIM_ConfigClockSource+0x1a6>
 800c4e4:	4a5b      	ldr	r2, [pc, #364]	; (800c654 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	f200 809e 	bhi.w	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c4ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c4f0:	f000 8091 	beq.w	800c616 <HAL_TIM_ConfigClockSource+0x1a6>
 800c4f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c4f8:	f200 8096 	bhi.w	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c4fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c500:	f000 8089 	beq.w	800c616 <HAL_TIM_ConfigClockSource+0x1a6>
 800c504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c508:	f200 808e 	bhi.w	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c50c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c510:	d03e      	beq.n	800c590 <HAL_TIM_ConfigClockSource+0x120>
 800c512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c516:	f200 8087 	bhi.w	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c51a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c51e:	f000 8085 	beq.w	800c62c <HAL_TIM_ConfigClockSource+0x1bc>
 800c522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c526:	d87f      	bhi.n	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c528:	2b70      	cmp	r3, #112	; 0x70
 800c52a:	d01a      	beq.n	800c562 <HAL_TIM_ConfigClockSource+0xf2>
 800c52c:	2b70      	cmp	r3, #112	; 0x70
 800c52e:	d87b      	bhi.n	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c530:	2b60      	cmp	r3, #96	; 0x60
 800c532:	d050      	beq.n	800c5d6 <HAL_TIM_ConfigClockSource+0x166>
 800c534:	2b60      	cmp	r3, #96	; 0x60
 800c536:	d877      	bhi.n	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c538:	2b50      	cmp	r3, #80	; 0x50
 800c53a:	d03c      	beq.n	800c5b6 <HAL_TIM_ConfigClockSource+0x146>
 800c53c:	2b50      	cmp	r3, #80	; 0x50
 800c53e:	d873      	bhi.n	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c540:	2b40      	cmp	r3, #64	; 0x40
 800c542:	d058      	beq.n	800c5f6 <HAL_TIM_ConfigClockSource+0x186>
 800c544:	2b40      	cmp	r3, #64	; 0x40
 800c546:	d86f      	bhi.n	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c548:	2b30      	cmp	r3, #48	; 0x30
 800c54a:	d064      	beq.n	800c616 <HAL_TIM_ConfigClockSource+0x1a6>
 800c54c:	2b30      	cmp	r3, #48	; 0x30
 800c54e:	d86b      	bhi.n	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c550:	2b20      	cmp	r3, #32
 800c552:	d060      	beq.n	800c616 <HAL_TIM_ConfigClockSource+0x1a6>
 800c554:	2b20      	cmp	r3, #32
 800c556:	d867      	bhi.n	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d05c      	beq.n	800c616 <HAL_TIM_ConfigClockSource+0x1a6>
 800c55c:	2b10      	cmp	r3, #16
 800c55e:	d05a      	beq.n	800c616 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c560:	e062      	b.n	800c628 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6818      	ldr	r0, [r3, #0]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	6899      	ldr	r1, [r3, #8]
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	685a      	ldr	r2, [r3, #4]
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	f000 fc7f 	bl	800ce74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c584:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	609a      	str	r2, [r3, #8]
      break;
 800c58e:	e04e      	b.n	800c62e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6818      	ldr	r0, [r3, #0]
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	6899      	ldr	r1, [r3, #8]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	f000 fc68 	bl	800ce74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	689a      	ldr	r2, [r3, #8]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c5b2:	609a      	str	r2, [r3, #8]
      break;
 800c5b4:	e03b      	b.n	800c62e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	6859      	ldr	r1, [r3, #4]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	f000 fbd8 	bl	800cd78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2150      	movs	r1, #80	; 0x50
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 fc32 	bl	800ce38 <TIM_ITRx_SetConfig>
      break;
 800c5d4:	e02b      	b.n	800c62e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	6859      	ldr	r1, [r3, #4]
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	f000 fbf7 	bl	800cdd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2160      	movs	r1, #96	; 0x60
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f000 fc22 	bl	800ce38 <TIM_ITRx_SetConfig>
      break;
 800c5f4:	e01b      	b.n	800c62e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6818      	ldr	r0, [r3, #0]
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	6859      	ldr	r1, [r3, #4]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	461a      	mov	r2, r3
 800c604:	f000 fbb8 	bl	800cd78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2140      	movs	r1, #64	; 0x40
 800c60e:	4618      	mov	r0, r3
 800c610:	f000 fc12 	bl	800ce38 <TIM_ITRx_SetConfig>
      break;
 800c614:	e00b      	b.n	800c62e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4619      	mov	r1, r3
 800c620:	4610      	mov	r0, r2
 800c622:	f000 fc09 	bl	800ce38 <TIM_ITRx_SetConfig>
        break;
 800c626:	e002      	b.n	800c62e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c628:	bf00      	nop
 800c62a:	e000      	b.n	800c62e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c62c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	ffceff88 	.word	0xffceff88
 800c64c:	00100040 	.word	0x00100040
 800c650:	00100030 	.word	0x00100030
 800c654:	00100020 	.word	0x00100020

0800c658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c688:	bf00      	nop
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c69c:	bf00      	nop
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a40      	ldr	r2, [pc, #256]	; (800c7bc <TIM_Base_SetConfig+0x114>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d013      	beq.n	800c6e8 <TIM_Base_SetConfig+0x40>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6c6:	d00f      	beq.n	800c6e8 <TIM_Base_SetConfig+0x40>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4a3d      	ldr	r2, [pc, #244]	; (800c7c0 <TIM_Base_SetConfig+0x118>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d00b      	beq.n	800c6e8 <TIM_Base_SetConfig+0x40>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4a3c      	ldr	r2, [pc, #240]	; (800c7c4 <TIM_Base_SetConfig+0x11c>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d007      	beq.n	800c6e8 <TIM_Base_SetConfig+0x40>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4a3b      	ldr	r2, [pc, #236]	; (800c7c8 <TIM_Base_SetConfig+0x120>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d003      	beq.n	800c6e8 <TIM_Base_SetConfig+0x40>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4a3a      	ldr	r2, [pc, #232]	; (800c7cc <TIM_Base_SetConfig+0x124>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d108      	bne.n	800c6fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4a2f      	ldr	r2, [pc, #188]	; (800c7bc <TIM_Base_SetConfig+0x114>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d01f      	beq.n	800c742 <TIM_Base_SetConfig+0x9a>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c708:	d01b      	beq.n	800c742 <TIM_Base_SetConfig+0x9a>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4a2c      	ldr	r2, [pc, #176]	; (800c7c0 <TIM_Base_SetConfig+0x118>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d017      	beq.n	800c742 <TIM_Base_SetConfig+0x9a>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a2b      	ldr	r2, [pc, #172]	; (800c7c4 <TIM_Base_SetConfig+0x11c>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d013      	beq.n	800c742 <TIM_Base_SetConfig+0x9a>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4a2a      	ldr	r2, [pc, #168]	; (800c7c8 <TIM_Base_SetConfig+0x120>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d00f      	beq.n	800c742 <TIM_Base_SetConfig+0x9a>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4a29      	ldr	r2, [pc, #164]	; (800c7cc <TIM_Base_SetConfig+0x124>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d00b      	beq.n	800c742 <TIM_Base_SetConfig+0x9a>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4a28      	ldr	r2, [pc, #160]	; (800c7d0 <TIM_Base_SetConfig+0x128>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d007      	beq.n	800c742 <TIM_Base_SetConfig+0x9a>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4a27      	ldr	r2, [pc, #156]	; (800c7d4 <TIM_Base_SetConfig+0x12c>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d003      	beq.n	800c742 <TIM_Base_SetConfig+0x9a>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	4a26      	ldr	r2, [pc, #152]	; (800c7d8 <TIM_Base_SetConfig+0x130>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d108      	bne.n	800c754 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	4313      	orrs	r3, r2
 800c752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	4313      	orrs	r3, r2
 800c760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	689a      	ldr	r2, [r3, #8]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4a10      	ldr	r2, [pc, #64]	; (800c7bc <TIM_Base_SetConfig+0x114>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d00f      	beq.n	800c7a0 <TIM_Base_SetConfig+0xf8>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4a12      	ldr	r2, [pc, #72]	; (800c7cc <TIM_Base_SetConfig+0x124>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d00b      	beq.n	800c7a0 <TIM_Base_SetConfig+0xf8>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a11      	ldr	r2, [pc, #68]	; (800c7d0 <TIM_Base_SetConfig+0x128>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d007      	beq.n	800c7a0 <TIM_Base_SetConfig+0xf8>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a10      	ldr	r2, [pc, #64]	; (800c7d4 <TIM_Base_SetConfig+0x12c>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d003      	beq.n	800c7a0 <TIM_Base_SetConfig+0xf8>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a0f      	ldr	r2, [pc, #60]	; (800c7d8 <TIM_Base_SetConfig+0x130>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d103      	bne.n	800c7a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	691a      	ldr	r2, [r3, #16]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	615a      	str	r2, [r3, #20]
}
 800c7ae:	bf00      	nop
 800c7b0:	3714      	adds	r7, #20
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	40010000 	.word	0x40010000
 800c7c0:	40000400 	.word	0x40000400
 800c7c4:	40000800 	.word	0x40000800
 800c7c8:	40000c00 	.word	0x40000c00
 800c7cc:	40010400 	.word	0x40010400
 800c7d0:	40014000 	.word	0x40014000
 800c7d4:	40014400 	.word	0x40014400
 800c7d8:	40014800 	.word	0x40014800

0800c7dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b087      	sub	sp, #28
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6a1b      	ldr	r3, [r3, #32]
 800c7ea:	f023 0201 	bic.w	r2, r3, #1
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a1b      	ldr	r3, [r3, #32]
 800c7f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	699b      	ldr	r3, [r3, #24]
 800c802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	4b37      	ldr	r3, [pc, #220]	; (800c8e4 <TIM_OC1_SetConfig+0x108>)
 800c808:	4013      	ands	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f023 0303 	bic.w	r3, r3, #3
 800c812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f023 0302 	bic.w	r3, r3, #2
 800c824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4a2d      	ldr	r2, [pc, #180]	; (800c8e8 <TIM_OC1_SetConfig+0x10c>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d00f      	beq.n	800c858 <TIM_OC1_SetConfig+0x7c>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a2c      	ldr	r2, [pc, #176]	; (800c8ec <TIM_OC1_SetConfig+0x110>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d00b      	beq.n	800c858 <TIM_OC1_SetConfig+0x7c>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4a2b      	ldr	r2, [pc, #172]	; (800c8f0 <TIM_OC1_SetConfig+0x114>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d007      	beq.n	800c858 <TIM_OC1_SetConfig+0x7c>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a2a      	ldr	r2, [pc, #168]	; (800c8f4 <TIM_OC1_SetConfig+0x118>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d003      	beq.n	800c858 <TIM_OC1_SetConfig+0x7c>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4a29      	ldr	r2, [pc, #164]	; (800c8f8 <TIM_OC1_SetConfig+0x11c>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d10c      	bne.n	800c872 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f023 0308 	bic.w	r3, r3, #8
 800c85e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	697a      	ldr	r2, [r7, #20]
 800c866:	4313      	orrs	r3, r2
 800c868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	f023 0304 	bic.w	r3, r3, #4
 800c870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a1c      	ldr	r2, [pc, #112]	; (800c8e8 <TIM_OC1_SetConfig+0x10c>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d00f      	beq.n	800c89a <TIM_OC1_SetConfig+0xbe>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4a1b      	ldr	r2, [pc, #108]	; (800c8ec <TIM_OC1_SetConfig+0x110>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d00b      	beq.n	800c89a <TIM_OC1_SetConfig+0xbe>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a1a      	ldr	r2, [pc, #104]	; (800c8f0 <TIM_OC1_SetConfig+0x114>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d007      	beq.n	800c89a <TIM_OC1_SetConfig+0xbe>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a19      	ldr	r2, [pc, #100]	; (800c8f4 <TIM_OC1_SetConfig+0x118>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d003      	beq.n	800c89a <TIM_OC1_SetConfig+0xbe>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a18      	ldr	r2, [pc, #96]	; (800c8f8 <TIM_OC1_SetConfig+0x11c>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d111      	bne.n	800c8be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c8a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	695b      	ldr	r3, [r3, #20]
 800c8ae:	693a      	ldr	r2, [r7, #16]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	699b      	ldr	r3, [r3, #24]
 800c8b8:	693a      	ldr	r2, [r7, #16]
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	693a      	ldr	r2, [r7, #16]
 800c8c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	697a      	ldr	r2, [r7, #20]
 800c8d6:	621a      	str	r2, [r3, #32]
}
 800c8d8:	bf00      	nop
 800c8da:	371c      	adds	r7, #28
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr
 800c8e4:	fffeff8f 	.word	0xfffeff8f
 800c8e8:	40010000 	.word	0x40010000
 800c8ec:	40010400 	.word	0x40010400
 800c8f0:	40014000 	.word	0x40014000
 800c8f4:	40014400 	.word	0x40014400
 800c8f8:	40014800 	.word	0x40014800

0800c8fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b087      	sub	sp, #28
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6a1b      	ldr	r3, [r3, #32]
 800c90a:	f023 0210 	bic.w	r2, r3, #16
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a1b      	ldr	r3, [r3, #32]
 800c916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	699b      	ldr	r3, [r3, #24]
 800c922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	4b34      	ldr	r3, [pc, #208]	; (800c9f8 <TIM_OC2_SetConfig+0xfc>)
 800c928:	4013      	ands	r3, r2
 800c92a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	021b      	lsls	r3, r3, #8
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	f023 0320 	bic.w	r3, r3, #32
 800c946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	011b      	lsls	r3, r3, #4
 800c94e:	697a      	ldr	r2, [r7, #20]
 800c950:	4313      	orrs	r3, r2
 800c952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4a29      	ldr	r2, [pc, #164]	; (800c9fc <TIM_OC2_SetConfig+0x100>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d003      	beq.n	800c964 <TIM_OC2_SetConfig+0x68>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4a28      	ldr	r2, [pc, #160]	; (800ca00 <TIM_OC2_SetConfig+0x104>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d10d      	bne.n	800c980 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c96a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	011b      	lsls	r3, r3, #4
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	4313      	orrs	r3, r2
 800c976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c97e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	4a1e      	ldr	r2, [pc, #120]	; (800c9fc <TIM_OC2_SetConfig+0x100>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d00f      	beq.n	800c9a8 <TIM_OC2_SetConfig+0xac>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	4a1d      	ldr	r2, [pc, #116]	; (800ca00 <TIM_OC2_SetConfig+0x104>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d00b      	beq.n	800c9a8 <TIM_OC2_SetConfig+0xac>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4a1c      	ldr	r2, [pc, #112]	; (800ca04 <TIM_OC2_SetConfig+0x108>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d007      	beq.n	800c9a8 <TIM_OC2_SetConfig+0xac>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a1b      	ldr	r2, [pc, #108]	; (800ca08 <TIM_OC2_SetConfig+0x10c>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d003      	beq.n	800c9a8 <TIM_OC2_SetConfig+0xac>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4a1a      	ldr	r2, [pc, #104]	; (800ca0c <TIM_OC2_SetConfig+0x110>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d113      	bne.n	800c9d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c9ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	695b      	ldr	r3, [r3, #20]
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	693a      	ldr	r2, [r7, #16]
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	693a      	ldr	r2, [r7, #16]
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	693a      	ldr	r2, [r7, #16]
 800c9d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	685a      	ldr	r2, [r3, #4]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	621a      	str	r2, [r3, #32]
}
 800c9ea:	bf00      	nop
 800c9ec:	371c      	adds	r7, #28
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr
 800c9f6:	bf00      	nop
 800c9f8:	feff8fff 	.word	0xfeff8fff
 800c9fc:	40010000 	.word	0x40010000
 800ca00:	40010400 	.word	0x40010400
 800ca04:	40014000 	.word	0x40014000
 800ca08:	40014400 	.word	0x40014400
 800ca0c:	40014800 	.word	0x40014800

0800ca10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b087      	sub	sp, #28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a1b      	ldr	r3, [r3, #32]
 800ca1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a1b      	ldr	r3, [r3, #32]
 800ca2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	69db      	ldr	r3, [r3, #28]
 800ca36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f023 0303 	bic.w	r3, r3, #3
 800ca46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ca58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	021b      	lsls	r3, r3, #8
 800ca60:	697a      	ldr	r2, [r7, #20]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	4a27      	ldr	r2, [pc, #156]	; (800cb08 <TIM_OC3_SetConfig+0xf8>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d003      	beq.n	800ca76 <TIM_OC3_SetConfig+0x66>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	4a26      	ldr	r2, [pc, #152]	; (800cb0c <TIM_OC3_SetConfig+0xfc>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d10d      	bne.n	800ca92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	021b      	lsls	r3, r3, #8
 800ca84:	697a      	ldr	r2, [r7, #20]
 800ca86:	4313      	orrs	r3, r2
 800ca88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	4a1c      	ldr	r2, [pc, #112]	; (800cb08 <TIM_OC3_SetConfig+0xf8>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d00f      	beq.n	800caba <TIM_OC3_SetConfig+0xaa>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4a1b      	ldr	r2, [pc, #108]	; (800cb0c <TIM_OC3_SetConfig+0xfc>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d00b      	beq.n	800caba <TIM_OC3_SetConfig+0xaa>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4a1a      	ldr	r2, [pc, #104]	; (800cb10 <TIM_OC3_SetConfig+0x100>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d007      	beq.n	800caba <TIM_OC3_SetConfig+0xaa>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4a19      	ldr	r2, [pc, #100]	; (800cb14 <TIM_OC3_SetConfig+0x104>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d003      	beq.n	800caba <TIM_OC3_SetConfig+0xaa>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4a18      	ldr	r2, [pc, #96]	; (800cb18 <TIM_OC3_SetConfig+0x108>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d113      	bne.n	800cae2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	011b      	lsls	r3, r3, #4
 800cad0:	693a      	ldr	r2, [r7, #16]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	699b      	ldr	r3, [r3, #24]
 800cada:	011b      	lsls	r3, r3, #4
 800cadc:	693a      	ldr	r2, [r7, #16]
 800cade:	4313      	orrs	r3, r2
 800cae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	693a      	ldr	r2, [r7, #16]
 800cae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	685a      	ldr	r2, [r3, #4]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	697a      	ldr	r2, [r7, #20]
 800cafa:	621a      	str	r2, [r3, #32]
}
 800cafc:	bf00      	nop
 800cafe:	371c      	adds	r7, #28
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr
 800cb08:	40010000 	.word	0x40010000
 800cb0c:	40010400 	.word	0x40010400
 800cb10:	40014000 	.word	0x40014000
 800cb14:	40014400 	.word	0x40014400
 800cb18:	40014800 	.word	0x40014800

0800cb1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b087      	sub	sp, #28
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6a1b      	ldr	r3, [r3, #32]
 800cb2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a1b      	ldr	r3, [r3, #32]
 800cb36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	69db      	ldr	r3, [r3, #28]
 800cb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	021b      	lsls	r3, r3, #8
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	031b      	lsls	r3, r3, #12
 800cb6e:	693a      	ldr	r2, [r7, #16]
 800cb70:	4313      	orrs	r3, r2
 800cb72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a18      	ldr	r2, [pc, #96]	; (800cbd8 <TIM_OC4_SetConfig+0xbc>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d00f      	beq.n	800cb9c <TIM_OC4_SetConfig+0x80>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4a17      	ldr	r2, [pc, #92]	; (800cbdc <TIM_OC4_SetConfig+0xc0>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d00b      	beq.n	800cb9c <TIM_OC4_SetConfig+0x80>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a16      	ldr	r2, [pc, #88]	; (800cbe0 <TIM_OC4_SetConfig+0xc4>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d007      	beq.n	800cb9c <TIM_OC4_SetConfig+0x80>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a15      	ldr	r2, [pc, #84]	; (800cbe4 <TIM_OC4_SetConfig+0xc8>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d003      	beq.n	800cb9c <TIM_OC4_SetConfig+0x80>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a14      	ldr	r2, [pc, #80]	; (800cbe8 <TIM_OC4_SetConfig+0xcc>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d109      	bne.n	800cbb0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	695b      	ldr	r3, [r3, #20]
 800cba8:	019b      	lsls	r3, r3, #6
 800cbaa:	697a      	ldr	r2, [r7, #20]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	697a      	ldr	r2, [r7, #20]
 800cbb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	693a      	ldr	r2, [r7, #16]
 800cbc8:	621a      	str	r2, [r3, #32]
}
 800cbca:	bf00      	nop
 800cbcc:	371c      	adds	r7, #28
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	40010000 	.word	0x40010000
 800cbdc:	40010400 	.word	0x40010400
 800cbe0:	40014000 	.word	0x40014000
 800cbe4:	40014400 	.word	0x40014400
 800cbe8:	40014800 	.word	0x40014800

0800cbec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b087      	sub	sp, #28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cc2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	041b      	lsls	r3, r3, #16
 800cc34:	693a      	ldr	r2, [r7, #16]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4a17      	ldr	r2, [pc, #92]	; (800cc9c <TIM_OC5_SetConfig+0xb0>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d00f      	beq.n	800cc62 <TIM_OC5_SetConfig+0x76>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	4a16      	ldr	r2, [pc, #88]	; (800cca0 <TIM_OC5_SetConfig+0xb4>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d00b      	beq.n	800cc62 <TIM_OC5_SetConfig+0x76>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a15      	ldr	r2, [pc, #84]	; (800cca4 <TIM_OC5_SetConfig+0xb8>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d007      	beq.n	800cc62 <TIM_OC5_SetConfig+0x76>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4a14      	ldr	r2, [pc, #80]	; (800cca8 <TIM_OC5_SetConfig+0xbc>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d003      	beq.n	800cc62 <TIM_OC5_SetConfig+0x76>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a13      	ldr	r2, [pc, #76]	; (800ccac <TIM_OC5_SetConfig+0xc0>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d109      	bne.n	800cc76 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	695b      	ldr	r3, [r3, #20]
 800cc6e:	021b      	lsls	r3, r3, #8
 800cc70:	697a      	ldr	r2, [r7, #20]
 800cc72:	4313      	orrs	r3, r2
 800cc74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	697a      	ldr	r2, [r7, #20]
 800cc7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	621a      	str	r2, [r3, #32]
}
 800cc90:	bf00      	nop
 800cc92:	371c      	adds	r7, #28
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	40010000 	.word	0x40010000
 800cca0:	40010400 	.word	0x40010400
 800cca4:	40014000 	.word	0x40014000
 800cca8:	40014400 	.word	0x40014400
 800ccac:	40014800 	.word	0x40014800

0800ccb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b087      	sub	sp, #28
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a1b      	ldr	r3, [r3, #32]
 800ccbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a1b      	ldr	r3, [r3, #32]
 800ccca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	021b      	lsls	r3, r3, #8
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	4313      	orrs	r3, r2
 800ccea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ccf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	051b      	lsls	r3, r3, #20
 800ccfa:	693a      	ldr	r2, [r7, #16]
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	4a18      	ldr	r2, [pc, #96]	; (800cd64 <TIM_OC6_SetConfig+0xb4>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d00f      	beq.n	800cd28 <TIM_OC6_SetConfig+0x78>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4a17      	ldr	r2, [pc, #92]	; (800cd68 <TIM_OC6_SetConfig+0xb8>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d00b      	beq.n	800cd28 <TIM_OC6_SetConfig+0x78>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a16      	ldr	r2, [pc, #88]	; (800cd6c <TIM_OC6_SetConfig+0xbc>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d007      	beq.n	800cd28 <TIM_OC6_SetConfig+0x78>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4a15      	ldr	r2, [pc, #84]	; (800cd70 <TIM_OC6_SetConfig+0xc0>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d003      	beq.n	800cd28 <TIM_OC6_SetConfig+0x78>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a14      	ldr	r2, [pc, #80]	; (800cd74 <TIM_OC6_SetConfig+0xc4>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d109      	bne.n	800cd3c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cd2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	695b      	ldr	r3, [r3, #20]
 800cd34:	029b      	lsls	r3, r3, #10
 800cd36:	697a      	ldr	r2, [r7, #20]
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	697a      	ldr	r2, [r7, #20]
 800cd40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	685a      	ldr	r2, [r3, #4]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	693a      	ldr	r2, [r7, #16]
 800cd54:	621a      	str	r2, [r3, #32]
}
 800cd56:	bf00      	nop
 800cd58:	371c      	adds	r7, #28
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	40010000 	.word	0x40010000
 800cd68:	40010400 	.word	0x40010400
 800cd6c:	40014000 	.word	0x40014000
 800cd70:	40014400 	.word	0x40014400
 800cd74:	40014800 	.word	0x40014800

0800cd78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b087      	sub	sp, #28
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6a1b      	ldr	r3, [r3, #32]
 800cd88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6a1b      	ldr	r3, [r3, #32]
 800cd8e:	f023 0201 	bic.w	r2, r3, #1
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	699b      	ldr	r3, [r3, #24]
 800cd9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cda2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	011b      	lsls	r3, r3, #4
 800cda8:	693a      	ldr	r2, [r7, #16]
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	f023 030a 	bic.w	r3, r3, #10
 800cdb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cdb6:	697a      	ldr	r2, [r7, #20]
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	693a      	ldr	r2, [r7, #16]
 800cdc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	621a      	str	r2, [r3, #32]
}
 800cdca:	bf00      	nop
 800cdcc:	371c      	adds	r7, #28
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	b087      	sub	sp, #28
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	60f8      	str	r0, [r7, #12]
 800cdde:	60b9      	str	r1, [r7, #8]
 800cde0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6a1b      	ldr	r3, [r3, #32]
 800cde6:	f023 0210 	bic.w	r2, r3, #16
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6a1b      	ldr	r3, [r3, #32]
 800cdf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	031b      	lsls	r3, r3, #12
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	011b      	lsls	r3, r3, #4
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	621a      	str	r2, [r3, #32]
}
 800ce2a:	bf00      	nop
 800ce2c:	371c      	adds	r7, #28
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
	...

0800ce38 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	4b09      	ldr	r3, [pc, #36]	; (800ce70 <TIM_ITRx_SetConfig+0x38>)
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce50:	683a      	ldr	r2, [r7, #0]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	f043 0307 	orr.w	r3, r3, #7
 800ce5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	609a      	str	r2, [r3, #8]
}
 800ce62:	bf00      	nop
 800ce64:	3714      	adds	r7, #20
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	ffcfff8f 	.word	0xffcfff8f

0800ce74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b087      	sub	sp, #28
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
 800ce80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	021a      	lsls	r2, r3, #8
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	431a      	orrs	r2, r3
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	697a      	ldr	r2, [r7, #20]
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	697a      	ldr	r2, [r7, #20]
 800cea6:	609a      	str	r2, [r3, #8]
}
 800cea8:	bf00      	nop
 800ceaa:	371c      	adds	r7, #28
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b087      	sub	sp, #28
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	f003 031f 	and.w	r3, r3, #31
 800cec6:	2201      	movs	r2, #1
 800cec8:	fa02 f303 	lsl.w	r3, r2, r3
 800cecc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6a1a      	ldr	r2, [r3, #32]
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	43db      	mvns	r3, r3
 800ced6:	401a      	ands	r2, r3
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6a1a      	ldr	r2, [r3, #32]
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	f003 031f 	and.w	r3, r3, #31
 800cee6:	6879      	ldr	r1, [r7, #4]
 800cee8:	fa01 f303 	lsl.w	r3, r1, r3
 800ceec:	431a      	orrs	r2, r3
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	621a      	str	r2, [r3, #32]
}
 800cef2:	bf00      	nop
 800cef4:	371c      	adds	r7, #28
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
	...

0800cf00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d101      	bne.n	800cf18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf14:	2302      	movs	r3, #2
 800cf16:	e068      	b.n	800cfea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2202      	movs	r2, #2
 800cf24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a2e      	ldr	r2, [pc, #184]	; (800cff8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d004      	beq.n	800cf4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a2d      	ldr	r2, [pc, #180]	; (800cffc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d108      	bne.n	800cf5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cf52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	68fa      	ldr	r2, [r7, #12]
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a1e      	ldr	r2, [pc, #120]	; (800cff8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d01d      	beq.n	800cfbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf8a:	d018      	beq.n	800cfbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a1b      	ldr	r2, [pc, #108]	; (800d000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d013      	beq.n	800cfbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4a1a      	ldr	r2, [pc, #104]	; (800d004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d00e      	beq.n	800cfbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a18      	ldr	r2, [pc, #96]	; (800d008 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d009      	beq.n	800cfbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a13      	ldr	r2, [pc, #76]	; (800cffc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d004      	beq.n	800cfbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a14      	ldr	r2, [pc, #80]	; (800d00c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d10c      	bne.n	800cfd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3714      	adds	r7, #20
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	40010000 	.word	0x40010000
 800cffc:	40010400 	.word	0x40010400
 800d000:	40000400 	.word	0x40000400
 800d004:	40000800 	.word	0x40000800
 800d008:	40000c00 	.word	0x40000c00
 800d00c:	40001800 	.word	0x40001800

0800d010 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d010:	b480      	push	{r7}
 800d012:	b085      	sub	sp, #20
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d01a:	2300      	movs	r3, #0
 800d01c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d024:	2b01      	cmp	r3, #1
 800d026:	d101      	bne.n	800d02c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d028:	2302      	movs	r3, #2
 800d02a:	e065      	b.n	800d0f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	68db      	ldr	r3, [r3, #12]
 800d03e:	4313      	orrs	r3, r2
 800d040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	4313      	orrs	r3, r2
 800d04e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	4313      	orrs	r3, r2
 800d05c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4313      	orrs	r3, r2
 800d06a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	4313      	orrs	r3, r2
 800d078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	695b      	ldr	r3, [r3, #20]
 800d084:	4313      	orrs	r3, r2
 800d086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d092:	4313      	orrs	r3, r2
 800d094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	699b      	ldr	r3, [r3, #24]
 800d0a0:	041b      	lsls	r3, r3, #16
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a16      	ldr	r2, [pc, #88]	; (800d104 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d004      	beq.n	800d0ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a14      	ldr	r2, [pc, #80]	; (800d108 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d115      	bne.n	800d0e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c4:	051b      	lsls	r3, r3, #20
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	69db      	ldr	r3, [r3, #28]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	6a1b      	ldr	r3, [r3, #32]
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0f6:	2300      	movs	r3, #0
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr
 800d104:	40010000 	.word	0x40010000
 800d108:	40010400 	.word	0x40010400

0800d10c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d114:	bf00      	nop
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d128:	bf00      	nop
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d13c:	bf00      	nop
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d101      	bne.n	800d15a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d156:	2301      	movs	r3, #1
 800d158:	e042      	b.n	800d1e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d160:	2b00      	cmp	r3, #0
 800d162:	d106      	bne.n	800d172 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f7f5 fed3 	bl	8002f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2224      	movs	r2, #36	; 0x24
 800d176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f022 0201 	bic.w	r2, r2, #1
 800d188:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 fbec 	bl	800d968 <UART_SetConfig>
 800d190:	4603      	mov	r3, r0
 800d192:	2b01      	cmp	r3, #1
 800d194:	d101      	bne.n	800d19a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d196:	2301      	movs	r3, #1
 800d198:	e022      	b.n	800d1e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d002      	beq.n	800d1a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f001 f940 	bl	800e428 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d1b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	689a      	ldr	r2, [r3, #8]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d1c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f042 0201 	orr.w	r2, r2, #1
 800d1d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f001 f9c7 	bl	800e56c <UART_CheckIdleState>
 800d1de:	4603      	mov	r3, r0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b08a      	sub	sp, #40	; 0x28
 800d1ec:	af02      	add	r7, sp, #8
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	60b9      	str	r1, [r7, #8]
 800d1f2:	603b      	str	r3, [r7, #0]
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1fe:	2b20      	cmp	r3, #32
 800d200:	f040 8083 	bne.w	800d30a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d002      	beq.n	800d210 <HAL_UART_Transmit+0x28>
 800d20a:	88fb      	ldrh	r3, [r7, #6]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	e07b      	b.n	800d30c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d101      	bne.n	800d222 <HAL_UART_Transmit+0x3a>
 800d21e:	2302      	movs	r3, #2
 800d220:	e074      	b.n	800d30c <HAL_UART_Transmit+0x124>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2200      	movs	r2, #0
 800d22e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2221      	movs	r2, #33	; 0x21
 800d236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d23a:	f7f6 f9ed 	bl	8003618 <HAL_GetTick>
 800d23e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	88fa      	ldrh	r2, [r7, #6]
 800d244:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	88fa      	ldrh	r2, [r7, #6]
 800d24c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d258:	d108      	bne.n	800d26c <HAL_UART_Transmit+0x84>
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d104      	bne.n	800d26c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d262:	2300      	movs	r3, #0
 800d264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	61bb      	str	r3, [r7, #24]
 800d26a:	e003      	b.n	800d274 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d270:	2300      	movs	r3, #0
 800d272:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2200      	movs	r2, #0
 800d278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d27c:	e02c      	b.n	800d2d8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	9300      	str	r3, [sp, #0]
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	2200      	movs	r2, #0
 800d286:	2180      	movs	r1, #128	; 0x80
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	f001 f9ba 	bl	800e602 <UART_WaitOnFlagUntilTimeout>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d001      	beq.n	800d298 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d294:	2303      	movs	r3, #3
 800d296:	e039      	b.n	800d30c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10b      	bne.n	800d2b6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	881b      	ldrh	r3, [r3, #0]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	3302      	adds	r3, #2
 800d2b2:	61bb      	str	r3, [r7, #24]
 800d2b4:	e007      	b.n	800d2c6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	781a      	ldrb	r2, [r3, #0]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	b29a      	uxth	r2, r3
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d1cc      	bne.n	800d27e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	2140      	movs	r1, #64	; 0x40
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	f001 f987 	bl	800e602 <UART_WaitOnFlagUntilTimeout>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d001      	beq.n	800d2fe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d2fa:	2303      	movs	r3, #3
 800d2fc:	e006      	b.n	800d30c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2220      	movs	r2, #32
 800d302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d306:	2300      	movs	r3, #0
 800d308:	e000      	b.n	800d30c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d30a:	2302      	movs	r3, #2
  }
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3720      	adds	r7, #32
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	4613      	mov	r3, r2
 800d320:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d328:	2b20      	cmp	r3, #32
 800d32a:	d131      	bne.n	800d390 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d002      	beq.n	800d338 <HAL_UART_Receive_DMA+0x24>
 800d332:	88fb      	ldrh	r3, [r7, #6]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d101      	bne.n	800d33c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d338:	2301      	movs	r3, #1
 800d33a:	e02a      	b.n	800d392 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d342:	2b01      	cmp	r3, #1
 800d344:	d101      	bne.n	800d34a <HAL_UART_Receive_DMA+0x36>
 800d346:	2302      	movs	r3, #2
 800d348:	e023      	b.n	800d392 <HAL_UART_Receive_DMA+0x7e>
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2201      	movs	r2, #1
 800d34e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2200      	movs	r2, #0
 800d356:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a0f      	ldr	r2, [pc, #60]	; (800d39c <HAL_UART_Receive_DMA+0x88>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d00e      	beq.n	800d380 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d007      	beq.n	800d380 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d37e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d380:	88fb      	ldrh	r3, [r7, #6]
 800d382:	461a      	mov	r2, r3
 800d384:	68b9      	ldr	r1, [r7, #8]
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	f001 f9bc 	bl	800e704 <UART_Start_Receive_DMA>
 800d38c:	4603      	mov	r3, r0
 800d38e:	e000      	b.n	800d392 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800d390:	2302      	movs	r3, #2
  }
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	58000c00 	.word	0x58000c00

0800d3a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b088      	sub	sp, #32
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	69db      	ldr	r3, [r3, #28]
 800d3ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d3c0:	69fa      	ldr	r2, [r7, #28]
 800d3c2:	f640 030f 	movw	r3, #2063	; 0x80f
 800d3c6:	4013      	ands	r3, r2
 800d3c8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d118      	bne.n	800d402 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	f003 0320 	and.w	r3, r3, #32
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d013      	beq.n	800d402 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	f003 0320 	and.w	r3, r3, #32
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d104      	bne.n	800d3ee <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d009      	beq.n	800d402 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f000 8282 	beq.w	800d8fc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	4798      	blx	r3
      }
      return;
 800d400:	e27c      	b.n	800d8fc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	2b00      	cmp	r3, #0
 800d406:	f000 80ef 	beq.w	800d5e8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	4b73      	ldr	r3, [pc, #460]	; (800d5dc <HAL_UART_IRQHandler+0x23c>)
 800d40e:	4013      	ands	r3, r2
 800d410:	2b00      	cmp	r3, #0
 800d412:	d105      	bne.n	800d420 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d414:	69ba      	ldr	r2, [r7, #24]
 800d416:	4b72      	ldr	r3, [pc, #456]	; (800d5e0 <HAL_UART_IRQHandler+0x240>)
 800d418:	4013      	ands	r3, r2
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 80e4 	beq.w	800d5e8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	f003 0301 	and.w	r3, r3, #1
 800d426:	2b00      	cmp	r3, #0
 800d428:	d010      	beq.n	800d44c <HAL_UART_IRQHandler+0xac>
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00b      	beq.n	800d44c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2201      	movs	r2, #1
 800d43a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d442:	f043 0201 	orr.w	r2, r3, #1
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	f003 0302 	and.w	r3, r3, #2
 800d452:	2b00      	cmp	r3, #0
 800d454:	d010      	beq.n	800d478 <HAL_UART_IRQHandler+0xd8>
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	f003 0301 	and.w	r3, r3, #1
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d00b      	beq.n	800d478 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2202      	movs	r2, #2
 800d466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d46e:	f043 0204 	orr.w	r2, r3, #4
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	f003 0304 	and.w	r3, r3, #4
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d010      	beq.n	800d4a4 <HAL_UART_IRQHandler+0x104>
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	f003 0301 	and.w	r3, r3, #1
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00b      	beq.n	800d4a4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2204      	movs	r2, #4
 800d492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d49a:	f043 0202 	orr.w	r2, r3, #2
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	f003 0308 	and.w	r3, r3, #8
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d015      	beq.n	800d4da <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	f003 0320 	and.w	r3, r3, #32
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d104      	bne.n	800d4c2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d4b8:	697a      	ldr	r2, [r7, #20]
 800d4ba:	4b48      	ldr	r3, [pc, #288]	; (800d5dc <HAL_UART_IRQHandler+0x23c>)
 800d4bc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00b      	beq.n	800d4da <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2208      	movs	r2, #8
 800d4c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4d0:	f043 0208 	orr.w	r2, r3, #8
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d011      	beq.n	800d508 <HAL_UART_IRQHandler+0x168>
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00c      	beq.n	800d508 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4fe:	f043 0220 	orr.w	r2, r3, #32
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d50e:	2b00      	cmp	r3, #0
 800d510:	f000 81f6 	beq.w	800d900 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	f003 0320 	and.w	r3, r3, #32
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d011      	beq.n	800d542 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d51e:	69bb      	ldr	r3, [r7, #24]
 800d520:	f003 0320 	and.w	r3, r3, #32
 800d524:	2b00      	cmp	r3, #0
 800d526:	d104      	bne.n	800d532 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d007      	beq.n	800d542 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d536:	2b00      	cmp	r3, #0
 800d538:	d003      	beq.n	800d542 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d548:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d554:	2b40      	cmp	r3, #64	; 0x40
 800d556:	d004      	beq.n	800d562 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d031      	beq.n	800d5c6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f001 f95a 	bl	800e81c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d572:	2b40      	cmp	r3, #64	; 0x40
 800d574:	d123      	bne.n	800d5be <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	689a      	ldr	r2, [r3, #8]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d584:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d013      	beq.n	800d5b6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d592:	4a14      	ldr	r2, [pc, #80]	; (800d5e4 <HAL_UART_IRQHandler+0x244>)
 800d594:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7f8 fa1c 	bl	80059d8 <HAL_DMA_Abort_IT>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d017      	beq.n	800d5d6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5b4:	e00f      	b.n	800d5d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 f9c0 	bl	800d93c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5bc:	e00b      	b.n	800d5d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 f9bc 	bl	800d93c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5c4:	e007      	b.n	800d5d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 f9b8 	bl	800d93c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d5d4:	e194      	b.n	800d900 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5d6:	bf00      	nop
    return;
 800d5d8:	e192      	b.n	800d900 <HAL_UART_IRQHandler+0x560>
 800d5da:	bf00      	nop
 800d5dc:	10000001 	.word	0x10000001
 800d5e0:	04000120 	.word	0x04000120
 800d5e4:	0800e9cf 	.word	0x0800e9cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	f040 810f 	bne.w	800d810 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	f003 0310 	and.w	r3, r3, #16
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 8109 	beq.w	800d810 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	f003 0310 	and.w	r3, r3, #16
 800d604:	2b00      	cmp	r3, #0
 800d606:	f000 8103 	beq.w	800d810 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2210      	movs	r2, #16
 800d610:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d61c:	2b40      	cmp	r3, #64	; 0x40
 800d61e:	f040 80bb 	bne.w	800d798 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a96      	ldr	r2, [pc, #600]	; (800d884 <HAL_UART_IRQHandler+0x4e4>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d059      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a94      	ldr	r2, [pc, #592]	; (800d888 <HAL_UART_IRQHandler+0x4e8>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d053      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a92      	ldr	r2, [pc, #584]	; (800d88c <HAL_UART_IRQHandler+0x4ec>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d04d      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a90      	ldr	r2, [pc, #576]	; (800d890 <HAL_UART_IRQHandler+0x4f0>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d047      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a8e      	ldr	r2, [pc, #568]	; (800d894 <HAL_UART_IRQHandler+0x4f4>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d041      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a8c      	ldr	r2, [pc, #560]	; (800d898 <HAL_UART_IRQHandler+0x4f8>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d03b      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a8a      	ldr	r2, [pc, #552]	; (800d89c <HAL_UART_IRQHandler+0x4fc>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d035      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a88      	ldr	r2, [pc, #544]	; (800d8a0 <HAL_UART_IRQHandler+0x500>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d02f      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a86      	ldr	r2, [pc, #536]	; (800d8a4 <HAL_UART_IRQHandler+0x504>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d029      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a84      	ldr	r2, [pc, #528]	; (800d8a8 <HAL_UART_IRQHandler+0x508>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d023      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a82      	ldr	r2, [pc, #520]	; (800d8ac <HAL_UART_IRQHandler+0x50c>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d01d      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a80      	ldr	r2, [pc, #512]	; (800d8b0 <HAL_UART_IRQHandler+0x510>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d017      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a7e      	ldr	r2, [pc, #504]	; (800d8b4 <HAL_UART_IRQHandler+0x514>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d011      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a7c      	ldr	r2, [pc, #496]	; (800d8b8 <HAL_UART_IRQHandler+0x518>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d00b      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a7a      	ldr	r2, [pc, #488]	; (800d8bc <HAL_UART_IRQHandler+0x51c>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d005      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x342>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a78      	ldr	r2, [pc, #480]	; (800d8c0 <HAL_UART_IRQHandler+0x520>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d105      	bne.n	800d6ee <HAL_UART_IRQHandler+0x34e>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	e004      	b.n	800d6f8 <HAL_UART_IRQHandler+0x358>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800d6fa:	893b      	ldrh	r3, [r7, #8]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	f000 8101 	beq.w	800d904 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d708:	893a      	ldrh	r2, [r7, #8]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	f080 80fa 	bcs.w	800d904 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	893a      	ldrh	r2, [r7, #8]
 800d714:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d71c:	69db      	ldr	r3, [r3, #28]
 800d71e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d722:	d02b      	beq.n	800d77c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d732:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	689a      	ldr	r2, [r3, #8]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f022 0201 	bic.w	r2, r2, #1
 800d742:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	689a      	ldr	r2, [r3, #8]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d752:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2220      	movs	r2, #32
 800d758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f022 0210 	bic.w	r2, r2, #16
 800d770:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d776:	4618      	mov	r0, r3
 800d778:	f7f7 fe10 	bl	800539c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d788:	b29b      	uxth	r3, r3
 800d78a:	1ad3      	subs	r3, r2, r3
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	4619      	mov	r1, r3
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 f8dd 	bl	800d950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d796:	e0b5      	b.n	800d904 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	f000 80a8 	beq.w	800d908 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800d7b8:	897b      	ldrh	r3, [r7, #10]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f000 80a4 	beq.w	800d908 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d7ce:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	6899      	ldr	r1, [r3, #8]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	4b3a      	ldr	r3, [pc, #232]	; (800d8c4 <HAL_UART_IRQHandler+0x524>)
 800d7dc:	400b      	ands	r3, r1
 800d7de:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2220      	movs	r2, #32
 800d7e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f022 0210 	bic.w	r2, r2, #16
 800d802:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d804:	897b      	ldrh	r3, [r7, #10]
 800d806:	4619      	mov	r1, r3
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 f8a1 	bl	800d950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d80e:	e07b      	b.n	800d908 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d816:	2b00      	cmp	r3, #0
 800d818:	d00d      	beq.n	800d836 <HAL_UART_IRQHandler+0x496>
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d820:	2b00      	cmp	r3, #0
 800d822:	d008      	beq.n	800d836 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d82c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f001 f8fd 	bl	800ea2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d834:	e06b      	b.n	800d90e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d012      	beq.n	800d866 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d846:	2b00      	cmp	r3, #0
 800d848:	d104      	bne.n	800d854 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d850:	2b00      	cmp	r3, #0
 800d852:	d008      	beq.n	800d866 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d057      	beq.n	800d90c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	4798      	blx	r3
    }
    return;
 800d864:	e052      	b.n	800d90c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d02b      	beq.n	800d8c8 <HAL_UART_IRQHandler+0x528>
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d876:	2b00      	cmp	r3, #0
 800d878:	d026      	beq.n	800d8c8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f001 f8bd 	bl	800e9fa <UART_EndTransmit_IT>
    return;
 800d880:	e045      	b.n	800d90e <HAL_UART_IRQHandler+0x56e>
 800d882:	bf00      	nop
 800d884:	40020010 	.word	0x40020010
 800d888:	40020028 	.word	0x40020028
 800d88c:	40020040 	.word	0x40020040
 800d890:	40020058 	.word	0x40020058
 800d894:	40020070 	.word	0x40020070
 800d898:	40020088 	.word	0x40020088
 800d89c:	400200a0 	.word	0x400200a0
 800d8a0:	400200b8 	.word	0x400200b8
 800d8a4:	40020410 	.word	0x40020410
 800d8a8:	40020428 	.word	0x40020428
 800d8ac:	40020440 	.word	0x40020440
 800d8b0:	40020458 	.word	0x40020458
 800d8b4:	40020470 	.word	0x40020470
 800d8b8:	40020488 	.word	0x40020488
 800d8bc:	400204a0 	.word	0x400204a0
 800d8c0:	400204b8 	.word	0x400204b8
 800d8c4:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d008      	beq.n	800d8e4 <HAL_UART_IRQHandler+0x544>
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d003      	beq.n	800d8e4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f001 f8ba 	bl	800ea56 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8e2:	e014      	b.n	800d90e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d00f      	beq.n	800d90e <HAL_UART_IRQHandler+0x56e>
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	da0c      	bge.n	800d90e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f001 f8a4 	bl	800ea42 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8fa:	e008      	b.n	800d90e <HAL_UART_IRQHandler+0x56e>
      return;
 800d8fc:	bf00      	nop
 800d8fe:	e006      	b.n	800d90e <HAL_UART_IRQHandler+0x56e>
    return;
 800d900:	bf00      	nop
 800d902:	e004      	b.n	800d90e <HAL_UART_IRQHandler+0x56e>
      return;
 800d904:	bf00      	nop
 800d906:	e002      	b.n	800d90e <HAL_UART_IRQHandler+0x56e>
      return;
 800d908:	bf00      	nop
 800d90a:	e000      	b.n	800d90e <HAL_UART_IRQHandler+0x56e>
    return;
 800d90c:	bf00      	nop
  }
}
 800d90e:	3720      	adds	r7, #32
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d91c:	bf00      	nop
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d930:	bf00      	nop
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d944:	bf00      	nop
 800d946:	370c      	adds	r7, #12
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	460b      	mov	r3, r1
 800d95a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d95c:	bf00      	nop
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d968:	b5b0      	push	{r4, r5, r7, lr}
 800d96a:	b08e      	sub	sp, #56	; 0x38
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d970:	2300      	movs	r3, #0
 800d972:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	689a      	ldr	r2, [r3, #8]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	431a      	orrs	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	695b      	ldr	r3, [r3, #20]
 800d984:	431a      	orrs	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	69db      	ldr	r3, [r3, #28]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	4bbf      	ldr	r3, [pc, #764]	; (800dc94 <UART_SetConfig+0x32c>)
 800d996:	4013      	ands	r3, r2
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	6812      	ldr	r2, [r2, #0]
 800d99c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d99e:	430b      	orrs	r3, r1
 800d9a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	68da      	ldr	r2, [r3, #12]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	430a      	orrs	r2, r1
 800d9b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	699b      	ldr	r3, [r3, #24]
 800d9bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4ab5      	ldr	r2, [pc, #724]	; (800dc98 <UART_SetConfig+0x330>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d004      	beq.n	800d9d2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6a1b      	ldr	r3, [r3, #32]
 800d9cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	689a      	ldr	r2, [r3, #8]
 800d9d8:	4bb0      	ldr	r3, [pc, #704]	; (800dc9c <UART_SetConfig+0x334>)
 800d9da:	4013      	ands	r3, r2
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	6812      	ldr	r2, [r2, #0]
 800d9e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d9e2:	430b      	orrs	r3, r1
 800d9e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ec:	f023 010f 	bic.w	r1, r3, #15
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	430a      	orrs	r2, r1
 800d9fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4aa7      	ldr	r2, [pc, #668]	; (800dca0 <UART_SetConfig+0x338>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d176      	bne.n	800daf4 <UART_SetConfig+0x18c>
 800da06:	4ba7      	ldr	r3, [pc, #668]	; (800dca4 <UART_SetConfig+0x33c>)
 800da08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da0e:	2b28      	cmp	r3, #40	; 0x28
 800da10:	d86c      	bhi.n	800daec <UART_SetConfig+0x184>
 800da12:	a201      	add	r2, pc, #4	; (adr r2, 800da18 <UART_SetConfig+0xb0>)
 800da14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da18:	0800dabd 	.word	0x0800dabd
 800da1c:	0800daed 	.word	0x0800daed
 800da20:	0800daed 	.word	0x0800daed
 800da24:	0800daed 	.word	0x0800daed
 800da28:	0800daed 	.word	0x0800daed
 800da2c:	0800daed 	.word	0x0800daed
 800da30:	0800daed 	.word	0x0800daed
 800da34:	0800daed 	.word	0x0800daed
 800da38:	0800dac5 	.word	0x0800dac5
 800da3c:	0800daed 	.word	0x0800daed
 800da40:	0800daed 	.word	0x0800daed
 800da44:	0800daed 	.word	0x0800daed
 800da48:	0800daed 	.word	0x0800daed
 800da4c:	0800daed 	.word	0x0800daed
 800da50:	0800daed 	.word	0x0800daed
 800da54:	0800daed 	.word	0x0800daed
 800da58:	0800dacd 	.word	0x0800dacd
 800da5c:	0800daed 	.word	0x0800daed
 800da60:	0800daed 	.word	0x0800daed
 800da64:	0800daed 	.word	0x0800daed
 800da68:	0800daed 	.word	0x0800daed
 800da6c:	0800daed 	.word	0x0800daed
 800da70:	0800daed 	.word	0x0800daed
 800da74:	0800daed 	.word	0x0800daed
 800da78:	0800dad5 	.word	0x0800dad5
 800da7c:	0800daed 	.word	0x0800daed
 800da80:	0800daed 	.word	0x0800daed
 800da84:	0800daed 	.word	0x0800daed
 800da88:	0800daed 	.word	0x0800daed
 800da8c:	0800daed 	.word	0x0800daed
 800da90:	0800daed 	.word	0x0800daed
 800da94:	0800daed 	.word	0x0800daed
 800da98:	0800dadd 	.word	0x0800dadd
 800da9c:	0800daed 	.word	0x0800daed
 800daa0:	0800daed 	.word	0x0800daed
 800daa4:	0800daed 	.word	0x0800daed
 800daa8:	0800daed 	.word	0x0800daed
 800daac:	0800daed 	.word	0x0800daed
 800dab0:	0800daed 	.word	0x0800daed
 800dab4:	0800daed 	.word	0x0800daed
 800dab8:	0800dae5 	.word	0x0800dae5
 800dabc:	2301      	movs	r3, #1
 800dabe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dac2:	e222      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dac4:	2304      	movs	r3, #4
 800dac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daca:	e21e      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dacc:	2308      	movs	r3, #8
 800dace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dad2:	e21a      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dad4:	2310      	movs	r3, #16
 800dad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dada:	e216      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dadc:	2320      	movs	r3, #32
 800dade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dae2:	e212      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dae4:	2340      	movs	r3, #64	; 0x40
 800dae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daea:	e20e      	b.n	800df0a <UART_SetConfig+0x5a2>
 800daec:	2380      	movs	r3, #128	; 0x80
 800daee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daf2:	e20a      	b.n	800df0a <UART_SetConfig+0x5a2>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a6b      	ldr	r2, [pc, #428]	; (800dca8 <UART_SetConfig+0x340>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d130      	bne.n	800db60 <UART_SetConfig+0x1f8>
 800dafe:	4b69      	ldr	r3, [pc, #420]	; (800dca4 <UART_SetConfig+0x33c>)
 800db00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db02:	f003 0307 	and.w	r3, r3, #7
 800db06:	2b05      	cmp	r3, #5
 800db08:	d826      	bhi.n	800db58 <UART_SetConfig+0x1f0>
 800db0a:	a201      	add	r2, pc, #4	; (adr r2, 800db10 <UART_SetConfig+0x1a8>)
 800db0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db10:	0800db29 	.word	0x0800db29
 800db14:	0800db31 	.word	0x0800db31
 800db18:	0800db39 	.word	0x0800db39
 800db1c:	0800db41 	.word	0x0800db41
 800db20:	0800db49 	.word	0x0800db49
 800db24:	0800db51 	.word	0x0800db51
 800db28:	2300      	movs	r3, #0
 800db2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db2e:	e1ec      	b.n	800df0a <UART_SetConfig+0x5a2>
 800db30:	2304      	movs	r3, #4
 800db32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db36:	e1e8      	b.n	800df0a <UART_SetConfig+0x5a2>
 800db38:	2308      	movs	r3, #8
 800db3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db3e:	e1e4      	b.n	800df0a <UART_SetConfig+0x5a2>
 800db40:	2310      	movs	r3, #16
 800db42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db46:	e1e0      	b.n	800df0a <UART_SetConfig+0x5a2>
 800db48:	2320      	movs	r3, #32
 800db4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db4e:	e1dc      	b.n	800df0a <UART_SetConfig+0x5a2>
 800db50:	2340      	movs	r3, #64	; 0x40
 800db52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db56:	e1d8      	b.n	800df0a <UART_SetConfig+0x5a2>
 800db58:	2380      	movs	r3, #128	; 0x80
 800db5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db5e:	e1d4      	b.n	800df0a <UART_SetConfig+0x5a2>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a51      	ldr	r2, [pc, #324]	; (800dcac <UART_SetConfig+0x344>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d130      	bne.n	800dbcc <UART_SetConfig+0x264>
 800db6a:	4b4e      	ldr	r3, [pc, #312]	; (800dca4 <UART_SetConfig+0x33c>)
 800db6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db6e:	f003 0307 	and.w	r3, r3, #7
 800db72:	2b05      	cmp	r3, #5
 800db74:	d826      	bhi.n	800dbc4 <UART_SetConfig+0x25c>
 800db76:	a201      	add	r2, pc, #4	; (adr r2, 800db7c <UART_SetConfig+0x214>)
 800db78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7c:	0800db95 	.word	0x0800db95
 800db80:	0800db9d 	.word	0x0800db9d
 800db84:	0800dba5 	.word	0x0800dba5
 800db88:	0800dbad 	.word	0x0800dbad
 800db8c:	0800dbb5 	.word	0x0800dbb5
 800db90:	0800dbbd 	.word	0x0800dbbd
 800db94:	2300      	movs	r3, #0
 800db96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db9a:	e1b6      	b.n	800df0a <UART_SetConfig+0x5a2>
 800db9c:	2304      	movs	r3, #4
 800db9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dba2:	e1b2      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dba4:	2308      	movs	r3, #8
 800dba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbaa:	e1ae      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dbac:	2310      	movs	r3, #16
 800dbae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbb2:	e1aa      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dbb4:	2320      	movs	r3, #32
 800dbb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbba:	e1a6      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dbbc:	2340      	movs	r3, #64	; 0x40
 800dbbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbc2:	e1a2      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dbc4:	2380      	movs	r3, #128	; 0x80
 800dbc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbca:	e19e      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a37      	ldr	r2, [pc, #220]	; (800dcb0 <UART_SetConfig+0x348>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d130      	bne.n	800dc38 <UART_SetConfig+0x2d0>
 800dbd6:	4b33      	ldr	r3, [pc, #204]	; (800dca4 <UART_SetConfig+0x33c>)
 800dbd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbda:	f003 0307 	and.w	r3, r3, #7
 800dbde:	2b05      	cmp	r3, #5
 800dbe0:	d826      	bhi.n	800dc30 <UART_SetConfig+0x2c8>
 800dbe2:	a201      	add	r2, pc, #4	; (adr r2, 800dbe8 <UART_SetConfig+0x280>)
 800dbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe8:	0800dc01 	.word	0x0800dc01
 800dbec:	0800dc09 	.word	0x0800dc09
 800dbf0:	0800dc11 	.word	0x0800dc11
 800dbf4:	0800dc19 	.word	0x0800dc19
 800dbf8:	0800dc21 	.word	0x0800dc21
 800dbfc:	0800dc29 	.word	0x0800dc29
 800dc00:	2300      	movs	r3, #0
 800dc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc06:	e180      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dc08:	2304      	movs	r3, #4
 800dc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc0e:	e17c      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dc10:	2308      	movs	r3, #8
 800dc12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc16:	e178      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dc18:	2310      	movs	r3, #16
 800dc1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc1e:	e174      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dc20:	2320      	movs	r3, #32
 800dc22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc26:	e170      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dc28:	2340      	movs	r3, #64	; 0x40
 800dc2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc2e:	e16c      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dc30:	2380      	movs	r3, #128	; 0x80
 800dc32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc36:	e168      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a1d      	ldr	r2, [pc, #116]	; (800dcb4 <UART_SetConfig+0x34c>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d142      	bne.n	800dcc8 <UART_SetConfig+0x360>
 800dc42:	4b18      	ldr	r3, [pc, #96]	; (800dca4 <UART_SetConfig+0x33c>)
 800dc44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc46:	f003 0307 	and.w	r3, r3, #7
 800dc4a:	2b05      	cmp	r3, #5
 800dc4c:	d838      	bhi.n	800dcc0 <UART_SetConfig+0x358>
 800dc4e:	a201      	add	r2, pc, #4	; (adr r2, 800dc54 <UART_SetConfig+0x2ec>)
 800dc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc54:	0800dc6d 	.word	0x0800dc6d
 800dc58:	0800dc75 	.word	0x0800dc75
 800dc5c:	0800dc7d 	.word	0x0800dc7d
 800dc60:	0800dc85 	.word	0x0800dc85
 800dc64:	0800dc8d 	.word	0x0800dc8d
 800dc68:	0800dcb9 	.word	0x0800dcb9
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc72:	e14a      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dc74:	2304      	movs	r3, #4
 800dc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc7a:	e146      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dc7c:	2308      	movs	r3, #8
 800dc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc82:	e142      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dc84:	2310      	movs	r3, #16
 800dc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc8a:	e13e      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dc8c:	2320      	movs	r3, #32
 800dc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc92:	e13a      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dc94:	cfff69f3 	.word	0xcfff69f3
 800dc98:	58000c00 	.word	0x58000c00
 800dc9c:	11fff4ff 	.word	0x11fff4ff
 800dca0:	40011000 	.word	0x40011000
 800dca4:	58024400 	.word	0x58024400
 800dca8:	40004400 	.word	0x40004400
 800dcac:	40004800 	.word	0x40004800
 800dcb0:	40004c00 	.word	0x40004c00
 800dcb4:	40005000 	.word	0x40005000
 800dcb8:	2340      	movs	r3, #64	; 0x40
 800dcba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcbe:	e124      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dcc0:	2380      	movs	r3, #128	; 0x80
 800dcc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcc6:	e120      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4acc      	ldr	r2, [pc, #816]	; (800e000 <UART_SetConfig+0x698>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d176      	bne.n	800ddc0 <UART_SetConfig+0x458>
 800dcd2:	4bcc      	ldr	r3, [pc, #816]	; (800e004 <UART_SetConfig+0x69c>)
 800dcd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dcda:	2b28      	cmp	r3, #40	; 0x28
 800dcdc:	d86c      	bhi.n	800ddb8 <UART_SetConfig+0x450>
 800dcde:	a201      	add	r2, pc, #4	; (adr r2, 800dce4 <UART_SetConfig+0x37c>)
 800dce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce4:	0800dd89 	.word	0x0800dd89
 800dce8:	0800ddb9 	.word	0x0800ddb9
 800dcec:	0800ddb9 	.word	0x0800ddb9
 800dcf0:	0800ddb9 	.word	0x0800ddb9
 800dcf4:	0800ddb9 	.word	0x0800ddb9
 800dcf8:	0800ddb9 	.word	0x0800ddb9
 800dcfc:	0800ddb9 	.word	0x0800ddb9
 800dd00:	0800ddb9 	.word	0x0800ddb9
 800dd04:	0800dd91 	.word	0x0800dd91
 800dd08:	0800ddb9 	.word	0x0800ddb9
 800dd0c:	0800ddb9 	.word	0x0800ddb9
 800dd10:	0800ddb9 	.word	0x0800ddb9
 800dd14:	0800ddb9 	.word	0x0800ddb9
 800dd18:	0800ddb9 	.word	0x0800ddb9
 800dd1c:	0800ddb9 	.word	0x0800ddb9
 800dd20:	0800ddb9 	.word	0x0800ddb9
 800dd24:	0800dd99 	.word	0x0800dd99
 800dd28:	0800ddb9 	.word	0x0800ddb9
 800dd2c:	0800ddb9 	.word	0x0800ddb9
 800dd30:	0800ddb9 	.word	0x0800ddb9
 800dd34:	0800ddb9 	.word	0x0800ddb9
 800dd38:	0800ddb9 	.word	0x0800ddb9
 800dd3c:	0800ddb9 	.word	0x0800ddb9
 800dd40:	0800ddb9 	.word	0x0800ddb9
 800dd44:	0800dda1 	.word	0x0800dda1
 800dd48:	0800ddb9 	.word	0x0800ddb9
 800dd4c:	0800ddb9 	.word	0x0800ddb9
 800dd50:	0800ddb9 	.word	0x0800ddb9
 800dd54:	0800ddb9 	.word	0x0800ddb9
 800dd58:	0800ddb9 	.word	0x0800ddb9
 800dd5c:	0800ddb9 	.word	0x0800ddb9
 800dd60:	0800ddb9 	.word	0x0800ddb9
 800dd64:	0800dda9 	.word	0x0800dda9
 800dd68:	0800ddb9 	.word	0x0800ddb9
 800dd6c:	0800ddb9 	.word	0x0800ddb9
 800dd70:	0800ddb9 	.word	0x0800ddb9
 800dd74:	0800ddb9 	.word	0x0800ddb9
 800dd78:	0800ddb9 	.word	0x0800ddb9
 800dd7c:	0800ddb9 	.word	0x0800ddb9
 800dd80:	0800ddb9 	.word	0x0800ddb9
 800dd84:	0800ddb1 	.word	0x0800ddb1
 800dd88:	2301      	movs	r3, #1
 800dd8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd8e:	e0bc      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dd90:	2304      	movs	r3, #4
 800dd92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd96:	e0b8      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dd98:	2308      	movs	r3, #8
 800dd9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd9e:	e0b4      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dda0:	2310      	movs	r3, #16
 800dda2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dda6:	e0b0      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dda8:	2320      	movs	r3, #32
 800ddaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddae:	e0ac      	b.n	800df0a <UART_SetConfig+0x5a2>
 800ddb0:	2340      	movs	r3, #64	; 0x40
 800ddb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddb6:	e0a8      	b.n	800df0a <UART_SetConfig+0x5a2>
 800ddb8:	2380      	movs	r3, #128	; 0x80
 800ddba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddbe:	e0a4      	b.n	800df0a <UART_SetConfig+0x5a2>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a90      	ldr	r2, [pc, #576]	; (800e008 <UART_SetConfig+0x6a0>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d130      	bne.n	800de2c <UART_SetConfig+0x4c4>
 800ddca:	4b8e      	ldr	r3, [pc, #568]	; (800e004 <UART_SetConfig+0x69c>)
 800ddcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddce:	f003 0307 	and.w	r3, r3, #7
 800ddd2:	2b05      	cmp	r3, #5
 800ddd4:	d826      	bhi.n	800de24 <UART_SetConfig+0x4bc>
 800ddd6:	a201      	add	r2, pc, #4	; (adr r2, 800dddc <UART_SetConfig+0x474>)
 800ddd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dddc:	0800ddf5 	.word	0x0800ddf5
 800dde0:	0800ddfd 	.word	0x0800ddfd
 800dde4:	0800de05 	.word	0x0800de05
 800dde8:	0800de0d 	.word	0x0800de0d
 800ddec:	0800de15 	.word	0x0800de15
 800ddf0:	0800de1d 	.word	0x0800de1d
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddfa:	e086      	b.n	800df0a <UART_SetConfig+0x5a2>
 800ddfc:	2304      	movs	r3, #4
 800ddfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de02:	e082      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de04:	2308      	movs	r3, #8
 800de06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de0a:	e07e      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de0c:	2310      	movs	r3, #16
 800de0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de12:	e07a      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de14:	2320      	movs	r3, #32
 800de16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de1a:	e076      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de1c:	2340      	movs	r3, #64	; 0x40
 800de1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de22:	e072      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de24:	2380      	movs	r3, #128	; 0x80
 800de26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de2a:	e06e      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a76      	ldr	r2, [pc, #472]	; (800e00c <UART_SetConfig+0x6a4>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d130      	bne.n	800de98 <UART_SetConfig+0x530>
 800de36:	4b73      	ldr	r3, [pc, #460]	; (800e004 <UART_SetConfig+0x69c>)
 800de38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de3a:	f003 0307 	and.w	r3, r3, #7
 800de3e:	2b05      	cmp	r3, #5
 800de40:	d826      	bhi.n	800de90 <UART_SetConfig+0x528>
 800de42:	a201      	add	r2, pc, #4	; (adr r2, 800de48 <UART_SetConfig+0x4e0>)
 800de44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de48:	0800de61 	.word	0x0800de61
 800de4c:	0800de69 	.word	0x0800de69
 800de50:	0800de71 	.word	0x0800de71
 800de54:	0800de79 	.word	0x0800de79
 800de58:	0800de81 	.word	0x0800de81
 800de5c:	0800de89 	.word	0x0800de89
 800de60:	2300      	movs	r3, #0
 800de62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de66:	e050      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de68:	2304      	movs	r3, #4
 800de6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de6e:	e04c      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de70:	2308      	movs	r3, #8
 800de72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de76:	e048      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de78:	2310      	movs	r3, #16
 800de7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de7e:	e044      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de80:	2320      	movs	r3, #32
 800de82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de86:	e040      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de88:	2340      	movs	r3, #64	; 0x40
 800de8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de8e:	e03c      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de90:	2380      	movs	r3, #128	; 0x80
 800de92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de96:	e038      	b.n	800df0a <UART_SetConfig+0x5a2>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a5c      	ldr	r2, [pc, #368]	; (800e010 <UART_SetConfig+0x6a8>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d130      	bne.n	800df04 <UART_SetConfig+0x59c>
 800dea2:	4b58      	ldr	r3, [pc, #352]	; (800e004 <UART_SetConfig+0x69c>)
 800dea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dea6:	f003 0307 	and.w	r3, r3, #7
 800deaa:	2b05      	cmp	r3, #5
 800deac:	d826      	bhi.n	800defc <UART_SetConfig+0x594>
 800deae:	a201      	add	r2, pc, #4	; (adr r2, 800deb4 <UART_SetConfig+0x54c>)
 800deb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb4:	0800decd 	.word	0x0800decd
 800deb8:	0800ded5 	.word	0x0800ded5
 800debc:	0800dedd 	.word	0x0800dedd
 800dec0:	0800dee5 	.word	0x0800dee5
 800dec4:	0800deed 	.word	0x0800deed
 800dec8:	0800def5 	.word	0x0800def5
 800decc:	2302      	movs	r3, #2
 800dece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ded2:	e01a      	b.n	800df0a <UART_SetConfig+0x5a2>
 800ded4:	2304      	movs	r3, #4
 800ded6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800deda:	e016      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dedc:	2308      	movs	r3, #8
 800dede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dee2:	e012      	b.n	800df0a <UART_SetConfig+0x5a2>
 800dee4:	2310      	movs	r3, #16
 800dee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800deea:	e00e      	b.n	800df0a <UART_SetConfig+0x5a2>
 800deec:	2320      	movs	r3, #32
 800deee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800def2:	e00a      	b.n	800df0a <UART_SetConfig+0x5a2>
 800def4:	2340      	movs	r3, #64	; 0x40
 800def6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800defa:	e006      	b.n	800df0a <UART_SetConfig+0x5a2>
 800defc:	2380      	movs	r3, #128	; 0x80
 800defe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df02:	e002      	b.n	800df0a <UART_SetConfig+0x5a2>
 800df04:	2380      	movs	r3, #128	; 0x80
 800df06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a40      	ldr	r2, [pc, #256]	; (800e010 <UART_SetConfig+0x6a8>)
 800df10:	4293      	cmp	r3, r2
 800df12:	f040 80ef 	bne.w	800e0f4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800df16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800df1a:	2b20      	cmp	r3, #32
 800df1c:	dc46      	bgt.n	800dfac <UART_SetConfig+0x644>
 800df1e:	2b02      	cmp	r3, #2
 800df20:	f2c0 8081 	blt.w	800e026 <UART_SetConfig+0x6be>
 800df24:	3b02      	subs	r3, #2
 800df26:	2b1e      	cmp	r3, #30
 800df28:	d87d      	bhi.n	800e026 <UART_SetConfig+0x6be>
 800df2a:	a201      	add	r2, pc, #4	; (adr r2, 800df30 <UART_SetConfig+0x5c8>)
 800df2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df30:	0800dfb3 	.word	0x0800dfb3
 800df34:	0800e027 	.word	0x0800e027
 800df38:	0800dfbb 	.word	0x0800dfbb
 800df3c:	0800e027 	.word	0x0800e027
 800df40:	0800e027 	.word	0x0800e027
 800df44:	0800e027 	.word	0x0800e027
 800df48:	0800dfcb 	.word	0x0800dfcb
 800df4c:	0800e027 	.word	0x0800e027
 800df50:	0800e027 	.word	0x0800e027
 800df54:	0800e027 	.word	0x0800e027
 800df58:	0800e027 	.word	0x0800e027
 800df5c:	0800e027 	.word	0x0800e027
 800df60:	0800e027 	.word	0x0800e027
 800df64:	0800e027 	.word	0x0800e027
 800df68:	0800dfdb 	.word	0x0800dfdb
 800df6c:	0800e027 	.word	0x0800e027
 800df70:	0800e027 	.word	0x0800e027
 800df74:	0800e027 	.word	0x0800e027
 800df78:	0800e027 	.word	0x0800e027
 800df7c:	0800e027 	.word	0x0800e027
 800df80:	0800e027 	.word	0x0800e027
 800df84:	0800e027 	.word	0x0800e027
 800df88:	0800e027 	.word	0x0800e027
 800df8c:	0800e027 	.word	0x0800e027
 800df90:	0800e027 	.word	0x0800e027
 800df94:	0800e027 	.word	0x0800e027
 800df98:	0800e027 	.word	0x0800e027
 800df9c:	0800e027 	.word	0x0800e027
 800dfa0:	0800e027 	.word	0x0800e027
 800dfa4:	0800e027 	.word	0x0800e027
 800dfa8:	0800e019 	.word	0x0800e019
 800dfac:	2b40      	cmp	r3, #64	; 0x40
 800dfae:	d036      	beq.n	800e01e <UART_SetConfig+0x6b6>
 800dfb0:	e039      	b.n	800e026 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dfb2:	f7fc fda1 	bl	800aaf8 <HAL_RCCEx_GetD3PCLK1Freq>
 800dfb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dfb8:	e03b      	b.n	800e032 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfba:	f107 0314 	add.w	r3, r7, #20
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fc fdb0 	bl	800ab24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dfc8:	e033      	b.n	800e032 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dfca:	f107 0308 	add.w	r3, r7, #8
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fc fefc 	bl	800adcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dfd8:	e02b      	b.n	800e032 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfda:	4b0a      	ldr	r3, [pc, #40]	; (800e004 <UART_SetConfig+0x69c>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f003 0320 	and.w	r3, r3, #32
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d009      	beq.n	800dffa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dfe6:	4b07      	ldr	r3, [pc, #28]	; (800e004 <UART_SetConfig+0x69c>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	08db      	lsrs	r3, r3, #3
 800dfec:	f003 0303 	and.w	r3, r3, #3
 800dff0:	4a08      	ldr	r2, [pc, #32]	; (800e014 <UART_SetConfig+0x6ac>)
 800dff2:	fa22 f303 	lsr.w	r3, r2, r3
 800dff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dff8:	e01b      	b.n	800e032 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800dffa:	4b06      	ldr	r3, [pc, #24]	; (800e014 <UART_SetConfig+0x6ac>)
 800dffc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dffe:	e018      	b.n	800e032 <UART_SetConfig+0x6ca>
 800e000:	40011400 	.word	0x40011400
 800e004:	58024400 	.word	0x58024400
 800e008:	40007800 	.word	0x40007800
 800e00c:	40007c00 	.word	0x40007c00
 800e010:	58000c00 	.word	0x58000c00
 800e014:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e018:	4bc4      	ldr	r3, [pc, #784]	; (800e32c <UART_SetConfig+0x9c4>)
 800e01a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e01c:	e009      	b.n	800e032 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e01e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e022:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e024:	e005      	b.n	800e032 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800e026:	2300      	movs	r3, #0
 800e028:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e02a:	2301      	movs	r3, #1
 800e02c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e030:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e034:	2b00      	cmp	r3, #0
 800e036:	f000 81da 	beq.w	800e3ee <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03e:	4abc      	ldr	r2, [pc, #752]	; (800e330 <UART_SetConfig+0x9c8>)
 800e040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e044:	461a      	mov	r2, r3
 800e046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e048:	fbb3 f3f2 	udiv	r3, r3, r2
 800e04c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	685a      	ldr	r2, [r3, #4]
 800e052:	4613      	mov	r3, r2
 800e054:	005b      	lsls	r3, r3, #1
 800e056:	4413      	add	r3, r2
 800e058:	6a3a      	ldr	r2, [r7, #32]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d305      	bcc.n	800e06a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e064:	6a3a      	ldr	r2, [r7, #32]
 800e066:	429a      	cmp	r2, r3
 800e068:	d903      	bls.n	800e072 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e070:	e1bd      	b.n	800e3ee <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e074:	4618      	mov	r0, r3
 800e076:	f04f 0100 	mov.w	r1, #0
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07e:	4aac      	ldr	r2, [pc, #688]	; (800e330 <UART_SetConfig+0x9c8>)
 800e080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e084:	b29a      	uxth	r2, r3
 800e086:	f04f 0300 	mov.w	r3, #0
 800e08a:	f7f2 f925 	bl	80002d8 <__aeabi_uldivmod>
 800e08e:	4602      	mov	r2, r0
 800e090:	460b      	mov	r3, r1
 800e092:	4610      	mov	r0, r2
 800e094:	4619      	mov	r1, r3
 800e096:	f04f 0200 	mov.w	r2, #0
 800e09a:	f04f 0300 	mov.w	r3, #0
 800e09e:	020b      	lsls	r3, r1, #8
 800e0a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e0a4:	0202      	lsls	r2, r0, #8
 800e0a6:	6879      	ldr	r1, [r7, #4]
 800e0a8:	6849      	ldr	r1, [r1, #4]
 800e0aa:	0849      	lsrs	r1, r1, #1
 800e0ac:	4608      	mov	r0, r1
 800e0ae:	f04f 0100 	mov.w	r1, #0
 800e0b2:	1814      	adds	r4, r2, r0
 800e0b4:	eb43 0501 	adc.w	r5, r3, r1
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	461a      	mov	r2, r3
 800e0be:	f04f 0300 	mov.w	r3, #0
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	f7f2 f907 	bl	80002d8 <__aeabi_uldivmod>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e0d8:	d308      	bcc.n	800e0ec <UART_SetConfig+0x784>
 800e0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0e0:	d204      	bcs.n	800e0ec <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0e8:	60da      	str	r2, [r3, #12]
 800e0ea:	e180      	b.n	800e3ee <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e0f2:	e17c      	b.n	800e3ee <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	69db      	ldr	r3, [r3, #28]
 800e0f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0fc:	f040 80bf 	bne.w	800e27e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800e100:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e104:	2b20      	cmp	r3, #32
 800e106:	dc49      	bgt.n	800e19c <UART_SetConfig+0x834>
 800e108:	2b00      	cmp	r3, #0
 800e10a:	db7c      	blt.n	800e206 <UART_SetConfig+0x89e>
 800e10c:	2b20      	cmp	r3, #32
 800e10e:	d87a      	bhi.n	800e206 <UART_SetConfig+0x89e>
 800e110:	a201      	add	r2, pc, #4	; (adr r2, 800e118 <UART_SetConfig+0x7b0>)
 800e112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e116:	bf00      	nop
 800e118:	0800e1a3 	.word	0x0800e1a3
 800e11c:	0800e1ab 	.word	0x0800e1ab
 800e120:	0800e207 	.word	0x0800e207
 800e124:	0800e207 	.word	0x0800e207
 800e128:	0800e1b3 	.word	0x0800e1b3
 800e12c:	0800e207 	.word	0x0800e207
 800e130:	0800e207 	.word	0x0800e207
 800e134:	0800e207 	.word	0x0800e207
 800e138:	0800e1c3 	.word	0x0800e1c3
 800e13c:	0800e207 	.word	0x0800e207
 800e140:	0800e207 	.word	0x0800e207
 800e144:	0800e207 	.word	0x0800e207
 800e148:	0800e207 	.word	0x0800e207
 800e14c:	0800e207 	.word	0x0800e207
 800e150:	0800e207 	.word	0x0800e207
 800e154:	0800e207 	.word	0x0800e207
 800e158:	0800e1d3 	.word	0x0800e1d3
 800e15c:	0800e207 	.word	0x0800e207
 800e160:	0800e207 	.word	0x0800e207
 800e164:	0800e207 	.word	0x0800e207
 800e168:	0800e207 	.word	0x0800e207
 800e16c:	0800e207 	.word	0x0800e207
 800e170:	0800e207 	.word	0x0800e207
 800e174:	0800e207 	.word	0x0800e207
 800e178:	0800e207 	.word	0x0800e207
 800e17c:	0800e207 	.word	0x0800e207
 800e180:	0800e207 	.word	0x0800e207
 800e184:	0800e207 	.word	0x0800e207
 800e188:	0800e207 	.word	0x0800e207
 800e18c:	0800e207 	.word	0x0800e207
 800e190:	0800e207 	.word	0x0800e207
 800e194:	0800e207 	.word	0x0800e207
 800e198:	0800e1f9 	.word	0x0800e1f9
 800e19c:	2b40      	cmp	r3, #64	; 0x40
 800e19e:	d02e      	beq.n	800e1fe <UART_SetConfig+0x896>
 800e1a0:	e031      	b.n	800e206 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1a2:	f7fb f86b 	bl	800927c <HAL_RCC_GetPCLK1Freq>
 800e1a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e1a8:	e033      	b.n	800e212 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1aa:	f7fb f87d 	bl	80092a8 <HAL_RCC_GetPCLK2Freq>
 800e1ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e1b0:	e02f      	b.n	800e212 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1b2:	f107 0314 	add.w	r3, r7, #20
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fc fcb4 	bl	800ab24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e1c0:	e027      	b.n	800e212 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1c2:	f107 0308 	add.w	r3, r7, #8
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fc fe00 	bl	800adcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e1d0:	e01f      	b.n	800e212 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1d2:	4b58      	ldr	r3, [pc, #352]	; (800e334 <UART_SetConfig+0x9cc>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f003 0320 	and.w	r3, r3, #32
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d009      	beq.n	800e1f2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1de:	4b55      	ldr	r3, [pc, #340]	; (800e334 <UART_SetConfig+0x9cc>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	08db      	lsrs	r3, r3, #3
 800e1e4:	f003 0303 	and.w	r3, r3, #3
 800e1e8:	4a53      	ldr	r2, [pc, #332]	; (800e338 <UART_SetConfig+0x9d0>)
 800e1ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1f0:	e00f      	b.n	800e212 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800e1f2:	4b51      	ldr	r3, [pc, #324]	; (800e338 <UART_SetConfig+0x9d0>)
 800e1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e1f6:	e00c      	b.n	800e212 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1f8:	4b4c      	ldr	r3, [pc, #304]	; (800e32c <UART_SetConfig+0x9c4>)
 800e1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e1fc:	e009      	b.n	800e212 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e202:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e204:	e005      	b.n	800e212 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800e206:	2300      	movs	r3, #0
 800e208:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e210:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e214:	2b00      	cmp	r3, #0
 800e216:	f000 80ea 	beq.w	800e3ee <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e21e:	4a44      	ldr	r2, [pc, #272]	; (800e330 <UART_SetConfig+0x9c8>)
 800e220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e224:	461a      	mov	r2, r3
 800e226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e228:	fbb3 f3f2 	udiv	r3, r3, r2
 800e22c:	005a      	lsls	r2, r3, #1
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	085b      	lsrs	r3, r3, #1
 800e234:	441a      	add	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e23e:	b29b      	uxth	r3, r3
 800e240:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e244:	2b0f      	cmp	r3, #15
 800e246:	d916      	bls.n	800e276 <UART_SetConfig+0x90e>
 800e248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e24e:	d212      	bcs.n	800e276 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e252:	b29b      	uxth	r3, r3
 800e254:	f023 030f 	bic.w	r3, r3, #15
 800e258:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25c:	085b      	lsrs	r3, r3, #1
 800e25e:	b29b      	uxth	r3, r3
 800e260:	f003 0307 	and.w	r3, r3, #7
 800e264:	b29a      	uxth	r2, r3
 800e266:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e268:	4313      	orrs	r3, r2
 800e26a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e272:	60da      	str	r2, [r3, #12]
 800e274:	e0bb      	b.n	800e3ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e276:	2301      	movs	r3, #1
 800e278:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e27c:	e0b7      	b.n	800e3ee <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e27e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e282:	2b20      	cmp	r3, #32
 800e284:	dc4a      	bgt.n	800e31c <UART_SetConfig+0x9b4>
 800e286:	2b00      	cmp	r3, #0
 800e288:	f2c0 8086 	blt.w	800e398 <UART_SetConfig+0xa30>
 800e28c:	2b20      	cmp	r3, #32
 800e28e:	f200 8083 	bhi.w	800e398 <UART_SetConfig+0xa30>
 800e292:	a201      	add	r2, pc, #4	; (adr r2, 800e298 <UART_SetConfig+0x930>)
 800e294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e298:	0800e323 	.word	0x0800e323
 800e29c:	0800e33d 	.word	0x0800e33d
 800e2a0:	0800e399 	.word	0x0800e399
 800e2a4:	0800e399 	.word	0x0800e399
 800e2a8:	0800e345 	.word	0x0800e345
 800e2ac:	0800e399 	.word	0x0800e399
 800e2b0:	0800e399 	.word	0x0800e399
 800e2b4:	0800e399 	.word	0x0800e399
 800e2b8:	0800e355 	.word	0x0800e355
 800e2bc:	0800e399 	.word	0x0800e399
 800e2c0:	0800e399 	.word	0x0800e399
 800e2c4:	0800e399 	.word	0x0800e399
 800e2c8:	0800e399 	.word	0x0800e399
 800e2cc:	0800e399 	.word	0x0800e399
 800e2d0:	0800e399 	.word	0x0800e399
 800e2d4:	0800e399 	.word	0x0800e399
 800e2d8:	0800e365 	.word	0x0800e365
 800e2dc:	0800e399 	.word	0x0800e399
 800e2e0:	0800e399 	.word	0x0800e399
 800e2e4:	0800e399 	.word	0x0800e399
 800e2e8:	0800e399 	.word	0x0800e399
 800e2ec:	0800e399 	.word	0x0800e399
 800e2f0:	0800e399 	.word	0x0800e399
 800e2f4:	0800e399 	.word	0x0800e399
 800e2f8:	0800e399 	.word	0x0800e399
 800e2fc:	0800e399 	.word	0x0800e399
 800e300:	0800e399 	.word	0x0800e399
 800e304:	0800e399 	.word	0x0800e399
 800e308:	0800e399 	.word	0x0800e399
 800e30c:	0800e399 	.word	0x0800e399
 800e310:	0800e399 	.word	0x0800e399
 800e314:	0800e399 	.word	0x0800e399
 800e318:	0800e38b 	.word	0x0800e38b
 800e31c:	2b40      	cmp	r3, #64	; 0x40
 800e31e:	d037      	beq.n	800e390 <UART_SetConfig+0xa28>
 800e320:	e03a      	b.n	800e398 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e322:	f7fa ffab 	bl	800927c <HAL_RCC_GetPCLK1Freq>
 800e326:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e328:	e03c      	b.n	800e3a4 <UART_SetConfig+0xa3c>
 800e32a:	bf00      	nop
 800e32c:	003d0900 	.word	0x003d0900
 800e330:	0800f274 	.word	0x0800f274
 800e334:	58024400 	.word	0x58024400
 800e338:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e33c:	f7fa ffb4 	bl	80092a8 <HAL_RCC_GetPCLK2Freq>
 800e340:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e342:	e02f      	b.n	800e3a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e344:	f107 0314 	add.w	r3, r7, #20
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fc fbeb 	bl	800ab24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e352:	e027      	b.n	800e3a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e354:	f107 0308 	add.w	r3, r7, #8
 800e358:	4618      	mov	r0, r3
 800e35a:	f7fc fd37 	bl	800adcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e362:	e01f      	b.n	800e3a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e364:	4b2c      	ldr	r3, [pc, #176]	; (800e418 <UART_SetConfig+0xab0>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f003 0320 	and.w	r3, r3, #32
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d009      	beq.n	800e384 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e370:	4b29      	ldr	r3, [pc, #164]	; (800e418 <UART_SetConfig+0xab0>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	08db      	lsrs	r3, r3, #3
 800e376:	f003 0303 	and.w	r3, r3, #3
 800e37a:	4a28      	ldr	r2, [pc, #160]	; (800e41c <UART_SetConfig+0xab4>)
 800e37c:	fa22 f303 	lsr.w	r3, r2, r3
 800e380:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e382:	e00f      	b.n	800e3a4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800e384:	4b25      	ldr	r3, [pc, #148]	; (800e41c <UART_SetConfig+0xab4>)
 800e386:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e388:	e00c      	b.n	800e3a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e38a:	4b25      	ldr	r3, [pc, #148]	; (800e420 <UART_SetConfig+0xab8>)
 800e38c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e38e:	e009      	b.n	800e3a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e394:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e396:	e005      	b.n	800e3a4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800e398:	2300      	movs	r3, #0
 800e39a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e39c:	2301      	movs	r3, #1
 800e39e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e3a2:	bf00      	nop
    }

    if (pclk != 0U)
 800e3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d021      	beq.n	800e3ee <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ae:	4a1d      	ldr	r2, [pc, #116]	; (800e424 <UART_SetConfig+0xabc>)
 800e3b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	085b      	lsrs	r3, r3, #1
 800e3c2:	441a      	add	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d2:	2b0f      	cmp	r3, #15
 800e3d4:	d908      	bls.n	800e3e8 <UART_SetConfig+0xa80>
 800e3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3dc:	d204      	bcs.n	800e3e8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3e4:	60da      	str	r2, [r3, #12]
 800e3e6:	e002      	b.n	800e3ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e40a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3738      	adds	r7, #56	; 0x38
 800e412:	46bd      	mov	sp, r7
 800e414:	bdb0      	pop	{r4, r5, r7, pc}
 800e416:	bf00      	nop
 800e418:	58024400 	.word	0x58024400
 800e41c:	03d09000 	.word	0x03d09000
 800e420:	003d0900 	.word	0x003d0900
 800e424:	0800f274 	.word	0x0800f274

0800e428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e434:	f003 0301 	and.w	r3, r3, #1
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00a      	beq.n	800e452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	430a      	orrs	r2, r1
 800e450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e456:	f003 0302 	and.w	r3, r3, #2
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00a      	beq.n	800e474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	430a      	orrs	r2, r1
 800e472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e478:	f003 0304 	and.w	r3, r3, #4
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00a      	beq.n	800e496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	430a      	orrs	r2, r1
 800e494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e49a:	f003 0308 	and.w	r3, r3, #8
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00a      	beq.n	800e4b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	430a      	orrs	r2, r1
 800e4b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4bc:	f003 0310 	and.w	r3, r3, #16
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00a      	beq.n	800e4da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	430a      	orrs	r2, r1
 800e4d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4de:	f003 0320 	and.w	r3, r3, #32
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00a      	beq.n	800e4fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	430a      	orrs	r2, r1
 800e4fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e504:	2b00      	cmp	r3, #0
 800e506:	d01a      	beq.n	800e53e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	430a      	orrs	r2, r1
 800e51c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e526:	d10a      	bne.n	800e53e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	430a      	orrs	r2, r1
 800e53c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00a      	beq.n	800e560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	430a      	orrs	r2, r1
 800e55e:	605a      	str	r2, [r3, #4]
  }
}
 800e560:	bf00      	nop
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b086      	sub	sp, #24
 800e570:	af02      	add	r7, sp, #8
 800e572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e57c:	f7f5 f84c 	bl	8003618 <HAL_GetTick>
 800e580:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f003 0308 	and.w	r3, r3, #8
 800e58c:	2b08      	cmp	r3, #8
 800e58e:	d10e      	bne.n	800e5ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e594:	9300      	str	r3, [sp, #0]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2200      	movs	r2, #0
 800e59a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 f82f 	bl	800e602 <UART_WaitOnFlagUntilTimeout>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d001      	beq.n	800e5ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e5aa:	2303      	movs	r3, #3
 800e5ac:	e025      	b.n	800e5fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f003 0304 	and.w	r3, r3, #4
 800e5b8:	2b04      	cmp	r3, #4
 800e5ba:	d10e      	bne.n	800e5da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e5bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 f819 	bl	800e602 <UART_WaitOnFlagUntilTimeout>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e5d6:	2303      	movs	r3, #3
 800e5d8:	e00f      	b.n	800e5fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2220      	movs	r2, #32
 800e5de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2220      	movs	r2, #32
 800e5e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e5f8:	2300      	movs	r3, #0
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}

0800e602 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e602:	b580      	push	{r7, lr}
 800e604:	b084      	sub	sp, #16
 800e606:	af00      	add	r7, sp, #0
 800e608:	60f8      	str	r0, [r7, #12]
 800e60a:	60b9      	str	r1, [r7, #8]
 800e60c:	603b      	str	r3, [r7, #0]
 800e60e:	4613      	mov	r3, r2
 800e610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e612:	e062      	b.n	800e6da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e61a:	d05e      	beq.n	800e6da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e61c:	f7f4 fffc 	bl	8003618 <HAL_GetTick>
 800e620:	4602      	mov	r2, r0
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	1ad3      	subs	r3, r2, r3
 800e626:	69ba      	ldr	r2, [r7, #24]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d302      	bcc.n	800e632 <UART_WaitOnFlagUntilTimeout+0x30>
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d11d      	bne.n	800e66e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e640:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	689a      	ldr	r2, [r3, #8]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f022 0201 	bic.w	r2, r2, #1
 800e650:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2220      	movs	r2, #32
 800e656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2220      	movs	r2, #32
 800e65e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2200      	movs	r2, #0
 800e666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e66a:	2303      	movs	r3, #3
 800e66c:	e045      	b.n	800e6fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f003 0304 	and.w	r3, r3, #4
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d02e      	beq.n	800e6da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	69db      	ldr	r3, [r3, #28]
 800e682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e68a:	d126      	bne.n	800e6da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e694:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e6a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	689a      	ldr	r2, [r3, #8]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f022 0201 	bic.w	r2, r2, #1
 800e6b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2220      	movs	r2, #32
 800e6ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2220      	movs	r2, #32
 800e6c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2220      	movs	r2, #32
 800e6ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e6d6:	2303      	movs	r3, #3
 800e6d8:	e00f      	b.n	800e6fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	69da      	ldr	r2, [r3, #28]
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	4013      	ands	r3, r2
 800e6e4:	68ba      	ldr	r2, [r7, #8]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	bf0c      	ite	eq
 800e6ea:	2301      	moveq	r3, #1
 800e6ec:	2300      	movne	r3, #0
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	79fb      	ldrb	r3, [r7, #7]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d08d      	beq.n	800e614 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e6f8:	2300      	movs	r3, #0
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3710      	adds	r7, #16
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
	...

0800e704 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	4613      	mov	r3, r2
 800e710:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	68ba      	ldr	r2, [r7, #8]
 800e716:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	88fa      	ldrh	r2, [r7, #6]
 800e71c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2200      	movs	r2, #0
 800e724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2222      	movs	r2, #34	; 0x22
 800e72c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e734:	2b00      	cmp	r3, #0
 800e736:	d02c      	beq.n	800e792 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e73c:	4a25      	ldr	r2, [pc, #148]	; (800e7d4 <UART_Start_Receive_DMA+0xd0>)
 800e73e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e744:	4a24      	ldr	r2, [pc, #144]	; (800e7d8 <UART_Start_Receive_DMA+0xd4>)
 800e746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e74c:	4a23      	ldr	r2, [pc, #140]	; (800e7dc <UART_Start_Receive_DMA+0xd8>)
 800e74e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e754:	2200      	movs	r2, #0
 800e756:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	3324      	adds	r3, #36	; 0x24
 800e762:	4619      	mov	r1, r3
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e768:	461a      	mov	r2, r3
 800e76a:	88fb      	ldrh	r3, [r7, #6]
 800e76c:	f7f6 fbac 	bl	8004ec8 <HAL_DMA_Start_IT>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00d      	beq.n	800e792 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2210      	movs	r2, #16
 800e77a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2200      	movs	r2, #0
 800e782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2220      	movs	r2, #32
 800e78a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800e78e:	2301      	movs	r3, #1
 800e790:	e01c      	b.n	800e7cc <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2200      	movs	r2, #0
 800e796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e7a8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	689a      	ldr	r2, [r3, #8]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f042 0201 	orr.w	r2, r2, #1
 800e7b8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	689a      	ldr	r2, [r3, #8]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7c8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	0800e881 	.word	0x0800e881
 800e7d8:	0800e917 	.word	0x0800e917
 800e7dc:	0800e94f 	.word	0x0800e94f

0800e7e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e7f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	689a      	ldr	r2, [r3, #8]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e806:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2220      	movs	r2, #32
 800e80c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e832:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6899      	ldr	r1, [r3, #8]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	4b0f      	ldr	r3, [pc, #60]	; (800e87c <UART_EndRxTransfer+0x60>)
 800e840:	400b      	ands	r3, r1
 800e842:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d107      	bne.n	800e85c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f022 0210 	bic.w	r2, r2, #16
 800e85a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2220      	movs	r2, #32
 800e860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e870:	bf00      	nop
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr
 800e87c:	effffffe 	.word	0xeffffffe

0800e880 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b084      	sub	sp, #16
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e88c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	69db      	ldr	r3, [r3, #28]
 800e892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e896:	d02b      	beq.n	800e8f0 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2200      	movs	r2, #0
 800e89c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e8ae:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	689a      	ldr	r2, [r3, #8]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f022 0201 	bic.w	r2, r2, #1
 800e8be:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	689a      	ldr	r2, [r3, #8]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8ce:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2220      	movs	r2, #32
 800e8d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d107      	bne.n	800e8f0 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f022 0210 	bic.w	r2, r2, #16
 800e8ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d107      	bne.n	800e908 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e8fe:	4619      	mov	r1, r3
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f7ff f825 	bl	800d950 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e906:	e002      	b.n	800e90e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f7f3 fe15 	bl	8002538 <HAL_UART_RxCpltCallback>
}
 800e90e:	bf00      	nop
 800e910:	3710      	adds	r7, #16
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e916:	b580      	push	{r7, lr}
 800e918:	b084      	sub	sp, #16
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e922:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d109      	bne.n	800e940 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e932:	085b      	lsrs	r3, r3, #1
 800e934:	b29b      	uxth	r3, r3
 800e936:	4619      	mov	r1, r3
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f7ff f809 	bl	800d950 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e93e:	e002      	b.n	800e946 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e940:	68f8      	ldr	r0, [r7, #12]
 800e942:	f7fe fff1 	bl	800d928 <HAL_UART_RxHalfCpltCallback>
}
 800e946:	bf00      	nop
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b086      	sub	sp, #24
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e95a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e962:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e96a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	689b      	ldr	r3, [r3, #8]
 800e972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e976:	2b80      	cmp	r3, #128	; 0x80
 800e978:	d109      	bne.n	800e98e <UART_DMAError+0x40>
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	2b21      	cmp	r3, #33	; 0x21
 800e97e:	d106      	bne.n	800e98e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	2200      	movs	r2, #0
 800e984:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e988:	6978      	ldr	r0, [r7, #20]
 800e98a:	f7ff ff29 	bl	800e7e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e998:	2b40      	cmp	r3, #64	; 0x40
 800e99a:	d109      	bne.n	800e9b0 <UART_DMAError+0x62>
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2b22      	cmp	r3, #34	; 0x22
 800e9a0:	d106      	bne.n	800e9b0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e9aa:	6978      	ldr	r0, [r7, #20]
 800e9ac:	f7ff ff36 	bl	800e81c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9b6:	f043 0210 	orr.w	r2, r3, #16
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9c0:	6978      	ldr	r0, [r7, #20]
 800e9c2:	f7fe ffbb 	bl	800d93c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9c6:	bf00      	nop
 800e9c8:	3718      	adds	r7, #24
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b084      	sub	sp, #16
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f7fe ffa5 	bl	800d93c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9f2:	bf00      	nop
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b082      	sub	sp, #8
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea10:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2220      	movs	r2, #32
 800ea16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f7fe ff77 	bl	800d914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea26:	bf00      	nop
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ea2e:	b480      	push	{r7}
 800ea30:	b083      	sub	sp, #12
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ea36:	bf00      	nop
 800ea38:	370c      	adds	r7, #12
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ea42:	b480      	push	{r7}
 800ea44:	b083      	sub	sp, #12
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ea4a:	bf00      	nop
 800ea4c:	370c      	adds	r7, #12
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr

0800ea56 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ea56:	b480      	push	{r7}
 800ea58:	b083      	sub	sp, #12
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ea5e:	bf00      	nop
 800ea60:	370c      	adds	r7, #12
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ea6a:	b480      	push	{r7}
 800ea6c:	b085      	sub	sp, #20
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d101      	bne.n	800ea80 <HAL_UARTEx_DisableFifoMode+0x16>
 800ea7c:	2302      	movs	r3, #2
 800ea7e:	e027      	b.n	800ead0 <HAL_UARTEx_DisableFifoMode+0x66>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2201      	movs	r2, #1
 800ea84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2224      	movs	r2, #36	; 0x24
 800ea8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f022 0201 	bic.w	r2, r2, #1
 800eaa6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eaae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2200      	movs	r2, #0
 800eab4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	68fa      	ldr	r2, [r7, #12]
 800eabc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2220      	movs	r2, #32
 800eac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eace:	2300      	movs	r3, #0
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3714      	adds	r7, #20
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d101      	bne.n	800eaf4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eaf0:	2302      	movs	r3, #2
 800eaf2:	e02d      	b.n	800eb50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2224      	movs	r2, #36	; 0x24
 800eb00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f022 0201 	bic.w	r2, r2, #1
 800eb1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	683a      	ldr	r2, [r7, #0]
 800eb2c:	430a      	orrs	r2, r1
 800eb2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 f84f 	bl	800ebd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2220      	movs	r2, #32
 800eb42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d101      	bne.n	800eb70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eb6c:	2302      	movs	r3, #2
 800eb6e:	e02d      	b.n	800ebcc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2224      	movs	r2, #36	; 0x24
 800eb7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f022 0201 	bic.w	r2, r2, #1
 800eb96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	683a      	ldr	r2, [r7, #0]
 800eba8:	430a      	orrs	r2, r1
 800ebaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 f811 	bl	800ebd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	68fa      	ldr	r2, [r7, #12]
 800ebb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2220      	movs	r2, #32
 800ebbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ebca:	2300      	movs	r3, #0
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d108      	bne.n	800ebf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ebf4:	e031      	b.n	800ec5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ebf6:	2310      	movs	r3, #16
 800ebf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ebfa:	2310      	movs	r3, #16
 800ebfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	0e5b      	lsrs	r3, r3, #25
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	f003 0307 	and.w	r3, r3, #7
 800ec0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	0f5b      	lsrs	r3, r3, #29
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	f003 0307 	and.w	r3, r3, #7
 800ec1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec1e:	7bbb      	ldrb	r3, [r7, #14]
 800ec20:	7b3a      	ldrb	r2, [r7, #12]
 800ec22:	4911      	ldr	r1, [pc, #68]	; (800ec68 <UARTEx_SetNbDataToProcess+0x94>)
 800ec24:	5c8a      	ldrb	r2, [r1, r2]
 800ec26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ec2a:	7b3a      	ldrb	r2, [r7, #12]
 800ec2c:	490f      	ldr	r1, [pc, #60]	; (800ec6c <UARTEx_SetNbDataToProcess+0x98>)
 800ec2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec30:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec3c:	7bfb      	ldrb	r3, [r7, #15]
 800ec3e:	7b7a      	ldrb	r2, [r7, #13]
 800ec40:	4909      	ldr	r1, [pc, #36]	; (800ec68 <UARTEx_SetNbDataToProcess+0x94>)
 800ec42:	5c8a      	ldrb	r2, [r1, r2]
 800ec44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec48:	7b7a      	ldrb	r2, [r7, #13]
 800ec4a:	4908      	ldr	r1, [pc, #32]	; (800ec6c <UARTEx_SetNbDataToProcess+0x98>)
 800ec4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec52:	b29a      	uxth	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ec5a:	bf00      	nop
 800ec5c:	3714      	adds	r7, #20
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop
 800ec68:	0800f28c 	.word	0x0800f28c
 800ec6c:	0800f294 	.word	0x0800f294

0800ec70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ec70:	b084      	sub	sp, #16
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b084      	sub	sp, #16
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	f107 001c 	add.w	r0, r7, #28
 800ec7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ec82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d120      	bne.n	800ecca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	68da      	ldr	r2, [r3, #12]
 800ec98:	4b2a      	ldr	r3, [pc, #168]	; (800ed44 <USB_CoreInit+0xd4>)
 800ec9a:	4013      	ands	r3, r2
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ecac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d105      	bne.n	800ecbe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f000 fa60 	bl	800f184 <USB_CoreReset>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	73fb      	strb	r3, [r7, #15]
 800ecc8:	e01a      	b.n	800ed00 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	68db      	ldr	r3, [r3, #12]
 800ecce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 fa54 	bl	800f184 <USB_CoreReset>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ece0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d106      	bne.n	800ecf4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	639a      	str	r2, [r3, #56]	; 0x38
 800ecf2:	e005      	b.n	800ed00 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ed00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d116      	bne.n	800ed34 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed14:	4b0c      	ldr	r3, [pc, #48]	; (800ed48 <USB_CoreInit+0xd8>)
 800ed16:	4313      	orrs	r3, r2
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	689b      	ldr	r3, [r3, #8]
 800ed20:	f043 0206 	orr.w	r2, r3, #6
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	f043 0220 	orr.w	r2, r3, #32
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ed34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3710      	adds	r7, #16
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ed40:	b004      	add	sp, #16
 800ed42:	4770      	bx	lr
 800ed44:	ffbdffbf 	.word	0xffbdffbf
 800ed48:	03ee0000 	.word	0x03ee0000

0800ed4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	689b      	ldr	r3, [r3, #8]
 800ed58:	f023 0201 	bic.w	r2, r3, #1
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	370c      	adds	r7, #12
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr

0800ed6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b082      	sub	sp, #8
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
 800ed76:	460b      	mov	r3, r1
 800ed78:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ed86:	78fb      	ldrb	r3, [r7, #3]
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d106      	bne.n	800ed9a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	60da      	str	r2, [r3, #12]
 800ed98:	e00b      	b.n	800edb2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ed9a:	78fb      	ldrb	r3, [r7, #3]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d106      	bne.n	800edae <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	60da      	str	r2, [r3, #12]
 800edac:	e001      	b.n	800edb2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800edae:	2301      	movs	r3, #1
 800edb0:	e003      	b.n	800edba <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800edb2:	2032      	movs	r0, #50	; 0x32
 800edb4:	f7f4 fc3c 	bl	8003630 <HAL_Delay>

  return HAL_OK;
 800edb8:	2300      	movs	r3, #0
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3708      	adds	r7, #8
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
	...

0800edc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800edc4:	b084      	sub	sp, #16
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b086      	sub	sp, #24
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800edd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800edd6:	2300      	movs	r3, #0
 800edd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800edde:	2300      	movs	r3, #0
 800ede0:	613b      	str	r3, [r7, #16]
 800ede2:	e009      	b.n	800edf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	3340      	adds	r3, #64	; 0x40
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	4413      	add	r3, r2
 800edee:	2200      	movs	r2, #0
 800edf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	3301      	adds	r3, #1
 800edf6:	613b      	str	r3, [r7, #16]
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	2b0e      	cmp	r3, #14
 800edfc:	d9f2      	bls.n	800ede4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800edfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d11c      	bne.n	800ee3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee0a:	685b      	ldr	r3, [r3, #4]
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee12:	f043 0302 	orr.w	r3, r3, #2
 800ee16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	601a      	str	r2, [r3, #0]
 800ee3c:	e005      	b.n	800ee4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee50:	461a      	mov	r2, r3
 800ee52:	2300      	movs	r3, #0
 800ee54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee64:	461a      	mov	r2, r3
 800ee66:	680b      	ldr	r3, [r1, #0]
 800ee68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ee6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d10c      	bne.n	800ee8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ee70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d104      	bne.n	800ee80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ee76:	2100      	movs	r1, #0
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f000 f949 	bl	800f110 <USB_SetDevSpeed>
 800ee7e:	e008      	b.n	800ee92 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ee80:	2101      	movs	r1, #1
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 f944 	bl	800f110 <USB_SetDevSpeed>
 800ee88:	e003      	b.n	800ee92 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ee8a:	2103      	movs	r1, #3
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 f93f 	bl	800f110 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ee92:	2110      	movs	r1, #16
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 f8f3 	bl	800f080 <USB_FlushTxFifo>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d001      	beq.n	800eea4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800eea0:	2301      	movs	r3, #1
 800eea2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f000 f911 	bl	800f0cc <USB_FlushRxFifo>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d001      	beq.n	800eeb4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeba:	461a      	mov	r2, r3
 800eebc:	2300      	movs	r3, #0
 800eebe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eec6:	461a      	mov	r2, r3
 800eec8:	2300      	movs	r3, #0
 800eeca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eed2:	461a      	mov	r2, r3
 800eed4:	2300      	movs	r3, #0
 800eed6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eed8:	2300      	movs	r3, #0
 800eeda:	613b      	str	r3, [r7, #16]
 800eedc:	e043      	b.n	800ef66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	015a      	lsls	r2, r3, #5
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	4413      	add	r3, r2
 800eee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eef4:	d118      	bne.n	800ef28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d10a      	bne.n	800ef12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	015a      	lsls	r2, r3, #5
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	4413      	add	r3, r2
 800ef04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef08:	461a      	mov	r2, r3
 800ef0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef0e:	6013      	str	r3, [r2, #0]
 800ef10:	e013      	b.n	800ef3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	015a      	lsls	r2, r3, #5
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	4413      	add	r3, r2
 800ef1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef1e:	461a      	mov	r2, r3
 800ef20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ef24:	6013      	str	r3, [r2, #0]
 800ef26:	e008      	b.n	800ef3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	015a      	lsls	r2, r3, #5
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	4413      	add	r3, r2
 800ef30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef34:	461a      	mov	r2, r3
 800ef36:	2300      	movs	r3, #0
 800ef38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	015a      	lsls	r2, r3, #5
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	4413      	add	r3, r2
 800ef42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef46:	461a      	mov	r2, r3
 800ef48:	2300      	movs	r3, #0
 800ef4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	015a      	lsls	r2, r3, #5
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	4413      	add	r3, r2
 800ef54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef58:	461a      	mov	r2, r3
 800ef5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ef5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	3301      	adds	r3, #1
 800ef64:	613b      	str	r3, [r7, #16]
 800ef66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef68:	693a      	ldr	r2, [r7, #16]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d3b7      	bcc.n	800eede <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef6e:	2300      	movs	r3, #0
 800ef70:	613b      	str	r3, [r7, #16]
 800ef72:	e043      	b.n	800effc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	015a      	lsls	r2, r3, #5
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef8a:	d118      	bne.n	800efbe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d10a      	bne.n	800efa8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	015a      	lsls	r2, r3, #5
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	4413      	add	r3, r2
 800ef9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef9e:	461a      	mov	r2, r3
 800efa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800efa4:	6013      	str	r3, [r2, #0]
 800efa6:	e013      	b.n	800efd0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	015a      	lsls	r2, r3, #5
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	4413      	add	r3, r2
 800efb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efb4:	461a      	mov	r2, r3
 800efb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800efba:	6013      	str	r3, [r2, #0]
 800efbc:	e008      	b.n	800efd0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	015a      	lsls	r2, r3, #5
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	4413      	add	r3, r2
 800efc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efca:	461a      	mov	r2, r3
 800efcc:	2300      	movs	r3, #0
 800efce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	015a      	lsls	r2, r3, #5
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	4413      	add	r3, r2
 800efd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efdc:	461a      	mov	r2, r3
 800efde:	2300      	movs	r3, #0
 800efe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	015a      	lsls	r2, r3, #5
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	4413      	add	r3, r2
 800efea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efee:	461a      	mov	r2, r3
 800eff0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eff4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	3301      	adds	r3, #1
 800effa:	613b      	str	r3, [r7, #16]
 800effc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effe:	693a      	ldr	r2, [r7, #16]
 800f000:	429a      	cmp	r2, r3
 800f002:	d3b7      	bcc.n	800ef74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f00a:	691b      	ldr	r3, [r3, #16]
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f016:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2200      	movs	r2, #0
 800f01c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f024:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d105      	bne.n	800f038 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	699b      	ldr	r3, [r3, #24]
 800f030:	f043 0210 	orr.w	r2, r3, #16
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	699a      	ldr	r2, [r3, #24]
 800f03c:	4b0e      	ldr	r3, [pc, #56]	; (800f078 <USB_DevInit+0x2b4>)
 800f03e:	4313      	orrs	r3, r2
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f046:	2b00      	cmp	r3, #0
 800f048:	d005      	beq.n	800f056 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	699b      	ldr	r3, [r3, #24]
 800f04e:	f043 0208 	orr.w	r2, r3, #8
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f058:	2b01      	cmp	r3, #1
 800f05a:	d105      	bne.n	800f068 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	699a      	ldr	r2, [r3, #24]
 800f060:	4b06      	ldr	r3, [pc, #24]	; (800f07c <USB_DevInit+0x2b8>)
 800f062:	4313      	orrs	r3, r2
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f068:	7dfb      	ldrb	r3, [r7, #23]
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3718      	adds	r7, #24
 800f06e:	46bd      	mov	sp, r7
 800f070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f074:	b004      	add	sp, #16
 800f076:	4770      	bx	lr
 800f078:	803c3800 	.word	0x803c3800
 800f07c:	40000004 	.word	0x40000004

0800f080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f080:	b480      	push	{r7}
 800f082:	b085      	sub	sp, #20
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f08a:	2300      	movs	r3, #0
 800f08c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	019b      	lsls	r3, r3, #6
 800f092:	f043 0220 	orr.w	r2, r3, #32
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	3301      	adds	r3, #1
 800f09e:	60fb      	str	r3, [r7, #12]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	4a09      	ldr	r2, [pc, #36]	; (800f0c8 <USB_FlushTxFifo+0x48>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d901      	bls.n	800f0ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f0a8:	2303      	movs	r3, #3
 800f0aa:	e006      	b.n	800f0ba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	691b      	ldr	r3, [r3, #16]
 800f0b0:	f003 0320 	and.w	r3, r3, #32
 800f0b4:	2b20      	cmp	r3, #32
 800f0b6:	d0f0      	beq.n	800f09a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f0b8:	2300      	movs	r3, #0
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3714      	adds	r7, #20
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	00030d40 	.word	0x00030d40

0800f0cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b085      	sub	sp, #20
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2210      	movs	r2, #16
 800f0dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	60fb      	str	r3, [r7, #12]
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	4a09      	ldr	r2, [pc, #36]	; (800f10c <USB_FlushRxFifo+0x40>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d901      	bls.n	800f0f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f0ec:	2303      	movs	r3, #3
 800f0ee:	e006      	b.n	800f0fe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	691b      	ldr	r3, [r3, #16]
 800f0f4:	f003 0310 	and.w	r3, r3, #16
 800f0f8:	2b10      	cmp	r3, #16
 800f0fa:	d0f0      	beq.n	800f0de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f0fc:	2300      	movs	r3, #0
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3714      	adds	r7, #20
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr
 800f10a:	bf00      	nop
 800f10c:	00030d40 	.word	0x00030d40

0800f110 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	460b      	mov	r3, r1
 800f11a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	78fb      	ldrb	r3, [r7, #3]
 800f12a:	68f9      	ldr	r1, [r7, #12]
 800f12c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f130:	4313      	orrs	r3, r2
 800f132:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f134:	2300      	movs	r3, #0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3714      	adds	r7, #20
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr

0800f142 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f142:	b480      	push	{r7}
 800f144:	b085      	sub	sp, #20
 800f146:	af00      	add	r7, sp, #0
 800f148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	68fa      	ldr	r2, [r7, #12]
 800f158:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f15c:	f023 0303 	bic.w	r3, r3, #3
 800f160:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f170:	f043 0302 	orr.w	r3, r3, #2
 800f174:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f176:	2300      	movs	r3, #0
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3714      	adds	r7, #20
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f184:	b480      	push	{r7}
 800f186:	b085      	sub	sp, #20
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f18c:	2300      	movs	r3, #0
 800f18e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	3301      	adds	r3, #1
 800f194:	60fb      	str	r3, [r7, #12]
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	4a13      	ldr	r2, [pc, #76]	; (800f1e8 <USB_CoreReset+0x64>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d901      	bls.n	800f1a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f19e:	2303      	movs	r3, #3
 800f1a0:	e01b      	b.n	800f1da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	691b      	ldr	r3, [r3, #16]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	daf2      	bge.n	800f190 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	f043 0201 	orr.w	r2, r3, #1
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	3301      	adds	r3, #1
 800f1be:	60fb      	str	r3, [r7, #12]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	4a09      	ldr	r2, [pc, #36]	; (800f1e8 <USB_CoreReset+0x64>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d901      	bls.n	800f1cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f1c8:	2303      	movs	r3, #3
 800f1ca:	e006      	b.n	800f1da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	f003 0301 	and.w	r3, r3, #1
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d0f0      	beq.n	800f1ba <USB_CoreReset+0x36>

  return HAL_OK;
 800f1d8:	2300      	movs	r3, #0
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3714      	adds	r7, #20
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e4:	4770      	bx	lr
 800f1e6:	bf00      	nop
 800f1e8:	00030d40 	.word	0x00030d40

0800f1ec <__libc_init_array>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	4d0d      	ldr	r5, [pc, #52]	; (800f224 <__libc_init_array+0x38>)
 800f1f0:	4c0d      	ldr	r4, [pc, #52]	; (800f228 <__libc_init_array+0x3c>)
 800f1f2:	1b64      	subs	r4, r4, r5
 800f1f4:	10a4      	asrs	r4, r4, #2
 800f1f6:	2600      	movs	r6, #0
 800f1f8:	42a6      	cmp	r6, r4
 800f1fa:	d109      	bne.n	800f210 <__libc_init_array+0x24>
 800f1fc:	4d0b      	ldr	r5, [pc, #44]	; (800f22c <__libc_init_array+0x40>)
 800f1fe:	4c0c      	ldr	r4, [pc, #48]	; (800f230 <__libc_init_array+0x44>)
 800f200:	f000 f820 	bl	800f244 <_init>
 800f204:	1b64      	subs	r4, r4, r5
 800f206:	10a4      	asrs	r4, r4, #2
 800f208:	2600      	movs	r6, #0
 800f20a:	42a6      	cmp	r6, r4
 800f20c:	d105      	bne.n	800f21a <__libc_init_array+0x2e>
 800f20e:	bd70      	pop	{r4, r5, r6, pc}
 800f210:	f855 3b04 	ldr.w	r3, [r5], #4
 800f214:	4798      	blx	r3
 800f216:	3601      	adds	r6, #1
 800f218:	e7ee      	b.n	800f1f8 <__libc_init_array+0xc>
 800f21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f21e:	4798      	blx	r3
 800f220:	3601      	adds	r6, #1
 800f222:	e7f2      	b.n	800f20a <__libc_init_array+0x1e>
 800f224:	0800f2a4 	.word	0x0800f2a4
 800f228:	0800f2a4 	.word	0x0800f2a4
 800f22c:	0800f2a4 	.word	0x0800f2a4
 800f230:	0800f2a8 	.word	0x0800f2a8

0800f234 <memset>:
 800f234:	4402      	add	r2, r0
 800f236:	4603      	mov	r3, r0
 800f238:	4293      	cmp	r3, r2
 800f23a:	d100      	bne.n	800f23e <memset+0xa>
 800f23c:	4770      	bx	lr
 800f23e:	f803 1b01 	strb.w	r1, [r3], #1
 800f242:	e7f9      	b.n	800f238 <memset+0x4>

0800f244 <_init>:
 800f244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f246:	bf00      	nop
 800f248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f24a:	bc08      	pop	{r3}
 800f24c:	469e      	mov	lr, r3
 800f24e:	4770      	bx	lr

0800f250 <_fini>:
 800f250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f252:	bf00      	nop
 800f254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f256:	bc08      	pop	{r3}
 800f258:	469e      	mov	lr, r3
 800f25a:	4770      	bx	lr
